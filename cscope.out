cscope 15 $HOME/procps               0001093658
	@config.h

11 
	#BUILD_WITH_WHINE
 1

	)

18 
	#ENABLE_NLS
 1

	)

21 
	#HAVE_ALARM
 1

	)

24 
	#HAVE_ARPA_INET_H
 1

	)

27 
	#HAVE_ATEXIT
 1

	)

34 
	#HAVE_DCGETTEXT
 1

	)

37 
	#HAVE_DLFCN_H
 1

	)

40 
	#HAVE_DUP2
 1

	)

43 
	#HAVE_ERROR_H
 1

	)

46 
	#HAVE_FCNTL_H
 1

	)

49 
	#HAVE_FLOAT_H
 1

	)

52 
	#HAVE_FORK
 1

	)

55 
	#HAVE_GETHOSTNAME
 1

	)

58 
	#HAVE_GETPAGESIZE
 1

	)

61 
	#HAVE_GETTEXT
 1

	)

64 
	#HAVE_GETTIMEOFDAY
 1

	)

70 
	#HAVE_INTTYPES_H
 1

	)

73 
	#HAVE_ISWPRINT
 1

	)

76 
	#HAVE_LANGINFO_H
 1

	)

79 
	#HAVE_LIBINTL_H
 1

	)

82 
	#HAVE_LIMITS_H
 1

	)

85 
	#HAVE_LOCALE_H
 1

	)

89 
	#HAVE_MALLOC
 1

	)

92 
	#HAVE_MBRTOWC
 1

	)

95 
	#HAVE_MEMCHR
 1

	)

98 
	#HAVE_MEMMOVE
 1

	)

101 
	#HAVE_MEMORY_H
 1

	)

104 
	#HAVE_MEMSET
 1

	)

107 
	#HAVE_MMAP
 1

	)

113 
	#HAVE_NETINET_IN_H
 1

	)

116 
	#HAVE_NL_LANGINFO
 1

	)

119 
	#HAVE_PROGRAM_INVOCATION_NAME
 1

	)

122 
	#HAVE_PROGRAM_INVOCATION_SHORT_NAME
 1

	)

125 
	#HAVE_PUTENV
 1

	)

129 
	#HAVE_REALLOC
 1

	)

132 
	#HAVE_REGCOMP
 1

	)

135 
	#HAVE_RPMATCH
 1

	)

138 
	#HAVE_SELECT
 1

	)

141 
	#HAVE_SETLOCALE
 1

	)

144 
	#HAVE_STDINT_H
 1

	)

147 
	#HAVE_STDIO_EXT_H
 1

	)

150 
	#HAVE_STDLIB_H
 1

	)

153 
	#HAVE_STRCASECMP
 1

	)

156 
	#HAVE_STRCHR
 1

	)

159 
	#HAVE_STRCSPN
 1

	)

162 
	#HAVE_STRDUP
 1

	)

165 
	#HAVE_STRERROR
 1

	)

168 
	#HAVE_STRINGS_H
 1

	)

171 
	#HAVE_STRING_H
 1

	)

174 
	#HAVE_STRNCASECMP
 1

	)

177 
	#HAVE_STRNDUP
 1

	)

180 
	#HAVE_STRPBRK
 1

	)

183 
	#HAVE_STRRCHR
 1

	)

186 
	#HAVE_STRSPN
 1

	)

189 
	#HAVE_STRSTR
 1

	)

192 
	#HAVE_STRTOL
 1

	)

195 
	#HAVE_STRTOUL
 1

	)

198 
	#HAVE_STRTOULL
 1

	)

201 
	#HAVE_STRUCT_STAT_ST_RDEV
 1

	)

204 
	#HAVE_STRVERSCMP
 1

	)

207 
	#HAVE_SYS_FILE_H
 1

	)

210 
	#HAVE_SYS_IOCTL_H
 1

	)

213 
	#HAVE_SYS_PARAM_H
 1

	)

216 
	#HAVE_SYS_STAT_H
 1

	)

219 
	#HAVE_SYS_TIME_H
 1

	)

222 
	#HAVE_SYS_TYPES_H
 1

	)

225 
	#HAVE_TERMIOS_H
 1

	)

231 
	#HAVE_UNISTD_H
 1

	)

234 
	#HAVE_UTMPNAME
 1

	)

237 
	#HAVE_UTMP_H
 1

	)

240 
	#HAVE_VALUES_H
 1

	)

243 
	#HAVE_VFORK
 1

	)

249 
	#HAVE_WCHAR_H
 1

	)

252 
	#HAVE_WCTYPE_H
 1

	)

255 
	#HAVE_WCWIDTH
 1

	)

258 
	#HAVE_WORKING_FORK
 1

	)

261 
	#HAVE_WORKING_VFORK
 1

	)

264 
	#HAVE__BOOL
 1

	)

267 
	#HAVE___FPENDING
 1

	)

270 
	#LT_OBJDIR
 ".libs/"

	)

287 
	#PACKAGE
 "¥o˝s-ng"

	)

290 
	#PACKAGE_BUGREPORT
 "¥o˝s@‰ìli°s.‹g"

	)

293 
	#PACKAGE_NAME
 "¥o˝s-ng"

	)

296 
	#PACKAGE_STRING
 "¥o˝s-ng 3.3.12.84-53e1"

	)

299 
	#PACKAGE_TARNAME
 "¥o˝s-ng"

	)

302 
	#PACKAGE_URL
 "hâps://gôœb.com/¥o˝s-ng/¥o˝s"

	)

305 
	#PACKAGE_VERSION
 "3.3.12.84-53e1"

	)

311 
	#STDC_HEADERS
 1

	)

314 #i‚de‡
_ALL_SOURCE


315 
	#_ALL_SOURCE
 1

	)

318 #i‚de‡
_GNU_SOURCE


319 
	#_GNU_SOURCE
 1

	)

322 #i‚de‡
_POSIX_PTHREAD_SEMANTICS


323 
	#_POSIX_PTHREAD_SEMANTICS
 1

	)

326 #i‚de‡
_TANDEM_SOURCE


327 
	#_TANDEM_SOURCE
 1

	)

330 #i‚de‡
__EXTENSIONS__


331 
	#__EXTENSIONS__
 1

	)

336 
	#VERSION
 "3.3.12.84-53e1"

	)

348 #i‚de‡
_DARWIN_USE_64_BIT_INODE


349 
	#_DARWIN_USE_64_BIT_INODE
 1

	)

373 #i‚de‡
__˝lu•lus


393 
	#ª°ri˘
 
__ª°ri˘


	)

399 #i‡
deföed
 
__SUNPRO_CC
 && !deföed 
__RESTRICT


400 
	#_Re°ri˘


	)

401 
	#__ª°ri˘__


	)

	@contrib/dummy.c

20 
	~<sys/io˘l.h
>

21 
	~<sys/ªsour˚.h
>

22 
	~<sys/time.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<sys/°©.h
>

25 
	~<˘y≥.h
>

26 
	~<cur£s.h
>

27 
	~<î∫o.h
>

28 
	~<f˙é.h
>

29 
	~<sig«l.h
>

30 
	~<°d¨g.h
>

31 
	~<°dio.h
>

32 
	~<°dlib.h
>

33 
	~<°rög.h
>

36 
	~<ãrm.h
>

37 #unde‡
èb


39 
	~<ãrmios.h
>

40 
	~<time.h
>

41 
	~<uni°d.h
>

42 
	~<vÆues.h
>

44 
	$maö
(
¨gc
, *
¨gv
[]){

45 ()
¨gc
;

46 ()
¨gv
;

48 
	}
}

	@contrib/minimal.c

28 
	~<pwd.h
>

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~<sys/io˘l.h
>

33 
	~<sys/ty≥s.h
>

34 
	~<uni°d.h
>

35 
	~<sys/°©.h
>

36 
	~<f˙é.h
>

37 
	~<dúít.h
>

40 
	#DEV_ENCODE
(
M
,
m
) ( \

41 –(
M
&0xfffË<< 8Ë| ( (
m
&0xfff00) << 12) | (m&0xff) \

42 )

	)

45 #ifde‡
__sun__


46 
	~<sys/mkdev.h
>

47 
	#_STRUCTURED_PROC
 1

	)

48 
	~<sys/¥ocfs.h
>

49 
	#NO_TTY_VALUE
 
	`DEV_ENCODE
(-1,-1)

	)

50 
	#HZ
 1

52 

	)

54 #ifde‡
__FªeBSD__


55 
	~<sys/∑øm.h
>

56 
	~<sys/sys˘l.h
>

57 
	~<sys/°©.h
>

58 
	~<sys/¥oc.h
>

59 
	~<sys/u£r.h
>

60 
	#NO_TTY_VALUE
 
	`DEV_ENCODE
(-1,-1)

	)

61 
	#HZ
 1

63 

	)

65 #ifde‡
__löux__


66 
	~<asm/∑øm.h
>

67 
	~<asm/∑ge.h
>

68 
	#NO_TTY_VALUE
 
	`DEV_ENCODE
(0,0)

	)

69 #i‚de‡
HZ


70 #w¨nög 
HZ
 
nŸ
 
deföed
, 
assumög
 
ô
 
is
 100

71 
	#HZ
 100

	)

77 #i‚de‡
PAGE_SIZE


78 #w¨nög 
PAGE_SIZE
 
nŸ
 
deföed
, 
usög
 
sysc⁄f
(Ë
to
 
dëîmöe
 
c‹ª˘
 
vÆue


79 
	#PAGE_SIZE
 (
	`sysc⁄f
(
_SC_PAGESIZE
))

	)

84 
	gP_ây_ãxt
[16];

85 
	gP_cmd
[16];

86 
	gP_°©e
;

87 
	gP_euid
;

88 
	gP_pid
;

89 
	gP_µid
, 
	gP_pgΩ
, 
	gP_£ssi⁄
, 
	gP_ây_num
, 
	gP_çgid
;

90 
	gP_Êags
, 
	gP_mö_Êt
, 
	gP_cmö_Êt
, 
	gP_maj_Êt
, 
	gP_cmaj_Êt
, 
	gP_utime
, 
	gP_°ime
;

91 
	gP_cutime
, 
	gP_c°ime
, 
	gP_¥i‹ôy
, 
	gP_ni˚
, 
	gP_timeout
, 
	gP_Æ¨m
;

92 
	gP_°¨t_time
, 
	gP_vsize
;

93 
	gP_rss
;

94 
	gP_rss_æim
, 
	gP_°¨t_code
, 
	gP_íd_code
, 
	gP_°¨t_°ack
, 
	gP_k°k_e•
, 
	gP_k°k_eù
;

95 
	gP_sig«l
, 
	gP_blocked
, 
	gP_sigign‹e
, 
	gP_sigˇtch
;

96 
	gP_wch™
, 
	gP_nsw≠
, 
	gP_˙sw≠
;

101 
	gs¸ìn_cﬁs
 = 80;

102 
	gw_cou¡
;

105 
	gw™t_⁄e_pid
;

106 c⁄° *
	gw™t_⁄e_comm™d
;

107 
	g£À˘_nŸty
;

108 
	g£À˘_Æl
;

110 
	gps_f‹m©
;

111 
	gﬁd_h_›ti⁄
;

114 
	gshow_¨gs
;

115 
	gbsd_c_›ti⁄
;

117 
	gps_¨gc
;

118 **
	gps_¨gv
;

119 
	gthißrg
;

120 *
	gÊag±r
;

125 
	$ußge
(){

126 
	`Ârötf
(
°dîr
,

145 
	`exô
(1);

146 
	}
}

152 c⁄° *
	$gë_›t_¨g
(){

153 c⁄° *
ªt
;

154 
ªt
 = 
Êag±r
+1;

155 if(*
ªt
) Ñet;

156 if(++
thißrg
 >
ps_¨gc
Ë
	`ußge
();

158 
ªt
 = 
ps_¨gv
[
thißrg
];

159 if(!
ªt
 || !*ªtË
	`ußge
();

160  
ªt
;

161 
	}
}

165 
	$∑r£_pid
(c⁄° *
°r
){

166 *
ídp
;

167 
num
;

168 if(!
°r
Ë
bad
;

169 
num
 = 
	`°πﬁ
(
°r
, &
ídp
, 0);

170 if(*
ídp
 !'\0'Ë
bad
;

171 if(
num
<1Ë
bad
;

172 if(
w™t_⁄e_pid
Ë
bad
;

173 
w™t_⁄e_pid
 = 
num
;

175 
bad
:

176 
	`ußge
();

177 
	}
}

180 
	$∑r£_sysv_›ti⁄
(){

182 *
Êag±r
){

185 if(
w™t_⁄e_comm™d
Ë
	`ußge
();

186 
w™t_⁄e_comm™d
 = 
	`gë_›t_¨g
();

189 
	`∑r£_pid
(
	`gë_›t_¨g
());

193 
£À˘_Æl
++;

194 
£À˘_nŸty
++;

199 
show_¨gs
 = 1;

203 if(
ps_f‹m©
Ë
	`ußge
();

204 
ps_f‹m©
 = *
Êag±r
;

208 if(
	`°rcmp
(
	`gë_›t_¨g
(),"pid=")Ë
	`ußge
();

209 if(
ps_f‹m©
Ë
	`ußge
();

210 
ps_f‹m©
 = 'o';

211 
ﬁd_h_›ti⁄
++;

216 
w_cou¡
++;

220 
	`ußge
();

222 }*++
Êag±r
);

223 
	}
}

226 
	$∑r£_bsd_›ti⁄
(){

228 *
Êag±r
){

231 
£À˘_Æl
++;

234 
£À˘_nŸty
++;

237 
	`∑r£_pid
(
	`gë_›t_¨g
());

244 if(
ps_f‹m©
Ë
	`ußge
();

245 
ps_f‹m©
 = 0x80 | *
Êag±r
;

249 
bsd_c_›ti⁄
++;

255 
w_cou¡
++;

259 
ﬁd_h_›ti⁄
++;

262 
	`ußge
();

264 }*++
Êag±r
);

265 
	}
}

268 
	~<ãrmios.h
>

270 
	$choo£_dimísi⁄s
(){

271 
wösize
 
ws
;

272 *
cﬁumns
;

274 if(
	`io˘l
(1, 
TIOCGWINSZ
, &
ws
Ë!-1 && ws.
ws_cﬁ
>30Ë
s¸ìn_cﬁs
 = ws.ws_col;

275 
cﬁumns
 = 
	`gëív
("COLUMNS");

276 if(
cﬁumns
 && *columns){

277 
t
;

278 *
íd±r
;

279 
t
 = 
	`°πﬁ
(
cﬁumns
, &
íd±r
, 0);

280 if(!*
íd±r
 && (
t
>30Ë&& (t<()999999999)Ë
s¸ìn_cﬁs
 = ()t;

282 if(
w_cou¡
 && (
s¸ìn_cﬁs
<132)) screen_cols=132;

283 if(
w_cou¡
>1Ë
s¸ìn_cﬁs
=999999999;

284 
	}
}

287 
	$¨g_∑r£
(
¨gc
, *
¨gv
[]){

288 
£l
 = 0;

289 
ps_¨gc
 = 
¨gc
;

290 
ps_¨gv
 = 
¨gv
;

291 
thißrg
 = 0;

293 ++
thißrg
 < 
ps_¨gc
){

294 
Êag±r
 = 
ps_¨gv
[
thißrg
];

295 *
Êag±r
){

297 
show_¨gs
 = 1;

298 
	`∑r£_pid
(
Êag±r
);

301 
Êag±r
++;

302 
	`∑r£_sysv_›ti⁄
();

305 
show_¨gs
 = 1;

306 
	`∑r£_bsd_›ti⁄
();

311 if(
w™t_⁄e_pid
Ë
£l
++;

312 if(
w™t_⁄e_comm™d
Ë
£l
++;

313 if(
£À˘_nŸty
 || 
£À˘_Æl
Ë
£l
++;

314 if(
£l
>1 || 
£À˘_nŸty
>1 || 
£À˘_Æl
>1 || 
bsd_c_›ti⁄
>1 || 
ﬁd_h_›ti⁄
>1Ë
	`ußge
();

315 if(
bsd_c_›ti⁄
Ë
show_¨gs
 = 0;

316 
	}
}

318 #ifde‡
__sun__


320 
	$°©2¥oc
(
pid
) {

321 
psöfo
 
p
;

322 
buf
[32];

323 
num
;

324 
fd
;

325 
ây_maj
, 
ây_mö
;

326 
	`¢¥ötf
(
buf
,  buf, "/¥oc/%d/psöfo", 
pid
);

327 i‡–(
fd
 = 
	`›í
(
buf
, 
O_RDONLY
, 0) ) == -1 )  0;

328 
num
 = 
	`ªad
(
fd
, &
p
, Ö);

329 
	`˛o£
(
fd
);

330 if(
num
 ! 
p
)  0;

332 
num
 = 
PRFNSZ
;

333 i‡(
num
 > 
P_cmd
)Çum =  P_cmd - 1;

334 
	`mem˝y
(
P_cmd
, 
p
.
¥_‚ame
, 
num
);

335 
P_cmd
[
num
] = '\0';

337 
P_pid
 = 
p
.
¥_pid
;

338 
P_µid
 = 
p
.
¥_µid
;

339 
P_pgΩ
 = 
p
.
¥_pgid
;

340 
P_£ssi⁄
 = 
p
.
¥_sid
;

341 
P_euid
 = 
p
.
¥_euid
;

342 
P_rss
 = 
p
.
¥_rssize
;

343 
P_vsize
 = 
p
.
¥_size
;

344 
P_°¨t_time
 = 
p
.
¥_°¨t
.
tv_£c
;

345 
P_wch™
 = 
p
.
¥_lwp
.
¥_wch™
;

346 
P_°©e
 = 
p
.
¥_lwp
.
¥_¢ame
;

347 
P_ni˚
 = 
p
.
¥_lwp
.
¥_ni˚
;

348 
P_¥i‹ôy
 = 
p
.
¥_lwp
.
¥_¥i
;

355 
P_çgid
; 
P_Êags
,

356 
P_mö_Êt
, 
P_cmö_Êt
, 
P_maj_Êt
, 
P_cmaj_Êt
, 
P_utime
, 
P_°ime
;

357 
P_cutime
, 
P_c°ime
, 
P_timeout
, 
P_Æ¨m
;

358 
P_rss_æim
, 
P_°¨t_code
, 
P_íd_code
, 
P_°¨t_°ack
, 
P_k°k_e•
, 
P_k°k_eù
;

359 
P_sig«l
, 
P_blocked
, 
P_sigign‹e
, 
P_sigˇtch
;

360 
P_nsw≠
, 
P_˙sw≠
;

364 
ây_maj
 = 
	`maj‹
(
p
.
¥_âydev
);

365 
ây_mö
 = 
	`mö‹
(
p
.
¥_âydev
);

366 
P_ây_num
 = 
	`DEV_ENCODE
(
ây_maj
,
ây_mö
);

368 
	`¢¥ötf
(
P_ây_ãxt
,  P_ây_ãxt, "%3d,%-3d", 
ây_maj
, 
ây_mö
);

370 i‡(
ây_maj
 =24Ë
	`¢¥ötf
(
P_ây_ãxt
,  P_ây_ãxt, "±s/%-3u", 
ây_mö
);

371 i‡(
P_ây_num
 =
NO_TTY_VALUE
Ë
	`mem˝y
(
P_ây_ãxt
, " ? ", 8);

372 i‡(
P_ây_num
 =
	`DEV_ENCODE
(0,0)Ë
	`mem˝y
(
P_ây_ãxt
, "console", 8);

375 if(
P_pid
 !
pid
)  0;

377 
	}
}

380 #ifde‡
__FªeBSD__


382 
	$°©2¥oc
(
pid
) {

383 
buf
[400];

384 
num
;

385 
fd
;

386 * 
tmp
;

387 
ây_maj
, 
ây_mö
;

388 
	`¢¥ötf
(
buf
, 32, "/¥oc/%d/°©us", 
pid
);

389 i‡–(
fd
 = 
	`›í
(
buf
, 
O_RDONLY
, 0) ) == -1 )  0;

390 
num
 = 
	`ªad
(
fd
, 
buf
,  buf - 1);

391 
	`˛o£
(
fd
);

392 if(
num
<43)  0;

393 
buf
[
num
] = '\0';

395 
P_°©e
 = '-';

406 
tmp
 = 
	`°rchr
(
buf
,' ');

407 
num
 = 
tmp
 - 
buf
;

408 i‡(
num
 > 
P_cmd
)Çum =  P_cmd - 1;

409 
	`mem˝y
(
P_cmd
,
buf
,
num
);

410 
P_cmd
[
num
] = '\0';

412 
num
 = 
	`ssˇnf
(
tmp
+1,

421 &
P_pid
, &
P_µid
, &
P_pgΩ
, &
P_£ssi⁄
,

422 &
ây_maj
, &
ây_mö
,

424 &
P_°¨t_time
,

425 &
P_utime
,

426 &
P_°ime
,

428 &
P_euid
, &P_euid

432 
	`¢¥ötf
(
P_ây_ãxt
,  P_ây_ãxt, "%3d,%-3d", 
ây_maj
, 
ây_mö
);

433 
P_ây_num
 = 
	`DEV_ENCODE
(
ây_maj
,
ây_mö
);

436 
tmp
 = 
NULL
;

437 i‡(
ây_maj
 =5Ë
tmp
 = "Åtyp%c ";

438 i‡(
ây_maj
 =12Ë
tmp
 = "Åtyv%c ";

439 i‡(
ây_maj
 =28Ë
tmp
 = "Åtyd%c ";

440 i‡(
P_ây_num
 =
NO_TTY_VALUE
Ë
tmp
 = " ? ";

441 i‡(
P_ây_num
 =
	`DEV_ENCODE
(0,0)Ë
tmp
 = "console";

442 i‡(
P_ây_num
 =
	`DEV_ENCODE
(12,255)Ë
tmp
 = "consolectl";

443 i‡(
tmp
) {

444 
	`¢¥ötf
(

445 
P_ây_ãxt
,

446  
P_ây_ãxt
,

447 
tmp
,

448 "0123456789abcdefghijklmn›qr°uvwxyz"[
ây_mö
&31]

453 if(
num
 < 9)  0;

454 if(
P_pid
 !
pid
)  0;

456 
	}
}

459 #ifde‡
__löux__


461 
	$°©2¥oc
(
pid
) {

462 
buf
[800];

463 
num
;

464 
fd
;

465 * 
tmp
;

466 
°©
 
sb
;

467 
	`¢¥ötf
(
buf
, 32, "/¥oc/%d/°©", 
pid
);

468 i‡–(
fd
 = 
	`›í
(
buf
, 
O_RDONLY
, 0) ) == -1 )  0;

469 
num
 = 
	`ªad
(
fd
, 
buf
,  buf - 1);

470 
	`f°©
(
fd
, &
sb
);

471 
P_euid
 = 
sb
.
°_uid
;

472 
	`˛o£
(
fd
);

473 if(
num
<80)  0;

474 
buf
[
num
] = '\0';

475 
tmp
 = 
	`°ºchr
(
buf
, ')');

476 *
tmp
 = '\0';

478 
	`mem£t
(
P_cmd
, 0,  P_cmd);

479 
	`ssˇnf
(
buf
, "%d (%15c", &
P_pid
, 
P_cmd
);

480 
num
 = 
	`ssˇnf
(
tmp
 + 2,

490 &
P_°©e
,

491 &
P_µid
, &
P_pgΩ
, &
P_£ssi⁄
, &
P_ây_num
, &
P_çgid
,

492 &
P_Êags
, &
P_mö_Êt
, &
P_cmö_Êt
, &
P_maj_Êt
, &
P_cmaj_Êt
, &
P_utime
, &
P_°ime
,

493 &
P_cutime
, &
P_c°ime
, &
P_¥i‹ôy
, &
P_ni˚
, &
P_timeout
, &
P_Æ¨m
,

494 &
P_°¨t_time
, &
P_vsize
,

495 &
P_rss
,

496 &
P_rss_æim
, &
P_°¨t_code
, &
P_íd_code
, &
P_°¨t_°ack
, &
P_k°k_e•
, &
P_k°k_eù
,

497 &
P_sig«l
, &
P_blocked
, &
P_sigign‹e
, &
P_sigˇtch
,

498 &
P_wch™
, &
P_nsw≠
, &
P_˙sw≠


501 
P_vsize
 /= 1024;

502 
P_rss
 *(
PAGE_SIZE
/1024);

504 
	`mem˝y
(
P_ây_ãxt
, " ? ", 8);

505 i‡(
P_ây_num
 !
NO_TTY_VALUE
) {

506 
ây_maj
 = (
P_ây_num
>>8)&0xfff;

507 
ây_mö
 = (
P_ây_num
&0xff) | ((P_tty_num>>12)&0xfff00);

508 
	`¢¥ötf
(
P_ây_ãxt
,  P_ây_ãxt, "%3d,%-3d", 
ây_maj
, 
ây_mö
);

511 if(
num
 < 30)  0;

512 if(
P_pid
 !
pid
)  0;

514 
	}
}

517 c⁄° *
	$do_time
(
t
){

518 
hh
,
mm
,
ss
;

519 
buf
[32];

520 
˙t
 = 0;

521 
t
 /
HZ
;

522 
ss
 = 
t
%60;

523 
t
 /= 60;

524 
mm
 = 
t
%60;

525 
t
 /= 60;

526 
hh
 = 
t
%24;

527 
t
 /= 24;

528 if(
t
Ë
˙t
 = 
	`¢¥ötf
(
buf
,  buf, "%d-", ()t);

529 
	`¢¥ötf
(
˙t
 + 
buf
, (buf)-˙t, "%02d:%02d:%02d", 
hh
, 
mm
, 
ss
);

530  
buf
;

531 
	}
}

533 c⁄° *
	$do_u£r
(){

534 
buf
[32];

535 
∑sswd
 *
p
;

536 
œ°uid
 = -1;

537 if(
P_euid
 !
œ°uid
){

538 
p
 = 
	`gëpwuid
(
P_euid
);

539 if(
p
Ë
	`¢¥ötf
(
buf
,  buf, "%-8.8s",Ö->
pw_«me
);

540 
	`¢¥ötf
(
buf
,  buf, "%5d ", 
P_euid
);

542  
buf
;

543 
	}
}

545 c⁄° *
	$do_˝u
(
l⁄gf‹m
){

546 
buf
[8];

547 
	`°r˝y
(
buf
," - ");

548 if(!
l⁄gf‹m
Ë
buf
[2] = '\0';

549  
buf
;

550 
	}
}

552 c⁄° *
	$do_mem
(
l⁄gf‹m
){

553 
buf
[8];

554 
	`°r˝y
(
buf
," - ");

555 if(!
l⁄gf‹m
Ë
buf
[2] = '\0';

556  
buf
;

557 
	}
}

559 c⁄° *
	$do_°ime
(){

560 
buf
[32];

561 
	`°r˝y
(
buf
," - ");

562  
buf
;

563 
	}
}

565 
	$¥öt_¥oc
(){

566 
ps_f‹m©
){

568 
	`¥ötf
("%5d %†%s", 
P_pid
, 
P_ây_ãxt
, 
	`do_time
(
P_utime
+
P_°ime
));

571 
	`¥ötf
("%d\n", 
P_pid
);

574 
	`¥ötf
(

577 
P_°©e
, 
P_euid
, 
P_pid
, 
P_µid
, 
	`do_˝u
(0),

578 ()
P_¥i‹ôy
, ()
P_ni˚
, 
P_vsize
/(
PAGE_SIZE
/1024),

579 ()(
P_wch™
&0xffffff), 
P_ây_ãxt
, 
	`do_time
(
P_utime
+
P_°ime
)

583 
	`¥ötf
(

585 
	`do_u£r
(), 
P_pid
, 
P_µid
, 
	`do_˝u
(0), 
	`do_°ime
(), 
P_ây_ãxt
, 
	`do_time
(
P_utime
+
P_°ime
)

589 
	`¥ötf
(

591 
P_pid
, 
P_pgΩ
, 
P_£ssi⁄
, 
P_ây_ãxt
, 
	`do_time
(
P_utime
+
P_°ime
)

595 
	`¥ötf
(

597 
	`do_u£r
(), 
P_pid
, 
	`do_˝u
(1), 
	`do_mem
(1), 
P_vsize
, 
P_rss
, 
P_ây_ãxt
, 
P_°©e
,

598 
	`do_°ime
(), 
	`do_time
(
P_utime
+
P_°ime
)

602 
	`¥ötf
(

604 
P_pid
, 
P_ây_ãxt
, 
P_°©e
, 
	`do_time
(
P_utime
+
P_°ime
), ()
P_maj_Êt
,

605 ()
P_rss
, 
	`do_mem
(1)

609 
	`¥ötf
(

611 
P_µid
, 
P_pid
, 
P_pgΩ
, 
P_£ssi⁄
, 
P_ây_ãxt
, 
P_çgid
, 
P_°©e
, 
P_euid
, 
	`do_time
(
P_utime
+
P_°ime
)

615 
	`¥ötf
(

618 
P_euid
, 
P_pid
, 
P_µid
, ()
P_¥i‹ôy
, ()
P_ni˚
,

619 
P_vsize
, 
P_rss
, ()(
P_wch™
&0xffffff), 
P_°©e
, 
P_ây_ãxt
, 
	`do_time
(
P_utime
+
P_°ime
)

625 if(
show_¨gs
Ë
	`¥ötf
(" [%s]\n", 
P_cmd
);

626 
	`¥ötf
(" %s\n", 
P_cmd
);

627 
	}
}

630 
	$maö
(
¨gc
, *
¨gv
[]){

631 
	`¨g_∑r£
(
¨gc
, 
¨gv
);

633 
	`choo£_dimísi⁄s
();

635 if(!
ﬁd_h_›ti⁄
){

636 c⁄° *
hód
;

637 
ps_f‹m©
){

639 0: 
hód
 = " PID TTY TIME CMD"; ;

640 'l': 
hód
 = "F S UID PID PPID C PRI NI ADDR SZ WCHAN TTY TIME CMD"; ;

641 'f': 
hód
 = "USER PID PPID C STIME TTY TIME CMD"; ;

642 'j': 
hód
 = " PID PGID SID TTY TIME CMD"; ;

643 'u'|0x80: 
hód
 = "USER PID %CPU %MEM VSZ RSS TTY S START TIME COMMAND"; ;

644 'v'|0x80: 
hód
 = " PID TTY S TIME MAJFL TRS DRS RSS %MEM COMMAND"; ;

645 'j'|0x80: 
hód
 = " PPID PID PGID SID TTY TPGID S UID TIME COMMAND"; ;

646 'l'|0x80: 
hód
 = "F UID PID PPID PRI NI VSZ RSS WCHAN S TTY TIME COMMAND"; ;

648 
	`¥ötf
("%s\n",
hód
);

650 if(
w™t_⁄e_pid
){

651 if(
	`°©2¥oc
(
w™t_⁄e_pid
)Ë
	`¥öt_¥oc
();

652 
	`exô
(1);

654 
dúít
 *
ít
;

655 
DIR
 *
dú
;

656 
ouruid
;

657 
found_a_¥oc
;

658 
found_a_¥oc
 = 0;

659 
ouruid
 = 
	`gëuid
();

660 
dú
 = 
	`›ídú
("/proc");

661 –
ít
 = 
	`ªaddú
(
dú
) )){

662 if(*
ít
->
d_«me
<'0' || *ent->d_name>'9') ;

663 if(!
	`°©2¥oc
(
	`©oi
(
ít
->
d_«me
))) ;

664 if(
w™t_⁄e_comm™d
){

665 if(
	`°rcmp
(
w™t_⁄e_comm™d
,
P_cmd
)) ;

667 if(!
£À˘_nŸty
 && 
P_ây_num
==
NO_TTY_VALUE
) ;

668 if(!
£À˘_Æl
 && 
P_euid
!=
ouruid
) ;

670 
found_a_¥oc
++;

671 
	`¥öt_¥oc
();

673 
	`˛o£dú
(
dú
);

674 
	`exô
(!
found_a_¥oc
);

677 
	}
}

	@contrib/tmp-junk.c

77 
	~<°dio.h
>

78 
	~<°rög.h
>

79 
	~<°dlib.h
>

80 
	~<sys/ty≥s.h
>

81 
	~<sys/°©.h
>

82 
	~<sys/io˘l.h
>

83 
	~<time.h
>

84 
	~<utmp.h
>

85 
	~<uni°d.h
>

86 
	~<î∫o.h
>

87 
	~<pwd.h
>

88 
	~"¥oc/wh©time.h
"

91 
	#TRUE
 1

	)

92 
	#FALSE
 0

	)

100 
	#DEFAULT_FROM
 
TRUE


	)

101 
	#ZOMBIE
 "<zombõ>"

	)

104 
put_sy¡ax
();

105 *
idÀtime
();

106 *
logötime
();

108 
	grcsid
[]="$Id:Åmp-junk.c,v 1.1 2002/02/01 22:46:37 csmall Exp $";

111 
	$maö
 (
¨gc
, 
¨gv
)

113 
¨gc
;

114 *
¨gv
[];

117 
hódî
=
TRUE
, 
l⁄g_f‹m©
=TRUE, 
ign‹e_u£r
=TRUE,

118 
‰om_swôch
=
DEFAULT_FROM
, 
show_pid
=
FALSE
, 
löe_Àngth
;

119 
i
, 
j
;

120 
utmp
 *
utmp_ªc
;

121 
°©
 
°©_ªc
;

122 
∑sswd
 *
∑sswd_íåy
;

123 
uid_t
 
uid
;

124 
u£∫ame
[9], 
ây
[13], 
rho°
[17], 
logö_time
[27];

125 
idÀ_time
[7], 
wh©
[1024], 
pid
[10];

126 
out_löe
[1024], 
fûe_«me
[256];

127 
£¨ch_«me
[9];

128 
j˝u
, 
p˝u
, 
çgid
, 
cuº_pid
, 
utime
, 
°ime
, 
cutime
, 
c°ime
;

129 
°©e
, 
comm
[1024], *
cﬁumns_±r
;

130 
FILE
 *
Â
;

133 
£¨ch_«me
[0] = '\0';

139 i‡(
¨gc
 > 1)

144 
i
 = 1; ((ò< 
¨gc
Ë&& (
¨gv
[i][0] == '-')); i ++)

146 
j
 = 1; 
¨gv
[
i
][j] != '\0'; j++)

148 
¨gv
[
i
][
j
])

151 
hódî
 = 
FALSE
;

154 
l⁄g_f‹m©
 = 
FALSE
;

157 
ign‹e_u£r
 = 
FALSE
;

160 
show_pid
 = 
TRUE
;

163 i‡(
DEFAULT_FROM
 =
TRUE
)

164 
‰om_swôch
 = 
FALSE
;

166 
‰om_swôch
 = 
TRUE
;

169 
	`Ârötf
 (
°dîr
, "w: unknown option: '%c'\n",

170 
¨gv
[
i
][
j
]);

171 
	`put_sy¡ax
 ();

181 i‡(
¨gc
 > 
i
)

183 
	`°∫˝y
 (
£¨ch_«me
, 
¨gv
[
i
], 8);

184 
£¨ch_«me
[8] = '\0';

185 
i
 ++;

187 i‡(
¨gc
 > 
i
)

189 
	`Ârötf
 (
°dîr
, "w: syntaxÉrror\n");

190 
	`put_sy¡ax
 ();

201 i‡(
	`chdú
 ("/proc"))

203 
	`Ârötf
 (
°dîr
, "w: fatalÉrror: cannotáccess /proc\n");

204 
	`≥º‹
 (
	`°ªº‹
(
î∫o
));

205 
	`exô
 (-1);

213 
cﬁumns_±r
 = 
	`gëív
 ("COLUMNS");

214 i‡(
cﬁumns_±r
 =
NULL
)

216 
wösize
 
wödow
;

221 i‡((
	`io˘l
 (1, 
TIOCGWINSZ
, &
wödow
Ë!1Ë&& (wödow.
ws_cﬁ
 > 0))

222 
löe_Àngth
 = 
wödow
.
ws_cﬁ
;

224 
löe_Àngth
 = 80;

227 
löe_Àngth
 = 
	`©oi
 (
cﬁumns_±r
);

233 i‡(
löe_Àngth
 < 60)

234 
l⁄g_f‹m©
 = 
FALSE
;

236 
löe_Àngth
 --;

242 i‡(
hódî
 =
TRUE
)

248 
	`¥öt_u±ime
();

254 
	`¥ötf
 ("UserÅty ");

256 i‡(
l⁄g_f‹m©
 =
TRUE
)

258 i‡(
‰om_swôch
 =
TRUE
)

259 
	`¥ötf
 ("From ");

261 
	`¥ötf
 ("Üogin@ idle JCPU PCPU ");

263 i‡(
show_pid
 =
TRUE
)

264 
	`¥ötf
 (" PID ");

266 
	`¥ötf
 ("what\n");

270 
	`¥ötf
 (" idle ");

272 i‡(
show_pid
 =
TRUE
)

273 
	`¥ötf
 (" PID ");

275 
	`¥ötf
 ("what\n");

285 (
utmp_ªc
 = 
	`gëuã¡
()))

292 i‡–(
utmp_ªc
->
ut_ty≥
 =
USER_PROCESS
)

293 && (
	`°rcmp
(
utmp_ªc
->
ut_u£r
, ""))

294 && ( (
£¨ch_«me
[0] == '\0')

295 || ( (
£¨ch_«me
[0] != '\0')

296 && !
	`°∫cmp
(
£¨ch_«me
, 
utmp_ªc
->
ut_u£r
, 8) ) ) )

301 
	`°∫˝y
 (
u£∫ame
, 
utmp_ªc
->
ut_u£r
, 8);

302 
u£∫ame
[8] = '\0';

309 
uid
 = -1;

310 i‡((
∑sswd_íåy
 = 
	`gëpw«m
 (
u£∫ame
)Ë!
NULL
)

312 
uid
 = 
∑sswd_íåy
->
pw_uid
;

318 
i
 = 0; (
utmp_ªc
->
ut_löe
[i] > 32) && (i < 6); i ++)

319 
ây
[
i
] = 
utmp_ªc
->
ut_löe
[i];

321 
utmp_ªc
->
ut_löe
[
i
] = '\0';

322 
ây
[
i
] = '\0';

328 i‡(
l⁄g_f‹m©
 =
TRUE
)

336 i‡(
‰om_swôch
 =
TRUE
)

338 
	`°∫˝y
 (
rho°
, 
utmp_ªc
->
ut_ho°
, 16);

339 
rho°
[16] = '\0';

348 
	`°r˝y
 (
logö_time
, 
	`logötime
(
utmp_ªc
->
ut_time
));

357 
	`°r˝y
 (
idÀ_time
, 
	`idÀtime
 (
ây
));

370 
	`•rötf
 (
pid
, "%d", 
utmp_ªc
->
ut_pid
);

372 
wh©
[0] = '\0';

373 
	`°r˝y
 (
fûe_«me
, 
pid
);

374 
	`°rˇt
 (
fûe_«me
, "/stat");

375 
j˝u
 = 0;

376 
p˝u
 = 0;

378 i‡((
Â
 = 
	`f›í
(
fûe_«me
, "r")))

380 
wh©
[0] == '\0')

386 
	`fsˇnf
 (
Â
, "%d %s %c %*d %*d %*d %*d %d "

388 &
cuº_pid
, 
comm
, &
°©e
, &
çgid
,

389 &
utime
, &
°ime
, &
cutime
, &
c°ime
);

391 
	`f˛o£
 (
Â
);

393 i‡(
comm
[0] == '\0')

394 
	`°r˝y
 (
comm
, "-");

404 i‡(!
j˝u
)

405 
j˝u
 = 
cutime
 + 
c°ime
;

410 i‡(
°©e
 == 'Z')

411 
	`°r˝y
 (
wh©
, 
ZOMBIE
);

412 i‡(
cuº_pid
 =
çgid
)

420 
	`°r˝y
 (
fûe_«me
, 
pid
);

421 
	`°rˇt
 (
fûe_«me
, "/cmdline");

422 i‡((
Â
 = 
	`f›í
(
fûe_«me
, "r")))

424 
i
 = 0;

425 
j
 = 
	`fgëc
 (
Â
);

426 (
j
 !
EOF
Ë&& (
i
 < 256))

428 i‡(
j
 == '\0')

429 
j
 = ' ';

431 
wh©
[
i
] = 
j
;

432 
i
++;

433 
j
 = 
	`fgëc
 (
Â
);

435 
wh©
[
i
] = '\0';

436 
	`f˛o£
 (
Â
);

439 i‡(
wh©
[0] == '\0')

440 
	`°r˝y
 (
wh©
, 
comm
);

454 
	`°r˝y
 (
fûe_«me
, 
pid
);

455 
	`°rˇt
 (
fûe_«me
, "/cmdline");

457 i‡((
Â
 = 
	`f›í
 (
fûe_«me
, "r")))

459 
i
 = 0;

460 
j
 = 
	`fgëc
 (
Â
);

461 (
j
 !
EOF
Ë&& (
i
 < 256))

463 i‡(
j
 == '\0')

464 
j
 = ' ';

466 
wh©
[
i
] = 
j
;

467 
i
++;

468 
j
 = 
	`fgëc
 (
Â
);

470 
wh©
[
i
] = '\0';

471 
	`f˛o£
 (
Â
);

474 i‡(
wh©
[0] == '\0')

475 
	`°r˝y
 (
wh©
, 
comm
);

481 
	`•rötf
 (
pid
, "%d", 
çgid
);

482 
	`°r˝y
 (
fûe_«me
, 
pid
);

483 
	`°rˇt
 (
fûe_«me
, "/stat");

485 
Â
 = 
	`f›í
 (
fûe_«me
, "r");

487 i‡(
Â
 && (
ign‹e_u£r
 =
FALSE
))

494 
	`°©
 (
fûe_«me
, &
°©_ªc
);

500 i‡(
°©_ªc
.
°_uid
 !
uid
)

502 
	`f˛o£
 (
Â
);

504 
	`°r˝y
 (
wh©
, "-su");

514 
wh©
[0] = '\0';

516 i‡(
Â
)

517 
wh©
[0] = '\0';

522 
	`°r˝y
 (
wh©
, "?");

539 i‡(
wh©
[0] != '?')

546 i‡(!
	`°∫cmp
 (
ây
, "tty", 3))

548 
i
 = 3; 
ây
[i - 1] != '\0'; i ++)

549 
ây
[
i
 - 3] =Åty[i];

556 
	`•rötf
 (
out_löe
, "%-9.8s%-6.7†", 
u£∫ame
, 
ây
);

562 i‡(
l⁄g_f‹m©
 =
TRUE
)

567 
p˝u
 = 
utime
 + 
°ime
;

568 
j˝u
 /= 100;

569 
p˝u
 /= 100;

571 i‡(
‰om_swôch
 =
TRUE
)

572 
	`•rötf
 (
out_löe
, "%†%-16.15s", out_löe, 
rho°
);

574 
	`•rötf
 (
out_löe
, "%s%8.8†", out_löe, 
logö_time
);

578 
	`•rötf
 (
out_löe
, "%s%6s", out_löe, 
idÀ_time
);

581 i‡(
l⁄g_f‹m©
 =
TRUE
)

583 i‡(!
j˝u
)

584 
	`°rˇt
 (
out_löe
, " ");

585 i‡(
j˝u
/60)

586 
	`•rötf
 (
out_löe
, "%s%3d:%02d", out_line,

587 
j˝u
/60, jcpu%60);

589 
	`•rötf
 (
out_löe
, "%† %2d", out_löe, 
j˝u
);

591 i‡(!
p˝u
)

592 
	`°rˇt
 (
out_löe
, " ");

593 i‡(
p˝u
/60)

594 
	`•rötf
 (
out_löe
, "%s%3d:%02d", out_line,

595 
p˝u
/60,Öcpu%60);

597 
	`•rötf
 (
out_löe
, "%† %2d", out_löe, 
p˝u
);

600 i‡(
show_pid
 =
TRUE
)

601 
	`•rötf
 (
out_löe
, "%†%5.5s", out_löe, 
pid
);

604 
	`°rˇt
 (
out_löe
, " ");

605 
	`°rˇt
 (
out_löe
, 
wh©
);

611 
out_löe
[
löe_Àngth
] = '\0';

613 
	`¥ötf
 ("%s\n", 
out_löe
);

617 
	}
}

627 
	$put_sy¡ax
 ()

629 
	`Ârötf
 (
°dîr
, "usage: w [-hfsud] [user]\n");

630 
	`exô
 (-1);

631 
	}
}

646 *
	$idÀtime
 (
ây
)

648 *
ây
;

651 
°©
 
ãrmöfo
;

652 
idÀ
;

653 
âytmp
[40];

654 
give
[20];

655 
time_t
 
cuπime
;

657 
cuπime
 = 
	`time
 (
NULL
);

659 
	`•rötf
 (
âytmp
, "/dev/%s", 
ây
);

660 
	`°©
 (
âytmp
, &
ãrmöfo
);

661 
idÀ
 = (Ë
cuπime
 - (Ë
ãrmöfo
.
°_©ime
;

663 i‡(
idÀ
 >= (60 * 60))

665 i‡(
idÀ
 >= (60 * 60 * 48))

666 
	`•rötf
 (
give
, "%2ludays", 
idÀ
 / (60 * 60 * 24));

668 
	`•rötf
 (
give
, " %2lu:%02u", 
idÀ
 / (60 * 60),

669 (Ë((
idÀ
 / 60) % 60));

673 i‡(
idÀ
 / 60)

674 
	`•rötf
 (
give
, "%6lu", 
idÀ
 / 60);

676 
give
[0]=0;

679  
give
;

680 
	}
}

695 #unde‡
ut_time


697 *
	$logötime
(
ut_time
)

699 
time_t
 
ut_time
;

702 
time_t
 
cuπime
;

703 
tm
 *
logötime
, *
cuπm
;

704 
hour
, 
am
, 
curday
, 
logday
;

705 
give
[20];

706 *
wìkday
[] = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri",

708 *
m⁄th
[] = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul",

711 
cuπime
 = 
	`time
(
NULL
);

712 
cuπm
 = 
	`loˇ…ime
(&
cuπime
);

713 
curday
 = 
cuπm
->
tm_yday
;

714 
logötime
 = 
	`loˇ…ime
(&
ut_time
);

715 
hour
 = 
logötime
->
tm_hour
;

716 
logday
 = 
logötime
->
tm_yday
;

717 
am
 = (
hour
 < 12);

719 i‡(!
am
)

720 
hour
 -= 12;

722 i‡(
hour
 == 0)

723 
hour
 = 12;

731 i‡((
cuπime
 > (
ut_time
 + (60 * 60 * 12))Ë&& (
logday
 !
curday
))

733 i‡(
cuπime
 > (
ut_time
 + (60 * 60 * 24 * 6)))

734 
	`•rötf
(
give
, "%2d%3s%2d", 
logötime
->
tm_mday
,

735 
m⁄th
[
logötime
->
tm_m⁄
], (logötime->
tm_yór
 % 100));

737 
	`•rötf
(
give
, "%*s%2d%s", 3, 
wìkday
[
logötime
->
tm_wday
],

738 
hour
, 
am
 ? "am" : "pm");

741 
	`•rötf
(
give
, "%2d:%02d%s", 
hour
, 
logötime
->
tm_mö
, 
am
 ? "am" : "pm");

743  
give
;

744 
	}
}

	@contrib/utmp.c

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/io˘l.h
>

24 
	~<time.h
>

25 
	~<utmp.h
>

26 
	~<f˙é.h
>

27 
	~<uni°d.h
>

28 
	~<sys/°©.h
>

38 
	$maö
 (
¨gc
, **
¨gv
) {

40 
FILE
 *
ut
;

41 
utmp
 
uts
;

42 
u£r
[
UT_NAMESIZE
 + 1];

43 
ho°
[17];

44 
ch
;

45 
¥öt_Æl
 = 0, 
li°
 = 0, 
fix
 = 0;

48 (
ch
 = 
	`gë›t
(
¨gc
, 
¨gv
, "œf")Ë!
EOF
)

49 
ch
) {

51 
¥öt_Æl
 = 1;

54 
li°
 = 1;

57 
fix
 = 1;

62 i‡–(!
li°
 && !
¥öt_Æl
 && !
fix
)) {

63 
	`Ârötf
(
°dîr
, "You must specifyá commandÜine option:\n\tl =Üist\n\
\tf = fix\n\ta =áll (requiresÜ or f)\n");

65 
	`exô
(1);

69 i‡(
li°
) {

70 
ut
 = 
	`f›í
(
UTMP_FILE
, "r");

71 
	`‰ód
(&
uts
, (uts), 1, 
ut
))

72 i‡(((
uts
.
ut_ty≥
 =
USER_PROCESS
Ë&& (uts.
ut_«me
[0] != '\000'))

73 || 
¥öt_Æl
) {

74 
	`°∫˝y
(
u£r
, 
uts
.
ut_u£r
, 
UT_NAMESIZE
);

75 
u£r
[
UT_NAMESIZE
]=0;

76 
	`°∫˝y
(
ho°
, 
uts
.
ut_ho°
, 16);

77 
ho°
[16]=0;

78 
	`¥ötf
("ut_ty≥: %d\n", 
uts
.
ut_ty≥
);

79 
	`¥ötf
("ut_pid: %d\n", 
uts
.
ut_pid
);

80 
	`¥ötf
("ut_löe: %s\n", 
uts
.
ut_löe
);

81 
	`¥ötf
("ut_id: %2s\n", 
uts
.
ut_id
);

82 
	`¥ötf
("ut_time: %d\n", 
uts
.
ut_time
);

83 
	`¥ötf
("ut_u£r: %s\n", 
u£r
);

84 
	`¥ötf
("ut_ho°: %s\n", 
ho°
);

85 
	`¥ötf
("ut_addr: %d\n\n", 
uts
.
ut_addr
);

87 
	`f˛o£
(
ut
);

91 i‡(
fix
) {

92 
ut
 = 
	`f›í
(
UTMP_FILE
, "r");

93 
	`‰ód
(&
uts
, (uts), 1, 
ut
))

94 i‡(((
uts
.
ut_ty≥
 =
USER_PROCESS
Ë&& (uts.
ut_«me
[0] != '\000'))

95 || 
¥öt_Æl
) {

97 
	`°∫˝y
(
u£r
, 
uts
.
ut_u£r
, 
UT_NAMESIZE
);

98 
u£r
[
UT_NAMESIZE
]=0;

99 
	`°∫˝y
(
ho°
, 
uts
.
ut_ho°
, 16);

100 
ho°
[16]=0;

101 
	`¥ötf
("ut_ty≥: %d\n", 
uts
.
ut_ty≥
);

102 
	`¥ötf
("ut_pid: %d\n", 
uts
.
ut_pid
);

103 
	`¥ötf
("ut_löe: %s\n", 
uts
.
ut_löe
);

104 
	`¥ötf
("ut_id: %s2\n", 
uts
.
ut_id
);

105 
	`¥ötf
("ut_time: %d\n", 
uts
.
ut_time
);

106 
	`¥ötf
("ut_u£r: %s\n", 
u£r
);

107 
	`¥ötf
("ut_ho°: %s\n", 
ho°
);

108 
	`¥ötf
("ut_addr: %d\n\n", 
uts
.
ut_addr
);

110 
	`¥ötf
("ModifyÅhi†ªc‹d? (y/N): "); 
	`fÊush
(
°dout
);

112 i‡((
ch
 = 
	`gëch¨
()) == 'y' || ch == 'Y') {

113 
	`gëch¨
() != '\n');

114 
	`¥ötf
("Ch™gêut_ty≥? "); 
	`fÊush
(
°dout
);

115 i‡((
ch
 = 
	`gëch¨
()) == 'y' || ch == 'Y') {

116 
	`gëch¨
() != '\n');

117 
	`¥ötf
("INIT, LOGIN, USER, or DEAD_PROCESS? (I/L/U/D): ");

118 
	`fÊush
(
°dout
);

119 
ch
 = 
	`gëch¨
();

120 
ch
) {

123 
uts
.
ut_ty≥
 = 
INIT_PROCESS
;

127 
uts
.
ut_ty≥
 = 
LOGIN_PROCESS
;

131 
uts
.
ut_ty≥
 = 
USER_PROCESS
;

135 
uts
.
ut_ty≥
 = 
DEAD_PROCESS
;

138 
	`¥ötf
("InvÆid choi˚: %c\n", 
ch
);

140 i‡(
ch
 !'\n'Ë(ch = 
	`gëch¨
()) != '\n');

142 i‡(
ch
 !'\n'Ë(ch = 
	`gëch¨
()) != '\n');

143 
	`¥ötf
("Ch™gêut_id fõld? (y/N): "); 
	`fÊush
(
°dout
);

144 i‡((
ch
 = 
	`gëch¨
()) == 'y' || ch == 'Y') {

145 
	`gëch¨
() != '\n');

146 
	`¥ötf
("PleaseÉnterÅheÅwo characters for ut_id: ");

147 
	`fÊush
(
°dout
);

148 
uts
.
ut_id
[0] = 
	`gëch¨
();

149 
uts
.
ut_id
[1] = 
	`gëch¨
();

150 (
ch
 = 
	`gëch¨
()) != '\n');

152 i‡(
ch
 !'\n'Ë(ch = 
	`gëch¨
()) != '\n');

153 
	`¥ötf
("Ch™gêthêut_u£∏fõld? (y/N): "); 
	`fÊush
(
°dout
);

154 i‡((
ch
 = 
	`gëch¨
()) == 'y' || ch == 'Y') {

155 
i
;

156 
	`gëch¨
() != '\n');

157 
	`¥ötf
("PleaseÉnterÅheÇew ut_name, upÅo %c characters: ",

158 
UT_NAMESIZE
);

159 
	`fÊush
(
°dout
);

160 
i
=0; i<
UT_NAMESIZE
; i++) {

161 
ch
 = 
	`gëch¨
();

162 
uts
.
ut_u£r
[
i
] = (
ch
 !'\n'Ë? ch : i = 
UT_NAMESIZE
, () 0;

165 i‡(
ch
 !'\n'Ë(ch = 
	`gëch¨
()) != '\n');

166 
	`¥ötf
("Ch™gêthêut_ho° fõld? (y/N): "); 
	`fÊush
(
°dout
);

167 i‡((
ch
 = 
	`gëch¨
()) == 'y' || ch == 'Y') {

168 
i
;

169 
	`gëch¨
() != '\n');

170 
	`¥ötf
("PleaseÉnterÅheÇew ut_host, upÅo 16 characters: ");

171 
	`fÊush
(
°dout
);

172 
i
=0; i<16; i++) {

173 
ch
 = 
	`gëch¨
();

174 
uts
.
ut_u£r
[
i
] = (
ch
 != '\n') ? ch : i = 16, () 0;

176 i‡(
ch
 !'\n'Ë(ch = 
	`gëch¨
()) != '\n');

187 i‡(
ch
 !'\n'Ë(ch = 
	`gëch¨
()) != '\n');

190 
	`f˛o£
(
ut
);

197 
	}
}

	@free.c

29 
	~"c⁄fig.h
"

30 
	~"¥oc/sysöfo.h
"

31 
	~"¥oc/vîsi⁄.h
"

32 
	~"c.h
"

33 
	~"∆s.h
"

34 
	~"°rutûs.h
"

35 
	~"fûeutûs.h
"

37 
	~<loˇÀ.h
>

38 
	~<î∫o.h
>

39 
	~<limôs.h
>

40 
	~<˘y≥.h
>

41 
	~<gë›t.h
>

42 
	~<°dio.h
>

43 
	~<°dlib.h
>

44 
	~<uni°d.h
>

46 #i‚de‡
SIZE_MAX


47 
	#SIZE_MAX
 32

	)

50 
	#FREE_HUMANREADABLE
 (1 << 1)

	)

51 
	#FREE_LOHI
 (1 << 2)

	)

52 
	#FREE_WIDE
 (1 << 3)

	)

53 
	#FREE_TOTAL
 (1 << 4)

	)

54 
	#FREE_SI
 (1 << 5)

	)

55 
	#FREE_REPEAT
 (1 << 6)

	)

56 
	#FREE_REPEATCOUNT
 (1 << 7)

	)

58 
	scomm™dlöe_¨gumíts
 {

59 
	mexp⁄ít
;

60 
	mª≥©_öãrvÆ
;

61 
	mª≥©_cou¡î
;

65 
ußge
(
FILE
 * 
out
);

66 
powî
(
ba£
, 
expo
);

67 c⁄° *
sˇÀ_size
(
size
, 
Êags
, 
comm™dlöe_¨gumíts
 
¨gs
);

69 
__©åibuã__
 ((
__n‹ëu∫__
))

70 
	$ußge
(
FILE
 * 
out
)

72 
	`Âuts
(
USAGE_HEADER
, 
out
);

73 
	`Ârötf
(
out
,

74 
	`_
(" %†[›ti⁄s]\n"), 
¥ogøm_övoˇti⁄_sh‹t_«me
);

75 
	`Âuts
(
USAGE_OPTIONS
, 
out
);

76 
	`Âuts
(
	`_
(" -b, --byã† show ouçuàö byãs\n"), 
out
);

77 
	`Âuts
(
	`_
(" --kûÿ show ouçuàö kûobyãs\n"), 
out
);

78 
	`Âuts
(
	`_
(" --meg® show ouçuàö megabyãs\n"), 
out
);

79 
	`Âuts
(
	`_
(" --gig® show ouçuàö gigabyãs\n"), 
out
);

80 
	`Âuts
(
	`_
(" --ãø show ouçuàöÅîabyãs\n"), 
out
);

81 
	`Âuts
(
	`_
(" --≥è show ouçuàöÖëabyãs\n"), 
out
);

82 
	`Âuts
(
	`_
(" -k, --kibò show ouçuàö kibibyãs\n"), 
out
);

83 
	`Âuts
(
	`_
(" -m, --mebò show ouçuàö mebibyãs\n"), 
out
);

84 
	`Âuts
(
	`_
(" -g, --gibò show ouçuàö gibibyãs\n"), 
out
);

85 
	`Âuts
(
	`_
(" --ãbò show ouçuàöÅebibyãs\n"), 
out
);

86 
	`Âuts
(
	`_
(" --≥bò show ouçuàöÖebibyãs\n"), 
out
);

87 
	`Âuts
(
	`_
(" -h, --hum™ show hum™-ªadabÀ ouçut\n"), 
out
);

88 
	`Âuts
(
	`_
(" --sò u£Öowî†o‡1000ÇŸ 1024\n"), 
out
);

89 
	`Âuts
(
	`_
(" -l, --lohò show dëaûedÜowánd high mem‹y sèti°ics\n"), 
out
);

90 
	`Âuts
(
	`_
(" -t, --tŸÆ showÅŸÆ f‹ RAM + sw≠\n"), 
out
);

91 
	`Âuts
(
	`_
(" -†N, --£c⁄d†NÑïóà¥ötögÉvîy N sec⁄ds\n"), 
out
);

92 
	`Âuts
(
	`_
(" -¯N, --cou¡ NÑïóà¥ötög NÅimes,ÅhíÉxô\n"), 
out
);

93 
	`Âuts
(
	`_
(" -w, --widê widêouçut\n"), 
out
);

94 
	`Âuts
(
USAGE_SEPARATOR
, 
out
);

95 
	`Âuts
(
	`_
(" --hñ∞ di•œyÅhi†hñ∞™dÉxô\n"), 
out
);

96 
	`Âuts
(
USAGE_VERSION
, 
out
);

97 
	`Ârötf
(
out
, 
	`USAGE_MAN_TAIL
("free(1)"));

99 
	`exô
(
out
 =
°dîr
 ? 
EXIT_FAILURE
 : 
EXIT_SUCCESS
);

100 
	}
}

102 
	$powî
(
ba£
, 
expo
)

104  (
expo
 =0Ë? 1 : 
ba£
 * 
	`powî
(base,Éxpo - 1);

105 
	}
}

108 c⁄° *
	$sˇÀ_size
(
size
, 
Êags
, 
comm™dlöe_¨gumíts
 
¨gs
)

110 
√xtup
[] = { 'B', 'K', 'M', 'G', 'T', 'P', 0 };

111 
buf
[
BUFSIZ
];

112 
i
;

113 *
up
;

114 
ba£
;

116 i‡(
Êags
 & 
FREE_SI
)

117 
ba£
 = 1000.0;

119 
ba£
 = 1024.0;

122 i‡(
¨gs
.
exp⁄ít
 =0 && !(
Êags
 & 
FREE_HUMANREADABLE
)) {

123 
	`¢¥ötf
(
buf
, (buf), "%ld", 
size
);

124  
buf
;

127 i‡(!(
Êags
 & 
FREE_HUMANREADABLE
)) {

128 i‡(
¨gs
.
exp⁄ít
 == 1) {

130 
	`¢¥ötf
(
buf
, (buf), "%Œd", (()
size
) * 1024);

131  
buf
;

133 i‡(
¨gs
.
exp⁄ít
 == 2) {

134 i‡(!(
Êags
 & 
FREE_SI
))

135 
	`¢¥ötf
(
buf
, (buf), "%ld", 
size
);

137 
	`¢¥ötf
(
buf
, (buf), "%ld", ()(
size
 / 0.9765625));

138  
buf
;

140 i‡(
¨gs
.
exp⁄ít
 > 2) {

142 
	`¢¥ötf
(
buf
, (buf), "%ld",

143 ()(
size
 / 
	`powî
(
ba£
, 
¨gs
.
exp⁄ít
 - 2))

145  
buf
;

150 
up
 = 
√xtup
;

151 
i
 = 1; 
up
[0] != 0; i++, up++) {

152 
i
) {

154 i‡(4 >
	`¢¥ötf
(
buf
, (buf), "%ld%c", ()
size
 * 1024, *
up
))

155  
buf
;

159 i‡(!(
Êags
 & 
FREE_SI
)) {

160 i‡(4 >
	`¢¥ötf
(
buf
, (buf), "%ld%c", 
size
, *
up
))

161  
buf
;

164 
	`¢¥ötf
(
buf
, (buf), "%ld%c",

165 ()(
size
 / 0.9765625), *
up
))

166  
buf
;

174 
	`¢¥ötf
(
buf
, (buf), "%.1f%c",

175 ()(
size
 / 
	`powî
(
ba£
, 
i
 - 2)), *
up
))

176  
buf
;

178 
	`¢¥ötf
(
buf
, (buf), "%ld%c",

179 ()(
size
 / 
	`powî
(
ba£
, 
i
 - 2)), *
up
))

180  
buf
;

191  
buf
;

192 
	}
}

194 
	$check_unô_£t
(*
unô_£t
)

196 i‡(*
unô_£t
)

197 
	`xîrx
(
EXIT_FAILURE
,

198 
	`_
("Multiple unit options doesn't make sense."));

199 *
unô_£t
 = 1;

200 
	}
}

202 
	$maö
(
¨gc
, **
¨gv
)

204 
c
, 
Êags
 = 0, 
unô_£t
 = 0;

205 
comm™dlöe_¨gumíts
 
¨gs
;

212 
SI_OPTION
 = 
CHAR_MAX
 + 1,

213 
KILO_OPTION
,

214 
MEGA_OPTION
,

215 
GIGA_OPTION
,

216 
TERA_OPTION
,

217 
PETA_OPTION
,

218 
TEBI_OPTION
,

219 
PEBI_OPTION
,

220 
HELP_OPTION


223 c⁄° 
›ti⁄
 
l⁄g›ts
[] = {

224 { "byãs", 
no_¨gumít
, 
NULL
, 'b' },

225 { "kûo", 
no_¨gumít
, 
NULL
, 
KILO_OPTION
 },

226 { "mega", 
no_¨gumít
, 
NULL
, 
MEGA_OPTION
 },

227 { "giga", 
no_¨gumít
, 
NULL
, 
GIGA_OPTION
 },

228 { "ãø", 
no_¨gumít
, 
NULL
, 
TERA_OPTION
 },

229 { "≥è", 
no_¨gumít
, 
NULL
, 
PETA_OPTION
 },

230 { "kibi", 
no_¨gumít
, 
NULL
, 'k' },

231 { "mebi", 
no_¨gumít
, 
NULL
, 'm' },

232 { "gibi", 
no_¨gumít
, 
NULL
, 'g' },

233 { "ãbi", 
no_¨gumít
, 
NULL
, 
TEBI_OPTION
 },

234 { "≥bi", 
no_¨gumít
, 
NULL
, 
PEBI_OPTION
 },

235 { "hum™", 
no_¨gumít
, 
NULL
, 'h' },

236 { "si", 
no_¨gumít
, 
NULL
, 
SI_OPTION
 },

237 { "lohi", 
no_¨gumít
, 
NULL
, 'l' },

238 { "tŸÆ", 
no_¨gumít
, 
NULL
, 't' },

239 { "£c⁄ds", 
ªquúed_¨gumít
, 
NULL
, 's' },

240 { "cou¡", 
ªquúed_¨gumít
, 
NULL
, 'c' },

241 { "wide", 
no_¨gumít
, 
NULL
, 'w' },

242 { "hñp", 
no_¨gumít
, 
NULL
, 
HELP_OPTION
 },

243 { "vîsi⁄", 
no_¨gumít
, 
NULL
, 'V' },

244 { 
NULL
, 0, NULL, 0 }

248 
¨gs
.
exp⁄ít
 = 0;

249 
¨gs
.
ª≥©_öãrvÆ
 = 1000000;

250 
¨gs
.
ª≥©_cou¡î
 = 0;

252 #ifde‡
HAVE_PROGRAM_INVOCATION_NAME


253 
¥ogøm_övoˇti⁄_«me
 = 
¥ogøm_övoˇti⁄_sh‹t_«me
;

255 
	`£éoˇÀ
 (
LC_ALL
, "");

256 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

257 
	`ãxtdomaö
(
PACKAGE
);

258 
	`©exô
(
˛o£_°dout
);

260 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "bkmgh…c:ws:V", 
l⁄g›ts
, 
NULL
)) != -1)

261 
c
) {

263 
	`check_unô_£t
(&
unô_£t
);

264 
¨gs
.
exp⁄ít
 = 1;

267 
	`check_unô_£t
(&
unô_£t
);

268 
¨gs
.
exp⁄ít
 = 2;

271 
	`check_unô_£t
(&
unô_£t
);

272 
¨gs
.
exp⁄ít
 = 3;

275 
	`check_unô_£t
(&
unô_£t
);

276 
¨gs
.
exp⁄ít
 = 4;

278 
TEBI_OPTION
:

279 
	`check_unô_£t
(&
unô_£t
);

280 
¨gs
.
exp⁄ít
 = 5;

282 
PEBI_OPTION
:

283 
	`check_unô_£t
(&
unô_£t
);

284 
¨gs
.
exp⁄ít
 = 6;

286 
KILO_OPTION
:

287 
	`check_unô_£t
(&
unô_£t
);

288 
¨gs
.
exp⁄ít
 = 2;

289 
Êags
 |
FREE_SI
;

291 
MEGA_OPTION
:

292 
	`check_unô_£t
(&
unô_£t
);

293 
¨gs
.
exp⁄ít
 = 3;

294 
Êags
 |
FREE_SI
;

296 
GIGA_OPTION
:

297 
	`check_unô_£t
(&
unô_£t
);

298 
¨gs
.
exp⁄ít
 = 4;

299 
Êags
 |
FREE_SI
;

301 
TERA_OPTION
:

302 
	`check_unô_£t
(&
unô_£t
);

303 
¨gs
.
exp⁄ít
 = 5;

304 
Êags
 |
FREE_SI
;

306 
PETA_OPTION
:

307 
	`check_unô_£t
(&
unô_£t
);

308 
¨gs
.
exp⁄ít
 = 6;

309 
Êags
 |
FREE_SI
;

312 
Êags
 |
FREE_HUMANREADABLE
;

314 
SI_OPTION
:

315 
Êags
 |
FREE_SI
;

318 
Êags
 |
FREE_LOHI
;

321 
Êags
 |
FREE_TOTAL
;

324 
Êags
 |
FREE_REPEAT
;

325 
î∫o
 = 0;

326 
¨gs
.
ª≥©_öãrvÆ
 = (1000000 * 
	`°πod_nﬁ_‹_îr
(
›èrg
, "secondsárgument failed"));

327 i‡(
¨gs
.
ª≥©_öãrvÆ
 < 1)

328 
	`xîrx
(
EXIT_FAILURE
,

329 
	`_
("£c⁄d†¨gumíà`%s' i†nŸÖosôivênumbî"), 
›èrg
);

332 
Êags
 |
FREE_REPEAT
;

333 
Êags
 |
FREE_REPEATCOUNT
;

334 
¨gs
.
ª≥©_cou¡î
 = 
	`°πﬁ_‹_îr
(
›èrg
,

335 
	`_
("failedÅoÖarse countárgument"));

336 i‡(
¨gs
.
ª≥©_cou¡î
 < 1)

337 
	`îr‹
(
EXIT_FAILURE
, 
ERANGE
,

338 
	`_
("ÁûedÅÿ∑r£ cou¡árgumít: '%s'"), 
›èrg
);

341 
Êags
 |
FREE_WIDE
;

343 
HELP_OPTION
:

344 
	`ußge
(
°dout
);

346 
	`¥ötf
(
PROCPS_NG_VERSION
);

347 
	`exô
(
EXIT_SUCCESS
);

349 
	`ußge
(
°dîr
);

354 
	`memöfo
();

358 i‡(
Êags
 & 
FREE_WIDE
) {

359 
	`¥ötf
(
	`_
("Åotal used free shared buffers cacheávailable"));

361 
	`¥ötf
(
	`_
("Åotal used free shared buff/cacheávailable"));

363 
	`¥ötf
("\n");

364 
	`¥ötf
("%-7s", 
	`_
("Mem:"));

365 
	`¥ötf
(" %11s", 
	`sˇÀ_size
(
kb_maö_tŸÆ
, 
Êags
, 
¨gs
));

366 
	`¥ötf
(" %11s", 
	`sˇÀ_size
(
kb_maö_u£d
, 
Êags
, 
¨gs
));

367 
	`¥ötf
(" %11s", 
	`sˇÀ_size
(
kb_maö_‰ì
, 
Êags
, 
¨gs
));

368 
	`¥ötf
(" %11s", 
	`sˇÀ_size
(
kb_maö_sh¨ed
, 
Êags
, 
¨gs
));

369 i‡(
Êags
 & 
FREE_WIDE
) {

370 
	`¥ötf
(" %11s", 
	`sˇÀ_size
(
kb_maö_buf„rs
, 
Êags
, 
¨gs
));

371 
	`¥ötf
(" %11s", 
	`sˇÀ_size
(
kb_maö_ˇched
, 
Êags
, 
¨gs
));

373 
	`¥ötf
(" %11s", 
	`sˇÀ_size
(
kb_maö_buf„rs
+
kb_maö_ˇched
, 
Êags
, 
¨gs
));

375 
	`¥ötf
(" %11s", 
	`sˇÀ_size
(
kb_maö_avaûabÀ
, 
Êags
, 
¨gs
));

376 
	`¥ötf
("\n");

383 i‡(
Êags
 & 
FREE_LOHI
) {

384 
	`¥ötf
("%-7s", 
	`_
("Low:"));

385 
	`¥ötf
(" %11s", 
	`sˇÀ_size
(
kb_low_tŸÆ
, 
Êags
, 
¨gs
));

386 
	`¥ötf
(" %11s", 
	`sˇÀ_size
(
kb_low_tŸÆ
 - 
kb_low_‰ì
, 
Êags
, 
¨gs
));

387 
	`¥ötf
(" %11s", 
	`sˇÀ_size
(
kb_low_‰ì
, 
Êags
, 
¨gs
));

388 
	`¥ötf
("\n");

390 
	`¥ötf
("%-7s", 
	`_
("High:"));

391 
	`¥ötf
(" %11s", 
	`sˇÀ_size
(
kb_high_tŸÆ
, 
Êags
, 
¨gs
));

392 
	`¥ötf
(" %11s", 
	`sˇÀ_size
(
kb_high_tŸÆ
 - 
kb_high_‰ì
, 
Êags
, 
¨gs
));

393 
	`¥ötf
(" %11s", 
	`sˇÀ_size
(
kb_high_‰ì
, 
Êags
, 
¨gs
));

394 
	`¥ötf
("\n");

397 
	`¥ötf
("%-7s", 
	`_
("Swap:"));

398 
	`¥ötf
(" %11s", 
	`sˇÀ_size
(
kb_sw≠_tŸÆ
, 
Êags
, 
¨gs
));

399 
	`¥ötf
(" %11s", 
	`sˇÀ_size
(
kb_sw≠_u£d
, 
Êags
, 
¨gs
));

400 
	`¥ötf
(" %11s", 
	`sˇÀ_size
(
kb_sw≠_‰ì
, 
Êags
, 
¨gs
));

401 
	`¥ötf
("\n");

403 i‡(
Êags
 & 
FREE_TOTAL
) {

404 
	`¥ötf
("%-7s", 
	`_
("Total:"));

405 
	`¥ötf
(" %11s", 
	`sˇÀ_size
(
kb_maö_tŸÆ
 + 
kb_sw≠_tŸÆ
, 
Êags
, 
¨gs
));

406 
	`¥ötf
(" %11s", 
	`sˇÀ_size
(
kb_maö_u£d
 + 
kb_sw≠_u£d
, 
Êags
, 
¨gs
));

407 
	`¥ötf
(" %11s", 
	`sˇÀ_size
(
kb_maö_‰ì
 + 
kb_sw≠_‰ì
, 
Êags
, 
¨gs
));

408 
	`¥ötf
("\n");

410 
	`fÊush
(
°dout
);

411 i‡(
Êags
 & 
FREE_REPEATCOUNT
) {

412 
¨gs
.
ª≥©_cou¡î
--;

413 i‡(
¨gs
.
ª≥©_cou¡î
 < 1)

414 
	`exô
(
EXIT_SUCCESS
);

416 i‡(
Êags
 & 
FREE_REPEAT
) {

417 
	`¥ötf
("\n");

418 
	`u¶ìp
(
¨gs
.
ª≥©_öãrvÆ
);

420 } (
Êags
 & 
FREE_REPEAT
));

422 
	`exô
(
EXIT_SUCCESS
);

423 
	}
}

	@include/c.h

9 #i‚de‡
PROCPS_NG_C_H


10 
	#PROCPS_NG_C_H


	)

12 
	~<limôs.h
>

13 
	~<°döt.h
>

14 
	~<°dio.h
>

15 
	~<°d¨g.h
>

16 
	~<°dlib.h
>

17 
	~<°rög.h
>

18 
	~<î∫o.h
>

19 #ifde‡
HAVE_ERROR_H


20 
	~<îr‹.h
>

22 
	~<°d¨g.h
>

28 #i‚de‡
__GNUC_PREREQ


29 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


30 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

31 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

33 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

40 #i‚de‡
__ul_Æloc_size


41 #i‡
__GNUC_PREREQ
 (4, 3)

42 
	#__ul_Æloc_size
(
s
Ë
	`__©åibuã__
((
	`Æloc_size
(s)))

	)

44 
	#__ul_Æloc_size
(
s
)

	)

48 #i‚de‡
__ul_ˇŒoc_size


49 #i‡
__GNUC_PREREQ
 (4, 3)

50 
	#__ul_ˇŒoc_size
(
n
, 
s
Ë
	`__©åibuã__
((
	`Æloc_size
“, s)))

	)

52 
	#__ul_ˇŒoc_size
(
n
, 
s
)

	)

59 #i‚de‡
PATH_MAX


60 
	#PATH_MAX
 4096

	)

63 #i‚de‡
TRUE


64 
	#TRUE
 1

	)

67 #i‚de‡
FALSE


68 
	#FALSE
 0

	)

74 #i‚de‡
HAVE_PROGRAM_INVOCATION_SHORT_NAME


75 #ifde‡
HAVE___PROGNAME


76 *
__¥og«me
;

77 
	#¥ogøm_övoˇti⁄_sh‹t_«me
 
__¥og«me


	)

79 #ifde‡
HAVE_GETEXECNAME


80 
	#¥ogøm_övoˇti⁄_sh‹t_«me
 \

81 
	`¥og_öv_sh_nm_‰om_fûe
(
	`gëexe˙ame
(), 0)

	)

83 
	#¥ogøm_övoˇti⁄_sh‹t_«me
 \

84 
	`¥og_öv_sh_nm_‰om_fûe
(
__FILE__
, 1)

	)

86 
	g¥og_öv_sh_nm_buf
[256];

87 
ölöe
 *
	$¥og_öv_sh_nm_‰om_fûe
(*
f
, 
°rùext
)

89 *
t
;

91 i‡((
t
 = 
	`°ºchr
(
f
, '/')Ë!
NULL
)

92 
t
++;

94 
t
 = 
f
;

96 
	`°∫˝y
(
¥og_öv_sh_nm_buf
, 
t
, (prog_inv_sh_nm_buf) - 1);

97 
¥og_öv_sh_nm_buf
[(prog_inv_sh_nm_buf) - 1] = '\0';

99 i‡(
°rùext
 && (
t
 = 
	`°ºchr
(
¥og_öv_sh_nm_buf
, '.')Ë!
NULL
)

100 *
t
 = '\0';

102  
¥og_öv_sh_nm_buf
;

103 
	}
}

110 #i‚de‡
HAVE_ERROR_H


112 
__©åibuã__
((
	$__f‹m©__
(
__¥ötf__
, 3, 4)))

113 
	$îr‹
(
°©us
, 
î∫um
, c⁄° *
f‹m©
, ...)

115 
va_li°
 
¨gp
;

116 
	`Ârötf
(
°dîr
, "%s: ", 
¥ogøm_övoˇti⁄_sh‹t_«me
);

117 
	`va_°¨t
(
¨gp
, 
f‹m©
);

118 
	`vÂrötf
(
°dîr
, 
f‹m©
, 
¨gp
);

119 
	`va_íd
(
¨gp
);

120 i‡(
î∫um
 != 0)

121 
	`Ârötf
(
°dîr
, ":Éº‹ codê%d", 
î∫um
);

122 
	`Ârötf
(
°dîr
, "\n");

123 i‡(
°©us
 != 0)

124 
	`exô
(
°©us
);

125 
	}
}

128 
__©åibuã__
((
	$__f‹m©__
(
__¥ötf__
, 5, 6)))

129 
	$îr‹_©_löe
(
°©us
, 
î∫um
, c⁄° *
fûíame
,

130 
löíum
, c⁄° *
f‹m©
, ...)

132 
va_li°
 
¨gp
;

133 
	`Ârötf
(
°dîr
, "%s:%s:%u: ", 
¥ogøm_övoˇti⁄_sh‹t_«me
,

134 
fûíame
, 
löíum
);

135 
	`va_°¨t
(
¨gp
, 
f‹m©
);

136 
	`vÂrötf
(
°dîr
, 
f‹m©
, 
¨gp
);

137 
	`va_íd
(
¨gp
);

138 i‡(
î∫um
 != 0)

139 
	`Ârötf
(
°dîr
, ":Éº‹ codê%d", 
î∫um
);

140 
	`Ârötf
(
°dîr
, "\n");

141 i‡(
°©us
 != 0)

142 
	`exô
(
°©us
);

143 
	}
}

145 
	#xw¨n
(...Ë
	`îr‹
(0, 
î∫o
, 
__VA_ARGS__
)

	)

146 
	#xw¨nx
(...Ë
	`îr‹
(0, 0, 
__VA_ARGS__
)

	)

147 
	#xîr
(
STATUS
, ...Ë
	`îr‹
(STATUS, 
î∫o
, 
__VA_ARGS__
)

	)

148 
	#xîrx
(
STATUS
, ...Ë
	`îr‹
(STATUS, 0, 
__VA_ARGS__
)

	)

153 
	#USAGE_HEADER
 
	`_
("\nUßge:\n")

	)

154 
	#USAGE_OPTIONS
 
	`_
("\nO±i⁄s:\n")

	)

155 
	#USAGE_SEPARATOR
 
	`_
("\n")

	)

156 
	#USAGE_HELP
 
	`_
(" -h, --hñ∞ di•œyÅhi†hñ∞™dÉxô\n")

	)

157 
	#USAGE_VERSION
 
	`_
(" -V, --vîsi⁄ ouçuàvîsi⁄ inf‹m©i⁄ándÉxô\n")

	)

158 
	#USAGE_MAN_TAIL
(
_m™
Ë
	`_
("\nF‹ m‹êdëaû†£ê%s.\n"), 
	)
_man

160 
	#PROCPS_NG_VERSION
 
	`_
("%†‰om %s\n"), 
¥ogøm_övoˇti⁄_sh‹t_«me
, 
PACKAGE_STRING


	)

	@include/fileutils.h

1 #i‚de‡
PROCPS_NG_FILEUTILS


2 
	#PROCPS_NG_FILEUTILS


	)

4 
˛o£_°ªam
(
FILE
 * 
°ªam
);

5 
˛o£_°dout
();

	@include/nls.h

5 #i‚de‡
PROCPS_NG_NLS_H


6 
	#PROCPS_NG_NLS_H


	)

9 
	~"../c⁄fig.h
"

12 #i‚de‡
LOCALEDIR


13 
	#LOCALEDIR
 "/u§/sh¨e/loˇÀ"

	)

16 #ifde‡
HAVE_LOCALE_H


17 
	~<loˇÀ.h
>

19 #unde‡
£éoˇÀ


20 
	#£éoˇÀ
(
C©eg‹y
, 
LoˇÀ
Ë

	)

23 #ifde‡
ENABLE_NLS


24 
	~<liböé.h
>

25 
	#_
(
Text
Ë
	`gëãxt
 (Text)

	)

26 #ifde‡
gëãxt_no›


27 
	#N_
(
Såög
Ë
	`gëãxt_no›
 (Såög)

	)

29 
	#N_
(
Såög
Ë(Såög)

	)

31 
	#P_
(
Söguœr
, 
Pluøl
, 
n
Ë
	`ngëãxt
 (Söguœr, Pluøl,Ç)

	)

33 #unde‡
bödãxtdomaö


34 
	#bödãxtdomaö
(
Domaö
, 
Dúe˘‹y
Ë

	)

35 #unde‡
ãxtdomaö


36 
	#ãxtdomaö
(
Domaö
Ë

	)

37 
	#_
(
Text
Ë(Text)

	)

38 
	#N_
(
Text
Ë(Text)

	)

39 
	#P_
(
Söguœr
, 
Pluøl
, 
n
Ë(“Ë=1 ? (SöguœrË: (Pluøl))

	)

42 #ifde‡
HAVE_LANGINFO_H


43 
	~<œngöfo.h
>

46 
	t∆_ôem
;

47 *
œngöfo_ÁŒback
(
∆_ôem
 
ôem
);

49 
	#∆_œngöfo
 
œngöfo_ÁŒback


	)

52 
	mCODESET
 = 1,

53 
	mRADIXCHAR
,

54 
	mTHOUSEP
,

55 
	mD_T_FMT
,

56 
	mD_FMT
,

57 
	mT_FMT
,

58 
	mT_FMT_AMPM
,

59 
	mAM_STR
,

60 
	mPM_STR
,

62 
	mDAY_1
,

63 
	mDAY_2
,

64 
	mDAY_3
,

65 
	mDAY_4
,

66 
	mDAY_5
,

67 
	mDAY_6
,

68 
	mDAY_7
,

70 
	mABDAY_1
,

71 
	mABDAY_2
,

72 
	mABDAY_3
,

73 
	mABDAY_4
,

74 
	mABDAY_5
,

75 
	mABDAY_6
,

76 
	mABDAY_7
,

78 
	mMON_1
,

79 
	mMON_2
,

80 
	mMON_3
,

81 
	mMON_4
,

82 
	mMON_5
,

83 
	mMON_6
,

84 
	mMON_7
,

85 
	mMON_8
,

86 
	mMON_9
,

87 
	mMON_10
,

88 
	mMON_11
,

89 
	mMON_12
,

91 
	mABMON_1
,

92 
	mABMON_2
,

93 
	mABMON_3
,

94 
	mABMON_4
,

95 
	mABMON_5
,

96 
	mABMON_6
,

97 
	mABMON_7
,

98 
	mABMON_8
,

99 
	mABMON_9
,

100 
	mABMON_10
,

101 
	mABMON_11
,

102 
	mABMON_12
,

104 
	mERA_D_FMT
,

105 
	mERA_D_T_FMT
,

106 
	mERA_T_FMT
,

107 
	mALT_DIGITS
,

108 
	mCRNCYSTR
,

109 
	mYESEXPR
,

110 
	mNOEXPR


	@include/nsutils.h

1 #i‚de‡
PROCPS_NG_NSUTILS


2 
	#PROCPS_NG_NSUTILS


	)

4 
	~"¥oc/ªad¥oc.h
"

5 
ns_ªad
(
pid_t
 
pid
, 
¥oc_t
 *
ns_èsk
);

	@include/rpmatch.h

1 #i‚de‡
PROCPS_NG_RPMATCH_H


2 
	#PROCPS_NG_RPMATCH_H


	)

4 #i‚de‡
HAVE_RPMATCH


5 
	#Ωm©ch
(
r
) \

6 (*
r
 ='y' || *∏='Y' ? 1 : *∏='n' || *∏='N' ? 0 : -1)

	)

	@include/strutils.h

5 #i‚de‡
PROCPS_NG_STRUTILS


6 
	#PROCPS_NG_STRUTILS


	)

8 
°πﬁ_‹_îr
(c⁄° *
°r
, c⁄° *
îrmesg
);

9 
°πod_‹_îr
(c⁄° *
°r
, c⁄° *
îrmesg
);

10 
°πod_nﬁ_‹_îr
(*
°r
, c⁄° *
îrmesg
);

	@include/xalloc.h

10 #i‚de‡
PROCPS_NG_XALLOC_H


11 
	#PROCPS_NG_XALLOC_H


	)

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

16 
	~"c.h
"

18 #i‚de‡
XALLOC_EXIT_CODE


19 
	#XALLOC_EXIT_CODE
 
EXIT_FAILURE


	)

22 
ölöe
 
	$__ul_Æloc_size
(1)

23 *
	$xmÆloc
(c⁄° 
size_t
 
size
)

25 *
ªt
 = 
	`mÆloc
(
size
);

26 i‡(!
ªt
 && 
size
)

27 
	`xîrx
(
XALLOC_EXIT_CODE
, "ˇ¬ŸáŒoˇã %zu byãs", 
size
);

28  
ªt
;

29 
	}
}

31 
ölöe
 
	$__ul_Æloc_size
(2)

32 *
	$xªÆloc
(*
±r
, c⁄° 
size_t
 
size
)

34 *
ªt
 = 
	`ªÆloc
(
±r
, 
size
);

35 i‡(!
ªt
 && 
size
)

36 
	`xîrx
(
XALLOC_EXIT_CODE
, "ˇ¬ŸáŒoˇã %zu byãs", 
size
);

37  
ªt
;

38 
	}
}

40 
ölöe
 
	$__ul_ˇŒoc_size
(1, 2)

41 *
	$xˇŒoc
(c⁄° 
size_t
 
√Àms
, c⁄° size_à
size
)

43 *
ªt
 = 
	`ˇŒoc
(
√Àms
, 
size
);

44 i‡(!
ªt
 && 
size
 && 
√Àms
)

45 
	`xîrx
(
XALLOC_EXIT_CODE
, "ˇ¬ŸáŒoˇã %zu byãs", 
size
);

46  
ªt
;

47 
	}
}

49 
ölöe
 *
	$x°rdup
(c⁄° *
°r
)

51 *
ªt
;

52 i‡(!
°r
)

53  
NULL
;

54 
ªt
 = 
	`°rdup
(
°r
);

55 i‡(!
ªt
)

56 
	`xîrx
(
XALLOC_EXIT_CODE
, "cannot duplicate string");

57  
ªt
;

58 
	}
}

	@lib/fileutils.c

1 
	~<î∫o.h
>

2 #ifde‡
HAVE_ERROR_H


3 
	~<îr‹.h
>

5 #ifde‡
HAVE_STDIO_EXT_H


6 
	~<°dio_ext.h
>

9 
	~<°dio.h
>

10 
	#__Âídög
(
Â
Ë((Â)->
_p
 - (Â)->
_bf
.
_ba£
)

	)

12 
	~<°dlib.h
>

13 
	~<uni°d.h
>

15 
	~"∆s.h
"

16 
	~"fûeutûs.h
"

17 #i‚de‡
HAVE_ERROR_H


18 
	~"c.h
"

21 
	$˛o£_°ªam
(
FILE
 * 
°ªam
)

23 c⁄° 
some_≥ndög
 = (
	`__Âídög
(
°ªam
) != 0);

24 c⁄° 
¥ev_Áû
 = (
	`„º‹
(
°ªam
) != 0);

25 c⁄° 
f˛o£_Áû
 = (
	`f˛o£
(
°ªam
) != 0);

26 i‡(
¥ev_Áû
 || (
f˛o£_Áû
 && (
some_≥ndög
 || 
î∫o
 !
EBADF
))) {

27 i‡(!
f˛o£_Áû
 && 
î∫o
 !
EPIPE
)

28 
î∫o
 = 0;

29  
EOF
;

32 
	}
}

35 
	$˛o£_°dout
()

37 i‡(
	`˛o£_°ªam
(
°dout
Ë!0 && !(
î∫o
 =
EPIPE
)) {

38 c⁄° *
wrôe_îr‹
 = 
	`_
("writeÉrror");

39 
	`îr‹
(0, 
î∫o
, "%s", 
wrôe_îr‹
);

40 
	`_exô
(
EXIT_FAILURE
);

43 i‡(
	`˛o£_°ªam
(
°dîr
) != 0)

44 
	`_exô
(
EXIT_FAILURE
);

45 
	}
}

	@lib/nsutils.c

1 
	~<°dio.h
>

2 
	~<î∫o.h
>

3 
	~<°dlib.h
>

4 
	~<sys/ty≥s.h
>

5 
	~<sys/°©.h
>

6 
	~<uni°d.h
>

8 
	~"¥oc/ªad¥oc.h
"

9 
	~"nsutûs.h
"

12 
	$ns_ªad
(
pid_t
 
pid
, 
¥oc_t
 *
ns_èsk
)

14 
°©
 
°
;

15 
buff
[50];

16 
i
, 
rc
 = 0;

18 
i
 = 0; i < 
NUM_NS
; i++) {

19 
	`¢¥ötf
(
buff
, (buff), "/¥oc/%i/ns/%s", 
pid
,

20 
	`gë_ns_«me
(
i
));

21 i‡(
	`°©
(
buff
, &
°
)) {

22 i‡(
î∫o
 !
ENOENT
)

23 
rc
 = 
î∫o
;

24 
ns_èsk
->
ns
[
i
] = 0;

27 
ns_èsk
->
ns
[
i
] = 
°
.
°_öo
;

29  
rc
;

30 
	}
}

	@lib/strutils.c

23 
	~<Êﬂt.h
>

24 
	~<m©h.h
>

25 
	~<°dlib.h
>

26 
	~<˘y≥.h
>

28 
	~"c.h
"

29 
	~"°rutûs.h
"

34 
	$°πﬁ_‹_îr
(c⁄° *
°r
, c⁄° *
îrmesg
)

36 
num
;

37 *
íd
 = 
NULL
;

39 i‡(
°r
 !
NULL
 && *str != '\0') {

40 
î∫o
 = 0;

41 
num
 = 
	`°πﬁ
(
°r
, &
íd
, 10);

42 i‡(
î∫o
 =0 && 
°r
 !
íd
 &&Énd !
NULL
 && *end == '\0')

43  
num
;

45 
	`îr‹
(
EXIT_FAILURE
, 
î∫o
, "%s: '%s'", 
îrmesg
, 
°r
);

47 
	}
}

52 
	$°πod_‹_îr
(c⁄° *
°r
, c⁄° *
îrmesg
)

54 
num
;

55 *
íd
 = 
NULL
;

57 i‡(
°r
 !
NULL
 && *str != '\0') {

58 
î∫o
 = 0;

59 
num
 = 
	`°πod
(
°r
, &
íd
);

60 i‡(
î∫o
 =0 && 
°r
 !
íd
 &&Énd !
NULL
 && *end == '\0')

61  
num
;

63 
	`îr‹
(
EXIT_FAILURE
, 
î∫o
, "%s: '%s'", 
îrmesg
, 
°r
);

65 
	}
}

74 
	$°πod_nﬁ_‹_îr
(*
°r
, c⁄° *
îrmesg
)

76 
num
;

77 c⁄° *
˝
, *
ødix
;

78 
mu…
;

79 
√g©ive
 = 0;

81 i‡(
°r
 !
NULL
 && *str != '\0') {

82 
num
 = 0.0;

83 
˝
 = 
°r
;

85 
	`is•a˚
(*
˝
))

86 
˝
++;

89 i‡(*
˝
 == '-') {

90 
√g©ive
 = 1;

91 
˝
++;

92 } i‡(*
˝
 == '+')

93 
˝
++;

96 
ødix
 = 
˝
;

97 
mu…
=0.1;

98 
	`isdigô
(*
ødix
)) {

99 
ødix
++;

100 
mu…
 *= 10.0;

102 
	`isdigô
(*
˝
)) {

103 
num
 +()(*
˝
 - '0'Ë* 
mu…
;

104 
mu…
 /= 10.0;

105 
˝
++;

108 i‡(*
˝
 == '\0')

109  ()(
√g©ive
?-
num
:num);

110 i‡(*
˝
 != '.' && *cp != ',')

111 
	`îr‹
(
EXIT_FAILURE
, 
EINVAL
, "%s: '%s'", 
îrmesg
, 
°r
);

113 
˝
++;

114 
mu…
 = 0.1;

115 
	`isdigô
(*
˝
)) {

116 
num
 +()(*
˝
 - '0'Ë* 
mu…
;

117 
mu…
 /= 10.0;

118 
˝
++;

120 i‡(*
˝
 == '\0')

121  ()(
√g©ive
?-
num
:num);

123 
	`îr‹
(
EXIT_FAILURE
, 
î∫o
, "%s: '%s'", 
îrmesg
, 
°r
);

125 
	}
}

	@lib/strverscmp.c

23 
	~<˘y≥.h
>

76 
	#S_N
 0x0

	)

77 
	#S_I
 0x4

	)

78 
	#S_F
 0x8

	)

79 
	#S_Z
 0xC

	)

82 
	#CMP
 2

	)

83 
	#LEN
 3

	)

91 
	$°rvîscmp
 (c⁄° *
s1
, c⁄° *
s2
)

93 c⁄° *
p1
 = (c⁄° *Ë
s1
;

94 c⁄° *
p2
 = (c⁄° *Ë
s2
;

95 
c1
, 
c2
;

96 
°©e
;

97 
diff
;

101 c⁄° 
√xt_°©e
[] =

104  
S_N
, 
S_I
, 
S_Z
, S_N,

105  
S_N
, 
S_I
, S_I, S_I,

106  
S_N
, 
S_F
, S_F, S_F,

107  
S_N
, 
S_F
, 
S_Z
, S_Z

110 c⁄° 
ªsu…_ty≥
[] =

115  
CMP
, CMP, CMP, CMP, CMP, 
LEN
, CMP, CMP,

116 
CMP
, CMP, CMP, CMP, CMP, CMP, CMP, CMP,

117  
CMP
, -1, -1, CMP, +1, 
LEN
, LEN, CMP,

118 +1, 
LEN
, LEN, 
CMP
, CMP, CMP, CMP, CMP,

119  
CMP
, CMP, CMP, CMP, CMP, 
LEN
, CMP, CMP,

120 
CMP
, CMP, CMP, CMP, CMP, CMP, CMP, CMP,

121  
CMP
, +1, +1, CMP, -1, CMP, CMP, CMP,

122 -1, 
CMP
, CMP, CMP

125 i‡(
p1
 =
p2
)

128 
c1
 = *
p1
++;

129 
c2
 = *
p2
++;

131 
°©e
 = 
S_N
 | ((
c1
 ='0'Ë+ (
	`isdigô
 (c1) != 0));

133 (
diff
 = 
c1
 - 
c2
) == 0 && c1 != '\0')

135 
°©e
 = 
√xt_°©e
[state];

136 
c1
 = *
p1
++;

137 
c2
 = *
p2
++;

138 
°©e
 |(
c1
 ='0'Ë+ (
	`isdigô
 (c1) != 0);

141 
°©e
 = 
ªsu…_ty≥
[°©ê<< 2 | (((
c2
 ='0'Ë+ (
	`isdigô
 (c2) != 0)))];

143 
°©e
)

145 
CMP
:

146  
diff
;

148 
LEN
:

149 
	`isdigô
 (*
p1
++))

150 i‡(!
	`isdigô
 (*
p2
++))

153  
	`isdigô
 (*
p2
Ë? -1 : 
diff
;

156  
°©e
;

158 
	}
}

	@lib/test_fileutils.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~"fûeutûs.h
"

5 
	$maö
(
¨gc
, *
¨gv
[])

7 
	`©exô
(
˛o£_°dout
);

8 
	`¥ötf
("Hello, World!\n");

9  
EXIT_SUCCESS
;

10 
	}
}

	@lib/test_nsutils.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

4 
	~"nsutûs.h
"

6 c⁄° *
	$gë_ns_«me
(
id
)

8  
NULL
;

9 
	}
}

11 
	$maö
(
¨gc
, *
¨gv
[])

13 
	`¥ötf
("Hello, World!\n");

14  
EXIT_SUCCESS
;

15 
	}
}

	@lib/test_process.c

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<uni°d.h
>

23 
	~<sig«l.h
>

24 #ifde‡
__löux__


25 
	~<sys/¥˘l.h
>

27 
	~"c.h
"

29 
	#DEFAULT_SLEEPTIME
 300

	)

30 
	#MY_NAME
 "•c‹p"

	)

32 
	$ußge
()

34 
	`Ârötf
(
°dîr
, " %†[›ti⁄s]\n", 
¥ogøm_övoˇti⁄_sh‹t_«me
);

35 
	`Ârötf
(
°dîr
, " -s <seconds>\n");

36 
	`exô
(
EXIT_FAILURE
);

37 
	}
}

41 
	$sig«l_h™dÀr
(
signum
)

43 
signum
) {

44 
SIGUSR1
:

45 
	`¥ötf
("SIG SIGUSR1\n");

47 
SIGUSR2
:

48 
	`¥ötf
("SIG SIGUSR2\n");

51 
	`¥ötf
("SIG unknown\n");

52 
	`exô
(
EXIT_FAILURE
);

54 
	}
}

56 
	$maö
(
¨gc
, *
¨gv
[])

58 
¶ìp_time
, 
›t
;

59 
siga˘i⁄
 
sig«l_a˘i⁄
;

61 
¶ìp_time
 = 
DEFAULT_SLEEPTIME
;

62 (
›t
 = 
	`gë›t
(
¨gc
, 
¨gv
, "s:")) != -1) {

63 
›t
) {

65 
¶ìp_time
 = 
	`©oi
(
›èrg
);

66 i‡(
¶ìp_time
 < 1) {

67 
	`Ârötf
(
°dîr
, "sleepÅime must be 1 second or more\n");

68 
	`ußge
();

72 
	`ußge
();

77 
sig«l_a˘i⁄
.
ß_h™dÀr
 = 
sig«l_h™dÀr
;

78 
	`sigem±y£t
 (&
sig«l_a˘i⁄
.
ß_mask
);

79 
sig«l_a˘i⁄
.
ß_Êags
 = 0;

80 
	`siga˘i⁄
(
SIGUSR1
, &
sig«l_a˘i⁄
, 
NULL
);

81 
	`siga˘i⁄
(
SIGUSR2
, &
sig«l_a˘i⁄
, 
NULL
);

83 #ifde‡
__löux__


85 
	`¥˘l
(
PR_SET_NAME
, 
MY_NAME
, 
NULL
, NULL, NULL);

88 
¶ìp_time
 > 0) {

89 
¶ìp_time
 = 
	`¶ìp
(sleep_time);

91  
EXIT_SUCCESS
;

92 
	}
}

	@lib/test_strtod_nol.c

1 
	~<Êﬂt.h
>

2 
	~<m©h.h
>

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~"°rutûs.h
"

7 
	s°πod_ã°s
 {

8 *
	m°rög
;

9 
	mªsu…
;

12 
°πod_ã°s
 
	gã°s
[] = {

26 {
NULL
, 0.0}

31 
	$maö
(
¨gc
, *
¨gv
[])

33 
i
;

34 
vÆ
;

36 
i
=0; 
ã°s
[i].
°rög
 !
NULL
; i++) {

37 
vÆ
 = 
	`°πod_nﬁ_‹_îr
(
ã°s
[
i
].
°rög
, "CannotÖarseÇumber");

38 if(
	`Ábs
(
ã°s
[
i
].
ªsu…
 - 
vÆ
Ë> 
DBL_EPSILON
) {

39 
	`Ârötf
(
°dîr
, "FAIL: strtod_nol_or_err(\"%s\") != %f\n",

40 
ã°s
[
i
].
°rög
,Åe°s[i].
ªsu…
);

41  
EXIT_FAILURE
;

45  
EXIT_SUCCESS
;

46 
	}
}

	@lib/test_strutils.c

23 
	~<°dlib.h
>

25 
	~"c.h
"

26 
	~"°rutûs.h
"

28 
	$maö
(
¨gc
, *
¨gv
[])

30 i‡(
¨gc
 < 2) {

31 
	`îr‹
(
EXIT_FAILURE
, 0, "noárguments");

32 } i‡(
¨gc
 < 3) {

33 
	`¥ötf
("%ld\n", 
	`°πﬁ_‹_îr
(
¨gv
[1], "strtol_or_err"));

35 
	`¥ötf
("%lf\n", 
	`°πod_‹_îr
(
¨gv
[2], "strtod_or_err"));

37  
EXIT_SUCCESS
;

38 
	}
}

	@pgrep.c

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<limôs.h
>

26 
	~<uni°d.h
>

27 
	~<˘y≥.h
>

28 
	~<°rög.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<sys/°©.h
>

31 
	~<f˙é.h
>

32 
	~<sig«l.h
>

33 
	~<pwd.h
>

34 
	~<gΩ.h
>

35 
	~<ªgex.h
>

36 
	~<î∫o.h
>

37 
	~<gë›t.h
>

41 
	#EXIT_USAGE
 2

	)

42 
	#EXIT_FATAL
 3

	)

43 
	#XALLOC_EXIT_CODE
 
EXIT_FATAL


	)

45 
	#CMDSTRSIZE
 4096

	)

47 
	~"c.h
"

48 
	~"fûeutûs.h
"

49 
	~"nsutûs.h
"

50 
	~"∆s.h
"

51 
	~"xÆloc.h
"

52 
	~"¥oc/ªad¥oc.h
"

53 
	~"¥oc/sig.h
"

54 
	~"¥oc/dev«me.h
"

55 
	~"¥oc/sysöfo.h
"

57 
	gi_am_pkûl
 = 0;

59 
	sñ
 {

60 
	mnum
;

61 * 
	m°r
;

66 
	g›t_fuŒ
 = 0;

67 
	g›t_l⁄g
 = 0;

68 
	g›t_l⁄gl⁄g
 = 0;

69 
	g›t_ﬁde°
 = 0;

70 
	g›t_√we°
 = 0;

71 
	g›t_√g©e
 = 0;

72 
	g›t_exa˘
 = 0;

73 
	g›t_cou¡
 = 0;

74 
	g›t_sig«l
 = 
SIGTERM
;

75 
	g›t_lock
 = 0;

76 
	g›t_ˇ£
 = 0;

77 
	g›t_echo
 = 0;

78 
	g›t_thªads
 = 0;

79 
pid_t
 
	g›t_ns_pid
 = 0;

81 c⁄° *
	g›t_dñim
 = "\n";

82 
ñ
 *
	g›t_pgΩ
 = 
NULL
;

83 
ñ
 *
	g›t_rgid
 = 
NULL
;

84 
ñ
 *
	g›t_pid
 = 
NULL
;

85 
ñ
 *
	g›t_µid
 = 
NULL
;

86 
ñ
 *
	g›t_sid
 = 
NULL
;

87 
ñ
 *
	g›t_ãrm
 = 
NULL
;

88 
ñ
 *
	g›t_euid
 = 
NULL
;

89 
ñ
 *
	g›t_ruid
 = 
NULL
;

90 
ñ
 *
	g›t_n¶i°
 = 
NULL
;

91 *
	g›t_∑âîn
 = 
NULL
;

92 *
	g›t_pidfûe
 = 
NULL
;

95 
	gns_Êags
 = 0x3f;

97 
__©åibuã__
 ((
__n‹ëu∫__
)Ë
	$ußge
(
›t
)

99 
îr
 = (
›t
 == '?');

100 
FILE
 *
Â
 = 
îr
 ? 
°dîr
 : 
°dout
;

102 
	`Âuts
(
USAGE_HEADER
, 
Â
);

103 
	`Ârötf
(
Â
, 
	`_
(" %†[›ti⁄s] <∑âîn>\n"), 
¥ogøm_övoˇti⁄_sh‹t_«me
);

104 
	`Âuts
(
USAGE_OPTIONS
, 
Â
);

105 i‡(
i_am_pkûl
 == 0) {

106 
	`Âuts
(
	`_
(" -d, --dñimôî <°rög> s≥cify ouçuàdñimôî\n"),
Â
);

107 
	`Âuts
(
	`_
(" -l, --li°-«mêÜi° PIDándÖro˚s†«me\n"),
Â
);

108 
	`Âuts
(
	`_
(" -a, --li°-fuŒÜi° PIDánd fuŒ comm™dÜöe\n"),
Â
);

109 
	`Âuts
(
	`_
(" -v, --övî£Çeg©e†thêm©chög\n"),
Â
);

110 
	`Âuts
(
	`_
(" -w, --lightweighàÜi°áŒ TID\n"), 
Â
);

112 i‡(
i_am_pkûl
 == 1) {

113 
	`Âuts
(
	`_
(" -<sig>, --sig«»<sig> sig«»tÿ£nd (eôhîÇumbî o∏«me)\n"), 
Â
);

114 
	`Âuts
(
	`_
(" -e, --echÿ di•œy wh© i†kûÀd\n"), 
Â
);

116 
	`Âuts
(
	`_
(" -c, --cou¡ cou¡ o‡m©chögÖro˚s£s\n"), 
Â
);

117 
	`Âuts
(
	`_
(" -f, --fuŒ u£ fuŒÖro˚s†«mêtÿm©ch\n"), 
Â
);

118 
	`Âuts
(
	`_
(" -g, --pgrou∞<PGID,...> m©chÜi°edÖro˚s†grou∞IDs\n"), 
Â
);

119 
	`Âuts
(
	`_
(" -G, --grou∞<GID,...> m©chÑó»grou∞IDs\n"), 
Â
);

120 
	`Âuts
(
	`_
(" -i, --ign‹e-ˇ£ m©ch ca£ in£nsôivñy\n"), 
Â
);

121 
	`Âuts
(
	`_
(" -n, --√we° sñe˘ mo°Ñe˚¡ly sèπed\n"), 
Â
);

122 
	`Âuts
(
	`_
(" -o, --ﬁde° sñe˘Üó°Ñe˚¡ly sèπed\n"), 
Â
);

123 
	`Âuts
(
	`_
(" -P, --∑ª¡ <PPID,...> m©ch o∆y chûdÖro˚s£†o‡thêgivíÖ¨ít\n"), 
Â
);

124 
	`Âuts
(
	`_
(" -s, --£ssi⁄ <SID,...> m©ch sessi⁄ IDs\n"), 
Â
);

125 
	`Âuts
(
	`_
(" -t, --ãrmöÆ <ây,...> m©ch by c⁄åﬁlögÅîmöÆ\n"), 
Â
);

126 
	`Âuts
(
	`_
(" -u, --euid <ID,...> m©ch byÉf„˘ivêIDs\n"), 
Â
);

127 
	`Âuts
(
	`_
(" -U, --uid <ID,...> m©ch byÑó»IDs\n"), 
Â
);

128 
	`Âuts
(
	`_
(" -x, --exa˘ m©chÉxa˘ly wôhÅhêcomm™dÇame\n"), 
Â
);

129 
	`Âuts
(
	`_
(" -F, --pidfûê<fûe>Ñód PID†‰om fûe\n"), 
Â
);

130 
	`Âuts
(
	`_
(" -L, --logpidfûê faû i‡PID fûêi†nŸÜocked\n"), 
Â
);

131 
	`Âuts
(
	`_
(" --ns <PID> matchÅheÖrocessesÅhat belongÅoÅhe same\n"

132 "Çame•a˚á†<pid>\n"), 
Â
);

133 
	`Âuts
(
	`_
(" --nslist <ns,...>Üist whichÇamespaces will be considered for\n"

135 " AvaûabÀÇame•a˚s: ipc, m¡,Çë,Öid, u£r, uts\n"), 
Â
);

136 
	`Âuts
(
USAGE_SEPARATOR
, 
Â
);

137 
	`Âuts
(
USAGE_HELP
, 
Â
);

138 
	`Âuts
(
USAGE_VERSION
, 
Â
);

139 
	`Ârötf
(
Â
, 
	`USAGE_MAN_TAIL
("pgrep(1)"));

141 
	`exô
(
Â
 =
°dîr
 ? 
EXIT_USAGE
 : 
EXIT_SUCCESS
);

142 
	}
}

144 
ñ
 *
	$•lô_li°
 (c⁄° *
ª°ri˘
 
°r
, (*
c⁄vît
)(c⁄° *, 
ñ
 *))

146 *
c›y
;

147 *
±r
;

148 *
£p_pos
;

149 
i
 = 0;

150 
size
 = 0;

151 
ñ
 *
li°
 = 
NULL
;

153 i‡(
°r
[0] == '\0')

154  
NULL
;

156 
c›y
 = 
	`x°rdup
 (
°r
);

157 
±r
 = 
c›y
;

160 i‡(
i
 =
size
) {

161 
size
 = size * 5 / 4 + 4;

163 
li°
 = 
	`xªÆloc
 (li°, (1 + 
size
) *  *list);

165 
£p_pos
 = 
	`°rchr
 (
±r
, ',');

166 i‡(
£p_pos
)

167 *
£p_pos
 = 0;

169 i‡(
li°
 && !
	`c⁄vît
 (
±r
, &li°[++
i
]))

170 
	`exô
 (
EXIT_USAGE
);

171 i‡(
£p_pos
)

172 
±r
 = 
£p_pos
 + 1;

173 } 
£p_pos
);

175 
	`‰ì
 (
c›y
);

176 i‡(!
i
) {

177 
	`‰ì
 (
li°
);

178 
li°
 = 
NULL
;

180 
li°
[0].
num
 = 
i
;

182  
li°
;

183 
	}
}

187 
	$°ri˘_©ﬁ
 (c⁄° *
ª°ri˘
 
°r
, *ª°ri˘ 
vÆue
)

189 
ªs
 = 0;

190 
sign
 = 1;

192 i‡(*
°r
 == '+')

193 ++
°r
;

194 i‡(*
°r
 == '-') {

195 ++
°r
;

196 
sign
 = -1;

199  ; *
°r
; ++str) {

200 i‡(! 
	`isdigô
 (*
°r
))

202 
ªs
 *= 10;

203 
ªs
 +*
°r
 - '0';

205 *
vÆue
 = 
sign
 * 
ªs
;

207 
	}
}

209 
	~<sys/fûe.h
>

213 
	$has_Êock
(
fd
)

215  
	`Êock
(
fd
, 
LOCK_SH
|
LOCK_NB
)==-1 && 
î∫o
==
EWOULDBLOCK
;

216 
	}
}

220 
	$has_f˙é
(
fd
)

222 
Êock
 
f
;

223 
f
.
l_ty≥
 = 
F_RDLCK
;

224 
f
.
l_whí˚
 = 
SEEK_SET
;

225 
f
.
l_°¨t
 = 0;

226 
f
.
l_Àn
 = 0;

227  
	`f˙é
(
fd
,
F_SETLK
,&
f
)==-1 && (
î∫o
==
EACCES
 ||Éºno==
EAGAIN
);

228 
	}
}

230 
ñ
 *
	$ªad_pidfûe
()

232 
buf
[12];

233 
fd
;

234 
°©
 
sbuf
;

235 *
ídp
;

236 
n
, 
pid
;

237 
ñ
 *
li°
 = 
NULL
;

239 
fd
 = 
	`›í
(
›t_pidfûe
, 
O_RDONLY
|
O_NOCTTY
|
O_NONBLOCK
);

240 if(
fd
<0)

241 
ju°_ªt
;

242 if(
	`f°©
(
fd
,&
sbuf
Ë|| !
	`S_ISREG
(sbuf.
°_mode
Ë|| sbuf.
°_size
<1)

243 
out
;

245 if(
›t_lock
 && !
	`has_Êock
(
fd
Ë&& !
	`has_f˙é
(fd))

246 
out
;

247 
	`mem£t
(
buf
,'\0', buf);

248 
n
 = 
	`ªad
(
fd
,
buf
+1, buf-2);

249 i‡(
n
<1)

250 
out
;

251 
pid
 = 
	`°πoul
(
buf
+1,&
ídp
,10);

252 if(
ídp
<=
buf
+1 || 
pid
<1 ||Öid>0x7fffffff)

253 
out
;

254 if(*
ídp
 && !
	`is•a˚
(*endp))

255 
out
;

256 
li°
 = 
	`xmÆloc
(2 *  *list);

257 
li°
[0].
num
 = 1;

258 
li°
[1].
num
 = 
pid
;

259 
out
:

260 
	`˛o£
(
fd
);

261 
ju°_ªt
:

262  
li°
;

263 
	}
}

265 
	$c⁄v_uid
 (c⁄° *
ª°ri˘
 
«me
, 
ñ
 *ª°ri˘ 
e
)

267 
∑sswd
 *
pwd
;

269 i‡(
	`°ri˘_©ﬁ
 (
«me
, &
e
->
num
))

272 
pwd
 = 
	`gëpw«m
 (
«me
);

273 i‡(
pwd
 =
NULL
) {

274 
	`xw¨nx
(
	`_
("övÆid u£∏«me: %s"), 
«me
);

277 
e
->
num
 = 
pwd
->
pw_uid
;

279 
	}
}

282 
	$c⁄v_gid
 (c⁄° *
ª°ri˘
 
«me
, 
ñ
 *ª°ri˘ 
e
)

284 
group
 *
gΩ
;

286 i‡(
	`°ri˘_©ﬁ
 (
«me
, &
e
->
num
))

289 
gΩ
 = 
	`gëg∫am
 (
«me
);

290 i‡(
gΩ
 =
NULL
) {

291 
	`xw¨nx
(
	`_
("övÆid grou∞«me: %s"), 
«me
);

294 
e
->
num
 = 
gΩ
->
gr_gid
;

296 
	}
}

299 
	$c⁄v_pgΩ
 (c⁄° *
ª°ri˘
 
«me
, 
ñ
 *ª°ri˘ 
e
)

301 i‡(! 
	`°ri˘_©ﬁ
 (
«me
, &
e
->
num
)) {

302 
	`xw¨nx
(
	`_
("övÆidÖro˚s†group: %s"), 
«me
);

305 i‡(
e
->
num
 == 0)

306 
e
->
num
 = 
	`gëpgΩ
 ();

308 
	}
}

311 
	$c⁄v_sid
 (c⁄° *
ª°ri˘
 
«me
, 
ñ
 *ª°ri˘ 
e
)

313 i‡(! 
	`°ri˘_©ﬁ
 (
«me
, &
e
->
num
)) {

314 
	`xw¨nx
(
	`_
("övÆid sessi⁄ id: %s"), 
«me
);

317 i‡(
e
->
num
 == 0)

318 
e
->
num
 = 
	`gësid
 (0);

320 
	}
}

323 
	$c⁄v_num
 (c⁄° *
ª°ri˘
 
«me
, 
ñ
 *ª°ri˘ 
e
)

325 i‡(! 
	`°ri˘_©ﬁ
 (
«me
, &
e
->
num
)) {

326 
	`xw¨nx
(
	`_
("nŸáÇumbî: %s"), 
«me
);

330 
	}
}

333 
	$c⁄v_°r
 (c⁄° *
ª°ri˘
 
«me
, 
ñ
 *ª°ri˘ 
e
)

335 
e
->
°r
 = 
	`x°rdup
 (
«me
);

337 
	}
}

340 
	$c⁄v_ns
 (c⁄° *
ª°ri˘
 
«me
, 
ñ
 *ª°ri˘ 
e
)

342 
rc
 = 
	`c⁄v_°r
(
«me
, 
e
);

343 
id
;

345 
ns_Êags
 = 0;

346 
id
 = 
	`gë_ns_id
(
«me
);

347 i‡(
id
 == -1)

349 
ns_Êags
 |(1 << 
id
);

351  
rc
;

352 
	}
}

354 
	$m©ch_numli°
 (
vÆue
, c⁄° 
ñ
 *
ª°ri˘
 
li°
)

356 
found
 = 0;

357 i‡(
li°
 =
NULL
)

358 
found
 = 0;

360 
i
;

361 
i
 = 
li°
[0].
num
; i > 0; i--) {

362 i‡(
li°
[
i
].
num
 =
vÆue
)

363 
found
 = 1;

366  
found
;

367 
	}
}

369 
	$m©ch_°æi°
 (c⁄° *
ª°ri˘
 
vÆue
, c⁄° 
ñ
 *ª°ri˘ 
li°
)

371 
found
 = 0;

372 i‡(
li°
 =
NULL
)

373 
found
 = 0;

375 
i
;

376 
i
 = 
li°
[0].
num
; i > 0; i--) {

377 i‡(! 
	`°rcmp
 (
li°
[
i
].
°r
, 
vÆue
))

378 
found
 = 1;

381  
found
;

382 
	}
}

384 
	$m©ch_ns
 (c⁄° 
¥oc_t
 *
èsk
, c⁄°Öroc_à*
ns_èsk
)

386 
found
 = 1;

387 
i
;

389 
i
 = 0; i < 
NUM_NS
; i++) {

390 i‡(
ns_Êags
 & (1 << 
i
)) {

391 i‡(
èsk
->
ns
[
i
] !
ns_èsk
->ns[i])

392 
found
 = 0;

396  
found
;

397 
	}
}

399 
	$ouçut_numli°
 (c⁄° 
ñ
 *
ª°ri˘
 
li°
, 
num
)

401 
i
;

402 c⁄° *
dñim
 = 
›t_dñim
;

403 
i
 = 0; i < 
num
; i++) {

404 if(
i
+1==
num
)

405 
dñim
 = "\n";

406 
	`¥ötf
 ("%ld%s", 
li°
[
i
].
num
, 
dñim
);

408 
	}
}

410 
	$ouçut_°æi°
 (c⁄° 
ñ
 *
ª°ri˘
 
li°
, 
num
)

413 
i
;

414 c⁄° *
dñim
 = 
›t_dñim
;

415 
i
 = 0; i < 
num
; i++) {

416 if(
i
+1==
num
)

417 
dñim
 = "\n";

418 
	`¥ötf
 ("%lu %s%s", 
li°
[
i
].
num
,Üi°[i].
°r
, 
dñim
);

420 
	}
}

422 
PROCTAB
 *
	$do_›í¥oc
 ()

424 
PROCTAB
 *
±p
;

425 
Êags
 = 0;

427 i‡(
›t_∑âîn
 || 
›t_fuŒ
 || 
›t_l⁄gl⁄g
)

428 
Êags
 |
PROC_FILLCOM
;

429 i‡(
›t_ruid
 || 
›t_rgid
)

430 
Êags
 |
PROC_FILLSTATUS
;

431 i‡(
›t_ﬁde°
 || 
›t_√we°
 || 
›t_pgΩ
 || 
›t_sid
 || 
›t_ãrm
)

432 
Êags
 |
PROC_FILLSTAT
;

433 i‡(!(
Êags
 & 
PROC_FILLSTAT
))

434 
Êags
 |
PROC_FILLSTATUS
;

435 i‡(
›t_ns_pid
)

436 
Êags
 |
PROC_FILLNS
;

437 i‡(
›t_euid
 && !
›t_√g©e
) {

438 
num
 = 
›t_euid
[0].num;

439 
i
 = 
num
;

440 
uid_t
 *
uids
 = 
	`xmÆloc
 (
num
 *  (uid_t));

441 
i
-- > 0) {

442 
uids
[
i
] = 
›t_euid
[i+1].
num
;

444 
Êags
 |
PROC_UID
;

445 
±p
 = 
	`›í¥oc
 (
Êags
, 
uids
, 
num
);

447 
±p
 = 
	`›í¥oc
 (
Êags
);

449  
±p
;

450 
	}
}

452 
ªgex_t
 * 
	$do_ªgcomp
 ()

454 
ªgex_t
 *
¥eg
 = 
NULL
;

456 i‡(
›t_∑âîn
) {

457 *
ª
;

458 
îrbuf
[256];

459 
ª_îr
;

461 
¥eg
 = 
	`xmÆloc
 ( (
ªgex_t
));

462 i‡(
›t_exa˘
) {

463 
ª
 = 
	`xmÆloc
 (
	`°æí
 (
›t_∑âîn
) + 5);

464 
	`•rötf
 (
ª
, "^(%s)$", 
›t_∑âîn
);

466 
ª
 = 
›t_∑âîn
;

469 
ª_îr
 = 
	`ªgcomp
 (
¥eg
, 
ª
, 
REG_EXTENDED
 | 
REG_NOSUB
 | 
›t_ˇ£
);

471 i‡(
›t_exa˘
Ë
	`‰ì
(
ª
);

473 i‡(
ª_îr
) {

474 
	`ªgîr‹
 (
ª_îr
, 
¥eg
, 
îrbuf
, (errbuf));

475 
	`Âuts
(
îrbuf
,
°dîr
);

476 
	`exô
 (
EXIT_USAGE
);

479  
¥eg
;

480 
	}
}

482 
ñ
 * 
	$£À˘_¥ocs
 (*
num
)

484 
PROCTAB
 *
±p
;

485 
¥oc_t
 
èsk
;

486 
ßved_°¨t_time
;

487 
pid_t
 
ßved_pid
 = 0;

488 
m©ches
 = 0;

489 
size
 = 0;

490 
ªgex_t
 *
¥eg
;

491 
pid_t
 
my£lf
 = 
	`gëpid
();

492 
ñ
 *
li°
 = 
NULL
;

493 
cmdlöe
[
CMDSTRSIZE
];

494 
cmd£¨ch
[
CMDSTRSIZE
];

495 
cmdouçut
[
CMDSTRSIZE
];

496 
¥oc_t
 
ns_èsk
;

498 
±p
 = 
	`do_›í¥oc
();

499 
¥eg
 = 
	`do_ªgcomp
();

501 i‡(
›t_√we°
Ë
ßved_°¨t_time
 = 0ULL;

502 
ßved_°¨t_time
 = ~0ULL;

504 i‡(
›t_√we°
Ë
ßved_pid
 = 0;

505 i‡(
›t_ﬁde°
Ë
ßved_pid
 = 
INT_MAX
;

506 i‡(
›t_ns_pid
 && 
	`ns_ªad
(›t_ns_pid, &
ns_èsk
)) {

507 
	`Âuts
(
	`_
("ErrorÑeadingÑeferenceÇamespace information\n"),

508 
°dîr
);

509 
	`exô
 (
EXIT_FATAL
);

512 
	`mem£t
(&
èsk
, 0,  (task));

513 
	`ªad¥oc
(
±p
, &
èsk
)) {

514 
m©ch
 = 1;

516 i‡(
èsk
.
XXXID
 =
my£lf
)

518 i‡(
›t_√we°
 && 
èsk
.
°¨t_time
 < 
ßved_°¨t_time
)

519 
m©ch
 = 0;

520 i‡(
›t_ﬁde°
 && 
èsk
.
°¨t_time
 > 
ßved_°¨t_time
)

521 
m©ch
 = 0;

522 i‡(
›t_µid
 && ! 
	`m©ch_numli°
 (
èsk
.
µid
, opt_ppid))

523 
m©ch
 = 0;

524 i‡(
›t_pid
 && ! 
	`m©ch_numli°
 (
èsk
.
tgid
, opt_pid))

525 
m©ch
 = 0;

526 i‡(
›t_pgΩ
 && ! 
	`m©ch_numli°
 (
èsk
.
pgΩ
, opt_pgrp))

527 
m©ch
 = 0;

528 i‡(
›t_euid
 && ! 
	`m©ch_numli°
 (
èsk
.
euid
, opt_euid))

529 
m©ch
 = 0;

530 i‡(
›t_ruid
 && ! 
	`m©ch_numli°
 (
èsk
.
ruid
, opt_ruid))

531 
m©ch
 = 0;

532 i‡(
›t_rgid
 && ! 
	`m©ch_numli°
 (
èsk
.
rgid
, opt_rgid))

533 
m©ch
 = 0;

534 i‡(
›t_sid
 && ! 
	`m©ch_numli°
 (
èsk
.
£ssi⁄
, opt_sid))

535 
m©ch
 = 0;

536 i‡(
›t_ns_pid
 && ! 
	`m©ch_ns
 (&
èsk
, &
ns_èsk
))

537 
m©ch
 = 0;

538 i‡(
›t_ãrm
) {

539 i‡(
èsk
.
ây
 == 0) {

540 
m©ch
 = 0;

542 
ây
[256];

543 
	`dev_to_ây
 (
ây
, (tty) - 1,

544 
èsk
.
ây
,Åask.
XXXID
, 
ABBREV_DEV
);

545 
m©ch
 = 
	`m©ch_°æi°
 (
ây
, 
›t_ãrm
);

548 i‡(
èsk
.
cmdlöe
 && (
›t_l⁄gl⁄g
 || 
›t_fuŒ
) ) {

549 
i
 = 0;

550 
byãs
 =  (
cmdlöe
) - 1;

553 
cmdlöe
[
byãs
] = 0;

555 --
byãs
;

557 
	`°∫˝y
 (
cmdlöe
, 
èsk
.cmdlöe[
i
], 
byãs
);

558 
byãs
 -
	`°æí
 (
èsk
.
cmdlöe
[
i
++]);

559 
èsk
.
cmdlöe
[
i
] && 
byãs
 > 0) {

560 
	`°∫ˇt
 (
cmdlöe
, " ", 
byãs
);

561 
	`°∫ˇt
 (
cmdlöe
, 
èsk
.cmdlöe[
i
], 
byãs
);

562 
byãs
 -
	`°æí
 (
èsk
.
cmdlöe
[
i
++]) + 1;

566 i‡(
›t_l⁄g
 || 
›t_l⁄gl⁄g
 || (
m©ch
 && 
›t_∑âîn
)) {

567 i‡(
›t_l⁄gl⁄g
 && 
èsk
.
cmdlöe
)

568 
	`°∫˝y
 (
cmdouçut
, 
cmdlöe
, 
CMDSTRSIZE
);

570 
	`°∫˝y
 (
cmdouçut
, 
èsk
.
cmd
, 
CMDSTRSIZE
);

573 i‡(
m©ch
 && 
›t_∑âîn
) {

574 i‡(
›t_fuŒ
 && 
èsk
.
cmdlöe
)

575 
	`°∫˝y
 (
cmd£¨ch
, 
cmdlöe
, 
CMDSTRSIZE
);

577 
	`°∫˝y
 (
cmd£¨ch
, 
èsk
.
cmd
, 
CMDSTRSIZE
);

579 i‡(
	`ªgexec
 (
¥eg
, 
cmd£¨ch
, 0, 
NULL
, 0) != 0)

580 
m©ch
 = 0;

583 i‡(
m©ch
 ^ 
›t_√g©e
) {

584 i‡(
›t_√we°
) {

585 i‡(
ßved_°¨t_time
 =
èsk
.
°¨t_time
 &&

586 
ßved_pid
 > 
èsk
.
XXXID
)

588 
ßved_°¨t_time
 = 
èsk
.
°¨t_time
;

589 
ßved_pid
 = 
èsk
.
XXXID
;

590 
m©ches
 = 0;

592 i‡(
›t_ﬁde°
) {

593 i‡(
ßved_°¨t_time
 =
èsk
.
°¨t_time
 &&

594 
ßved_pid
 < 
èsk
.
XXXID
)

596 
ßved_°¨t_time
 = 
èsk
.
°¨t_time
;

597 
ßved_pid
 = 
èsk
.
XXXID
;

598 
m©ches
 = 0;

600 i‡(
m©ches
 =
size
) {

601 
size
 = size * 5 / 4 + 4;

602 
li°
 = 
	`xªÆloc
÷i°, 
size
 *  *list);

604 i‡(
li°
 && (
›t_l⁄g
 || 
›t_l⁄gl⁄g
 || 
›t_echo
)) {

605 
li°
[
m©ches
].
num
 = 
èsk
.
XXXID
;

606 
li°
[
m©ches
++].
°r
 = 
	`x°rdup
 (
cmdouçut
);

607 } i‡(
li°
) {

608 
li°
[
m©ches
++].
num
 = 
èsk
.
XXXID
;

610 
	`xîrx
(
EXIT_FAILURE
, 
	`_
("internalÉrror"));

617 i‡(
›t_thªads
 && !
i_am_pkûl
) {

618 
¥oc_t
 
subèsk
;

619 
	`mem£t
(&
subèsk
, 0,  (subtask));

620 
	`ªadèsk
(
±p
, &
èsk
, &
subèsk
)){

622 i‡(
èsk
.
XXXID
 =
subèsk
.XXXID)

626 i‡(
m©ches
 =
size
) {

627 
size
 = size * 5 / 4 + 4;

628 
li°
 = 
	`ªÆloc
÷i°, 
size
 *  *list);

629 i‡(
li°
 =
NULL
)

630 
	`exô
 (
EXIT_FATAL
);

632 i‡(
›t_l⁄g
 || 
›t_l⁄gl⁄g
) {

633 
li°
[
m©ches
].
°r
 = 
	`x°rdup
 (
cmdouçut
);

634 
li°
[
m©ches
++].
num
 = 
subèsk
.
XXXID
;

636 
li°
[
m©ches
++].
num
 = 
subèsk
.
XXXID
;

638 
	`mem£t
(&
subèsk
, 0,  (subtask));

650 
	`mem£t
 (&
èsk
, 0,  (task));

652 
	`˛o£¥oc
 (
±p
);

653 *
num
 = 
m©ches
;

655 i‡((!
m©ches
Ë&& (!
›t_fuŒ
Ë&& (
	`°æí
(
›t_∑âîn
) > 15))

656 
	`xw¨nx
(
	`_
("patternÅhat searches forÖrocessÇameÜongerÅhan 15 characters willÑesult in zero matches\n"

658 
¥ogøm_övoˇti⁄_sh‹t_«me
);

659  
li°
;

660 
	}
}

662 
	$sig«l_›ti⁄
(*
¨gc
, **
¨gv
)

664 
sig
;

665 
i
;

666 
i
 = 1; i < *
¨gc
; i++) {

667 i‡(
¨gv
[
i
][0] == '-') {

668 
sig
 = 
	`sig«l_«me_to_numbî
(
¨gv
[
i
] + 1);

669 i‡(-1 < 
sig
) {

670 
	`memmove
(
¨gv
 + 
i
,árgv + i + 1,

671 (*Ë* (*
¨gc
 - 
i
));

672 (*
¨gc
)--;

673  
sig
;

678 
	}
}

680 
	$∑r£_›ts
 (
¨gc
, **
¨gv
)

682 
›ts
[64] = "";

683 
›t
;

684 
¸ôîü_cou¡
 = 0;

687 
SIGNAL_OPTION
 = 
CHAR_MAX
 + 1,

688 
NS_OPTION
,

689 
NSLIST_OPTION
,

691 c⁄° 
›ti⁄
 
l⁄g›ts
[] = {

692 {"sig«l", 
ªquúed_¨gumít
, 
NULL
, 
SIGNAL_OPTION
},

693 {"cou¡", 
no_¨gumít
, 
NULL
, 'c'},

694 {"dñimôî", 
ªquúed_¨gumít
, 
NULL
, 'd'},

695 {"li°-«me", 
no_¨gumít
, 
NULL
, 'l'},

696 {"li°-fuŒ", 
no_¨gumít
, 
NULL
, 'a'},

697 {"fuŒ", 
no_¨gumít
, 
NULL
, 'f'},

698 {"pgroup", 
ªquúed_¨gumít
, 
NULL
, 'g'},

699 {"group", 
ªquúed_¨gumít
, 
NULL
, 'G'},

700 {"ign‹e-ˇ£", 
no_¨gumít
, 
NULL
, 'i'},

701 {"√we°", 
no_¨gumít
, 
NULL
, 'n'},

702 {"ﬁde°", 
no_¨gumít
, 
NULL
, 'o'},

703 {"∑ª¡", 
ªquúed_¨gumít
, 
NULL
, 'P'},

704 {"£ssi⁄", 
ªquúed_¨gumít
, 
NULL
, 's'},

705 {"ãrmöÆ", 
ªquúed_¨gumít
, 
NULL
, 't'},

706 {"euid", 
ªquúed_¨gumít
, 
NULL
, 'u'},

707 {"uid", 
ªquúed_¨gumít
, 
NULL
, 'U'},

708 {"övî£", 
no_¨gumít
, 
NULL
, 'v'},

709 {"lightweight", 
no_¨gumít
, 
NULL
, 'w'},

710 {"exa˘", 
no_¨gumít
, 
NULL
, 'x'},

711 {"pidfûe", 
ªquúed_¨gumít
, 
NULL
, 'F'},

712 {"logpidfûe", 
no_¨gumít
, 
NULL
, 'L'},

713 {"echo", 
no_¨gumít
, 
NULL
, 'e'},

714 {"ns", 
ªquúed_¨gumít
, 
NULL
, 
NS_OPTION
},

715 {"n¶i°", 
ªquúed_¨gumít
, 
NULL
, 
NSLIST_OPTION
},

716 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

717 {"vîsi⁄", 
no_¨gumít
, 
NULL
, 'V'},

718 {
NULL
, 0, NULL, 0}

721 i‡(
	`°r°r
 (
¥ogøm_övoˇti⁄_sh‹t_«me
, "pkill")) {

722 
sig
;

723 
i_am_pkûl
 = 1;

724 
sig
 = 
	`sig«l_›ti⁄
(&
¨gc
, 
¨gv
);

725 i‡(-1 < 
sig
)

726 
›t_sig«l
 = 
sig
;

728 
	`°rˇt
 (
›ts
, "e");

731 
	`°rˇt
 (
›ts
, "lad:vw");

734 
	`°rˇt
 (
›ts
, "LF:cfinoxP:g:s:u:U:G:t:?Vh");

736 (
›t
 = 
	`gë›t_l⁄g
 (
¨gc
, 
¨gv
, 
›ts
, 
l⁄g›ts
, 
NULL
)) != -1) {

737 
›t
) {

738 
SIGNAL_OPTION
:

739 
›t_sig«l
 = 
	`sig«l_«me_to_numbî
 (
›èrg
);

740 i‡(
›t_sig«l
 =-1 && 
	`isdigô
 (
›èrg
[0]))

741 
›t_sig«l
 = 
	`©oi
 (
›èrg
);

744 
›t_echo
 = 1;

749 
›t_pidfûe
 = 
	`x°rdup
 (
›èrg
);

750 ++
¸ôîü_cou¡
;

753 
›t_rgid
 = 
	`•lô_li°
 (
›èrg
, 
c⁄v_gid
);

754 i‡(
›t_rgid
 =
NULL
)

755 
	`ußge
 ('?');

756 ++
¸ôîü_cou¡
;

763 
›t_lock
++;

770 
›t_µid
 = 
	`•lô_li°
 (
›èrg
, 
c⁄v_num
);

771 i‡(
›t_µid
 =
NULL
)

772 
	`ußge
 ('?');

773 ++
¸ôîü_cou¡
;

780 
›t_ruid
 = 
	`•lô_li°
 (
›èrg
, 
c⁄v_uid
);

781 i‡(
›t_ruid
 =
NULL
)

782 
	`ußge
 ('?');

783 ++
¸ôîü_cou¡
;

786 
	`¥ötf
(
PROCPS_NG_VERSION
);

787 
	`exô
(
EXIT_SUCCESS
);

791 
›t_cou¡
 = 1;

794 
›t_dñim
 = 
	`x°rdup
 (
›èrg
);

797 
›t_fuŒ
 = 1;

800 
›t_pgΩ
 = 
	`•lô_li°
 (
›èrg
, 
c⁄v_pgΩ
);

801 i‡(
›t_pgΩ
 =
NULL
)

802 
	`ußge
 ('?');

803 ++
¸ôîü_cou¡
;

806 i‡(
›t_ˇ£
)

807 
	`ußge
 (
›t
);

808 
›t_ˇ£
 = 
REG_ICASE
;

813 
›t_l⁄g
 = 1;

816 
›t_l⁄gl⁄g
 = 1;

819 i‡(
›t_ﬁde°
|
›t_√g©e
|
›t_√we°
)

820 
	`ußge
 ('?');

821 
›t_√we°
 = 1;

822 ++
¸ôîü_cou¡
;

825 i‡(
›t_ﬁde°
|
›t_√g©e
|
›t_√we°
)

826 
	`ußge
 ('?');

827 
›t_ﬁde°
 = 1;

828 ++
¸ôîü_cou¡
;

831 
›t_sid
 = 
	`•lô_li°
 (
›èrg
, 
c⁄v_sid
);

832 i‡(
›t_sid
 =
NULL
)

833 
	`ußge
 ('?');

834 ++
¸ôîü_cou¡
;

837 
›t_ãrm
 = 
	`•lô_li°
 (
›èrg
, 
c⁄v_°r
);

838 i‡(
›t_ãrm
 =
NULL
)

839 
	`ußge
 ('?');

840 ++
¸ôîü_cou¡
;

843 
›t_euid
 = 
	`•lô_li°
 (
›èrg
, 
c⁄v_uid
);

844 i‡(
›t_euid
 =
NULL
)

845 
	`ußge
 ('?');

846 ++
¸ôîü_cou¡
;

849 i‡(
›t_ﬁde°
|
›t_√g©e
|
›t_√we°
)

850 
	`ußge
 ('?');

851 
›t_√g©e
 = 1;

854 
›t_thªads
 = 1;

858 
›t_exa˘
 = 1;

862 
NS_OPTION
:

863 
›t_ns_pid
 = 
	`©oi
(
›èrg
);

864 i‡(
›t_ns_pid
 == 0)

865 
	`ußge
 ('?');

866 ++
¸ôîü_cou¡
;

868 
NSLIST_OPTION
:

869 
›t_n¶i°
 = 
	`•lô_li°
 (
›èrg
, 
c⁄v_ns
);

870 i‡(
›t_n¶i°
 =
NULL
)

871 
	`ußge
 ('?');

875 
	`ußge
 (
›t
);

880 if(
›t_lock
 && !
›t_pidfûe
)

881 
	`xîrx
(
EXIT_USAGE
, 
	`_
("-L without -F makesÇo sense\n"

883 
¥ogøm_övoˇti⁄_sh‹t_«me
);

885 if(
›t_pidfûe
){

886 
›t_pid
 = 
	`ªad_pidfûe
();

887 if(!
›t_pid
)

888 
	`xîrx
(
EXIT_FAILURE
, 
	`_
("pidfileÇot valid\n"

890 
¥ogøm_övoˇti⁄_sh‹t_«me
);

893 i‡(
¨gc
 - 
›töd
 == 1)

894 
›t_∑âîn
 = 
¨gv
[
›töd
];

895 i‡(
¨gc
 - 
›töd
 > 1)

896 
	`xîrx
(
EXIT_USAGE
, 
	`_
("only oneÖattern can beÖrovided\n"

898 
¥ogøm_övoˇti⁄_sh‹t_«me
);

899 i‡(
¸ôîü_cou¡
 == 0)

900 
	`xîrx
(
EXIT_USAGE
, 
	`_
("no matching criteria specified\n"

902 
¥ogøm_övoˇti⁄_sh‹t_«me
);

903 
	}
}

906 
	$maö
 (
¨gc
, **
¨gv
)

908 
ñ
 *
¥ocs
;

909 
num
;

911 #ifde‡
HAVE_PROGRAM_INVOCATION_NAME


912 
¥ogøm_övoˇti⁄_«me
 = 
¥ogøm_övoˇti⁄_sh‹t_«me
;

914 
	`£éoˇÀ
 (
LC_ALL
, "");

915 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

916 
	`ãxtdomaö
(
PACKAGE
);

917 
	`©exô
(
˛o£_°dout
);

919 
	`∑r£_›ts
 (
¨gc
, 
¨gv
);

921 
¥ocs
 = 
	`£À˘_¥ocs
 (&
num
);

922 i‡(
i_am_pkûl
) {

923 
i
;

924 
kûl_cou¡
 = 0;

925 
i
 = 0; i < 
num
; i++) {

926 i‡(
	`kûl
 (
¥ocs
[
i
].
num
, 
›t_sig«l
) != -1) {

927 i‡(
›t_echo
)

928 
	`¥ötf
(
	`_
("%†kûÀd (pid %lu)\n"), 
¥ocs
[
i
].
°r
,Örocs[i].
num
);

929 
kûl_cou¡
++;

932 i‡(
î∫o
==
ESRCH
)

935 
	`xw¨n
(
	`_
("kûlögÖid %ld faûed"), 
¥ocs
[
i
].
num
);

937 i‡(
›t_cou¡
)

938 
	`Ârötf
(
°dout
, "%d\n", 
num
);

939  !
kûl_cou¡
;

941 i‡(
›t_cou¡
) {

942 
	`Ârötf
(
°dout
, "%d\n", 
num
);

944 i‡(
›t_l⁄g
 || 
›t_l⁄gl⁄g
)

945 
	`ouçut_°æi°
 (
¥ocs
,
num
);

947 
	`ouçut_numli°
 (
¥ocs
,
num
);

950  !
num
;

951 
	}
}

	@pidof.c

21 
	~<°dio.h
>

22 
	~<gë›t.h
>

24 
	~"c.h
"

25 
	~"fûeutûs.h
"

26 
	~"∆s.h
"

27 
	~"xÆloc.h
"

28 
	~"¥oc/ªad¥oc.h
"

29 
	~"¥oc/vîsi⁄.h
"

32 
	#grow_size
(
x
Ë(x = x * 5 / 4 + 1024)

	)

33 
	#ß„_‰ì
(
x
Ëi‡(xË{ 
	`‰ì
(x); x=
NULL
; }

	)

36 
	sñ
 {

37 
pid_t
 
	mpid
;

40 
ñ
 *
	g¥ocs
 = 
NULL
;

41 
	g¥oc_cou¡
 = 0;

43 
ñ
 *
	gomôãd_¥ocs
 = 
NULL
;

44 
	gomô_cou¡
 = 0;

46 *
	g¥ogøm
 = 
NULL
;

49 
	g›t_sögÀ_shŸ
 = 0;

50 
	g›t_s¸ùts_too
 = 0;

51 
	g›t_roŸdú_check
 = 0;

53 *
	gpidof_roŸ
 = 
NULL
;

55 
__©åibuã__
 ((
__n‹ëu∫__
)Ë
	$ußge
(
›t
)

57 
îr
 = (
›t
 == '?');

58 
FILE
 *
Â
 = 
îr
 ? 
°dîr
 : 
°dout
;

60 
	`Âuts
(
USAGE_HEADER
, 
Â
);

61 
	`Ârötf
(
Â
, 
	`_
(" %†[›ti⁄s] [¥ogøm [...]]\n"), 
¥ogøm_övoˇti⁄_sh‹t_«me
);

62 
	`Âuts
(
USAGE_OPTIONS
, 
Â
);

63 
	`Âuts
(
	`_
(" -s, --sögÀ-shŸÑëu∫ o√ PID o∆y\n"), 
Â
);

64 
	`Âuts
(
	`_
(" -c, --check-roŸ omôÖro˚s£†wôh dif„ª¡ÑoŸ\n"), 
Â
);

65 
	`Âuts
(
	`_
(" -xálsÿföd shñl†ru¬ögÅhê«med s¸ùts\n"), 
Â
);

66 
	`Âuts
(
	`_
(" -o, --omô-pid <PID,...> omôÖro˚s£†wôh PID\n"), 
Â
);

67 
	`Âuts
(
USAGE_SEPARATOR
, 
Â
);

68 
	`Âuts
(
USAGE_HELP
, 
Â
);

69 
	`Âuts
(
USAGE_VERSION
, 
Â
);

70 
	`Ârötf
(
Â
, 
	`USAGE_MAN_TAIL
("pidof(1)"));

72 
	`exô
(
Â
 =
°dîr
 ? 
EXIT_FAILURE
 : 
EXIT_SUCCESS
);

73 
	}
}

76 
	$is_omôãd
 (
pid_t
 
pid
)

78 
i
;

80 
i
 = 0; i < 
omô_cou¡
; i++) {

81 i‡(
pid
 =
omôãd_¥ocs
[
i
].pid)  1;

85 
	}
}

88 *
	$gë_ba£«me
 (*
fûíame
)

90 *
pos
;

91 *
ªsu…
;

93 
pos
 = 
ªsu…
 = 
fûíame
;

94 *
pos
 != '\0') {

95 i‡(*(
pos
++Ë='/'Ë
ªsu…
 =Öos;

98  
ªsu…
;

99 
	}
}

102 *
	$pid_lök
 (
pid_t
 
pid
, c⁄° *
ba£_«me
)

104 
lök
 [
PROCPATHLEN
];

105 *
ªsu…
;

106 
ssize_t
 
∑th_Æloc_size
;

107 
ssize_t
 
Àn
;

109 
	`¢¥ötf
(
lök
, ÷ök), "/¥oc/%d/%s", 
pid
, 
ba£_«me
);

111 
Àn
 = 
∑th_Æloc_size
 = 0;

112 
ªsu…
 = 
NULL
;

114 
	`grow_size
(
∑th_Æloc_size
);

115 
ªsu…
 = 
	`xªÆloc
‘esu…, 
∑th_Æloc_size
);

117 i‡((
Àn
 = 
	`ªadlök
(
lök
, 
ªsu…
, 
∑th_Æloc_size
)) < 0) {

118 
Àn
 = 0;

122 } 
Àn
 =
∑th_Æloc_size
);

124 
ªsu…
[
Àn
] = '\0';

126  
ªsu…
;

127 
	}
}

130 
	$£À˘_¥ocs
 ()

132 
PROCTAB
 *
±p
;

133 
¥oc_t
 
èsk
;

134 
m©ch
;

135 
size
 = 0;

136 *
cmd_¨g0
, *
cmd_¨g0ba£
;

137 *
cmd_¨g1
, *
cmd_¨g1ba£
;

138 *
pos
;

139 *
¥ogøm_ba£
;

140 *
roŸ_lök
;

141 *
exe_lök
;

142 *
exe_lök_ba£
;

145 
¥ogøm_ba£
 = 
	`gë_ba£«me
(
¥ogøm
);

147 
±p
 = 
	`›í¥oc
 (
PROC_FILLCOM
 | 
PROC_FILLSTAT
);

149 
exe_lök
 = 
roŸ_lök
 = 
NULL
;

150 
	`mem£t
(&
èsk
, 0,  (task));

151 
	`ªad¥oc
(
±p
, &
èsk
)) {

153 i‡(
›t_roŸdú_check
) {

155 
roŸ_lök
 = 
	`pid_lök
(
èsk
.
XXXID
, "root");

156 
m©ch
 = !
	`°rcmp
(
pidof_roŸ
, 
roŸ_lök
);

157 
	`ß„_‰ì
(
roŸ_lök
);

159 i‡(!
m©ch
) {

160 
	`mem£t
 (&
èsk
, 0,  (task));

165 i‡(!
	`is_omôãd
(
èsk
.
XXXID
Ë&&Åask.
cmdlöe
) {

167 
cmd_¨g0
 = *
èsk
.
cmdlöe
;

170 i‡(*
cmd_¨g0
 == '-') {

171 
cmd_¨g0
++;

175 
cmd_¨g0ba£
 = 
	`gë_ba£«me
(
cmd_¨g0
);

178 
exe_lök
 = 
	`pid_lök
(
èsk
.
XXXID
, "exe");

181 
exe_lök_ba£
 = 
	`gë_ba£«me
(
exe_lök
);

183 
m©ch
 = 0;

185 i‡(!
	`°rcmp
(
¥ogøm
, 
cmd_¨g0ba£
) ||

186 !
	`°rcmp
(
¥ogøm_ba£
, 
cmd_¨g0
) ||

187 !
	`°rcmp
(
¥ogøm
, 
cmd_¨g0
) ||

189 !
	`°rcmp
(
¥ogøm
, 
exe_lök_ba£
) ||

190 !
	`°rcmp
(
¥ogøm
, 
exe_lök
))

192 
m©ch
 = 1;

194 } i‡(
›t_s¸ùts_too
 && *(
èsk
.
cmdlöe
+1)) {

196 
pos
 = 
cmd_¨g1ba£
 = 
cmd_¨g1
 = *(
èsk
.
cmdlöe
+1);

199 *
pos
 != '\0') {

200 i‡(*(
pos
++Ë='/'Ë
cmd_¨g1ba£
 =Öos;

204 i‡(
èsk
.
cmd
 &&

205 !
	`°∫cmp
(
èsk
.
cmd
, 
cmd_¨g1ba£
, 
	`°æí
(task.cmd)) &&

206 (!
	`°rcmp
(
¥ogøm
, 
cmd_¨g1ba£
) ||

207 !
	`°rcmp
(
¥ogøm_ba£
, 
cmd_¨g1
) ||

208 !
	`°rcmp
(
¥ogøm
, 
cmd_¨g1
)))

210 
m©ch
 = 1;

216 i‡(!
m©ch
 && 
	`°rchr
(
cmd_¨g0
, ' ')) {

217 
m©ch
 = (
	`°rcmp
(
¥ogøm
, 
èsk
.
cmd
)==0);

220 
	`ß„_‰ì
(
exe_lök
);

222 i‡(
m©ch
) {

223 i‡(
¥oc_cou¡
 =
size
) {

224 
	`grow_size
(
size
);

225 
¥ocs
 = 
	`xªÆloc
’rocs, 
size
 * ( *procs));

227 i‡(
¥ocs
) {

228 
¥ocs
[
¥oc_cou¡
++].
pid
 = 
èsk
.
XXXID
;

230 
	`xîrx
(
EXIT_FAILURE
, 
	`_
("internalÉrror"));

236 
	`mem£t
 (&
èsk
, 0,  (task));

239 
	`˛o£¥oc
 (
±p
);

240 
	}
}

243 
	$add_to_omô_li°
 (*
öput_¨g
)

245 
omô_size
 = 0;

247 *
omô_°r
;

248 *
íd±r
;

250 
pid_t
 
omô_pid
;

252 
omô_°r
 = 
NULL
;

253 
omô_°r
 = 
	`°πok
(
öput_¨g
, ",;:");

254 
omô_°r
) {

256 i‡(!
	`°rcmp
(
omô_°r
,"%PPID")) {

257 
omô_pid
 = 
	`gëµid
();

258 
íd±r
 = 
omô_°r
 + ("%PPID") - 1;

260 
omô_pid
 = 
	`°πoul
(
omô_°r
, &
íd±r
, 10);

263 i‡(*
íd±r
 == '\0') {

264 i‡(
omô_cou¡
 =
omô_size
) {

265 
	`grow_size
(
omô_size
);

266 
omôãd_¥ocs
 = 
	`xªÆloc
(omôãd_¥ocs, 
omô_size
 * (*omitted_procs));

268 i‡(
omôãd_¥ocs
) {

269 
omôãd_¥ocs
[
omô_cou¡
++].
pid
 = 
omô_pid
;

271 
	`xîrx
(
EXIT_FAILURE
, 
	`_
("internalÉrror"));

274 
	`xw¨nx
(
	`_
("ûÀgÆ omôÖid vÆuê(%s)!\n"), 
omô_°r
);

277 
omô_°r
 = 
	`°πok
(
NULL
, ",;:");

279 
	}
}

283 
	$maö
 (
¨gc
, **
¨gv
)

285 
›t
;

286 sig√d 
i
;

287 
found
 = 0;

288 
fú°_pid
 = 1;

290 c⁄° *
›ts
 = "scnxmo:?Vh";

292 c⁄° 
›ti⁄
 
l⁄g›ts
[] = {

293 {"check-roŸ", 
no_¨gumít
, 
NULL
, 'c'},

294 {"sögÀ-shŸ", 
no_¨gumít
, 
NULL
, 's'},

295 {"omô-pid", 
ªquúed_¨gumít
, 
NULL
, 'o'},

296 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

297 {"vîsi⁄", 
no_¨gumít
, 
NULL
, 'V'},

298 {
NULL
, 0, NULL, 0}

301 #ifde‡
HAVE_PROGRAM_INVOCATION_NAME


302 
¥ogøm_övoˇti⁄_«me
 = 
¥ogøm_övoˇti⁄_sh‹t_«me
;

304 
	`£éoˇÀ
 (
LC_ALL
, "");

305 
	`bödãxtdomaö
 (
PACKAGE
, 
LOCALEDIR
);

306 
	`ãxtdomaö
 (
PACKAGE
);

307 
	`©exô
 (
˛o£_°dout
);

310 (
›t
 = 
	`gë›t_l⁄g
 (
¨gc
, 
¨gv
, 
›ts
, 
l⁄g›ts
, 
NULL
)) != -1) {

311 
›t
) {

313 
›t_sögÀ_shŸ
 = 1;

316 
	`add_to_omô_li°
 (
›èrg
);

319 
›t_s¸ùts_too
 = 1;

322 i‡(
	`gëeuid
() == 0) {

323 
›t_roŸdú_check
 = 1;

324 
pidof_roŸ
 = 
	`pid_lök
(
	`gëpid
(), "root");

328 
	`¥ötf
 (
PROCPS_NG_VERSION
);

329 
	`exô
 (
EXIT_SUCCESS
);

332 
	`ußge
 (
›t
);

346 
¨gc
 - 
›töd
) {

348 
¥ogøm
 = 
¨gv
[
›töd
++];

350 
	`£À˘_¥ocs
();

352 i‡(
¥oc_cou¡
) {

354 
found
 = 1;

355 
i
 = 
¥oc_cou¡
 - 1; i >= 0; i--) {

356 i‡(
fú°_pid
) {

357 
fú°_pid
 = 0;

358 
	`¥ötf
 ("%ld", (Ë
¥ocs
[
i
].
pid
);

360 
	`¥ötf
 (" %ld", (Ë
¥ocs
[
i
].
pid
);

362 i‡(
›t_sögÀ_shŸ
) ;

365 
¥oc_cou¡
 = 0;

370 i‡(
found
Ë
	`¥ötf
("\n");

373 
	`ß„_‰ì
(
¥ocs
);

374 
	`ß„_‰ì
(
omôãd_¥ocs
);

375 
	`ß„_‰ì
(
pidof_roŸ
);

377  !
found
;

378 
	}
}

	@pmap.c

20 
	~<˘y≥.h
>

21 
	~<î∫o.h
>

22 
	~<f˙é.h
>

23 
	~<gë›t.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

27 
	~<sys/ùc.h
>

28 
	~<sys/shm.h
>

29 
	~<sys/°©.h
>

30 
	~<sys/ty≥s.h
>

31 
	~<uni°d.h
>

32 
	~<as£π.h
>

34 
	~"c.h
"

35 
	~"fûeutûs.h
"

36 
	~"∆s.h
"

37 
	~"¥oc/esˇ≥.h
"

38 
	~"xÆloc.h
"

39 
	~"¥oc/ªad¥oc.h
"

40 
	~"¥oc/vîsi⁄.h
"

42 c⁄° *
	g∆s_Addªss
,

43 *
	g∆s_Off£t
,

44 *
	g∆s_Devi˚
,

45 *
	g∆s_M≠pög
,

46 *
	g∆s_Pîm
,

47 *
	g∆s_Inode
,

48 *
	g∆s_Kbyãs
,

49 *
	g∆s_Mode
,

50 *
	g∆s_RSS
,

51 *
	g∆s_Dúty
;

53 
	$∆s_öôülize
()

55 
	`£éoˇÀ
 (
LC_ALL
, "");

56 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

57 
	`ãxtdomaö
(
PACKAGE
);

61 
∆s_Addªss
 = 
	`_
("Address");

62 
∆s_Off£t
 = 
	`_
("Offset");

63 
∆s_Devi˚
 = 
	`_
("Device");

64 
∆s_M≠pög
 = 
	`_
("Mapping");

68 
∆s_Pîm
 = 
	`_
("Perm");

69 
∆s_Inode
 = 
	`_
("Inode");

72 
∆s_Kbyãs
 = 
	`_
("Kbytes");

73 
∆s_Mode
 = 
	`_
("Mode");

74 
∆s_RSS
 = 
	`_
("RSS");

75 
∆s_Dúty
 = 
	`_
("Dirty");

76 
	}
}

78 
	$ju°ify_¥öt
(c⁄° *
°r
, 
width
, 
right
)

80 i‡(
width
 < 1)

81 
	`puts
(
°r
);

83 
Àn
 = 
	`°æí
(
°r
);

84 i‡(
width
 < 
Àn
) width =Üen;

85 
	`¥ötf
(
right
 ? "%*.*†" : "%-*.*†", 
width
, width, 
°r
);

87  
width
;

88 
	}
}

90 
	$öãgî_width
(
KLONG
 
numbî
)

92 
ªsu…
;

94 
ªsu…
 = !(
numbî
 > 0);

95 
numbî
) {

96 
ªsu…
++;

97 
numbî
 /= 10;

100  
ªsu…
;

101 
	}
}

104 
__©åibuã__
 ((
__n‹ëu∫__
))

105 
	$ußge
(
FILE
 * 
out
)

107 
	`Âuts
(
USAGE_HEADER
, 
out
);

108 
	`Ârötf
(
out
,

109 
	`_
(" %†[›ti⁄s] PID [PID ...]\n"), 
¥ogøm_övoˇti⁄_sh‹t_«me
);

110 
	`Âuts
(
USAGE_OPTIONS
, 
out
);

111 
	`Âuts
(
	`_
(" -x, --exãnded show dëaûs\n"), 
out
);

112 
	`Âuts
(
	`_
(" -X showÉví m‹êdëaûs\n"), 
out
);

113 
	`Âuts
(
	`_
(" WARNING: f‹m© ch™ge†acc‹dögÅÿ/¥oc/PID/sm≠s\n"), 
out
);

114 
	`Âuts
(
	`_
(" -XX showÉvîythögÅhêkî√»¥ovides\n"), 
out
);

115 
	`Âuts
(
	`_
(" -c, --ªad-r¯ÑódÅhêdeÁu…Ñc\n"), 
out
);

116 
	`Âuts
(
	`_
(" -C, --ªad-rc-‰om=<fûe>ÑódÅhêr¯‰om fûe\n"), 
out
);

117 
	`Âuts
(
	`_
(" -n, --¸óã-r¯ cª©ê√w deÁu…Ñc\n"), 
out
);

118 
	`Âuts
(
	`_
(" -N, --¸óã-rc-to=<fûe> cª©ê√wÑ¯tÿfûe\n"), 
out
);

119 
	`Âuts
(
	`_
(" NOTE:Öidárgumít†¨ênŸáŒowed wôh -n, -N\n"), 
out
);

120 
	`Âuts
(
	`_
(" -d, --devi˚ showÅhêdevi˚ f‹m©\n"), 
out
);

121 
	`Âuts
(
	`_
(" -q, --quõà dÿnŸ di•œy hódîánd foŸî\n"), 
out
);

122 
	`Âuts
(
	`_
(" -p, --show-∑th showÖ©h i¿thêm≠pög\n"), 
out
);

123 
	`Âuts
(
	`_
(" -A, --ønge=<low>[,<high>]ÜimôÑesu…†tÿthêgivíÑ™ge\n"), 
out
);

124 
	`Âuts
(
USAGE_SEPARATOR
, 
out
);

125 
	`Âuts
(
USAGE_HELP
, 
out
);

126 
	`Âuts
(
USAGE_VERSION
, 
out
);

127 
	`Ârötf
(
out
, 
	`USAGE_MAN_TAIL
("pmap(1)"));

128 
	`exô
(
out
 =
°dîr
 ? 
EXIT_FAILURE
 : 
EXIT_SUCCESS
);

129 
	}
}

131 
	gm≠buf
[1024];

132 
	gcmdbuf
[512];

134 
KLONG
 
	gønge_low
;

135 
KLONG
 
	gønge_high
 = ~0ull;

137 
	gc_›ti⁄
;

138 
	gC_›ti⁄
;

139 
	gd_›ti⁄
;

140 
	gn_›ti⁄
;

141 
	gN_›ti⁄
;

142 
	gq_›ti⁄
;

143 
	gx_›ti⁄
;

144 
	gX_›ti⁄
;

146 
	gm≠_desc_show∑th
;

148 
	gshm_mö‹
 = ~0u;

150 
	$discovî_shm_mö‹
()

152 *
addr
;

153 
shmid
;

154 
m≠buf_b
[256];

156 i‡(!
	`‰e›í
("/¥oc/£lf/m≠s", "r", 
°dö
))

160 
shmid
 = 
	`shmgë
(
IPC_PRIVATE
, 42, 
IPC_CREAT
 | 0666);

161 i‡(
shmid
 == -1)

165 
addr
 = 
	`shm©
(
shmid
, 
NULL
, 
SHM_RDONLY
);

166 i‡(
addr
 == (*)-1)

167 
out_de°roy
;

169 
	`fgës
(
m≠buf_b
,  m≠buf_b, 
°dö
)) {

170 
≥rms
[32];

172 *
tmp
;

173 
KLONG
 
°¨t
, 
íd
;

174 
fûe_off£t
, 
öode
;

175 
dev_maj‹
, 
dev_mö‹
;

176 
	`ssˇnf
(
m≠buf_b
, "%" 
KLF
 "x-%" KLF "x %31†%Œx %x:%x %Œu", &
°¨t
,

177 &
íd
, 
≥rms
, &
fûe_off£t
, &
dev_maj‹
, &
dev_mö‹
,

178 &
öode
);

179 
tmp
 = 
	`°rchr
(
m≠buf_b
, '\n');

180 i‡(
tmp
)

181 *
tmp
 = '\0';

182 
tmp
 = 
m≠buf_b
;

183 *
tmp
) {

184 i‡(!
	`i•röt
(*
tmp
))

185 *
tmp
 = '?';

186 
tmp
++;

188 i‡(
°¨t
 > ()
addr
)

190 i‡(
dev_maj‹
)

192 i‡(
≥rms
[3] != 's')

194 i‡(
	`°r°r
(
m≠buf_b
, "/SYSV")) {

195 
shm_mö‹
 = 
dev_mö‹
;

200 i‡(
	`shmdt
(
addr
))

201 
	`≥º‹
(
	`_
("shared memory detach"));

203 
out_de°roy
:

204 i‡(
	`shm˘l
(
shmid
, 
IPC_RMID
, 
NULL
Ë&& 
î∫o
 !
EINVAL
)

205 
	`≥º‹
(
	`_
("shared memoryÑemove"));

208 
	}
}

210 *
	$m≠pög_«me
(
¥oc_t
 * 
p
, 
KLONG
 
addr
,

211 
KLONG
 
Àn
, c⁄° *
m≠buf_b
,

212 
show∑th
, 
dev_maj‹
,

213 
dev_mö‹
, 
öode
)

215 *
˝
;

217 i‡(!
dev_maj‹
 && 
dev_mö‹
 =
shm_mö‹
 && 
	`°r°r
(
m≠buf_b
, "/SYSV")) {

218 
shmbuf
[64];

219 
	`¢¥ötf
(
shmbuf
,  shmbuf, " [ shmid=0x%Œx ]", 
öode
);

220  
shmbuf
;

223 
˝
 = 
	`°ºchr
(
m≠buf_b
, '/');

224 i‡(
˝
) {

225 i‡(
show∑th
)

226  
	`°rchr
(
m≠buf_b
, '/');

227  
˝
[1] ? cp + 1 : cp;

230 
˝
 = 
	`°rchr
(
m≠buf_b
, '/');

231 i‡(
˝
) {

232 i‡(
show∑th
)

233  
˝
;

235  
	`°ºchr
(
˝
, '/') + 1;

238 
˝
 = 
	`_
(" [ánon ]");

239 i‡((
p
->
°¨t_°ack
 >
addr
Ë&& (p->°¨t_°ack <add∏+ 
Àn
))

240 
˝
 = 
	`_
(" [ stack ]");

241  
˝
;

242 
	}
}

245 
	#DETAIL_LENGTH
 32

	)

246 
	#DETL
 "31"

	)

247 
	#NUM_LENGTH
 21

	)

248 
	#NUML
 "20"

	)

249 
	#VMFLAGS_LENGTH
 81

	)

251 
	sli°node
 {

252 
	mdes¸ùti⁄
[
DETAIL_LENGTH
];

253 
	mvÆue_°r
[
NUM_LENGTH
];

254 
KLONG
 
	mvÆue
;

255 
KLONG
 
	mtŸÆ
;

256 
	mmax_width
;

257 
li°node
 *
	m√xt
;

260 
li°node
 *
	gli°hód
=
NULL
, *
	gli°èû
=NULL, *
	gli°node
;

263 
	s˙f_li°node
 {

264 
	mdes¸ùti⁄
[
DETAIL_LENGTH
];

265 
˙f_li°node
 *
	m√xt
;

268 
˙f_li°node
 *
	g˙f_li°hód
=
NULL
, *
	g˙f_li°node
;

270 
	$is_unimp‹è¡
 (c⁄° *
s
)

272 i‡(
	`°rcmp
(
s
, "AnonHugePages") == 0)  1;

273 i‡(
	`°rcmp
(
s
, "KernelPageSize") == 0)  1;

274 i‡(
	`°rcmp
(
s
, "MMUPageSize") == 0)  1;

275 i‡(
	`°rcmp
(
s
, "Shared_Dirty") == 0)  1;

276 i‡(
	`°rcmp
(
s
, "Private_Dirty") == 0)  1;

277 i‡(
	`°rcmp
(
s
, "Shared_Clean") == 0)  1;

278 i‡(
	`°rcmp
(
s
, "Private_Clean") == 0)  1;

279 i‡(
	`°rcmp
(
s
, "VmFlags") == 0)  1;

281 
	}
}

284 
	$is_íabÀd
 (c⁄° *
s
)

286 i‡(
X_›ti⁄
 =1Ë !
	`is_unimp‹è¡
(
s
);

288 i‡(
c_›ti⁄
) {

290 
˙f_li°node
 = 
˙f_li°hód
; cnf_li°node; cnf_li°nodê˙f_li°nodê-> 
√xt
) {

291 i‡(!
	`°rcmp
(
s
, 
˙f_li°node
 -> 
des¸ùti⁄
))  1;

298 
	}
}

301 
	$¥öt_exãnded_m≠s
 (
FILE
 *
f
)

303 
≥rms
[
DETAIL_LENGTH
], 
m≠_desc
[128],

304 
dëaû_desc
[
DETAIL_LENGTH
], 
vÆue_°r
[
NUM_LENGTH
],

305 
°¨t
[
NUM_LENGTH
], 
íd
[NUM_LENGTH],

306 
off£t
[
NUM_LENGTH
], 
öode
[NUM_LENGTH],

307 
dev
[64], 
vmÊags
[
VMFLAGS_LENGTH
];

308 
maxw1
=0, 
maxw2
=0, 
maxw3
=0, 
maxw4
=0, 
maxw5
=0, 
maxwv
=0;

309 
nfõlds
, 
fú°m≠pög
, 
foŸî_g≠
, 
i
, 
maxw_
;

310 *
ªt
, *
m≠_ba£«me
, 
c
, 
has_vmÊags
 = 0;

312 
ªt
 = 
	`fgës
(
m≠buf
,  m≠buf, 
f
);

313 
fú°m≠pög
 = 2;

314 
ªt
 !
NULL
) {

316 
m≠_desc
[0] = '\0';

317 
nfõlds
 = 
	`ssˇnf
(
m≠buf
,

318 "%"
NUML
"[0-9a-f]-%"NUML"[0-9a-f] "

319 "%"
DETL
"†%"
NUML
"[0-9a-f] "

320 "%63[0-9a-f:] %"
NUML
"s %127[^\n]",

321 
°¨t
, 
íd
, 
≥rms
, 
off£t
,

322 
dev
, 
öode
, 
m≠_desc
);

324 i‡(
nfõlds
 < 6)

325 
	`xîrx
(
EXIT_FAILURE
, 
	`_
("Unknown format in smaps file!"));

327 
c
 = 
m≠buf
[
	`°æí
(mapbuf) - 1];

328 
c
 != '\n') {

329 
ªt
 = 
	`fgës
(
m≠buf
,  m≠buf, 
f
);

330 
c
 = 
m≠buf
[
	`°æí
(mapbuf) - 1];

334 i‡(
	`°æí
(
°¨t
 ) > 
maxw1
) maxw1 = strlen(start);

335 i‡(
	`°æí
(
≥rms
 ) > 
maxw2
) maxw2 = strlen(perms);

336 i‡(
	`°æí
(
off£t
Ë> 
maxw3
) maxw3 = strlen(offset);

337 i‡(
	`°æí
(
dev
 ) > 
maxw4
) maxw4 = strlen(dev);

338 i‡(
	`°æí
(
öode
 ) > 
maxw5
) maxw5 = strlen(inode);

340 
ªt
 = 
	`fgës
(
m≠buf
,  m≠buf, 
f
);

341 
nfõlds
 = 
	`ssˇnf
(
m≠buf
, "%"
DETL
"[^:]: %"
NUML
"[0-9] kB %c",

342 
dëaû_desc
, 
vÆue_°r
, &
c
);

343 
li°node
 = 
li°hód
;

345 
ªt
 !
NULL
 && 
nfõlds
 == 2) {

347 i‡(!
	`is_íabÀd
(
dëaû_desc
)Ë
lo›_íd
;

350 i‡(
li°node
 =
NULL
) {

351 
	`as£π
(
fú°m≠pög
 == 2);

352 
li°node
 = 
	`ˇŒoc
(1,  *listnode);

353 i‡(
li°hód
 =
NULL
) {

354 
	`as£π
(
li°èû
 =
NULL
);

355 
li°hód
 = 
li°node
;

357 
li°èû
->
√xt
 = 
li°node
;

359 
li°èû
 = 
li°node
;

361 
	`°r˝y
(
li°node
->
des¸ùti⁄
, 
dëaû_desc
);

362 i‡(!
q_›ti⁄
Ë
li°node
->
max_width
 = 
	`°æí
(
dëaû_desc
);

363 
li°node
->
max_width
 = 0;

366 i‡(
	`°rcmp
(
li°node
->
des¸ùti⁄
, 
dëaû_desc
) != 0)

367 
	`xîrx
(
EXIT_FAILURE
, "ERROR: %s %s",

368 
	`_
("inconsistent detail field in smaps file,Üine:\n"),

369 
m≠buf
);

371 
	`°r˝y
(
li°node
->
vÆue_°r
, value_str);

372 
	`ssˇnf
(
vÆue_°r
, "%"
KLF
"u", &
li°node
->
vÆue
);

373 i‡(
fú°m≠pög
 == 2) {

374 
li°node
->
tŸÆ
 +li°node->
vÆue
;

375 i‡(
q_›ti⁄
) {

376 
maxw_
 = 
	`°æí
(
li°node
->
vÆue_°r
);

377 i‡(
maxw_
 > 
li°node
->
max_width
)

378 
li°node
->
max_width
 = 
maxw_
;

381 
li°node
 =Üi°node->
√xt
;

382 
lo›_íd
:

383 
ªt
 = 
	`fgës
(
m≠buf
,  m≠buf, 
f
);

384 
nfõlds
 = 
	`ssˇnf
(
m≠buf
, "%"
DETL
"[^:]: %"
NUML
"[0-9] kB %c",

385 
dëaû_desc
, 
vÆue_°r
, &
c
);

389 
nfõlds
 = 
	`ssˇnf
(
m≠buf
, "VmFœgs: %[a-z ]", 
vmÊags
);

390 i‡(
nfõlds
 == 1) {

391 i‡(! 
has_vmÊags
) has_vmflags = 1;

392 
ªt
 = 
	`fgës
(
m≠buf
,  m≠buf, 
f
);

393 i‡(
	`°æí
(
vmÊags
Ë> 
maxwv
) maxwv = strlen(vmflags);

396 i‡(
fú°m≠pög
 == 2) {

397 i‡(
ªt
 =
NULL
) {

398 
fú°m≠pög
 = 1;

399 
	`f£ek
(
f
, 0, 
SEEK_SET
);

400 
ªt
 = 
	`fgës
(
m≠buf
,  m≠buf, 
f
);

402 i‡(!
q_›ti⁄
) {

404 
li°node
=
li°hód
;Üi°node!=
NULL
;Üi°nodeˆi°node->
√xt
) {

405 
maxw_
 = 
	`öãgî_width
(
li°node
->
tŸÆ
);

406 i‡(
maxw_
 > 
li°node
->
max_width
)

407 
li°node
->
max_width
 = 
maxw_
;

416 i‡(
fú°m≠pög
 && !
q_›ti⁄
) {

418 
maxw1
 = 
	`ju°ify_¥öt
(
∆s_Addªss
, maxw1, 1);

420 i‡(
	`is_íabÀd
(
∆s_Pîm
))

421 
maxw2
 = 
	`ju°ify_¥öt
(
∆s_Pîm
, maxw2, 1);

423 i‡(
	`is_íabÀd
(
∆s_Off£t
))

424 
maxw3
 = 
	`ju°ify_¥öt
(
∆s_Off£t
, maxw3, 1);

426 i‡(
	`is_íabÀd
(
∆s_Devi˚
))

427 
maxw4
 = 
	`ju°ify_¥öt
(
∆s_Devi˚
, maxw4, 1);

429 i‡(
	`is_íabÀd
(
∆s_Inode
))

430 
maxw5
 = 
	`ju°ify_¥öt
(
∆s_Inode
, maxw5, 1);

432 
li°node
=
li°hód
;Üi°node!=
NULL
;Üi°nodeˆi°node->
√xt
)

433 
	`ju°ify_¥öt
(
li°node
->
des¸ùti⁄
,Üi°node->
max_width
, 1);

435 i‡(
has_vmÊags
 && 
	`is_íabÀd
("VmFlags"))

436 
	`¥ötf
(" %*s", 
maxwv
, "VmFlags");

438 i‡(
	`is_íabÀd
(
∆s_M≠pög
))

439 
	`ju°ify_¥öt
(
∆s_M≠pög
, 0, 0);

441 
	`¥ötf
("\n");

445 
	`¥ötf
("%*s", 
maxw1
, 
°¨t
);

447 i‡(
	`is_íabÀd
(
∆s_Pîm
))

448 
	`¥ötf
(" %*s", 
maxw2
, 
≥rms
);

450 i‡(
	`is_íabÀd
(
∆s_Off£t
))

451 
	`¥ötf
(" %*s", 
maxw3
, 
off£t
);

453 i‡(
	`is_íabÀd
(
∆s_Devi˚
))

454 
	`¥ötf
(" %*s", 
maxw4
, 
dev
);

456 i‡(
	`is_íabÀd
(
∆s_Inode
))

457 
	`¥ötf
(" %*s", 
maxw5
, 
öode
);

459 
li°node
=
li°hód
;Üi°node!=
NULL
;Üi°nodeˆi°node->
√xt
)

460 
	`¥ötf
(" %*s", 
li°node
->
max_width
,Üi°node->
vÆue_°r
);

462 i‡(
has_vmÊags
 && 
	`is_íabÀd
("VmFlags"))

463 
	`¥ötf
(" %*s", 
maxwv
, 
vmÊags
);

465 i‡(
	`is_íabÀd
(
∆s_M≠pög
)) {

466 i‡(
m≠_desc_show∑th
) {

467 
	`¥ötf
(" %s", 
m≠_desc
);

469 
m≠_ba£«me
 = 
	`°ºchr
(
m≠_desc
, '/');

470 i‡(!
m≠_ba£«me
) {

471 
	`¥ötf
(" %s", 
m≠_desc
);

473 
	`¥ötf
(" %s", 
m≠_ba£«me
 + 1);

479 
	`¥ötf
("\n");

481 
fú°m≠pög
 = 0;

486 i‡(!
q_›ti⁄
 && 
li°hód
!=
NULL
) {

488 
foŸî_g≠
 = 
maxw1
 + 1;

489 i‡(
	`is_íabÀd
(
∆s_Pîm
 )Ë
foŸî_g≠
 +
maxw2
 + 1;

490 i‡(
	`is_íabÀd
(
∆s_Off£t
)Ë
foŸî_g≠
 +
maxw3
 + 1;

491 i‡(
	`is_íabÀd
(
∆s_Devi˚
)Ë
foŸî_g≠
 +
maxw4
 + 1;

492 i‡(
	`is_íabÀd
(
∆s_Inode
 )Ë
foŸî_g≠
 +
maxw5
 + 1;

494 
i
=0; i<
foŸî_g≠
; i++Ë
	`putc
(' ', 
°dout
);

496 
li°node
=
li°hód
;Üi°node!=
NULL
;Üi°nodeˆi°node->
√xt
) {

497 
i
=0; i<
li°node
->
max_width
; i++)

498 
	`putc
('=', 
°dout
);

499 
	`putc
(' ', 
°dout
);

502 
	`putc
('\n', 
°dout
);

504 
i
=0; i<
foŸî_g≠
; i++Ë
	`putc
(' ', 
°dout
);

506 
li°node
=
li°hód
;Üi°node!=
NULL
;Üi°nodeˆi°node->
√xt
)

507 
	`¥ötf
("%*lu ", 
li°node
->
max_width
,Üi°node->
tŸÆ
);

509 
	`Âuts
("KB \n", 
°dout
);

512 
	}
}

514 
	$⁄e_¥oc
(
¥oc_t
 * 
p
)

516 
buf
[32];

517 
FILE
 *
Â
;

518 
tŸÆ_sh¨ed
 = 0ul;

519 
tŸÆ_¥iv©e_ªad⁄ly
 = 0ul;

520 
tŸÆ_¥iv©e_wrôóbÀ
 = 0ul;

521 
KLONG
 
diff
 = 0;

522 c⁄° *
˝2
 = 
NULL
;

523 
rss
 = 0ull;

524 
¥iv©e_dúty
 = 0ull;

525 
sh¨ed_dúty
 = 0ull;

526 
tŸÆ_rss
 = 0ull;

527 
tŸÆ_¥iv©e_dúty
 = 0ull;

528 
tŸÆ_sh¨ed_dúty
 = 0ull;

529 
maxw1
=0, 
maxw2
=0, 
maxw3
=0, 
maxw4
=0, 
maxw5
=0;

534 
maxcmd
 = 0xfffff;

536 
	`esˇ≥_comm™d
(
cmdbuf
, 
p
,  cmdbuf, &
maxcmd
,

537 
ESC_ARGS
 | 
ESC_BRACKETS
);

538 
	`¥ötf
("%u: %s\n", 
p
->
tgid
, 
cmdbuf
);

540 i‡(
x_›ti⁄
 || 
X_›ti⁄
 || 
c_›ti⁄
) {

541 
	`•rötf
(
buf
, "/¥oc/%u/sm≠s", 
p
->
tgid
);

542 i‡((
Â
 = 
	`f›í
(
buf
, "r")Ë=
NULL
)

545 
	`•rötf
(
buf
, "/¥oc/%u/m≠s", 
p
->
tgid
);

546 i‡((
Â
 = 
	`f›í
(
buf
, "r")Ë=
NULL
)

550 i‡(
X_›ti⁄
 || 
c_›ti⁄
) {

551 
	`¥öt_exãnded_m≠s
(
Â
);

555 i‡(
x_›ti⁄
) {

556 
maxw1
 = 16;

557 i‡((
KLONG
Ë=4Ë
maxw1
 = 8;

558 
maxw2
 = 
maxw3
 = 
maxw4
 = 7;

559 
maxw5
 = 5;

560 i‡(!
q_›ti⁄
) {

561 
maxw1
 = 
	`ju°ify_¥öt
(
∆s_Addªss
, maxw1, 0);

562 
maxw2
 = 
	`ju°ify_¥öt
(
∆s_Kbyãs
, maxw2, 1);

563 
maxw3
 = 
	`ju°ify_¥öt
(
∆s_RSS
, maxw3, 1);

564 
maxw4
 = 
	`ju°ify_¥öt
(
∆s_Dúty
, maxw4, 1);

565 
maxw5
 = 
	`ju°ify_¥öt
(
∆s_Mode
, maxw5, 0);

566 
	`ju°ify_¥öt
(
∆s_M≠pög
, 0, 0);

570 i‡(
d_›ti⁄
) {

571 
maxw1
 = 16;

572 i‡((
KLONG
Ë=4Ë
maxw1
 = 8;

573 
maxw2
 = 7;

574 
maxw3
 = 5;

575 
maxw4
 = 16;

576 
maxw5
 = 9;

577 i‡(!
q_›ti⁄
) {

578 
maxw1
 = 
	`ju°ify_¥öt
(
∆s_Addªss
, maxw1, 0);

579 
maxw2
 = 
	`ju°ify_¥öt
(
∆s_Kbyãs
, maxw2, 1);

580 
maxw3
 = 
	`ju°ify_¥öt
(
∆s_Mode
, maxw3, 0);

581 
maxw4
 = 
	`ju°ify_¥öt
(
∆s_Off£t
, maxw4, 0);

582 
maxw5
 = 
	`ju°ify_¥öt
(
∆s_Devi˚
, maxw5, 0);

583 
	`ju°ify_¥öt
(
∆s_M≠pög
, 0, 0);

587 
	`fgës
(
m≠buf
,  m≠buf, 
Â
)) {

588 
≥rms
[32];

590 *
tmp
;

591 
KLONG
 
°¨t
, 
íd
;

592 
fûe_off£t
, 
öode
;

593 
dev_maj‹
, 
dev_mö‹
;

594 
sm≠_vÆue
;

595 
sm≠_key
[21];

598 i‡(
m≠buf
[0] >= 'A' && mapbuf[0] <= 'Z') {

600 i‡(
	`ssˇnf
(
m≠buf
, "%20[^:]: %Œu", 
sm≠_key
, &
sm≠_vÆue
) == 2) {

601 i‡(
	`°rcmp
("Rss", 
sm≠_key
) == 0) {

602 
rss
 = 
sm≠_vÆue
;

603 
tŸÆ_rss
 +
sm≠_vÆue
;

606 i‡(
	`°rcmp
("Sh¨ed_Dúty", 
sm≠_key
) == 0) {

607 
sh¨ed_dúty
 = 
sm≠_vÆue
;

608 
tŸÆ_sh¨ed_dúty
 +
sm≠_vÆue
;

611 i‡(
	`°rcmp
("Priv©e_Dúty", 
sm≠_key
) == 0) {

612 
¥iv©e_dúty
 = 
sm≠_vÆue
;

613 
tŸÆ_¥iv©e_dúty
 +
sm≠_vÆue
;

616 i‡(
	`°rcmp
("Sw≠", 
sm≠_key
) == 0) {

618 
	`¥ötf
("%0*" 
KLF
 "x %*lu %*llu %*llu %*s %s\n",

619 
maxw1
, 
°¨t
,

620 
maxw2
, ()(
diff
 >> 10),

621 
maxw3
, 
rss
,

622 
maxw4
, (
¥iv©e_dúty
 + 
sh¨ed_dúty
),

623 
maxw5
, 
≥rms
,

624 
˝2
);

626 
rss
 = 
sh¨ed_dúty
 = 
¥iv©e_dúty
 = 0ull;

627 
diff
 = 0;

634 
	`ssˇnf
(
m≠buf
, "%" 
KLF
 "x-%" KLF "x %31†%Œx %x:%x %Œu", &
°¨t
,

635 &
íd
, 
≥rms
, &
fûe_off£t
, &
dev_maj‹
, &
dev_mö‹
,

636 &
öode
);

638 i‡(
íd
 - 1 < 
ønge_low
)

640 i‡(
ønge_high
 < 
°¨t
)

643 
tmp
 = 
	`°rchr
(
m≠buf
, '\n');

644 i‡(
tmp
)

645 *
tmp
 = '\0';

646 
tmp
 = 
m≠buf
;

647 *
tmp
) {

648 i‡(!
	`i•röt
(*
tmp
))

649 *
tmp
 = '?';

650 
tmp
++;

653 
diff
 = 
íd
 - 
°¨t
;

654 i‡(
≥rms
[3] == 's')

655 
tŸÆ_sh¨ed
 +
diff
;

656 i‡(
≥rms
[3] == 'p') {

657 
≥rms
[3] = '-';

658 i‡(
≥rms
[1] == 'w')

659 
tŸÆ_¥iv©e_wrôóbÀ
 +
diff
;

661 
tŸÆ_¥iv©e_ªad⁄ly
 +
diff
;

667 
≥rms
[4] = '-';

668 
≥rms
[5] = '\0';

670 i‡(
x_›ti⁄
) {

671 
˝2
 =

672 
	`m≠pög_«me
(
p
, 
°¨t
, 
diff
, 
m≠buf
, 
m≠_desc_show∑th
, 
dev_maj‹
,

673 
dev_mö‹
, 
öode
);

677 i‡(
d_›ti⁄
) {

678 c⁄° *
˝
 =

679 
	`m≠pög_«me
(
p
, 
°¨t
, 
diff
, 
m≠buf
, 
m≠_desc_show∑th
, 
dev_maj‹
,

680 
dev_mö‹
, 
öode
);

681 
	`¥ötf
("%0*" 
KLF
 "x %*lu %*s %0*llx %*.*s%03x:%05x %s\n",

682 
maxw1
, 
°¨t
,

683 
maxw2
, ()(
diff
 >> 10),

684 
maxw3
, 
≥rms
,

685 
maxw4
, 
fûe_off£t
,

686 (
maxw5
-9), (maxw5-9), " ", 
dev_maj‹
, 
dev_mö‹
,

687 
˝
);

689 i‡(!
x_›ti⁄
 && !
d_›ti⁄
) {

690 c⁄° *
˝
 =

691 
	`m≠pög_«me
(
p
, 
°¨t
, 
diff
, 
m≠buf
, 
m≠_desc_show∑th
, 
dev_maj‹
,

692 
dev_mö‹
, 
öode
);

693 
	`¥ötf
(((
KLONG
) == 8)

694 ? "%016" 
KLF
 "x %6luK %s %s\n"

696 
°¨t
, ()(
diff
 >> 10), 
≥rms
, 
˝
);

700 
	`f˛o£
(
Â
);

701 i‡(!
q_›ti⁄
) {

702 i‡(
x_›ti⁄
) {

703 i‡((
KLONG
) == 4)

704 
	`ju°ify_¥öt
("--------", 
maxw1
, 0);

706 
	`ju°ify_¥öt
("----------------", 
maxw1
, 0);

707 
	`ju°ify_¥öt
("-------", 
maxw2
, 1);

708 
	`ju°ify_¥öt
("-------", 
maxw3
, 1);

709 
	`ju°ify_¥öt
("-------", 
maxw4
, 1);

710 
	`¥ötf
("\n");

712 
	`¥ötf
("%-*†", 
maxw1
, 
	`_
("total kB"));

713 
	`¥ötf
("%*ld %*llu %*llu\n",

714 
maxw2
, (
tŸÆ_sh¨ed
 +

715 
tŸÆ_¥iv©e_wrôóbÀ
 +

716 
tŸÆ_¥iv©e_ªad⁄ly
) >> 10,

717 
maxw3
, 
tŸÆ_rss
,

718 
maxw4
, (
tŸÆ_sh¨ed_dúty
 +

719 
tŸÆ_¥iv©e_dúty
));

721 i‡(
d_›ti⁄
) {

722 
¥ötf


723 (
	`_
("mapped: %ldK writeable/private: %ldK shared: %ldK\n"),

724 (
tŸÆ_sh¨ed
 + 
tŸÆ_¥iv©e_wrôóbÀ
 +

725 
tŸÆ_¥iv©e_ªad⁄ly
) >> 10,

726 
tŸÆ_¥iv©e_wrôóbÀ
 >> 10, 
tŸÆ_sh¨ed
 >> 10);

728 i‡(!
x_›ti⁄
 && !
d_›ti⁄
) {

729 i‡((
KLONG
) == 8)

732 
	`¥ötf
(
	`_
("Åotal %16ldK\n"),

733 (
tŸÆ_sh¨ed
 + 
tŸÆ_¥iv©e_wrôóbÀ
 +

734 
tŸÆ_¥iv©e_ªad⁄ly
) >> 10);

738 
	`¥ötf
(
	`_
("Åotal %8ldK\n"),

739 (
tŸÆ_sh¨ed
 + 
tŸÆ_¥iv©e_wrôóbÀ
 +

740 
tŸÆ_¥iv©e_ªad⁄ly
) >> 10);

745 
	}
}

747 
	$ønge_¨gumíts
(*
›èrg
)

749 *
¨g1
;

750 *
¨g2
;

752 
¨g1
 = 
	`x°rdup
(
›èrg
);

753 
¨g2
 = 
	`°rchr
(
¨g1
, ',');

754 i‡(
¨g2
)

755 *
¨g2
 = '\0';

756 i‡(
¨g2
)

757 ++
¨g2
;

759 
¨g2
 = 
¨g1
;

760 i‡(
¨g1
 && *arg1)

761 
ønge_low
 = 
	`STRTOUKL
(
¨g1
, &arg1, 16);

762 i‡(*
¨g2
)

763 
ønge_high
 = 
	`STRTOUKL
(
¨g2
, &arg2, 16);

764 i‡(
¨g1
 && (*¨g1 || *
¨g2
))

765 
	`xîrx
(
EXIT_FAILURE
, "%s: '%s'", 
	`_
("failedÅoÖarseárgument"),

766 
›èrg
);

767 
	}
}

770 
	#MAX_CNF_LINE_LEN
 1024

	)

772 
	#SECTION_ID_NONE
 0

	)

773 
	#SECTION_ID_UNSUPPORTED
 1

	)

775 
	#SECTION_STR_FIELDS_DISPLAY
 "[Fõld†Di•œy]"

	)

776 
	#SECTION_STR_FIELDS_DISPLAY_LEN
 ((
SECTION_STR_FIELDS_DISPLAY
Ë- 1)

	)

777 
	#SECTION_ID_FIELDS_DISPLAY
 2

	)

779 
	#SECTION_STR_MAPPING
 "[M≠pög]"

	)

780 
	#SECTION_STR_MAPPING_LEN
 ((
SECTION_STR_MAPPING
Ë- 1)

	)

781 
	#SECTION_ID_MAPPING
 3

	)

783 
	$c⁄fig_ªad
 (*
rc_fûíame
)

785 
FILE
 *
f
;

786 
löe_buf
[
MAX_CNF_LINE_LEN
 + 1];

787 
tmp_buf
 [
MAX_CNF_LINE_LEN
 + 1];

788 *
åimmed
;

789 
Àngth
;

790 *
èû
, *
tokí
;

791 
löe_˙t
, 
£˘i⁄_id
;

793 
f
 = 
	`f›í
(
rc_fûíame
, "r");

795 i‡(!
f
)  0;

797 
löe_˙t
 = 0;

798 
£˘i⁄_id
 = 
SECTION_ID_NONE
;

800 
	`fgës
 (
löe_buf
, 
MAX_CNF_LINE_LEN
 + 1, 
f
)) {

802 
löe_˙t
++;

805 
Àngth
 = 
	`°æí
(
löe_buf
);

806 i‡(
Àngth
 > 0 && 
löe_buf
[length - 1] == '\n') {

807 
löe_buf
[
Àngth
 - 1] = '\0';

808 } i‡(
Àngth
 =
MAX_CNF_LINE_LEN
) {

809 
	`xw¨nx
(
	`_
("c⁄figÜöêtoÿl⁄g -Üöê%d"), 
löe_˙t
);

811 
	`fgës
 (
tmp_buf
, 
MAX_CNF_LINE_LEN
 + 1, 
f
) &&

812 (
Àngth
 = 
	`°æí
(
tmp_buf
))>0 &&

813 
tmp_buf
[
Àngth
 - 1] != '\n') ;

817 
åimmed
 = 
löe_buf
;

818 *
åimmed
 == ' ' || *trimmed == '\t')Årimmed++;

821 i‡(*
åimmed
 == '#' || *trimmed == '\0') ;

823 i‡(*
åimmed
 == '[') {

824 i‡(!
	`°∫cmp
(
åimmed
, 
SECTION_STR_FIELDS_DISPLAY
, 
SECTION_STR_FIELDS_DISPLAY_LEN
)) {

825 
åimmed
 +
SECTION_STR_FIELDS_DISPLAY_LEN
;

826 
£˘i⁄_id
 = 
SECTION_ID_FIELDS_DISPLAY
;

827 } i‡(!
	`°∫cmp
(
åimmed
, 
SECTION_STR_MAPPING
, 
SECTION_STR_MAPPING_LEN
)) {

828 
åimmed
 +
SECTION_STR_MAPPING_LEN
;

829 
£˘i⁄_id
 = 
SECTION_ID_MAPPING
;

831 *
åimmed
 != ']' || *trimmed == '\0')Årimmed++;

832 i‡(*
åimmed
 == ']') {

833 
£˘i⁄_id
 = 
SECTION_ID_UNSUPPORTED
;

834 
	`xw¨nx
(
	`_
("unsuµ‹ãd se˘i⁄ found i¿thêc⁄fig -Üöê%d"), 
löe_˙t
);

835 
åimmed
++;

837 
	`xw¨nx
(
	`_
("sy¡axÉº‹ found i¿thêc⁄fig -Üöê%d"), 
löe_˙t
);

842 *
åimmed
 == ' ' || *trimmed == '\t')Årimmed++;

845 i‡(*
åimmed
 == '#' || *trimmed == '\0') ;

848 
	`xw¨nx
(
	`_
("sy¡axÉº‹ found i¿thêc⁄fig -Üöê%d"), 
löe_˙t
);

851 
£˘i⁄_id
) {

852 
SECTION_ID_FIELDS_DISPLAY
:

853 
tokí
 = 
	`°πok
 (
åimmed
, " \t");

855 i‡(
tokí
) {

856 
èû
 = 
	`°πok
 (
NULL
, " \t");

858 i‡(
èû
 && *tail != '#') {

859 
	`xw¨nx
(
	`_
("sy¡axÉº‹ found i¿thêc⁄fig -Üöê%d"), 
löe_˙t
);

863 
˙f_li°node
 = 
	`ˇŒoc
(1,  *cnf_listnode);

864 
	`¢¥ötf
(
˙f_li°node
 -> 
des¸ùti⁄
, (˙f_li°nodê-> des¸ùti⁄), "%s", 
tokí
);

865 
˙f_li°node
 -> 
√xt
 = 
˙f_li°hód
;

866 
˙f_li°hód
 = 
˙f_li°node
;

871 
SECTION_ID_MAPPING
:

872 
tokí
 = 
	`°πok
 (
åimmed
, " \t");

874 i‡(
tokí
) {

875 
èû
 = 
	`°πok
 (
NULL
, " \t");

877 i‡(
èû
 && *tail != '#') {

878 
	`xw¨nx
(
	`_
("sy¡axÉº‹ found i¿thêc⁄fig -Üöê%d"), 
löe_˙t
);

881 i‡(!
	`°rcmp
(
tokí
,"ShowP©h")Ë
m≠_desc_show∑th
 = !map_desc_showpath;

886 
SECTION_ID_UNSUPPORTED
:

890 
	`xw¨nx
(
	`_
("sy¡axÉº‹ found i¿thêc⁄fig -Üöê%d"), 
löe_˙t
);

894 
	`f˛o£
(
f
);

897 
	}
}

900 
	$c⁄fig_¸óã
 (*
rc_fûíame
)

902 
FILE
 *
f
;

905 
f
 = 
	`f›í
(
rc_fûíame
, "r");

907 i‡(
f
) {

908 
	`f˛o£
(
f
);

909 
	`xw¨nx
(
	`_
("the fileálreadyÉxists - delete orÑename it first"));

915 
f
 = 
	`f›í
(
rc_fûíame
, "w");

917 i‡(!
f
)  0;

920 
	`Ârötf
(
f
,"#Ömap's Config File\n");

921 
	`Ârötf
(
f
,"\n");

922 
	`Ârötf
(
f
,"# AllÅheÉntriesáre case sensitive.\n");

923 
	`Ârötf
(
f
,"# UnsupportedÉntriesáre ignored!\n");

924 
	`Ârötf
(
f
,"\n");

925 
	`Ârötf
(
f
,"[Fields Display]\n");

926 
	`Ârötf
(
f
,"\n");

927 
	`Ârötf
(
f
,"# ToÉnableá field uncomment itsÉntry\n");

928 
	`Ârötf
(
f
,"\n");

929 
	`Ârötf
(
f
,"#%s\n", 
∆s_Pîm
);

930 
	`Ârötf
(
f
,"#%s\n", 
∆s_Off£t
);

931 
	`Ârötf
(
f
,"#%s\n", 
∆s_Devi˚
);

932 
	`Ârötf
(
f
,"#%s\n", 
∆s_Inode
);

933 
	`Ârötf
(
f
,"#Size\n");

934 
	`Ârötf
(
f
,"#Rss\n");

935 
	`Ârötf
(
f
,"#Pss\n");

936 
	`Ârötf
(
f
,"#Shared_Clean\n");

937 
	`Ârötf
(
f
,"#Shared_Dirty\n");

938 
	`Ârötf
(
f
,"#Private_Clean\n");

939 
	`Ârötf
(
f
,"#Private_Dirty\n");

940 
	`Ârötf
(
f
,"#Referenced\n");

941 
	`Ârötf
(
f
,"#Anonymous\n");

942 
	`Ârötf
(
f
,"#AnonHugePages\n");

943 
	`Ârötf
(
f
,"#Swap\n");

944 
	`Ârötf
(
f
,"#KernelPageSize\n");

945 
	`Ârötf
(
f
,"#MMUPageSize\n");

946 
	`Ârötf
(
f
,"#Locked\n");

947 
	`Ârötf
(
f
,"#VmFlags\n");

948 
	`Ârötf
(
f
,"#%s\n", 
∆s_M≠pög
);

949 
	`Ârötf
(
f
,"\n");

950 
	`Ârötf
(
f
,"\n");

951 
	`Ârötf
(
f
,"[Mapping]\n");

952 
	`Ârötf
(
f
,"\n");

953 
	`Ârötf
(
f
,"#Åo showÖaths inÅhe mapping column uncommentÅhe followingÜine\n");

954 
	`Ârötf
(
f
,"#ShowPath\n");

955 
	`Ârötf
(
f
,"\n");

957 
	`f˛o£
(
f
);

960 
	}
}

964 *
	$gë_deÁu…_rc_fûíame
()

966 *
rc_fûíame
;

967 
rc_fûíame_Àn
;

968 c⁄° *
homedú
;

970 
homedú
 = 
	`gëív
("HOME");

971 i‡(!
homedú
) {

972 
	`xw¨nx
(
	`_
("HOME variable undefined"));

973  
NULL
;

976 
rc_fûíame_Àn
 = 
	`¢¥ötf
(
NULL
, 0, "%s/.%§c", 
homedú
, 
¥ogøm_övoˇti⁄_sh‹t_«me
);

978 
rc_fûíame
 = (*Ë
	`ˇŒoc
 (1, 
rc_fûíame_Àn
 + 1);

979 i‡(!
rc_fûíame
) {

980 
	`xw¨nx
(
	`_
("memoryállocation failed"));

981  
NULL
;

984 
	`¢¥ötf
(
rc_fûíame
, 
rc_fûíame_Àn
 + 1, "%s/.%§c", 
homedú
, 
¥ogøm_övoˇti⁄_sh‹t_«me
);

986  
rc_fûíame
;

987 
	}
}

990 
	$maö
(
¨gc
, **
¨gv
)

992 
pid_t
 *
pidli°
;

993 
cou¡
 = 0;

994 
PROCTAB
 *
PT
;

995 
¥oc_t
 
p
;

996 
ªt
 = 0, 
c
, 
c⁄f_ªt
;

997 *
rc_fûíame
 = 
NULL
;

999 c⁄° 
›ti⁄
 
l⁄g›ts
[] = {

1000 {"exãnded", 
no_¨gumít
, 
NULL
, 'x'},

1001 {"devi˚", 
no_¨gumít
, 
NULL
, 'd'},

1002 {"quõt", 
no_¨gumít
, 
NULL
, 'q'},

1003 {"ønge", 
ªquúed_¨gumít
, 
NULL
, 'A'},

1004 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

1005 {"vîsi⁄", 
no_¨gumít
, 
NULL
, 'V'},

1006 {"ªad-rc", 
no_¨gumít
, 
NULL
, 'c'},

1007 {"ªad-rc-‰om", 
ªquúed_¨gumít
, 
NULL
, 'C'},

1008 {"¸óã-rc", 
no_¨gumít
, 
NULL
, 'n'},

1009 {"¸óã-rc-to", 
ªquúed_¨gumít
, 
NULL
, 'N'},

1010 {"show-∑th", 
no_¨gumít
, 
NULL
, 'p'},

1011 {
NULL
, 0, NULL, 0}

1014 #ifde‡
HAVE_PROGRAM_INVOCATION_NAME


1015 
¥ogøm_övoˇti⁄_«me
 = 
¥ogøm_övoˇti⁄_sh‹t_«me
;

1017 
	`∆s_öôülize
();

1018 
	`©exô
(
˛o£_°dout
);

1020 i‡(
¨gc
 < 2)

1021 
	`ußge
(
°dîr
);

1023 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "xXrdqA:hVcC:nN:p", 
l⁄g›ts
, 
NULL
)) != -1)

1024 
c
) {

1026 
x_›ti⁄
 = 1;

1029 
X_›ti⁄
++;

1032 
	`xw¨nx
(
	`_
("option -r is ignoredás SunOS compatibility"));

1035 
d_›ti⁄
 = 1;

1038 
q_›ti⁄
 = 1;

1041 
	`ønge_¨gumíts
(
›èrg
);

1044 
	`ußge
(
°dout
);

1046 
	`¥ötf
(
PROCPS_NG_VERSION
);

1047  
EXIT_SUCCESS
;

1049 
c_›ti⁄
 = 1;

1052 
C_›ti⁄
 = 1;

1053 
rc_fûíame
 = 
›èrg
;

1056 
n_›ti⁄
 = 1;

1059 
N_›ti⁄
 = 1;

1060 
rc_fûíame
 = 
›èrg
;

1063 
m≠_desc_show∑th
 = 1;

1072 
	`ußge
(
°dîr
);

1075 
¨gc
 -
›töd
;

1076 
¨gv
 +
›töd
;

1078 i‡(
c_›ti⁄
 + 
C_›ti⁄
 + 
d_›ti⁄
 + 
n_›ti⁄
 + 
N_›ti⁄
 + 
x_›ti⁄
 + !!
X_›ti⁄
 > 1)

1079 
	`xîrx
(
EXIT_FAILURE
, 
	`_
("options -c, -C, -d, -n, -N, -x, -Xáre mutuallyÉxclusive"));

1081 i‡((
n_›ti⁄
 || 
N_›ti⁄
Ë&& (
q_›ti⁄
 || 
m≠_desc_show∑th
))

1082 
	`xîrx
(
EXIT_FAILURE
, 
	`_
("options -p, -qáre mutuallyÉxclusive with -n, -N"));

1084 i‡((
n_›ti⁄
 || 
N_›ti⁄
Ë&& 
¨gc
 > 0)

1085 
	`xîrx
(
EXIT_FAILURE
, 
	`_
("too manyárguments"));

1087 i‡(
N_›ti⁄
) {

1088 i‡(
	`c⁄fig_¸óã
(
rc_fûíame
)) {

1089 
	`xw¨nx
(
	`_
("rc file successfully created, feel freeÅoÉditÅhe content"));

1090  (
EXIT_SUCCESS
);

1092 
	`xîrx
(
EXIT_FAILURE
, 
	`_
("couldn't createÅheÑc file"));

1096 i‡(
n_›ti⁄
) {

1097 
rc_fûíame
 = 
	`gë_deÁu…_rc_fûíame
();

1099 i‡(!
rc_fûíame
Ë(
EXIT_FAILURE
);

1101 
c⁄f_ªt
 = 
	`c⁄fig_¸óã
(
rc_fûíame
); 
	`‰ì
(rc_filename);

1103 i‡(
c⁄f_ªt
) {

1104 
	`xw¨nx
(
	`_
("~/.%§¯fûêsuc˚ssfuŒy cª©ed, fì»‰ìÅÿedôÅhêc⁄ã¡"), 
¥ogøm_övoˇti⁄_sh‹t_«me
);

1105  (
EXIT_SUCCESS
);

1107 
	`xîrx
(
EXIT_FAILURE
, 
	`_
("couldn'à¸óã ~/.%§c"), 
¥ogøm_övoˇti⁄_sh‹t_«me
);

1111 i‡(
¨gc
 < 1)

1112 
	`xîrx
(
EXIT_FAILURE
, 
	`_
("argument missing"));

1114 i‡(
C_›ti⁄
Ë
c_›ti⁄
 = 1;

1116 i‡(
c_›ti⁄
) {

1118 i‡(!
C_›ti⁄
Ë
rc_fûíame
 = 
	`gë_deÁu…_rc_fûíame
();

1120 i‡(!
rc_fûíame
Ë(
EXIT_FAILURE
);

1122 
c⁄f_ªt
 = 
	`c⁄fig_ªad
(
rc_fûíame
);

1124 i‡(!
c⁄f_ªt
) {

1125 i‡(
C_›ti⁄
) {

1126 
	`xîrx
(
EXIT_FAILURE
, 
	`_
("couldn'tÑeadÅheÑc file"));

1128 
	`xw¨nx
(
	`_
("couldn'àªad ~/.%§c"), 
¥ogøm_övoˇti⁄_sh‹t_«me
);

1129 
	`‰ì
(
rc_fûíame
);

1130 (
EXIT_FAILURE
);

1136 
pidli°
 = 
	`xmÆloc
((
pid_t
Ë* (
¨gc
+1));

1138 *
¨gv
) {

1139 *
wÆk
 = *
¨gv
++;

1140 *
ídp
;

1141 
pid
;

1142 i‡(!
	`°∫cmp
("/¥oc/", 
wÆk
, 6)) {

1143 
wÆk
 += 6;

1145 i‡(*
wÆk
 < '0' || *walk > '9')

1148 i‡(*
wÆk
 < '0' || *walk > '9')

1149 
	`ußge
(
°dîr
);

1150 
pid
 = 
	`°πoul
(
wÆk
, &
ídp
, 0);

1151 i‡(
pid
 < 1u»||Öid > 0x7fffffffu»|| *
ídp
)

1152 
	`ußge
(
°dîr
);

1153 
pidli°
[
cou¡
++] = 
pid
;

1156 
	`discovî_shm_mö‹
();

1158 
	`mem£t
(&
p
, '\0', (p));

1160 
pidli°
[
cou¡
] = 0;

1161 
PT
 = 
	`›í¥oc
(
PROC_FILLSTAT
 | 
PROC_FILLARG
 | 
PROC_PID
, 
pidli°
);

1162 
	`ªad¥oc
(
PT
, &
p
)) {

1163 
ªt
 |
	`⁄e_¥oc
(&
p
);

1164 
cou¡
--;

1166 
	`˛o£¥oc
(
PT
);

1167 
	`‰ì
(
pidli°
);

1170 
li°node
 = 
li°hód
;Üi°nodê!
NULL
 ; ) {

1171 
li°node
 =Üi°nodê-> 
√xt
;

1172 
	`‰ì
(
li°hód
);

1173 
li°hód
 = 
li°node
;

1177 
˙f_li°node
 = 
˙f_li°hód
; cnf_li°nodê!
NULL
 ; ) {

1178 
˙f_li°node
 = cnf_li°nodê-> 
√xt
;

1179 
	`‰ì
(
˙f_li°hód
);

1180 
˙f_li°hód
 = 
˙f_li°node
;

1183 i‡(
cou¡
)

1185 
ªt
 |= 42;

1186  
ªt
;

1187 
	}
}

	@proc/alloc.c

21 
	~<°d¨g.h
>

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

26 
	~"Æloc.h
"

28 
	$xdeÁu…_îr‹
(c⁄° *
ª°ri˘
 
fmts
, ...Ë
	`__©åibuã__
((
	`f‹m©
(
¥ötf
,1,2)));

29 
	$xdeÁu…_îr‹
(c⁄° *
ª°ri˘
 
fmts
, ...) {

30 
va_li°
 
va
;

32 
	`va_°¨t
(
va
, 
fmts
);

33 
	`Ârötf
(
°dîr
, 
fmts
, 
va
);

34 
	`va_íd
(
va
);

35 
	}
}

37 
mesßge_‚
 
	gxÆloc_îr_h™dÀr
 = 
xdeÁu…_îr‹
;

40 *
	$xˇŒoc
(
size
) {

41 * 
p
;

43 i‡(
size
 == 0)

44 ++
size
;

45 
p
 = 
	`ˇŒoc
(1, 
size
);

46 i‡(!
p
) {

47 
	`xÆloc_îr_h™dÀr
("%†ÁûedÅÿÆloˇã %u byã†o‡mem‹y", 
__func__
, 
size
);

48 
	`exô
(
EXIT_FAILURE
);

50  
p
;

51 
	}
}

53 *
	$xmÆloc
(
size_t
 
size
) {

54 *
p
;

56 i‡(
size
 == 0)

57 ++
size
;

58 
p
 = 
	`mÆloc
(
size
);

59 i‡(!
p
) {

60 
	`xÆloc_îr_h™dÀr
("%†ÁûedÅÿÆloˇã %zu byã†o‡mem‹y", 
__func__
, 
size
);

61 
	`exô
(
EXIT_FAILURE
);

63 (
p
);

64 
	}
}

66 *
	$xªÆloc
(*
ﬁdp
, 
size
) {

67 *
p
;

69 i‡(
size
 == 0)

70 ++
size
;

71 
p
 = 
	`ªÆloc
(
ﬁdp
, 
size
);

72 i‡(!
p
) {

73 
	`xÆloc_îr_h™dÀr
("%†ÁûedÅÿÆloˇã %u byã†o‡mem‹y", 
__func__
, 
size
);

74 
	`exô
(
EXIT_FAILURE
);

76 (
p
);

77 
	}
}

79 *
	$x°rdup
(c⁄° *
°r
) {

80 *
p
 = 
NULL
;

82 i‡(
°r
) {

83 
size
 = 
	`°æí
(
°r
) + 1;

84 
p
 = 
	`mÆloc
(
size
);

85 i‡(!
p
) {

86 
	`xÆloc_îr_h™dÀr
("%†ÁûedÅÿÆloˇã %u byã†o‡mem‹y", 
__func__
, 
size
);

87 
	`exô
(
EXIT_FAILURE
);

89 
	`°r˝y
(
p
, 
°r
);

91 (
p
);

92 
	}
}

	@proc/alloc.h

1 #i‚de‡
PROCPS_PROC_ALLOC_H


2 
	#PROCPS_PROC_ALLOC_H


	)

4 
	~"¥o˝s.h
"

6 
EXTERN_C_BEGIN


9 
mesßge_‚
 
xÆloc_îr_h™dÀr
;

11 *
	$xˇŒoc
(
size
Ë
MALLOC
;

12 *
	$xmÆloc
(
size_t
 
size
Ë
MALLOC
;

13 *
	$xªÆloc
(*
ﬁdp
, 
size
Ë
MALLOC
;

14 *
	$x°rdup
(c⁄° *
°r
Ë
MALLOC
;

16 
EXTERN_C_END


	@proc/devname.c

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

23 
	~<sys/ty≥s.h
>

24 
	~<sys/°©.h
>

25 
	~<f˙é.h
>

26 
	~<uni°d.h
>

27 
	~"vîsi⁄.h
"

28 
	~"dev«me.h
"

29 
	~"Æloc.h
"

35 
	#TTY_NAME_SIZE
 128

	)

44 
	~<sys/sysma¸os.h
>

45 
	#MAJOR_OF
(
d
Ë(()
	`maj‹
(d))

	)

46 
	#MINOR_OF
(
d
Ë(()
	`mö‹
(d))

	)

48 
	#MAJOR_OF
(
d
Ë–(()(d)>>8uË& 0xfffu )

	)

49 
	#MINOR_OF
(
d
Ë–(()(d)&0xffuË| ((()(d)&0xfff00000u)>>12uË)

	)

50 #unde‡
maj‹


51 #unde‡
mö‹


52 
	#maj‹
 <-- dÿ
nŸ
 
u£
 -->

	)

53 
	#mö‹
 <-- dÿ
nŸ
 
u£
 -->

	)

56 
	sây_m≠_node
 {

57 
ây_m≠_node
 *
	m√xt
;

58 
	mdevfs_ty≥
;

59 
	mmaj‹_numbî
;

60 
	mmö‹_fú°
;

61 
	mmö‹_œ°
;

62 
	m«me
[16];

63 } 
	tây_m≠_node
;

65 
ây_m≠_node
 *
	gây_m≠
 = 
NULL
;

68 
	$lﬂd_drivîs
(){

69 
buf
[10000];

70 *
p
;

71 
fd
;

72 
byãs
;

73 
fd
 = 
	`›í
("/¥oc/ây/drivîs",
O_RDONLY
);

74 if(
fd
 =-1Ë
Áû
;

75 
byãs
 = 
	`ªad
(
fd
, 
buf
, (buf) - 1);

76 if(
byãs
 =-1Ë
Áû
;

77 
buf
[
byãs
] = '\0';

78 
p
 = 
buf
;

79 –
p
 = 
	`°r°r
(p, " /dev/") )){

80 
ây_m≠_node
 *
tmn
;

81 
size_t
 
Àn
;

82 *
íd
;

83 
p
 += 6;

84 
íd
 = 
	`°rchr
(
p
, ' ');

85 if(!
íd
) ;

86 
Àn
 = 
íd
 - 
p
;

87 
tmn
 = 
	`xˇŒoc
((
ây_m≠_node
));

88 
tmn
->
√xt
 = 
ây_m≠
;

89 
ây_m≠
 = 
tmn
;

92 if(
Àn
 >3 && !
	`°∫cmp
(
íd
 - 2, "%d", 2)){

93 
Àn
 -= 2;

94 
tmn
->
devfs_ty≥
 = 1;

96 if(
Àn
 > 
tmn
->
«me
)

97 
Àn
 =  
tmn
->
«me
 - 1;

98 
	`mem˝y
(
tmn
->
«me
, 
p
, 
Àn
);

99 
p
 = 
íd
;

100 *
p
 == ' ')Ö++;

101 
tmn
->
maj‹_numbî
 = 
	`©oi
(
p
);

102 
p
 +
	`°r•n
(p, "0123456789");

103 *
p
 == ' ')Ö++;

104 
	`ssˇnf
(
p
, "%u-%u", &
tmn
->
mö‹_fú°
, &tmn->
mö‹_œ°
)){

107 
ây_m≠
 =Åty_m≠->
√xt
;

108 
	`‰ì
(
tmn
);

111 
tmn
->
mö‹_œ°
 =Åmn->
mö‹_fú°
;

117 
Áû
:

118 if(
fd
 !-1Ë
	`˛o£
(fd);

119 if(!
ây_m≠
Ëây_m≠ = (
ây_m≠_node
 *)-1;

120 
	}
}

123 
	$drivî_«me
(*
ª°ri˘
 c⁄° 
buf
, 
maj
, 
mö
){

124 
°©
 
sbuf
;

125 
ây_m≠_node
 *
tmn
;

126 if(!
ây_m≠
Ë
	`lﬂd_drivîs
();

127 if(
ây_m≠
 =(
ây_m≠_node
 *)-1)  0;

128 
tmn
 = 
ây_m≠
;

130 if(!
tmn
)  0;

131 if(
tmn
->
maj‹_numbî
 =
maj
 &&Åmn->
mö‹_fú°
 <
mö
 &&Åmn->
mö‹_œ°
 >= min) ;

132 
tmn
 =Åmn->
√xt
;

134 
	`•rötf
(
buf
, "/dev/%s%d", 
tmn
->
«me
, 
mö
);

135 if(
	`°©
(
buf
, &
sbuf
) < 0){

136 
	`•rötf
(
buf
, "/dev/%s/%d", 
tmn
->
«me
, 
mö
);

137 if(
	`°©
(
buf
, &
sbuf
) < 0){

138 if(
tmn
->
devfs_ty≥
)  0;

139 
	`•rötf
(
buf
, "/dev/%s", 
tmn
->
«me
);

140 if(
	`°©
(
buf
, &
sbuf
) < 0)  0;

143 if(
mö
 !
	`MINOR_OF
(
sbuf
.
°_rdev
))  0;

144 if(
maj
 !
	`MAJOR_OF
(
sbuf
.
°_rdev
))  0;

146 
	}
}

149 c⁄° 
	glow_dísôy_«mes
[][6] = {

191 
	~<°dio.h
>

192 
	#AS
(
x
Ë((x)/((x)[0]))

	)

193 
	$maö
(
¨gc
, *
¨gv
[]){

194 
i
 = 0;

195 
i
<
	`AS
(
low_dísôy_«mes
)){

196 
	`¥ötf
("%3d = /dev/ây%.*s\n",
i
, 
low_dísôy_«mes
[i],low_density_names[i]);

197 
i
++;

200 
	}
}

204 
	$guess_«me
(*
ª°ri˘
 c⁄° 
buf
, 
maj
, 
mö
){

205 
°©
 
sbuf
;

206 #i‚de‡
__CYGWIN__


207 
t0
, 
t1
;

209 
tmpmö
 = 
mö
;

211 
maj
){

213 if(
tmpmö
 > 255)  0;

214 #ifde‡
__CYGWIN__


215 
	`•rötf
(
buf
, "dev/c⁄s%d", 
tmpmö
);

221 
t0
 = "pqr°uvwxyzabcde"[
tmpmö
>>4];

222 
t1
 = "0123456789abcdef"[
tmpmö
&0x0f];

223 
	`•rötf
(
buf
, "/dev/ây%c%c", 
t0
, 
t1
);

227 if(
mö
<64){

228 
	`•rötf
(
buf
, "/dev/ây%d", 
mö
);

231 
	`•rötf
(
buf
, "/dev/âyS%d", 
mö
-64);

233 11: 
	`•rötf
(
buf
, "/dev/âyB%d", 
mö
); ;

234 17: 
	`•rötf
(
buf
, "/dev/âyH%d", 
mö
); ;

235 19: 
	`•rötf
(
buf
, "/dev/âyC%d", 
mö
); ;

236 22: 
	`•rötf
(
buf
, "/dev/âyD%d", 
mö
); ;

237 23: 
	`•rötf
(
buf
, "/dev/âyD%d", 
mö
); ;

238 24: 
	`•rötf
(
buf
, "/dev/âyE%d", 
mö
); ;

239 32: 
	`•rötf
(
buf
, "/dev/âyX%d", 
mö
); ;

240 43: 
	`•rötf
(
buf
, "/dev/âyI%d", 
mö
); ;

241 46: 
	`•rötf
(
buf
, "/dev/âyR%d", 
mö
); ;

242 48: 
	`•rötf
(
buf
, "/dev/âyL%d", 
mö
); ;

243 57: 
	`•rötf
(
buf
, "/dev/âyP%d", 
mö
); ;

244 71: 
	`•rötf
(
buf
, "/dev/âyF%d", 
mö
); ;

245 75: 
	`•rötf
(
buf
, "/dev/âyW%d", 
mö
); ;

246 78: 
	`•rötf
(
buf
, "/dev/âyM%d", 
mö
); ;

247 105: 
	`•rötf
(
buf
, "/dev/âyV%d", 
mö
); ;

248 112: 
	`•rötf
(
buf
, "/dev/âyM%d", 
mö
); ;

249 #ifde‡
__CYGWIN__


250 136: 
	`•rötf
(
buf
, "/dev/±y%d", 
mö
); ;

253 136 ... 143: 
	`•rötf
(
buf
, "/dev/±s/%d", 
mö
+(
maj
-136)*256); ;

255 148: 
	`•rötf
(
buf
, "/dev/âyT%d", 
mö
); ;

256 154: 
	`•rötf
(
buf
, "/dev/âySR%d", 
mö
); ;

257 156: 
	`•rötf
(
buf
, "/dev/âySR%d", 
mö
+256); ;

258 164: 
	`•rötf
(
buf
, "/dev/âyCH%d", 
mö
); ;

259 166: 
	`•rötf
(
buf
, "/dev/âyACM%d", 
mö
); ;

260 172: 
	`•rötf
(
buf
, "/dev/âyMX%d", 
mö
); ;

261 174: 
	`•rötf
(
buf
, "/dev/âySI%d", 
mö
); ;

262 188: 
	`•rötf
(
buf
, "/dev/âyUSB%d", 
mö
); ;

264 if(
mö
 > 
low_dísôy_«mes
 / Üow_density_names[0])  0;

265 
	`mem˝y
(
buf
,"/dev/tty",8);

266 
	`mem˝y
(
buf
+8, 
low_dísôy_«mes
[
mö
], Üow_density_names[0]);

267 
buf
[8 +  
low_dísôy_«mes
[0]] = '\0';

270 208: 
	`•rötf
(
buf
, "/dev/âyU%d", 
mö
); ;

271 216: 
	`•rötf
(
buf
, "/dev/âyUB%d", 
mö
); ;

272 224: 
	`•rötf
(
buf
, "/dev/âyY%d", 
mö
); ;

273 227: 
	`•rötf
(
buf
, "/dev/3270/ây%d", 
mö
); ;

274 229: 
	`•rötf
(
buf
, "/dev/i£rõs/vây%d", 
mö
); ;

275 256: 
	`•rötf
(
buf
, "/dev/âyEQ%d", 
mö
); ;

278 if(
	`°©
(
buf
, &
sbuf
) < 0)  0;

279 if(
mö
 !
	`MINOR_OF
(
sbuf
.
°_rdev
))  0;

280 if(
maj
 !
	`MAJOR_OF
(
sbuf
.
°_rdev
))  0;

282 
	}
}

288 
	$lök_«me
(*
ª°ri˘
 c⁄° 
buf
, 
maj
, 
mö
, 
pid
, c⁄° *ª°ri˘ 
«me
){

289 
°©
 
sbuf
;

290 
∑th
[32];

291 
cou¡
;

292 
	`•rötf
(
∑th
, "/¥oc/%d/%s", 
pid
, 
«me
);

293 
cou¡
 = 
	`ªadlök
(
∑th
,
buf
,
TTY_NAME_SIZE
-1);

294 if(
cou¡
 == -1)  0;

295 
buf
[
cou¡
] = '\0';

296 if(
	`°©
(
buf
, &
sbuf
) < 0)  0;

297 if(
mö
 !
	`MINOR_OF
(
sbuf
.
°_rdev
))  0;

298 if(
maj
 !
	`MAJOR_OF
(
sbuf
.
°_rdev
))  0;

300 
	}
}

302 #ifde‡
__CYGWIN__


305 
	$˘ty_«me
(*
ª°ri˘
 c⁄° 
buf
, 
pid
) {

306 
∑th
[32];

307 
FILE
 *
Â
;

308 *
lf
;

309 
	`•rötf
 (
∑th
, "/¥oc/%d/˘ty", 
pid
);

310 
Â
 = 
	`f›í
 (
∑th
, "r");

311 i‡(!
Â
)

313 i‡(!
	`fgës
 (
buf
,
TTY_NAME_SIZE
,
Â
))

315 
	`f˛o£
 (
Â
);

318 
	`f˛o£
 (
Â
);

319 
lf
 = 
	`°rchr
 (
buf
, '\n');

320 i‡(
lf
)

321 *
lf
 = (l‡=
buf
 ? '?' : '\0');

323 
	}
}

327 
	$dev_to_ây
(*
ª°ri˘
 
ªt
, 
ch›
, 
dev_t
 
dev_t_dev
, 
pid
, 
Êags
) {

328 
buf
[
TTY_NAME_SIZE
];

329 *
ª°ri˘
 
tmp
 = 
buf
;

330 
dev
 = 
dev_t_dev
;

331 
i
 = 0;

332 
c
;

333 if(
dev
 =0uË
no_ây
;

334 #ifde‡
__CYGWIN__


335 if–
	`˘ty_«me
(
tmp
, 
pid
 )Ë
abbªv
;

337 if(
	`drivî_«me
(
tmp
, 
	`MAJOR_OF
(
dev
), 
	`MINOR_OF
(devË)Ë
abbªv
;

338 if–
	`lök_«me
(
tmp
, 
	`MAJOR_OF
(
dev
), 
	`MINOR_OF
(dev), 
pid
, "fd/2" )Ë
abbªv
;

339 if–
	`guess_«me
(
tmp
, 
	`MAJOR_OF
(
dev
), 
	`MINOR_OF
(devË)Ë
abbªv
;

340 if–
	`lök_«me
(
tmp
, 
	`MAJOR_OF
(
dev
), 
	`MINOR_OF
(dev), 
pid
, "fd/255")Ë
abbªv
;

342 
no_ây
:

343 
	`°r˝y
(
ªt
, "?");

345 
abbªv
:

346 if((
Êags
&
ABBREV_DEV
Ë&& !
	`°∫cmp
(
tmp
,"/dev/",5) &&Åmp[5])Åmp += 5;

347 if((
Êags
&
ABBREV_TTY
Ë&& !
	`°∫cmp
(
tmp
,"tty", 3) &&Åmp[3])Åmp += 3;

348 if((
Êags
&
ABBREV_PTS
Ë&& !
	`°∫cmp
(
tmp
,"pts/", 4) &&Åmp[4])Åmp += 4;

350 if(
ch›
 + ()(
tmp
-
buf
) <=  buf)

351 
tmp
[
ch›
] = '\0';

354 
c
 = *
tmp
;

355 
tmp
++;

356 if(!
c
) ;

357 
i
++;

358 if(
c
<=' ') c = '?';

359 if(
c
>126) c = '?';

360 *
ªt
 = 
c
;

361 
ªt
++;

363 *
ªt
 = '\0';

364  
i
;

365 
	}
}

368 
	$ây_to_dev
(c⁄° *
ª°ri˘
 c⁄° 
«me
) {

369 
°©
 
sbuf
;

370 
buf
[32];

371 if(
«me
[0]=='/' && 
	`°©
“ame, &
sbuf
Ë>0Ë sbuf.
°_rdev
;

372 
	`¢¥ötf
(
buf
,32,"/dev/%s",
«me
);

373 if(
	`°©
(
buf
, &
sbuf
Ë>0Ë sbuf.
°_rdev
;

374 
	`¢¥ötf
(
buf
,32,"/dev/ây%s",
«me
);

375 if(
	`°©
(
buf
, &
sbuf
Ë>0Ë sbuf.
°_rdev
;

376 
	`¢¥ötf
(
buf
,32,"/dev/±s/%s",
«me
);

377 if(
	`°©
(
buf
, &
sbuf
Ë>0Ë sbuf.
°_rdev
;

379 
	}
}

	@proc/devname.h

1 #i‚de‡
PROC_DEVNAME_H


2 
	#PROC_DEVNAME_H


	)

4 
	~"¥o˝s.h
"

5 
	~"ªad¥oc.h
"

7 
	gEXTERN_C_BEGIN


9 
	#ABBREV_DEV
 1

	)

10 
	#ABBREV_TTY
 2

	)

11 
	#ABBREV_PTS
 4

	)

13 
dev_to_ây
(*
__ª°ri˘
 
ªt
, 
ch›
, 
dev_t
 
dev_t_dev
, 
pid
, 
Êags
);

15 
ây_to_dev
(c⁄° *
__ª°ri˘
 c⁄° 
«me
);

17 
	gEXTERN_C_END


	@proc/escape.c

20 
	~<°dio.h
>

21 
	~<sys/ty≥s.h
>

22 
	~<°rög.h
>

23 
	~"¥o˝s.h
"

24 
	~"esˇ≥.h
"

25 
	~"ªad¥oc.h
"

27 #i‡(
__GNU_LIBRARY__
 >6Ë&& (!
deföed
(
__UCLIBC__
Ë|| deföed(
__UCLIBC_HAS_WCHAR__
))

28 
	~<wch¨.h
>

29 
	~<w˘y≥.h
>

30 
	~<°dlib.h
>

31 
	~<˘y≥.h
>

32 
	~<œngöfo.h
>

35 #i‡(
__GNU_LIBRARY__
 >6Ë&& (!
deföed
(
__UCLIBC__
Ë|| deföed(
__UCLIBC_HAS_WCHAR__
))

36 
	$esˇ≥_°r_utf8
(*
ª°ri˘
 
d°
, c⁄° *ª°ri˘ 
§c
, 
bufsize
, *
max˚Œs
){

37 
my_˚Œs
 = 0;

38 
my_byãs
 = 0;

39 
mb°©e_t
 
s
;

41 
	`mem£t
(&
s
, 0,  (s));

44 
wch¨_t
 
wc
;

45 
Àn
 = 0;

47 if(
my_˚Œs
 >*
max˚Œs
 || 
my_byãs
+1 >
bufsize
)

50 i‡(!(
Àn
 = 
	`mbπowc
 (&
wc
, 
§c
, 
MB_CUR_MAX
, &
s
)))

54 i‡(
Àn
 < 0) {

56 
	`mem£t
 (&
s
, 0,  (s));

57 *(
d°
++) = '?';

58 
§c
++;

59 
my_˚Œs
++;

60 
my_byãs
++;

62 } i‡(
Àn
==1) {

64 *(
d°
++Ë
	`i•röt
(*
§c
) ? *src : '?';

65 
§c
++;

66 
my_˚Œs
++;

67 
my_byãs
++;

69 } i‡(!
	`isw¥öt
(
wc
)) {

71 *(
d°
++) = '?';

72 
§c
+=
Àn
;

73 
my_˚Œs
++;

74 
my_byãs
++;

78 
wÀn
 = 
	`wcwidth
(
wc
);

80 i‡(
wÀn
==0) {

83 *(
d°
++) = '?';

84 
§c
+=
Àn
;

85 
my_˚Œs
++;

86 
my_byãs
++;

90 i‡(
my_˚Œs
+
wÀn
 > *
max˚Œs
 || 
my_byãs
+1+
Àn
 >
bufsize
) ;

92 i‡(
	`memchr
(
§c
, 0x9B, 
Àn
)) {

94 *(
d°
++) = '?';

95 
§c
+=
Àn
;

96 
my_˚Œs
++;

97 
my_byãs
++;

100 
	`mem˝y
(
d°
, 
§c
, 
Àn
);

101 
my_˚Œs
 +
wÀn
;

102 
d°
 +
Àn
;

103 
my_byãs
 +
Àn
;

104 
§c
 +
Àn
;

110 *
d°
 = '\0';

114 *
max˚Œs
 -
my_˚Œs
;

115  
my_byãs
;

116 
	}
}

121 
	$esˇ≥_°r
(*
ª°ri˘
 
d°
, c⁄° *ª°ri˘ 
§c
, 
bufsize
, *
max˚Œs
){

122 
c
;

123 
my_˚Œs
 = 0;

124 
my_byãs
 = 0;

125 c⁄° 
codes
[] =

135 #i‡(
__GNU_LIBRARY__
 >6Ë&& (!
	`deföed
(
__UCLIBC__
Ë|| deföed(
__UCLIBC_HAS_WCHAR__
))

136 
utf_öô
=0;

138 if(
utf_öô
==0){

140 *
íc
 = 
	`∆_œngöfo
(
CODESET
);

141 
utf_öô
 = 
íc
 && 
	`°rˇ£cmp
(enc, "UTF-8")==0 ? 1 : -1;

143 i‡(
utf_öô
==1 && 
MB_CUR_MAX
>1) {

145  
	`esˇ≥_°r_utf8
(
d°
, 
§c
, 
bufsize
, 
max˚Œs
);

149 if(
bufsize
 > *
max˚Œs
+1) bufsize=*maxcells+1;

152 if(
my_˚Œs
 >*
max˚Œs
 || 
my_byãs
+1 >
bufsize
)

154 
c
 = (Ë*(
§c
++);

155 if(!
c
) ;

156 if(
codes
[
c
]!='|') c=codes[c];

157 
my_˚Œs
++;

158 
my_byãs
++;

159 *(
d°
++Ë
c
;

161 *
d°
 = '\0';

163 *
max˚Œs
 -
my_˚Œs
;

164  
my_byãs
;

165 
	}
}

172 
	$esˇ≥_°æi°
(*
ª°ri˘
 
d°
, *ª°ri˘ c⁄° *ª°ri˘ 
§c
, 
size_t
 
byãs
, *
˚Œs
){

173 
size_t
 
i
 = 0;

176 
i
 +
	`esˇ≥_°r
(
d°
+i, *
§c
, 
byãs
-i, 
˚Œs
);

177 if(
byãs
-
i
 < 3) ;

178 
§c
++;

179 if(!*
§c
) ;

180 i‡(*
˚Œs
<=1) ;

181 
d°
[
i
++] = ' ';

182 --*
˚Œs
;

184  
i
;

185 
	}
}

189 
	$esˇ≥_comm™d
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
, 
byãs
, *
˚Œs
, 
Êags
){

190 
ovîhód
 = 0;

191 
íd
 = 0;

193 if(
Êags
 & 
ESC_ARGS
){

194 **
lc
 = (**)
µ
->
cmdlöe
;

195 if(
lc
 && *lcË 
	`esˇ≥_°æi°
(
outbuf
,Üc, 
byãs
, 
˚Œs
);

197 if(
Êags
 & 
ESC_BRACKETS
){

198 
ovîhód
 += 2;

200 if(
Êags
 & 
ESC_DEFUNCT
){

201 if(
µ
->
°©e
=='Z'Ë
ovîhód
 += 10;

202 
Êags
 &~
ESC_DEFUNCT
;

204 if(
ovîhód
 + 1 >*
˚Œs
){

207 
outbuf
[1] = '\0';

210 if(
Êags
 & 
ESC_BRACKETS
){

211 
outbuf
[
íd
++] = '[';

213 *
˚Œs
 -
ovîhód
;

214 
íd
 +
	`esˇ≥_°r
(
outbuf
+íd, 
µ
->
cmd
, 
byãs
-
ovîhód
, 
˚Œs
);

217 if(
Êags
 & 
ESC_BRACKETS
){

218 
outbuf
[
íd
++] = ']';

220 if(
Êags
 & 
ESC_DEFUNCT
){

221 
	`mem˝y
(
outbuf
+
íd
, " <defunct>", 10);

222 
íd
 += 10;

224 
outbuf
[
íd
] = '\0';

225  
íd
;

226 
	}
}

232 
	$esˇ≥d_c›y
(*
ª°ri˘
 
d°
, c⁄° *ª°ri˘ 
§c
, 
bufsize
, *
maxroom
){

233 
n
;

234 i‡(
bufsize
 > *
maxroom
+1) bufsize = *maxroom+1;

235 
n
 = 
	`¢¥ötf
(
d°
, 
bufsize
, "%s", 
§c
);

236 i‡(
n
 >
bufsize
)Ç = bufsize-1;

237 *
maxroom
 -
n
;

238  
n
;

239 
	}
}

	@proc/escape.h

1 #i‚de‡
PROCPS_PROC_ESCAPE_H


2 
	#PROCPS_PROC_ESCAPE_H


	)

5 
	~<sys/ty≥s.h
>

6 
	~"¥o˝s.h
"

7 
	~"ªad¥oc.h
"

9 
	gEXTERN_C_BEGIN


11 
	#ESC_STRETCH
 1

12 

	)

13 
	#ESC_ARGS
 0x1

14 
	#ESC_BRACKETS
 0x2

15 
	#ESC_DEFUNCT
 0x4

16 

	)

17 
esˇ≥_°æi°
(*
__ª°ri˘
 
d°
, *__ª°ri˘ c⁄° *__ª°ri˘ 
§c
, 
size_t
 
n
, *
˚Œs
);

18 
esˇ≥_°r
(*
__ª°ri˘
 
d°
, c⁄° *__ª°ri˘ 
§c
, 
bufsize
, *
max˚Œs
);

19 
esˇ≥_comm™d
(*
__ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *__ª°ri˘ c⁄° 
µ
, 
byãs
, *
˚Œs
, 
Êags
);

20 
esˇ≥d_c›y
(*
__ª°ri˘
 
d°
, c⁄° *__ª°ri˘ 
§c
, 
bufsize
, *
maxroom
);

22 
	gEXTERN_C_END


	@proc/numa.c

20 #i‚de‡
NUMA_DISABLE


21 
	~<dlf˙.h
>

23 
	~<°dlib.h
>

25 
	~"numa.h
"

43 
	$nuŒ_max_node
 (Ë{  -1; 
	}
}

44 
	$nuŒ_node_of_˝u
 (
n
Ë{ (Í;  -1; 
	}
}

47 #i‚de‡
NUMA_DISABLE


48 #ifde‡
PRETEND_NUMA


49 
	$Áke_max_node
 (Ë{  3; 
	}
}

50 
	$Áke_node_of_˝u
 (
n
Ë{  (1 =“ % 4)Ë? 0 : (¿% 4); 
	}
}

55 #i‚de‡
NUMA_DISABLE


56 *
	glibnuma_h™dÀ
;

58 (*
numa_max_node
Ë(Ë
nuŒ_max_node
;

59 (*
numa_node_of_˝u
Ë(Ë
nuŒ_node_of_˝u
;

62 
	$numa_öô
 () {

63 
öôülized
;

65 i‡(
öôülized
)

68 #i‚de‡
NUMA_DISABLE


69 #i‚de‡
PRETEND_NUMA


71 i‡((
libnuma_h™dÀ
 = 
	`dl›í
("libnuma.so", 
RTLD_LAZY
))

72 || (
libnuma_h™dÀ
 = 
	`dl›í
("libnuma.so.1", 
RTLD_LAZY
))) {

73 
numa_max_node
 = 
	`dlsym
(
libnuma_h™dÀ
, "numa_max_node");

74 
numa_node_of_˝u
 = 
	`dlsym
(
libnuma_h™dÀ
, "numa_node_of_cpu");

75 i‡(
numa_max_node
 =
NULL


76 || (
numa_node_of_˝u
 =
NULL
)) {

79 
	`dl˛o£
(
libnuma_h™dÀ
);

80 
libnuma_h™dÀ
 = 
NULL
;

81 
numa_max_node
 = 
nuŒ_max_node
;

82 
numa_node_of_˝u
 = 
nuŒ_node_of_˝u
;

86 
libnuma_h™dÀ
 = (*)-1;

87 
numa_max_node
 = 
Áke_max_node
;

88 
numa_node_of_˝u
 = 
Áke_node_of_˝u
;

91 
öôülized
 = 1;

92 
	}
}

95 
	$numa_unöô
 () {

96 #i‚de‡
PRETEND_NUMA


108 
	}
}

111 #i‡
deföed
(
PRETEND_NUMA
Ë&& deföed(
NUMA_DISABLE
)

112 #w¨nög 'PRETEND_NUMA' 
ign‹ed
, 'NUMA_DISABLE' 
is
 
a˘ive


	@proc/numa.h

20 #i‚de‡
PROCPS_NUMA_H


21 
	#PROCPS_NUMA_H


	)

23 
	~<„©uªs.h
>

25 
__BEGIN_DECLS


27 
numa_öô
 ();

28 
numa_unöô
 ();

30 (*
numa_max_node
) ();

31 (*
numa_node_of_˝u
) ();

33 
__END_DECLS


	@proc/procps-private.h

18 #i‚de‡
PROCPS_PRIVATE_H


19 
	#PROCPS_PRIVATE_H


	)

21 
	~<¥oc/¥o˝s.h
>

23 
	#PROCPS_EXPORT
 
	`__©åibuã__
 ((
	`visibûôy
("deÁu…")))

	)

	@proc/procps.h

1 #i‚de‡
PROCPS_PROC_PROCPS_H


2 
	#PROCPS_PROC_PROCPS_H


	)

4 #ifde‡ 
__˝lu•lus


5 
	#EXTERN_C_BEGIN
 "C" {

	)

6 
	#EXTERN_C_END
 }

	)

8 
	#EXTERN_C_BEGIN


	)

9 
	#EXTERN_C_END


	)

34 #i‡
deföed
(
k64ã°
Ë|| (deföed(
_ABIN32
Ë&& 
_MIPS_SIM
 == _ABIN32)

35 
	#KLONG
 

36 
	#KLF
 "Œ"

	)

37 
	#STRTOUKL
 
°πouŒ


	)

39 
	#KLONG
 

	)

40 
	#KLF
 "l"

	)

41 
	#STRTOUKL
 
°πoul


	)

45 
	#NORETURN
 
	`__©åibuã__
((
__n‹ëu∫__
))

	)

46 
	#FUNCTION
 
	`__©åibuã__
((
__c⁄°__
))

47 

	)

48 #i‡
__GNUC__
 > 2 || 
__GNUC_MINOR__
 >= 96

50 
	#MALLOC
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

52 
	#PURE
 
	`__©åibuã__
 ((
__puª__
))

	)

54 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x),1)

	)

55 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x),0)

	)

56 
	#ex≥˘ed
(
x
,
y
Ë
	`__buûtö_ex≥˘
((x),(y))

	)

58 
	#MALLOC


	)

59 
	#PURE


	)

60 
	#likñy
(
x
Ë(x)

	)

61 
	#u∆ikñy
(
x
Ë(x)

	)

62 
	#ex≥˘ed
(
x
,
y
Ë(x)

	)

65 #ifde‡
SHARED


66 #i‡
SHARED
==1 && (
__GNUC__
 > 2 || 
__GNUC_MINOR__
 >= 96)

67 
	#LABEL_OFFSET


	)

71 
	#STRINGIFY_ARG
(
a
Ë#a

	)

72 
	#STRINGIFY
(
a
Ë
	`STRINGIFY_ARG
◊)

	)

75 #i‡–
__GNUC__
 =3 && 
__GNUC_MINOR__
 > 0 ) || __GNUC__ > 3

76 
	#OBSOLETE
 
	`__©åibuã__
((
dïªˇãd
))

	)

78 
	#OBSOLETE


	)

84 #i‡(–
__GNUC__
 =3 && 
__GNUC_MINOR__
 > 2 ) || __GNUC__ > 3Ë&& !
deföed
(
__CYGWIN__
)

85 
	#HIDDEN_ALIAS
(
x
Ë
	`__ty≥of
(xËx##
_dúe˘
 
	`__©åibuã__
((
	`Æüs
(#x),
	`visibûôy
("hiddí")))

	)

87 
	#HIDDEN_ALIAS
(
x
Ë
	`__ty≥of
(xËx##
_dúe˘
 
	`__©åibuã__
((
	`Æüs
(#x)))

	)

91 (*
	tmesßge_‚
)(c⁄° *
	t__ª°ri˘
, ...Ë
	t__©åibuã__
((
	tf‹m©
(
	t¥ötf
,1,2)));

	@proc/pwcache.c

24 
	~<°dio.h
>

25 
	~<°rög.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<°dlib.h
>

28 
	~<pwd.h
>

29 
	~"Æloc.h
"

30 
	~"pwˇche.h
"

31 
	~<gΩ.h
>

35 
	#HASHSIZE
 64

	)

36 
	#HASH
(
x
Ë((xË& (
HASHSIZE
 - 1))

	)

38 
	spwbuf
 {

39 
pwbuf
 *
	m√xt
;

40 
uid_t
 
	muid
;

41 
	m«me
[
P_G_SZ
];

42 } *
	gpwhash
[
HASHSIZE
];

44 *
	$pwˇche_gë_u£r
(
uid_t
 
uid
) {

45 
pwbuf
 **
p
;

46 
∑sswd
 *
pw
;

48 
p
 = &
pwhash
[
	`HASH
(
uid
)];

49 *
p
) {

50 i‡((*
p
)->
uid
 == uid)

51 ((*
p
)->
«me
);

52 
p
 = &(*p)->
√xt
;

54 *
p
 = (
pwbuf
 *Ë
	`xmÆloc
((pwbuf));

55 (*
p
)->
uid
 = uid;

56 
pw
 = 
	`gëpwuid
(
uid
);

57 if(!
pw
 || 
	`°æí
’w->
pw_«me
Ë>
P_G_SZ
)

58 
	`•rötf
((*
p
)->
«me
, "%u", 
uid
);

60 
	`°r˝y
((*
p
)->
«me
, 
pw
->
pw_«me
);

62 (*
p
)->
√xt
 = 
NULL
;

63 ((*
p
)->
«me
);

64 
	}
}

66 
	sgΩbuf
 {

67 
gΩbuf
 *
	m√xt
;

68 
gid_t
 
	mgid
;

69 
	m«me
[
P_G_SZ
];

70 } *
	ggΩhash
[
HASHSIZE
];

72 *
	$pwˇche_gë_group
(
gid_t
 
gid
) {

73 
gΩbuf
 **
g
;

74 
group
 *
gr
;

76 
g
 = &
gΩhash
[
	`HASH
(
gid
)];

77 *
g
) {

78 i‡((*
g
)->
gid
 == gid)

79 ((*
g
)->
«me
);

80 
g
 = &(*g)->
√xt
;

82 *
g
 = (
gΩbuf
 *Ë
	`xmÆloc
((grpbuf));

83 (*
g
)->
gid
 = gid;

84 
gr
 = 
	`gëgrgid
(
gid
);

85 i‡(!
gr
 || 
	`°æí
(gr->
gr_«me
Ë>
P_G_SZ
)

86 
	`•rötf
((*
g
)->
«me
, "%u", 
gid
);

88 
	`°r˝y
((*
g
)->
«me
, 
gr
->
gr_«me
);

89 (*
g
)->
√xt
 = 
NULL
;

90 ((*
g
)->
«me
);

91 
	}
}

	@proc/pwcache.h

1 #i‚de‡
PROCPS_PROC_PWCACHE_H


2 
	#PROCPS_PROC_PWCACHE_H


	)

4 
	~<sys/ty≥s.h
>

5 
	~"¥o˝s.h
"

7 
	gEXTERN_C_BEGIN


10 
	#P_G_SZ
 33

	)

12 *
pwˇche_gë_u£r
(
uid_t
 
uid
);

13 *
pwˇche_gë_group
(
gid_t
 
gid
);

15 
	gEXTERN_C_END


	@proc/readproc.c

22 
	~"vîsi⁄.h
"

23 
	~"ªad¥oc.h
"

24 
	~"Æloc.h
"

25 
	~"esˇ≥.h
"

26 
	~"pwˇche.h
"

27 
	~"dev«me.h
"

28 
	~"¥o˝s.h
"

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<î∫o.h
>

32 
	~<°d¨g.h
>

33 
	~<°rög.h
>

34 
	~<uni°d.h
>

35 
	~<sig«l.h
>

36 
	~<f˙é.h
>

37 
	~<dúít.h
>

38 
	~<sys/ty≥s.h
>

39 
	~<sys/°©.h
>

40 #ifde‡
WITH_SYSTEMD


41 
	~<sy°emd/sd-logö.h
>

45 #ifde‡
PROF


46 
__cyg_¥ofûe_func_íãr
(*,*);

47 
	#ENTER
(
x
Ë
	`__cyg_¥ofûe_func_íãr
((*)x,(*)x)

	)

48 
	#LEAVE
(
x
Ë
	`__cyg_¥ofûe_func_exô
((*)x,(*)x)

	)

50 
	#ENTER
(
x
)

	)

51 
	#LEAVE
(
x
)

	)

54 #ifde‡
QUICK_THREADS


56 
	#MK_THREAD
(
q
Ëq->
∑d_1
 = '\xì'

	)

57 
	#IS_THREAD
(
q
Ë–q->
∑d_1
 ='\xì' )

	)

62 *
	g§c_buf„r
,

63 *
	gd°_buf„r
;

64 
	#MAX_BUFSZ
 1024*64*2

	)

67 
	suébuf_s
 {

68 *
	mbuf
;

69 
	msiz
;

70 } 
	guébuf_s
;

72 #i‚de‡
SIGNAL_STRING


74 
	$unhex
(c⁄° *
ª°ri˘
 
˝
){

75 
uŒ
 = 0;

77 
c
 = *
˝
++;

78 if(
	`u∆ikñy
(
c
<0x30)) ;

79 
uŒ
 = (uŒ<<4Ë| (
c
 - (c>0x57) ? 0x57 : 0x30) ;

81  
uŒ
;

82 
	}
}

85 
	gèsk_dú_missög
;

89 
ölöe
 
	$‰ì_acquúed
 (
¥oc_t
 *
p
, 
ªu£
) {

90 #ifde‡
QUICK_THREADS


91 i‡(!
	`IS_THREAD
(
p
)) {

93 i‡(
p
->
ívú⁄
Ë
	`‰ì
((*)*p->environ);

94 i‡(
p
->
cmdlöe
Ë
	`‰ì
((*)*p->cmdline);

95 i‡(
p
->
cgroup
Ë
	`‰ì
((*)*p->cgroup);

96 i‡(
p
->
cg«me
Ë
	`‰ì
(p->cgname);

97 i‡(
p
->
supgid
Ë
	`‰ì
(p->supgid);

98 i‡(
p
->
supgΩ
Ë
	`‰ì
(p->supgrp);

99 i‡(
p
->
sd_mach
Ë
	`‰ì
(p->sd_mach);

100 i‡(
p
->
sd_ouid
Ë
	`‰ì
(p->sd_ouid);

101 i‡(
p
->
sd_£©
Ë
	`‰ì
(p->sd_seat);

102 i‡(
p
->
sd_£ss
Ë
	`‰ì
(p->sd_sess);

103 i‡(
p
->
sd_¶i˚
Ë
	`‰ì
(p->sd_slice);

104 i‡(
p
->
sd_unô
Ë
	`‰ì
(p->sd_unit);

105 i‡(
p
->
sd_uunô
Ë
	`‰ì
(p->sd_uunit);

106 #ifde‡
QUICK_THREADS


109 
	`mem£t
(
p
, 
ªu£
 ? '\0' : '\xff', (*p));

110 
	}
}

114 
	s°©us_èbÀ_°ru˘
 {

115 
	m«me
[8];

116 
	mÀn
;

117 #ifde‡
LABEL_OFFSET


118 
	moff£t
;

120 *
	maddr
;

122 } 
	t°©us_èbÀ_°ru˘
;

124 #ifde‡
LABEL_OFFSET


125 
	#F
(
x
Ë{#x, (#x)-1, ()(&&
ˇ£_
##x-&&
ba£
)},

	)

127 
	#F
(
x
Ë{#x, (#x)-1, &&
ˇ£_
##x},

	)

129 
	#NUL
 {"", 0, 0},

	)

131 
	#GPERF_TABLE_SIZE
 128

	)

152 
	$°©us2¥oc
(*
S
, 
¥oc_t
 *
ª°ri˘
 
P
, 
is_¥oc
){

153 
Thªads
 = 0;

154 
Tgid
 = 0;

155 
Pid
 = 0;

158 c⁄° 
asso
[] =

175 c⁄° 
°©us_èbÀ_°ru˘
 
èbÀ
[
GPERF_TABLE_SIZE
] = {

176 
	`F
(
VmHWM
)

177 
	`F
(
Thªads
)

178 
NUL
 NUL NUL

179 
	`F
(
VmRSS
)

180 
	`F
(
VmSw≠
)

181 
NUL
 NUL NUL

182 
	`F
(
Tgid
)

183 
	`F
(
VmStk
)

184 
NUL
 NUL NUL

185 
	`F
(
VmSize
)

186 
	`F
(
Gid
)

187 
NUL
 NUL NUL

188 
	`F
(
VmPTE
)

189 
	`F
(
VmPók
)

190 
NUL
 NUL NUL

191 
	`F
(
ShdPnd
)

192 
	`F
(
Pid
)

193 
NUL
 NUL NUL

194 
	`F
(
PPid
)

195 
	`F
(
VmLib
)

196 
NUL
 NUL NUL

197 
	`F
(
SigPnd
)

198 
	`F
(
VmLck
)

199 
NUL
 NUL NUL

200 
	`F
(
SigCgt
)

201 
	`F
(
Sèã
)

202 
NUL
 NUL NUL

203 
	`F
(
C≠Prm
)

204 
	`F
(
Uid
)

205 
NUL
 NUL NUL

206 
	`F
(
SigIgn
)

207 
	`F
(
SigQ
)

208 
NUL
 NUL NUL

209 
	`F
(
RssShmem
)

210 
	`F
(
Name
)

211 
NUL
 NUL NUL

212 
	`F
(
C≠Inh
)

213 
	`F
(
VmD©a
)

214 
NUL
 NUL NUL

215 
	`F
(
FDSize
)

216 
NUL
 NUL NUL NUL

217 
	`F
(
SigBlk
)

218 
NUL
 NUL NUL NUL

219 
	`F
(
C≠Eff
)

220 
NUL
 NUL NUL NUL

221 
	`F
(
C≠Bnd
)

222 
NUL
 NUL NUL NUL

223 
	`F
(
VmExe
)

224 
NUL
 NUL NUL NUL

225 
	`F
(
Groups
)

226 
NUL
 NUL NUL NUL

227 
	`F
(
RssAn⁄
)

228 
NUL
 NUL NUL NUL

229 
	`F
(
RssFûe
)

232 #unde‡
F


233 #unde‡
NUL


235 
	`ENTER
(0x220);

237 
ba£
;

240 *
cﬁ⁄
;

241 
°©us_èbÀ_°ru˘
 
íåy
;

244 
S
 = 
	`°rchr
(S, '\n');

245 if(
	`u∆ikñy
(!
S
)) ;

246 
S
++;

249 
ba£
:

250 if(
	`u∆ikñy
(!*
S
)) ;

251 
íåy
 = 
èbÀ
[(
GPERF_TABLE_SIZE
 -1Ë& (
asso
[()
S
[3]] +ásso[()S[2]] +ásso[()S[0]])];

252 
cﬁ⁄
 = 
	`°rchr
(
S
, ':');

253 if(
	`u∆ikñy
(!
cﬁ⁄
)) ;

254 if(
	`u∆ikñy
(
cﬁ⁄
[1]!='\t')) ;

255 if(
	`u∆ikñy
(
cﬁ⁄
-
S
 !
íåy
.
Àn
)) ;

256 if(
	`u∆ikñy
(
	`memcmp
(
íåy
.
«me
,
S
,
cﬁ⁄
-S))) ;

258 
S
 = 
cﬁ⁄
+2;

260 #ifde‡
LABEL_OFFSET


261 *(&&
ba£
 + 
íåy
.
off£t
);

263 *
íåy
.
addr
;

266 
ˇ£_Name
:

267 { 
u
 = 0;

268 
u
 <  
P
->
cmd
 - 1u){

269 
c
 = *
S
++;

270 if(
	`u∆ikñy
(
c
=='\n')) ;

271 if(
	`u∆ikñy
(
c
=='\0')) ;

272 if(
	`u∆ikñy
(
c
=='\\')){

273 
c
 = *
S
++;

274 if(
c
=='\n') ;

275 if(!
c
) ;

276 if(
c
=='n') c='\n';

278 
P
->
cmd
[
u
++] = 
c
;

280 
P
->
cmd
[
u
] = '\0';

281 
S
--;

284 #ifde‡
SIGNAL_STRING


285 
ˇ£_ShdPnd
:

286 
	`mem˝y
(
P
->
sig«l
, 
S
, 16);

287 
P
->
sig«l
[16] = '\0';

289 
ˇ£_SigBlk
:

290 
	`mem˝y
(
P
->
blocked
, 
S
, 16);

291 
P
->
blocked
[16] = '\0';

293 
ˇ£_SigCgt
:

294 
	`mem˝y
(
P
->
sigˇtch
, 
S
, 16);

295 
P
->
sigˇtch
[16] = '\0';

297 
ˇ£_SigIgn
:

298 
	`mem˝y
(
P
->
sigign‹e
, 
S
, 16);

299 
P
->
sigign‹e
[16] = '\0';

301 
ˇ£_SigPnd
:

302 
	`mem˝y
(
P
->
_sig≤d
, 
S
, 16);

303 
P
->
_sig≤d
[16] = '\0';

306 
ˇ£_ShdPnd
:

307 
P
->
sig«l
 = 
	`unhex
(
S
);

309 
ˇ£_SigBlk
:

310 
P
->
blocked
 = 
	`unhex
(
S
);

312 
ˇ£_SigCgt
:

313 
P
->
sigˇtch
 = 
	`unhex
(
S
);

315 
ˇ£_SigIgn
:

316 
P
->
sigign‹e
 = 
	`unhex
(
S
);

318 
ˇ£_SigPnd
:

319 
P
->
_sig≤d
 = 
	`unhex
(
S
);

322 
ˇ£_Sèã
:

323 
P
->
°©e
 = *
S
;

325 
ˇ£_Tgid
:

326 
Tgid
 = 
	`°πﬁ
(
S
,&S,10);

328 
ˇ£_Pid
:

329 
Pid
 = 
	`°πﬁ
(
S
,&S,10);

331 
ˇ£_PPid
:

332 
P
->
µid
 = 
	`°πﬁ
(
S
,&S,10);

334 
ˇ£_Thªads
:

335 
Thªads
 = 
	`°πﬁ
(
S
,&S,10);

337 
ˇ£_Uid
:

338 
P
->
ruid
 = 
	`°πﬁ
(
S
,&S,10);

339 
P
->
euid
 = 
	`°πﬁ
(
S
,&S,10);

340 
P
->
suid
 = 
	`°πﬁ
(
S
,&S,10);

341 
P
->
fuid
 = 
	`°πﬁ
(
S
,&S,10);

343 
ˇ£_Gid
:

344 
P
->
rgid
 = 
	`°πﬁ
(
S
,&S,10);

345 
P
->
egid
 = 
	`°πﬁ
(
S
,&S,10);

346 
P
->
sgid
 = 
	`°πﬁ
(
S
,&S,10);

347 
P
->
fgid
 = 
	`°πﬁ
(
S
,&S,10);

349 
ˇ£_VmD©a
:

350 
P
->
vm_d©a
 = 
	`°πﬁ
(
S
,&S,10);

352 
ˇ£_VmExe
:

353 
P
->
vm_exe
 = 
	`°πﬁ
(
S
,&S,10);

355 
ˇ£_VmLck
:

356 
P
->
vm_lock
 = 
	`°πﬁ
(
S
,&S,10);

358 
ˇ£_VmLib
:

359 
P
->
vm_lib
 = 
	`°πﬁ
(
S
,&S,10);

361 
ˇ£_VmRSS
:

362 
P
->
vm_rss
 = 
	`°πﬁ
(
S
,&S,10);

364 
ˇ£_RssAn⁄
:

365 
P
->
vm_rss_™⁄
 = 
	`°πﬁ
(
S
,&S,10);

367 
ˇ£_RssFûe
:

368 
P
->
vm_rss_fûe
 = 
	`°πﬁ
(
S
,&S,10);

370 
ˇ£_RssShmem
:

371 
P
->
vm_rss_sh¨ed
 = 
	`°πﬁ
(
S
,&S,10);

373 
ˇ£_VmSize
:

374 
P
->
vm_size
 = 
	`°πﬁ
(
S
,&S,10);

376 
ˇ£_VmStk
:

377 
P
->
vm_°ack
 = 
	`°πﬁ
(
S
,&S,10);

379 
ˇ£_VmSw≠
:

380 
P
->
vm_sw≠
 = 
	`°πﬁ
(
S
,&S,10);

382 
ˇ£_Groups
:

383 { *
∆
 = 
	`°rchr
(
S
, '\n');

384 
j
 = 
∆
 ? (∆ - 
S
Ë: 
	`°æí
(S);

386 i‡(
j
) {

387 
P
->
supgid
 = 
	`xmÆloc
(
j
+1);

388 
	`mem˝y
(
P
->
supgid
, 
S
, 
j
);

389 i‡(
	`u∆ikñy
(' ' !
P
->
supgid
[--
j
])) ++j;

390 
P
->
supgid
[
j
] = '\0';

391  ; 
j
; j--)

392 i‡(' ' =
P
->
supgid
[
j
])

393 
P
->
supgid
[
j
] = ',';

397 
ˇ£_C≠Bnd
:

398 
ˇ£_C≠Eff
:

399 
ˇ£_C≠Inh
:

400 
ˇ£_C≠Prm
:

401 
ˇ£_FDSize
:

402 
ˇ£_SigQ
:

403 
ˇ£_VmHWM
:

404 
ˇ£_VmPTE
:

405 
ˇ£_VmPók
:

411 if(
is_¥oc
 && *
ShdPnd
){

412 
	`mem˝y
(
P
->
sig«l
, 
ShdPnd
, 16);

413 
P
->
sig«l
[16] = '\0';

418 #ifde‡
SIGNAL_STRING


419 if(!
is_¥oc
 || !
P
->
sig«l
[0]){

420 
	`mem˝y
(
P
->
sig«l
, P->
_sig≤d
, 16);

421 
P
->
sig«l
[16] = '\0';

424 if(!
is_¥oc
){

425 
P
->
sig«l
 = P->
_sig≤d
;

433 if(
Thªads
){

434 
P
->
∆wp
 = 
Thªads
;

435 
P
->
tgid
 = 
Tgid
;

436 
P
->
tid
 = 
Pid
;

438 
P
->
∆wp
 = 1;

439 
P
->
tgid
 = 
Pid
;

440 
P
->
tid
 = 
Pid
;

443 i‡(!
P
->
supgid
)

444 
P
->
supgid
 = 
	`x°rdup
("-");

446 
	`LEAVE
(0x220);

447 
	}
}

448 #unde‡
GPERF_TABLE_SIZE


450 
	$supgΩs_‰om_supgids
 (
¥oc_t
 *
p
) {

451 *
g
, *
s
;

452 
t
;

454 i‡(!
p
->
supgid
 || '-' == *p->supgid) {

455 
p
->
supgΩ
 = 
	`x°rdup
("-");

458 
s
 = 
p
->
supgid
;

459 
t
 = 0;

461 i‡(',' =*
s
) ++s;

462 
g
 = 
	`pwˇche_gë_group
((
uid_t
)
	`°πﬁ
(
s
, &s, 10));

463 
p
->
supgΩ
 = 
	`xªÆloc
’->supgΩ, 
P_G_SZ
+
t
+2);

464 
t
 +
	`¢¥ötf
(
p
->
supgΩ
+t, 
P_G_SZ
+2, "%s%s",Å ? "," : "", 
g
);

465 } *
s
);

466 
	}
}

469 
	$oomsc‹e2¥oc
(c⁄° * 
S
, 
¥oc_t
 *
ª°ri˘
 
P
)

471 
	`ssˇnf
(
S
, "%d", &
P
->
oom_sc‹e
);

472 
	}
}

474 
	$oomadj2¥oc
(c⁄° * 
S
, 
¥oc_t
 *
ª°ri˘
 
P
)

476 
	`ssˇnf
(
S
, "%d", &
P
->
oom_adj
);

477 
	}
}

480 c⁄° *
	gns_«mes
[] = {

481 [
IPCNS
] = "ipc",

482 [
MNTNS
] = "mnt",

483 [
NETNS
] = "net",

484 [
PIDNS
] = "pid",

485 [
USERNS
] = "user",

486 [
UTSNS
] = "uts",

489 c⁄° *
	$gë_ns_«me
(
id
) {

490 i‡(
id
 >
NUM_NS
)

491  
NULL
;

492  
ns_«mes
[
id
];

493 
	}
}

495 
	$gë_ns_id
(c⁄° *
«me
) {

496 
i
;

498 
i
 = 0; i < 
NUM_NS
; i++)

499 i‡(!
	`°rcmp
(
ns_«mes
[
i
], 
«me
))

500  
i
;

502 
	}
}

504 
	$ns2¥oc
(c⁄° *
dúe˘‹y
, 
¥oc_t
 *
ª°ri˘
 
p
) {

505 
∑th
[
PROCPATHLEN
];

506 
°©
 
sb
;

507 
i
;

509 
i
 = 0; i < 
NUM_NS
; i++) {

510 
	`¢¥ötf
(
∑th
, ’©h), "%s/ns/%s", 
dúe˘‹y
, 
ns_«mes
[
i
]);

511 i‡(0 =
	`°©
(
∑th
, &
sb
))

512 
p
->
ns
[
i
] = ()
sb
.
°_öo
;

515 
p
->
ns
[
i
] = -
î∫o
;

518 
	}
}

520 
	$sd2¥oc
(
¥oc_t
 *
ª°ri˘
 
p
) {

521 #ifde‡
WITH_SYSTEMD


522 
buf
[64];

523 
uid_t
 
uid
;

525 i‡(0 > 
	`sd_pid_gë_machöe_«me
(
p
->
tid
, &p->
sd_mach
))

526 
p
->
sd_mach
 = 
	`°rdup
("-");

528 i‡(0 > 
	`sd_pid_gë_ow√r_uid
(
p
->
tid
, &
uid
))

529 
p
->
sd_ouid
 = 
	`°rdup
("-");

531 
	`¢¥ötf
(
buf
, (buf), "%d", ()
uid
);

532 
p
->
sd_ouid
 = 
	`°rdup
(
buf
);

534 i‡(0 > 
	`sd_pid_gë_£ssi⁄
(
p
->
tid
, &p->
sd_£ss
)) {

535 
p
->
sd_£ss
 = 
	`°rdup
("-");

536 
p
->
sd_£©
 = 
	`°rdup
("-");

538 i‡(0 > 
	`sd_£ssi⁄_gë_£©
(
p
->
sd_£ss
, &p->
sd_£©
))

539 
p
->
sd_£©
 = 
	`°rdup
("-");

541 i‡(0 > 
	`sd_pid_gë_¶i˚
(
p
->
tid
, &p->
sd_¶i˚
))

542 
p
->
sd_¶i˚
 = 
	`°rdup
("-");

543 i‡(0 > 
	`sd_pid_gë_unô
(
p
->
tid
, &p->
sd_unô
))

544 
p
->
sd_unô
 = 
	`°rdup
("-");

545 i‡(0 > 
	`sd_pid_gë_u£r_unô
(
p
->
tid
, &p->
sd_uunô
))

546 
p
->
sd_uunô
 = 
	`°rdup
("-");

548 
p
->
sd_mach
 = 
	`°rdup
("?");

549 
p
->
sd_ouid
 = 
	`°rdup
("?");

550 
p
->
sd_£©
 = 
	`°rdup
("?");

551 
p
->
sd_£ss
 = 
	`°rdup
("?");

552 
p
->
sd_¶i˚
 = 
	`°rdup
("?");

553 
p
->
sd_unô
 = 
	`°rdup
("?");

554 
p
->
sd_uunô
 = 
	`°rdup
("?");

556 
	}
}

562 
	$°©2¥oc
(c⁄° * 
S
, 
¥oc_t
 *
ª°ri˘
 
P
) {

563 
num
;

564 * 
tmp
;

566 
	`ENTER
(0x160);

569 
P
->
¥o˚ss‹
 = 0;

570 
P
->
π¥io
 = -1;

571 
P
->
sched
 = -1;

572 
P
->
∆wp
 = 0;

574 
S
 = 
	`°rchr
(S, '(') + 1;

575 
tmp
 = 
	`°ºchr
(
S
, ')');

576 
num
 = 
tmp
 - 
S
;

577 if(
	`u∆ikñy
(
num
 > 
P
->
cmd
))Çum =  P->cmd - 1;

578 
	`mem˝y
(
P
->
cmd
, 
S
, 
num
);

579 
P
->
cmd
[
num
] = '\0';

580 
S
 = 
tmp
 + 2;

582 
num
 = 
	`ssˇnf
(
S
,

593 "%lu %"
KLF
"u %"KLF"u %"KLF"u %"KLF"u %"KLF"u "

595 "%"
KLF
"u %*u %*u "

598 &
P
->
°©e
,

599 &
P
->
µid
, &P->
pgΩ
, &P->
£ssi⁄
, &P->
ây
, &P->
çgid
,

600 &
P
->
Êags
, &P->
mö_Êt
, &P->
cmö_Êt
, &P->
maj_Êt
, &P->
cmaj_Êt
,

601 &
P
->
utime
, &P->
°ime
, &P->
cutime
, &P->
c°ime
,

602 &
P
->
¥i‹ôy
, &P->
ni˚
,

603 &
P
->
∆wp
,

604 &
P
->
Æ¨m
,

605 &
P
->
°¨t_time
,

606 &
P
->
vsize
,

607 &
P
->
rss
,

608 &
P
->
rss_æim
, &P->
°¨t_code
, &P->
íd_code
, &P->
°¨t_°ack
, &P->
k°k_e•
, &P->
k°k_eù
,

610 &
P
->
wch™
,

612 &
P
->
exô_sig«l
, &P->
¥o˚ss‹
,

614 &
P
->
π¥io
, &P->
sched


617 if(!
P
->
∆wp
){

618 
P
->
∆wp
 = 1;

621 
	`LEAVE
(0x160);

622 
	}
}

626 
	$°©m2¥oc
(c⁄° * 
s
, 
¥oc_t
 *
ª°ri˘
 
P
) {

627 
	`ssˇnf
(
s
, "%ld %ld %ld %ld %ld %ld %ld",

628 &
P
->
size
, &P->
ªsidít
, &P->
sh¨e
,

629 &
P
->
ås
, &P->
Ãs
, &P->
drs
, &P->
dt
);

630 
	}
}

632 
	$fûe2°r
(c⁄° *
dúe˘‹y
, c⁄° *
wh©
, 
uébuf_s
 *
ub
) {

633 
	#buffGRW
 1024

	)

634 
∑th
[
PROCPATHLEN
];

635 
fd
, 
num
, 
tŸ_ªad
 = 0;

641 i‡(
ub
->
buf
) ub->buf[0] = '\0';

642 
ub
->
buf
 = 
	`xˇŒoc
((ub->
siz
 = 
buffGRW
));

643 
	`•rötf
(
∑th
, "%s/%s", 
dúe˘‹y
, 
wh©
);

644 i‡(-1 =(
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
, 0)))  -1;

645 0 < (
num
 = 
	`ªad
(
fd
, 
ub
->
buf
 + 
tŸ_ªad
, ub->
siz
 -Åot_read))) {

646 
tŸ_ªad
 +
num
;

647 i‡(
tŸ_ªad
 < 
ub
->
siz
) ;

648 
ub
->
buf
 = 
	`xªÆloc
(ub->buf, (ub->
siz
 +
buffGRW
));

650 
ub
->
buf
[
tŸ_ªad
] = '\0';

651 
	`˛o£
(
fd
);

652 i‡(
	`u∆ikñy
(
tŸ_ªad
 < 1))  -1;

653  
tŸ_ªad
;

654 #unde‡
buffGRW


655 
	}
}

657 ** 
	$fûe2°rvec
(c⁄° * 
dúe˘‹y
, c⁄° * 
wh©
) {

658 
buf
[2048];

659 *
p
, *
rbuf
 = 0, *
ídbuf
, **
q
, **
ªt
;

660 
fd
, 
tŸ
 = 0, 
n
, 
c
, 
íd_of_fûe
 = 0;

661 
Æign
;

663 
	`•rötf
(
buf
, "%s/%s", 
dúe˘‹y
, 
wh©
);

664 
fd
 = 
	`›í
(
buf
, 
O_RDONLY
, 0);

665 if(
fd
==-1Ë 
NULL
;

668 (
n
 = 
	`ªad
(
fd
, 
buf
,  buf - 1)) >= 0) {

669 i‡(
n
 < ()( 
buf
 - 1))

670 
íd_of_fûe
 = 1;

671 i‡(
n
 =0 && 
rbuf
 == 0) {

672 
	`˛o£
(
fd
);

673  
NULL
;

675 i‡(
n
 < 0) {

676 i‡(
rbuf
)

677 
	`‰ì
(
rbuf
);

678 
	`˛o£
(
fd
);

679  
NULL
;

681 i‡(
íd_of_fûe
 && (
n
 =0 || 
buf
[n-1]))

682 
buf
[
n
++] = '\0';

683 
rbuf
 = 
	`xªÆloc
‘buf, 
tŸ
 + 
n
);

684 
	`mem˝y
(
rbuf
 + 
tŸ
, 
buf
, 
n
);

685 
tŸ
 +
n
;

686 i‡(
íd_of_fûe
)

689 
	`˛o£
(
fd
);

690 i‡(
n
 <0 && !
íd_of_fûe
) {

691 i‡(
rbuf
Ë
	`‰ì
(rbuf);

692  
NULL
;

694 
ídbuf
 = 
rbuf
 + 
tŸ
;

695 
Æign
 = ((*)-1Ë- ((
tŸ
 + (*)-1) & ((*)-1));

696 
c
 = 0, 
p
 = 
rbuf
;Ö < 
ídbuf
;Ö++) {

697 i‡(!*
p
 || *p == '\n')

698 
c
 += (*);

699 i‡(*
p
 == '\n')

700 *
p
 = 0;

702 
c
 += (*);

704 
rbuf
 = 
	`xªÆloc
‘buf, 
tŸ
 + 
c
 + 
Æign
);

705 
ídbuf
 = 
rbuf
 + 
tŸ
;

706 
q
 = 
ªt
 = (**Ë(
ídbuf
+
Æign
);

707 *
q
++ = 
p
 = 
rbuf
;

708 
ídbuf
--;

709 ++
p
 < 
ídbuf
)

710 i‡(!*
p
)

711 *
q
++ = 
p
+1;

713 *
q
 = 0;

714  
ªt
;

715 
	}
}

720 
	$ªad_unve˘‹ed
(*
ª°ri˘
 c⁄° 
d°
, 
sz
, c⁄° * 
whom
, c⁄° *
wh©
, 
£p
) {

721 
∑th
[
PROCPATHLEN
];

722 
fd
;

723 
n
 = 0;

725 
	`¢¥ötf
(
∑th
, ’©h), "%s/%s", 
whom
, 
wh©
);

726 
fd
 = 
	`›í
(
∑th
, 
O_RDONLY
);

727 if(
fd
==-1)  0;

730 
ssize_t
 
r
 = 
	`ªad
(
fd
,
d°
+
n
,
sz
-n);

731 if(
r
==-1){

732 if(
î∫o
==
EINTR
) ;

735 
n
 +
r
;

736 if(
n
==
sz
) {

737 --
n
;

740 if(
r
==0) ;

742 
	`˛o£
(
fd
);

743 if(
n
){

744 
i
=
n
;

745 
i
 && 
d°
[i-1]=='\0') --i;

746 
i
--)

747 if(
d°
[
i
]=='\n' || d°[i]=='\0'Ëd°[i]=
£p
;

748 if(
d°
[
n
-1]==' ') dst[n-1]='\0';

750 
d°
[
n
] = '\0';

751  
n
;

752 
	}
}

754 ** 
	$ve˘‹ize_this_°r
 (c⁄° * 
§c
) {

755 
	#pSZ
 ((*))

	)

756 *
˝y
, **
vec
;

757 
adj
, 
tŸ
;

759 
tŸ
 = 
	`°æí
(
§c
) + 1;

760 
adj
 = (
pSZ
-1Ë- ((
tŸ
 +ÖSZ-1) & (pSZ-1));

761 
˝y
 = 
	`xˇŒoc
(
tŸ
 + 
adj
 + (2 * 
pSZ
));

762 
	`¢¥ötf
(
˝y
, 
tŸ
, "%s", 
§c
);

763 
vec
 = (**)(
˝y
 + 
tŸ
 + 
adj
);

764 *
vec
 = 
˝y
;

765 *(
vec
+1Ë
NULL
;

766  
vec
;

767 #unde‡
pSZ


768 
	}
}

773 
	$fûl_cgroup_cvt
 (c⁄° * 
dúe˘‹y
, 
¥oc_t
 *
ª°ri˘
 
p
) {

774 
	#vMAX
 ( 
MAX_BUFSZ
 - ()(
d°
 - 
d°_buf„r
Ë)

	)

775 *
§c
, *
d°
, *
gΩ
, *
eob
, *
«me
;

776 
tŸ
, 
x
, 
whackabÀ_öt
 = 
MAX_BUFSZ
;

778 *(
d°
 = 
d°_buf„r
) = '\0';

779 
tŸ
 = 
	`ªad_unve˘‹ed
(
§c_buf„r
, 
MAX_BUFSZ
, 
dúe˘‹y
, "cgroup", '\0');

780 
§c
 = 
§c_buf„r
, 
eob
 = src_buf„∏+ 
tŸ
; sr¯<Éob; sr¯+
x
) {

781 
x
 = 1;

782 i‡(!*
§c
) ;

783 
x
 = 
	`°æí
((
gΩ
 = 
§c
));

784 i‡('/' =
gΩ
[
x
 - 1]) ;

786 
gΩ
 +
	`°r•n
(grp, "0123456789:");

788 
d°
 +
	`¢¥ötf
(d°, 
vMAX
, "%s", (d° > 
d°_buf„r
) ? "," : "");

789 
d°
 +
	`esˇ≥_°r
(d°, 
gΩ
, 
vMAX
, &
whackabÀ_öt
);

791 
p
->
cgroup
 = 
	`ve˘‹ize_this_°r
(
d°_buf„r
[0] ? dst_buffer : "-");

793 
«me
 = 
	`°r°r
(
p
->
cgroup
[0], ":name=");

794 i‡(
«me
 && *“ame+6)Ë«mê+6; «mê
p
->
cgroup
[0];

795 
p
->
cg«me
 = 
	`°rdup
(
«me
);

796 #unde‡
vMAX


797 
	}
}

802 
	$fûl_cmdlöe_cvt
 (c⁄° * 
dúe˘‹y
, 
¥oc_t
 *
ª°ri˘
 
p
) {

803 
	#uFLG
 ( 
ESC_BRACKETS
 | 
ESC_DEFUNCT
 )

	)

804 
whackabÀ_öt
 = 
MAX_BUFSZ
;

806 i‡(
	`ªad_unve˘‹ed
(
§c_buf„r
, 
MAX_BUFSZ
, 
dúe˘‹y
, "cmdline", ' '))

807 
	`esˇ≥_°r
(
d°_buf„r
, 
§c_buf„r
, 
MAX_BUFSZ
, &
whackabÀ_öt
);

809 
	`esˇ≥_comm™d
(
d°_buf„r
, 
p
, 
MAX_BUFSZ
, &
whackabÀ_öt
, 
uFLG
);

810 
p
->
cmdlöe
 = 
	`ve˘‹ize_this_°r
(
d°_buf„r
);

811 #unde‡
uFLG


812 
	}
}

816 
	$fûl_ívú⁄_cvt
 (c⁄° * 
dúe˘‹y
, 
¥oc_t
 *
ª°ri˘
 
p
) {

817 
whackabÀ_öt
 = 
MAX_BUFSZ
;

819 
d°_buf„r
[0] = '\0';

820 i‡(
	`ªad_unve˘‹ed
(
§c_buf„r
, 
MAX_BUFSZ
, 
dúe˘‹y
, "environ", ' '))

821 
	`esˇ≥_°r
(
d°_buf„r
, 
§c_buf„r
, 
MAX_BUFSZ
, &
whackabÀ_öt
);

822 
p
->
ívú⁄
 = 
	`ve˘‹ize_this_°r
(
d°_buf„r
[0] ? dst_buffer : "-");

823 
	}
}

826 
	$ªad_cmdlöe
(*
ª°ri˘
 c⁄° 
d°
, 
sz
, 
pid
) {

827 
∑th
[
PROCPATHLEN
];

828 
	`¢¥ötf
(
∑th
, ’©h), "/¥oc/%u", 
pid
);

829  
	`ªad_unve˘‹ed
(
d°
, 
sz
, 
∑th
, "cmdline", ' ');

830 
	}
}

836 c⁄° *
	$lxc_c⁄èöîs
 (c⁄° *
∑th
) {

837 
uébuf_s
 
ub
 = { 
NULL
, 0 };

838 
lxc_n⁄e
[] = "-";

854 i‡(
	`fûe2°r
(
∑th
, "cgroup", &
ub
) > 0) {

855 c⁄° 
lxc_dñm
[] = "/lxc/";

856 *
p1
;

858 i‡((
p1
 = 
	`°r°r
(
ub
.
buf
, 
lxc_dñm
))) {

859 
	slxc_ñe
 {

860 
lxc_ñe
 *
√xt
;

861 c⁄° *
«me
;

862 } *
™ch‹
 = 
NULL
;

863 
lxc_ñe
 *
ñe
 = 
™ch‹
;

864 *
p2
;

866 i‡((
p2
 = 
	`°rchr
(
p1
, '\n')))

867 *
p2
 = '\0';

869 
p2
 = 
p1
 + ((
lxc_dñm
)-1);

870 
p1
 = 
	`°r°r
(
p2
, 
lxc_dñm
);

871 } 
p1
);

872 i‡((
p1
 = 
	`°rchr
(
p2
, '/')))

873 *
p1
 = '\0';

874 
ñe
) {

875 i‡(!
	`°rcmp
(
ñe
->
«me
, 
p2
))

876  
ñe
->
«me
;

877 
ñe
 =ÉÀ->
√xt
;

879 
ñe
 = (
lxc_ñe
 *)
	`xmÆloc
((lxc_ele));

880 
ñe
->
«me
 = 
	`x°rdup
(
p2
);

881 
ñe
->
√xt
 = 
™ch‹
;

882 
™ch‹
 = 
ñe
;

883  
ñe
->
«me
;

886  
lxc_n⁄e
;

887 
	}
}

897 
	#XöL
(
T
, 
X
, 
L
) ( { \

898 
T
 
x
 = (
X
), *
l
 = (
L
); \

899 *
l
 && *»!
x
)Ü++; \

900 *
l
 =
x
; \

901 } )

	)

904 
	#XöLN
(
T
, 
X
, 
L
, 
N
) ( { \

905 
T
 
x
 = (
X
), *
l
 = (
L
); \

906 
i
 = 0, 
n
 = (
N
); \

907 
i
 < 
n
 && 
l
[i] !
x
) i++; \

908 
i
 < 
n
 && 
l
[i] =
x
; \

909 } )

	)

915 
¥oc_t
* 
	$sim∂e_ªad¥oc
(
PROCTAB
 *
ª°ri˘
 c⁄° 
PT
, 
¥oc_t
 *ª°ri˘ c⁄° 
p
) {

916 
uébuf_s
 
ub
 = { 
NULL
, 0 };

917 
°©
 
sb
;

918 *
ª°ri˘
 c⁄° 
∑th
 = 
PT
->path;

919 
Êags
 = 
PT
->flags;

921 i‡(
	`u∆ikñy
(
	`°©
(
∑th
, &
sb
) == -1))

922 
√xt_¥oc
;

924 i‡((
Êags
 & 
PROC_UID
Ë&& !
	`XöLN
(
uid_t
, 
sb
.
°_uid
, 
PT
->
uids
, PT->
nuid
))

925 
√xt_¥oc
;

927 
p
->
euid
 = 
sb
.
°_uid
;

928 
p
->
egid
 = 
sb
.
°_gid
;

930 i‡(
Êags
 & 
PROC_FILLSTAT
) {

931 i‡(
	`u∆ikñy
(
	`fûe2°r
(
∑th
, "°©", &
ub
) == -1))

932 
√xt_¥oc
;

933 
	`°©2¥oc
(
ub
.
buf
, 
p
);

936 i‡(
Êags
 & 
PROC_FILLMEM
) {

937 i‡(
	`likñy
(
	`fûe2°r
(
∑th
, "°©m", &
ub
) != -1))

938 
	`°©m2¥oc
(
ub
.
buf
, 
p
);

941 i‡(
Êags
 & 
PROC_FILLSTATUS
) {

942 i‡(
	`likñy
(
	`fûe2°r
(
∑th
, "°©us", &
ub
) != -1)){

943 
	`°©us2¥oc
(
ub
.
buf
, 
p
, 1);

944 i‡(
Êags
 & 
PROC_FILLSUPGRP
)

945 
	`supgΩs_‰om_supgids
(
p
);

950 if(
p
->
∆wp
 > 1){

951 
p
->
wch™
 = (
KLONG
)~0ull;

955 i‡(
Êags
 & 
PROC_FILLUSR
){

956 
	`mem˝y
(
p
->
eu£r
, 
	`pwˇche_gë_u£r
’->
euid
), Ö->euser);

957 if(
Êags
 & 
PROC_FILLSTATUS
) {

958 
	`mem˝y
(
p
->
ru£r
, 
	`pwˇche_gë_u£r
’->
ruid
), Ö->ruser);

959 
	`mem˝y
(
p
->
su£r
, 
	`pwˇche_gë_u£r
’->
suid
), Ö->suser);

960 
	`mem˝y
(
p
->
fu£r
, 
	`pwˇche_gë_u£r
’->
fuid
), Ö->fuser);

965 i‡(
Êags
 & 
PROC_FILLGRP
){

966 
	`mem˝y
(
p
->
egroup
, 
	`pwˇche_gë_group
’->
egid
), Ö->egroup);

967 if(
Êags
 & 
PROC_FILLSTATUS
) {

968 
	`mem˝y
(
p
->
rgroup
, 
	`pwˇche_gë_group
’->
rgid
), Ö->rgroup);

969 
	`mem˝y
(
p
->
sgroup
, 
	`pwˇche_gë_group
’->
sgid
), Ö->sgroup);

970 
	`mem˝y
(
p
->
fgroup
, 
	`pwˇche_gë_group
’->
fgid
), Ö->fgroup);

974 i‡(
	`u∆ikñy
(
Êags
 & 
PROC_FILLENV
)) {

975 i‡(
Êags
 & 
PROC_EDITENVRCVT
)

976 
	`fûl_ívú⁄_cvt
(
∑th
, 
p
);

978 
p
->
ívú⁄
 = 
	`fûe2°rvec
(
∑th
, "environ");

981 i‡(
Êags
 & (
PROC_FILLCOM
|
PROC_FILLARG
)) {

982 i‡(
Êags
 & 
PROC_EDITCMDLCVT
)

983 
	`fûl_cmdlöe_cvt
(
∑th
, 
p
);

985 
p
->
cmdlöe
 = 
	`fûe2°rvec
(
∑th
, "cmdline");

988 i‡((
Êags
 & 
PROC_FILLCGROUP
)) {

989 i‡(
Êags
 & 
PROC_EDITCGRPCVT
)

990 
	`fûl_cgroup_cvt
(
∑th
, 
p
);

992 
p
->
cgroup
 = 
	`fûe2°rvec
(
∑th
, "cgroup");

995 i‡(
	`u∆ikñy
(
Êags
 & 
PROC_FILLOOM
)) {

996 i‡(
	`likñy
(
	`fûe2°r
(
∑th
, "oom_sc‹e", &
ub
) != -1))

997 
	`oomsc‹e2¥oc
(
ub
.
buf
, 
p
);

998 i‡(
	`likñy
(
	`fûe2°r
(
∑th
, "oom_adj", &
ub
) != -1))

999 
	`oomadj2¥oc
(
ub
.
buf
, 
p
);

1002 i‡(
	`u∆ikñy
(
Êags
 & 
PROC_FILLNS
))

1003 
	`ns2¥oc
(
∑th
, 
p
);

1005 i‡(
	`u∆ikñy
(
Êags
 & 
PROC_FILLSYSTEMD
))

1006 
	`sd2¥oc
(
p
);

1008 i‡(
	`u∆ikñy
(
Êags
 & 
PROC_FILL_LXC
))

1009 
p
->
lx˙ame
 = 
	`lxc_c⁄èöîs
(
∑th
);

1011  
p
;

1012 
√xt_¥oc
:

1013  
NULL
;

1014 
	}
}

1018 #ifde‡
QUICK_THREADS


1025 
¥oc_t
* 
	$sim∂e_ªadèsk
(
PROCTAB
 *
ª°ri˘
 c⁄° 
PT
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
p
,Öroc_à*ª°ri˘ c⁄° 
t
, *ª°ri˘ c⁄° 
∑th
) {

1026 
uébuf_s
 
ub
 = { 
NULL
, 0 };

1027 
°©
 
sb
;

1028 
Êags
 = 
PT
->flags;

1030 i‡(
	`u∆ikñy
(
	`°©
(
∑th
, &
sb
) == -1))

1031 
√xt_èsk
;

1036 
t
->
euid
 = 
sb
.
°_uid
;

1037 
t
->
egid
 = 
sb
.
°_gid
;

1039 i‡(
Êags
 & 
PROC_FILLSTAT
) {

1040 i‡(
	`u∆ikñy
(
	`fûe2°r
(
∑th
, "°©", &
ub
) == -1))

1041 
√xt_èsk
;

1042 
	`°©2¥oc
(
ub
.
buf
, 
t
);

1045 #i‚de‡
QUICK_THREADS


1046 i‡(
Êags
 & 
PROC_FILLMEM
)

1047 i‡(
	`likñy
(
	`fûe2°r
(
∑th
, "°©m", &
ub
) != -1))

1048 
	`°©m2¥oc
(
ub
.
buf
, 
t
);

1051 i‡(
Êags
 & 
PROC_FILLSTATUS
) {

1052 i‡(
	`likñy
(
	`fûe2°r
(
∑th
, "°©us", &
ub
) != -1)) {

1053 
	`°©us2¥oc
(
ub
.
buf
, 
t
, 0);

1054 #i‚de‡
QUICK_THREADS


1055 i‡(
Êags
 & 
PROC_FILLSUPGRP
)

1056 
	`supgΩs_‰om_supgids
(
t
);

1062 i‡(
Êags
 & 
PROC_FILLUSR
){

1063 
	`mem˝y
(
t
->
eu£r
, 
	`pwˇche_gë_u£r
—->
euid
), Å->euser);

1064 if(
Êags
 & 
PROC_FILLSTATUS
) {

1065 
	`mem˝y
(
t
->
ru£r
, 
	`pwˇche_gë_u£r
—->
ruid
), Å->ruser);

1066 
	`mem˝y
(
t
->
su£r
, 
	`pwˇche_gë_u£r
—->
suid
), Å->suser);

1067 
	`mem˝y
(
t
->
fu£r
, 
	`pwˇche_gë_u£r
—->
fuid
), Å->fuser);

1072 i‡(
Êags
 & 
PROC_FILLGRP
){

1073 
	`mem˝y
(
t
->
egroup
, 
	`pwˇche_gë_group
—->
egid
), Å->egroup);

1074 if(
Êags
 & 
PROC_FILLSTATUS
) {

1075 
	`mem˝y
(
t
->
rgroup
, 
	`pwˇche_gë_group
—->
rgid
), Å->rgroup);

1076 
	`mem˝y
(
t
->
sgroup
, 
	`pwˇche_gë_group
—->
sgid
), Å->sgroup);

1077 
	`mem˝y
(
t
->
fgroup
, 
	`pwˇche_gë_group
—->
fgid
), Å->fgroup);

1081 #ifde‡
QUICK_THREADS


1082 i‡(!
p
) {

1083 i‡(
Êags
 & 
PROC_FILLMEM
)

1084 i‡(
	`likñy
(
	`fûe2°r
(
∑th
, "°©m", &
ub
) != -1))

1085 
	`°©m2¥oc
(
ub
.
buf
, 
t
);

1087 i‡(
Êags
 & 
PROC_FILLSUPGRP
)

1088 
	`supgΩs_‰om_supgids
(
t
);

1090 i‡(
	`u∆ikñy
(
Êags
 & 
PROC_FILLENV
)) {

1091 i‡(
Êags
 & 
PROC_EDITENVRCVT
)

1092 
	`fûl_ívú⁄_cvt
(
∑th
, 
t
);

1094 
t
->
ívú⁄
 = 
	`fûe2°rvec
(
∑th
, "environ");

1097 i‡(
Êags
 & (
PROC_FILLCOM
|
PROC_FILLARG
)) {

1098 i‡(
Êags
 & 
PROC_EDITCMDLCVT
)

1099 
	`fûl_cmdlöe_cvt
(
∑th
, 
t
);

1101 
t
->
cmdlöe
 = 
	`fûe2°rvec
(
∑th
, "cmdline");

1104 i‡((
Êags
 & 
PROC_FILLCGROUP
)) {

1105 i‡(
Êags
 & 
PROC_EDITCGRPCVT
)

1106 
	`fûl_cgroup_cvt
(
∑th
, 
t
);

1108 
t
->
cgroup
 = 
	`fûe2°rvec
(
∑th
, "cgroup");

1111 i‡(
	`u∆ikñy
(
Êags
 & 
PROC_FILLSYSTEMD
))

1112 
	`sd2¥oc
(
t
);

1114 i‡(
	`u∆ikñy
(
Êags
 & 
PROC_FILL_LXC
))

1115 
t
->
lx˙ame
 = 
	`lxc_c⁄èöîs
(
∑th
);

1117 #ifde‡
QUICK_THREADS


1119 
t
->
size
 = 
p
->size;

1120 
t
->
ªsidít
 = 
p
->resident;

1121 
t
->
sh¨e
 = 
p
->share;

1122 
t
->
ås
 = 
p
->trs;

1123 
t
->
Ãs
 = 
p
->lrs;

1124 
t
->
drs
 = 
p
->drs;

1125 
t
->
dt
 = 
p
->dt;

1126 
t
->
cmdlöe
 = 
p
->cmdline;

1127 
t
->
ívú⁄
 = 
p
->environ;

1128 
t
->
cg«me
 = 
p
->cgname;

1129 
t
->
cgroup
 = 
p
->cgroup;

1130 i‡(
t
->
supgid
Ë
	`‰ì
(t->supgid);

1131 
t
->
supgid
 = 
p
->supgid;

1132 
t
->
supgΩ
 = 
p
->supgrp;

1133 
t
->
sd_mach
 = 
p
->sd_mach;

1134 
t
->
sd_ouid
 = 
p
->sd_ouid;

1135 
t
->
sd_£©
 = 
p
->sd_seat;

1136 
t
->
sd_£ss
 = 
p
->sd_sess;

1137 
t
->
sd_¶i˚
 = 
p
->sd_slice;

1138 
t
->
sd_unô
 = 
p
->sd_unit;

1139 
t
->
sd_uunô
 = 
p
->sd_uunit;

1140 
t
->
lx˙ame
 = 
p
->lxcname;

1141 
	`MK_THREAD
(
t
);

1145 i‡(
	`u∆ikñy
(
Êags
 & 
PROC_FILLOOM
)) {

1146 i‡(
	`likñy
(
	`fûe2°r
(
∑th
, "oom_sc‹e", &
ub
) != -1))

1147 
	`oomsc‹e2¥oc
(
ub
.
buf
, 
t
);

1148 i‡(
	`likñy
(
	`fûe2°r
(
∑th
, "oom_adj", &
ub
) != -1))

1149 
	`oomadj2¥oc
(
ub
.
buf
, 
t
);

1152 i‡(
	`u∆ikñy
(
Êags
 & 
PROC_FILLNS
))

1153 
	`ns2¥oc
(
∑th
, 
t
);

1155  
t
;

1156 
√xt_èsk
:

1157  
NULL
;

1158 #i‚de‡
QUICK_THREADS


1159 ()
p
;

1161 
	}
}

1166 
	$sim∂e_√xçid
(
PROCTAB
 *
ª°ri˘
 c⁄° 
PT
, 
¥oc_t
 *ª°ri˘ c⁄° 
p
) {

1167 
dúít
 *
ít
;

1168 *
ª°ri˘
 c⁄° 
∑th
 = 
PT
->path;

1170 
ít
 = 
	`ªaddú
(
PT
->
¥ocfs
);

1171 if(
	`u∆ikñy
(u∆ikñy(!
ít
Ë|| u∆ikñy(!ít->
d_«me
[0])))  0;

1172 if(
	`likñy
÷ikñy(*
ít
->
d_«me
 > '0') &&Üikely(*ent->d_name <= '9'))) ;

1174 
p
->
tgid
 = 
	`°πoul
(
ít
->
d_«me
, 
NULL
, 10);

1175 
p
->
tid
 =Ö->
tgid
;

1176 
	`mem˝y
(
∑th
, "/proc/", 6);

1177 
	`°r˝y
(
∑th
+6, 
ít
->
d_«me
);

1179 
	}
}

1184 
	$sim∂e_√xâid
(
PROCTAB
 *
ª°ri˘
 c⁄° 
PT
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
p
,Öroc_à*ª°ri˘ c⁄° 
t
, *ª°ri˘ c⁄° 
∑th
) {

1185 
dúít
 *
ít
;

1186 if(
PT
->
èskdú_u£r
 !
p
->
tgid
){

1187 if(
PT
->
èskdú
){

1188 
	`˛o£dú
(
PT
->
èskdú
);

1191 
	`¢¥ötf
(
∑th
, 
PROCPATHLEN
, "/¥oc/%d/èsk", 
p
->
tgid
);

1192 
PT
->
èskdú
 = 
	`›ídú
(
∑th
);

1193 if(!
PT
->
èskdú
)  0;

1194 
PT
->
èskdú_u£r
 = 
p
->
tgid
;

1197 
ít
 = 
	`ªaddú
(
PT
->
èskdú
);

1198 if(
	`u∆ikñy
(u∆ikñy(!
ít
Ë|| u∆ikñy(!ít->
d_«me
[0])))  0;

1199 if(
	`likñy
÷ikñy(*
ít
->
d_«me
 > '0') &&Üikely(*ent->d_name <= '9'))) ;

1201 
t
->
tid
 = 
	`°πoul
(
ít
->
d_«me
, 
NULL
, 10);

1202 
t
->
tgid
 = 
p
->tgid;

1204 
	`¢¥ötf
(
∑th
, 
PROCPATHLEN
, "/¥oc/%d/èsk/%s", 
p
->
tgid
, 
ít
->
d_«me
);

1206 
	}
}

1211 
	$li°ed_√xçid
(
PROCTAB
 *
ª°ri˘
 c⁄° 
PT
, 
¥oc_t
 *ª°ri˘ c⁄° 
p
) {

1212 *
ª°ri˘
 c⁄° 
∑th
 = 
PT
->path;

1213 
pid_t
 
tgid
 = *(
PT
->
pids
)++;

1214 if(
	`likñy
(
tgid
)){

1215 
	`¢¥ötf
(
∑th
, 
PROCPATHLEN
, "/¥oc/%d", 
tgid
);

1216 
p
->
tgid
 =Ågid;

1217 
p
->
tid
 = 
tgid
;

1219  
tgid
;

1220 
	}
}

1233 
¥oc_t
* 
	$ªad¥oc
(
PROCTAB
 *
ª°ri˘
 c⁄° 
PT
, 
¥oc_t
 *ª°ri˘ 
p
) {

1234 
¥oc_t
 *
ªt
;

1235 
¥oc_t
 *
ßved_p
;

1237 
PT
->
did_Áke
=0;

1244 
ßved_p
 = 
p
;

1245 if(!
p
Ë∞
	`xˇŒoc
( *p);

1246 
	`‰ì_acquúed
(
p
, 1);

1250 i‡(
	`u∆ikñy
(!
PT
->
	`födî
(PT,
p
))Ë
out
;

1253 
ªt
 = 
PT
->
	`ªadî
(PT,
p
);

1254 if(
ªt
) Ñet;

1257 
out
:

1258 if(!
ßved_p
Ë
	`‰ì
(
p
);

1260  
NULL
;

1261 
	}
}

1268 
¥oc_t
* 
	$ªadèsk
(
PROCTAB
 *
ª°ri˘
 c⁄° 
PT
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
p
,Öroc_à*ª°ri˘ 
t
) {

1269 
∑th
[
PROCPATHLEN
];

1270 
¥oc_t
 *
ªt
;

1271 
¥oc_t
 *
ßved_t
;

1273 
ßved_t
 = 
t
;

1274 if(!
t
Ëà
	`xˇŒoc
( *t);

1275 
	`‰ì_acquúed
(
t
, 1);

1278 #ifde‡
QUICK_THREADS


1280 if(
èsk_dú_missög
 || 
p
->
∆wp
 < 2){

1282 if(
èsk_dú_missög
){

1284 if(
PT
->
did_Áke
Ë
out
;

1285 
PT
->
did_Áke
=1;

1286 
	`mem˝y
(
t
,
p
,(
¥oc_t
));

1288 #ifde‡
SIGNAL_STRING


1289 
	`mem˝y
(&
t
->
sig«l
, &t->
_sig≤d
, Å->signal);

1291 
t
->
sig«l
 =Å->
_sig≤d
;

1293 #ifde‡
QUICK_THREADS


1294 
	`MK_THREAD
(
t
);

1296 
t
->
ívú⁄
 = 
NULL
;

1297 
t
->
cmdlöe
 = 
	`ve˘‹ize_this_°r
("n/a");

1298 
t
->
cgroup
 = 
NULL
;

1299 
t
->
supgid
 = 
NULL
;

1300 
t
->
supgΩ
 = 
NULL
;

1302  
t
;

1307 i‡(
	`u∆ikñy
(!
PT
->
	`èskfödî
(PT,
p
,
t
,
∑th
))Ë
out
;

1310 
ªt
 = 
PT
->
	`èskªadî
(PT,
p
,
t
,
∑th
);

1311 if(
ªt
) Ñet;

1314 
out
:

1315 if(!
ßved_t
Ë
	`‰ì
(
t
);

1316  
NULL
;

1317 
	}
}

1324 
¥oc_t
* 
	$ªadeôhî
 (
PROCTAB
 *
ª°ri˘
 c⁄° 
PT
, 
¥oc_t
 *ª°ri˘ 
x
) {

1325 
¥oc_t
 
skñ_p
;

1326 
¥oc_t
 *
√w_p
;

1327 
∑th
[
PROCPATHLEN
];

1328 
¥oc_t
 *
ßved_x
, *
ªt
;

1330 
ßved_x
 = 
x
;

1331 i‡(!
x
Ëx = 
	`xˇŒoc
((*x));

1332 
	`‰ì_acquúed
(
x
,1);

1333 i‡(
√w_p
Ë
√xt_èsk
;

1335 
√xt_¥oc
:

1336 
√w_p
 = 
NULL
;

1339 i‡(!
PT
->
	`födî
(PT,&
skñ_p
)Ë
íd_¥ocs
;

1340 i‡(!
èsk_dú_missög
) ;

1341 i‡((
ªt
 = 
PT
->
	`ªadî
(PT,
x
))) Ñet;

1344 
√xt_èsk
:

1346 i‡((!(
PT
->
	`èskfödî
(PT,&
skñ_p
,
x
,
∑th
)))

1347 || (!(
ªt
 = 
PT
->
	`èskªadî
(PT,
√w_p
,
x
,
∑th
)))) {

1348 
√xt_¥oc
;

1350 i‡(!
√w_p
Ë√w_∞
ªt
;

1351  
ªt
;

1353 
íd_¥ocs
:

1354 i‡(!
ßved_x
Ë
	`‰ì
(
x
);

1355  
NULL
;

1356 
	}
}

1362 
PROCTAB
* 
	$›í¥oc
(
Êags
, ...) {

1363 
va_li°
 
≠
;

1364 
°©
 
sbuf
;

1365 
did_°©
;

1366 
PROCTAB
* 
PT
 = 
	`xmÆloc
((PROCTAB));

1368 i‡(!
did_°©
){

1369 
èsk_dú_missög
 = 
	`°©
("/¥oc/£lf/èsk", &
sbuf
);

1370 
did_°©
 = 1;

1372 
PT
->
èskdú
 = 
NULL
;

1373 
PT
->
èskdú_u£r
 = -1;

1374 
PT
->
èskfödî
 = 
sim∂e_√xâid
;

1375 
PT
->
èskªadî
 = 
sim∂e_ªadèsk
;

1377 
PT
->
ªadî
 = 
sim∂e_ªad¥oc
;

1378 i‡(
Êags
 & 
PROC_PID
){

1379 
PT
->
¥ocfs
 = 
NULL
;

1380 
PT
->
födî
 = 
li°ed_√xçid
;

1382 
PT
->
¥ocfs
 = 
	`›ídú
("/proc");

1383 i‡(!
PT
->
¥ocfs
Ë{ 
	`‰ì
(PT);  
NULL
; }

1384 
PT
->
födî
 = 
sim∂e_√xçid
;

1386 
PT
->
Êags
 = flags;

1388 
	`va_°¨t
(
≠
, 
Êags
);

1389 i‡(
Êags
 & 
PROC_PID
)

1390 
PT
->
pids
 = 
	`va_¨g
(
≠
, 
pid_t
*);

1391 i‡(
Êags
 & 
PROC_UID
){

1392 
PT
->
uids
 = 
	`va_¨g
(
≠
, 
uid_t
*);

1393 
PT
->
nuid
 = 
	`va_¨g
(
≠
, );

1395 
	`va_íd
(
≠
);

1397 i‡(!
§c_buf„r
){

1398 
§c_buf„r
 = 
	`xmÆloc
(
MAX_BUFSZ
);

1399 
d°_buf„r
 = 
	`xmÆloc
(
MAX_BUFSZ
);

1401  
PT
;

1402 
	}
}

1405 
	$˛o£¥oc
(
PROCTAB
* 
PT
) {

1406 i‡(
PT
){

1407 i‡(
PT
->
¥ocfs
Ë
	`˛o£dú
(PT->procfs);

1408 i‡(
PT
->
èskdú
Ë
	`˛o£dú
(PT->taskdir);

1409 
	`mem£t
(
PT
,'#',(
PROCTAB
));

1410 
	`‰ì
(
PT
);

1412 
	}
}

1415 
	$‰ì¥oc
(
¥oc_t
* 
p
) {

1416 i‡(
p
) {

1417 
	`‰ì_acquúed
(
p
, 0);

1418 
	`‰ì
(
p
);

1420 
	}
}

1424 
	$look_up_our_£lf
(
¥oc_t
 *
p
) {

1425 
uébuf_s
 
ub
 = { 
NULL
, 0 };

1427 if(
	`fûe2°r
("/¥oc/£lf", "°©", &
ub
) == -1){

1428 
	`Ârötf
(
°dîr
, "Error, doÅhis: mount -tÖrocÖroc /proc\n");

1429 
	`_exô
(47);

1431 
	`°©2¥oc
(
ub
.
buf
, 
p
);

1432 
	`‰ì
(
ub
.
buf
);

1433 
	}
}

1435 
HIDDEN_ALIAS
(
ªad¥oc
);

1436 
HIDDEN_ALIAS
(
ªadèsk
);

1437 
HIDDEN_ALIAS
(
ªadeôhî
);

1444 
¥oc_t
** 
	$ªad¥o˘ab
(
Êags
, ...) {

1445 
PROCTAB
* 
PT
 = 
NULL
;

1446 
¥oc_t
** 
èb
 = 
NULL
;

1447 
n
 = 0;

1448 
va_li°
 
≠
;

1450 
	`va_°¨t
(
≠
, 
Êags
);

1451 i‡(
Êags
 & 
PROC_UID
) {

1455 
uid_t
* 
u
;

1456 
i
;

1458 
u
 = 
	`va_¨g
(
≠
, 
uid_t
*);

1459 
i
 = 
	`va_¨g
(
≠
, );

1460 
PT
 = 
	`›í¥oc
(
Êags
, 
u
, 
i
);

1462 i‡(
Êags
 & 
PROC_PID
)

1463 
PT
 = 
	`›í¥oc
(
Êags
, 
	`va_¨g
(
≠
, *));

1465 
PT
 = 
	`›í¥oc
(
Êags
);

1466 
	`va_íd
(
≠
);

1467 i‡(!
PT
)

1470 
èb
 = 
	`xªÆloc
—ab, (
n
+1)*(
¥oc_t
*));

1471 
èb
[
n
] = 
	`ªad¥oc_dúe˘
(
PT
, 
NULL
);

1472 } 
èb
[
n
++]);

1473 
	`˛o£¥oc
(
PT
);

1474  
èb
;

1475 
	}
}

1478 
¥oc_d©a_t
 *
	$ªad¥o˘ab2
((*
w™t_¥oc
)(
¥oc_t
 *
buf
), (*
w™t_èsk
)’roc_à*buf), 
PROCTAB
 *
ª°ri˘
 c⁄° 
PT
) {

1479 
¥oc_d©a_t
 
pd
;

1480 
¥oc_t
** 
±ab
 = 
NULL
;

1481 
n_¥oc_Æloc
 = 0;

1482 
n_¥oc
 = 0;

1484 
¥oc_t
** 
âab
 = 
NULL
;

1485 
n_èsk_Æloc
 = 0;

1486 
n_èsk
 = 0;

1488 
¥oc_t
* 
d©a
 = 
NULL
;

1489 
n_Æloc
 = 0;

1490 
n_u£d
 = 0;

1493 
¥oc_t
 *
tmp
;

1494 if(
n_Æloc
 =
n_u£d
){

1496 
n_Æloc
 =Ç_alloc*5/4+30;

1497 
d©a
 = 
	`xªÆloc
(d©a,(
¥oc_t
)*
n_Æloc
);

1498 
	`mem£t
(
d©a
+
n_u£d
, 0, (
¥oc_t
)*(
n_Æloc
-n_used));

1500 if(
n_¥oc_Æloc
 =
n_¥oc
){

1502 
n_¥oc_Æloc
 =Ç_proc_alloc*5/4+30;

1503 
±ab
 = 
	`xªÆloc
’èb,(
¥oc_t
*)*
n_¥oc_Æloc
);

1505 
tmp
 = 
	`ªad¥oc_dúe˘
(
PT
, 
d©a
+
n_u£d
);

1506 if(!
tmp
) ;

1507 if(!
	`w™t_¥oc
(
tmp
)) ;

1508 
±ab
[
n_¥oc
++] = (
¥oc_t
*)(
n_u£d
++);

1509 if(!–
PT
->
Êags
 & 
PROC_LOOSE_TASKS
 )) ;

1511 
¥oc_t
 *
t
;

1512 if(
n_Æloc
 =
n_u£d
){

1513 
¥oc_t
 *
ﬁd
 = 
d©a
;

1514 
n_Æloc
 =Ç_alloc*5/4+30;

1515 
d©a
 = 
	`xªÆloc
(d©a,(
¥oc_t
)*
n_Æloc
);

1517 
tmp
 = 
d©a
+—mp-
ﬁd
);

1518 
	`mem£t
(
d©a
+
n_u£d
+1, 0, (
¥oc_t
)*(
n_Æloc
-(n_used+1)));

1520 if(
n_èsk_Æloc
 =
n_èsk
){

1522 
n_èsk_Æloc
 =Ç_task_alloc*5/4+1;

1523 
âab
 = 
	`xªÆloc
—èb,(
¥oc_t
*)*
n_èsk_Æloc
);

1525 
t
 = 
	`ªadèsk_dúe˘
(
PT
, 
tmp
, 
d©a
+
n_u£d
);

1526 if(!
t
) ;

1527 if(!
	`w™t_èsk
(
t
)) ;

1528 
âab
[
n_èsk
++] = (
¥oc_t
*)(
n_u£d
++);

1532 
pd
.
¥oc
 = 
±ab
;

1533 
pd
.
èsk
 = 
âab
;

1534 
pd
.
≈roc
 = 
n_¥oc
;

1535 
pd
.
¡ask
 = 
n_èsk
;

1536 if(
PT
->
Êags
 & 
PROC_LOOSE_TASKS
){

1537 
pd
.
èb
 = 
âab
;

1538 
pd
.
n
 = 
n_èsk
;

1540 
pd
.
èb
 = 
±ab
;

1541 
pd
.
n
 = 
n_¥oc
;

1544 
n_¥oc
--Ë
±ab
[n_¥oc] = 
d©a
+()(ptab[n_proc]);

1545 
n_èsk
--Ë
âab
[n_èsk] = 
d©a
+()(ttab[n_task]);

1547  &
pd
;

1548 
	}
}

1551 
¥oc_d©a_t
 *
	$ªad¥o˘ab3
 ((*
w™t_èsk
)(
¥oc_t
 *
buf
), 
PROCTAB
 *
ª°ri˘
 c⁄° 
PT
) {

1552 
¥oc_d©a_t
 
pd
;

1553 
¥oc_t
 **
èb
 = 
NULL
;

1554 
n_Æloc
 = 0;

1555 
n_u£d
 = 0;

1556 
¥oc_t
 *
p
 = 
NULL
;

1559 i‡(
n_Æloc
 =
n_u£d
) {

1560 
n_Æloc
 =Ç_alloc*5/4+30;

1561 
èb
 = 
	`xªÆloc
—ab,(
¥oc_t
*)*
n_Æloc
);

1565 i‡(!(
p
 = 
	`ªadeôhî_dúe˘
(
PT
,p))) ;

1566 i‡(
	`w™t_èsk
(
p
)) {

1567 
èb
[
n_u£d
++] = 
p
;

1568 
p
 = 
NULL
;

1572 
pd
.
èb
 =Åab;

1573 
pd
.
n
 = 
n_u£d
;

1574  &
pd
;

1575 
	}
}

1583 
¥oc_t
 * 
	$gë_¥oc_°©s
(
pid_t
 
pid
, 
¥oc_t
 *
p
) {

1584 
uébuf_s
 
ub
 = { 
NULL
, 0 };

1585 
∑th
[32];

1586 
°©
 
°©buf
;

1588 
	`•rötf
(
∑th
, "/¥oc/%d", 
pid
);

1589 i‡(
	`°©
(
∑th
, &
°©buf
)) {

1590 
	`≥º‹
("stat");

1591  
NULL
;

1594 i‡(
	`fûe2°r
(
∑th
, "°©", &
ub
) >= 0)

1595 
	`°©2¥oc
(
ub
.
buf
, 
p
);

1596 i‡(
	`fûe2°r
(
∑th
, "°©m", &
ub
) >= 0)

1597 
	`°©m2¥oc
(
ub
.
buf
, 
p
);

1598 i‡(
	`fûe2°r
(
∑th
, "°©us", &
ub
) >= 0)

1599 
	`°©us2¥oc
(
ub
.
buf
, 
p
, 0);

1601 
	`‰ì
(
ub
.
buf
);

1602  
p
;

1603 
	}
}

1605 #unde‡
MK_THREAD


1606 #unde‡
IS_THREAD


1607 #unde‡
MAX_BUFSZ


	@proc/readproc.h

1 #i‚de‡
PROCPS_PROC_READPROC_H


2 
	#PROCPS_PROC_READPROC_H


	)

13 
	~"¥o˝s.h
"

14 
	~"pwˇche.h
"

16 
	#SIGNAL_STRING


	)

19 
	gEXTERN_C_BEGIN


32 
	#XXXID
 
tid


	)

34 
	ens_ty≥
 {

35 
	mIPCNS
 = 0,

36 
	mMNTNS
,

37 
	mNETNS
,

38 
	mPIDNS
,

39 
	mUSERNS
,

40 
	mUTSNS
,

41 
	mNUM_NS


43 c⁄° *
gë_ns_«me
(
id
);

44 
gë_ns_id
(c⁄° *
«me
);

51 
	s¥oc_t
 {

54 
	mtid
,

55 
	mµid
;

57 
	mmaj_dñè
,

58 
	mmö_dñè
;

60 
	mp˝u
;

62 
	m°©e
,

63 #ifde‡
QUICK_THREADS


64 
	m∑d_1
,

66 
	m∑d_1
,

68 
	m∑d_2
,

69 
	m∑d_3
;

72 
	mutime
,

73 
	m°ime
,

75 
	mcutime
,

76 
	mc°ime
,

77 
	m°¨t_time
;

78 #ifde‡
SIGNAL_STRING


81 
	msig«l
[18],

82 
	mblocked
[18],

83 
	msigign‹e
[18],

84 
	msigˇtch
[18],

85 
	m_sig≤d
[18];

89 
	msig«l
,

90 
	mblocked
,

91 
	msigign‹e
,

92 
	msigˇtch
,

93 
	m_sig≤d
;

95 
KLONG


96 
	m°¨t_code
,

97 
	míd_code
,

98 
	m°¨t_°ack
,

99 
	mk°k_e•
,

100 
	mk°k_eù
,

101 
	mwch™
;

103 
	m¥i‹ôy
,

104 
	mni˚
,

105 
	mrss
,

106 
	mÆ¨m
,

108 
	msize
,

109 
	mªsidít
,

110 
	msh¨e
,

111 
	mås
,

112 
	mÃs
,

113 
	mdrs
,

114 
	mdt
;

116 
	mvm_size
,

117 
	mvm_lock
,

118 
	mvm_rss
,

119 
	mvm_rss_™⁄
,

120 
	mvm_rss_fûe
,

121 
	mvm_rss_sh¨ed
,

122 
	mvm_d©a
,

123 
	mvm_°ack
,

124 
	mvm_sw≠
,

125 
	mvm_exe
,

126 
	mvm_lib
,

127 
	mπ¥io
,

128 
	msched
,

129 
	mvsize
,

130 
	mrss_æim
,

131 
	mÊags
,

132 
	mmö_Êt
,

133 
	mmaj_Êt
,

134 
	mcmö_Êt
,

135 
	mcmaj_Êt
;

137 **
	mívú⁄
,

138 **
	mcmdlöe
,

139 **
	mcgroup
,

140 *
	mcg«me
,

141 *
	msupgid
,

142 *
	msupgΩ
;

145 
	meu£r
[
P_G_SZ
],

146 
	mru£r
[
P_G_SZ
],

147 
	msu£r
[
P_G_SZ
],

148 
	mfu£r
[
P_G_SZ
],

149 
	mrgroup
[
P_G_SZ
],

150 
	megroup
[
P_G_SZ
],

151 
	msgroup
[
P_G_SZ
],

152 
	mfgroup
[
P_G_SZ
],

153 
	mcmd
[16];

154 
¥oc_t


155 *
	mrög
,

156 *
	m√xt
;

158 
	mpgΩ
,

159 
	m£ssi⁄
,

160 
	m∆wp
,

161 
	mtgid
,

162 
	mây
,

164 
	meuid
, 
	megid
,

165 
	mruid
, 
	mrgid
,

166 
	msuid
, 
	msgid
,

167 
	mfuid
, 
	mfgid
,

168 
	mçgid
,

169 
	mexô_sig«l
,

170 
	m¥o˚ss‹
;

172 
	moom_sc‹e
,

173 
	moom_adj
;

175 
	mns
[
NUM_NS
];

177 *
	msd_mach
,

178 *
	msd_ouid
,

179 *
	msd_£©
,

180 *
	msd_£ss
,

181 *
	msd_¶i˚
,

182 *
	msd_unô
,

183 *
	msd_uunô
;

185 *
	mlx˙ame
;

186 } 
	t¥oc_t
;

192 
	~<sys/ty≥s.h
>

193 
	~<dúít.h
>

194 
	~<uni°d.h
>

196 
	#PROCPATHLEN
 64

197 

	)

198 
	sPROCTAB
 {

199 
DIR
* 
	m¥ocfs
;

201 
DIR
* 
	mèskdú
;

203 
pid_t
 
	mèskdú_u£r
;

204 
	mdid_Áke
;

205 (*
	mfödî
)(
PROCTAB
 *
__ª°ri˘
 c⁄°, 
¥oc_t
 *__restrict const);

206 
	m¥oc_t
*(*
	mªadî
)(
PROCTAB
 *
__ª°ri˘
 c⁄°, 
¥oc_t
 *__restrict const);

207 (*
	mèskfödî
)(
PROCTAB
 *
__ª°ri˘
 c⁄°, c⁄° 
¥oc_t
 *__restrict const,Öroc_t *__restrict const, *__restrict const);

208 
	m¥oc_t
*(*
	mèskªadî
)(
PROCTAB
 *
__ª°ri˘
 c⁄°, c⁄° 
¥oc_t
 *__restrict const,Öroc_t *__restrict const, *__restrict const);

209 
pid_t
* 
	mpids
;

210 
uid_t
* 
	muids
;

211 
	mnuid
;

212 
	mi
;

213 
	mÊags
;

214 
	mu
;

215 * 
	mvp
;

216 
	m∑th
[
PROCPATHLEN
];

217 
	m∑thÀn
;

218 } 
	tPROCTAB
;

221 
PROCTAB
* 
›í¥oc
(
Êags
, ... );

223 
	s¥oc_d©a_t
 {

224 
¥oc_t
 **
	mèb
;

225 
¥oc_t
 **
	m¥oc
;

226 
¥oc_t
 **
	mèsk
;

227 
	mn
;

228 
	m≈roc
;

229 
	m¡ask
;

230 } 
	t¥oc_d©a_t
;

232 
¥oc_d©a_t
 *
ªad¥o˘ab2
((*
w™t_¥oc
)(
¥oc_t
 *
buf
), (*
w™t_èsk
)’roc_à*buf), 
PROCTAB
 *
__ª°ri˘
 c⁄° 
PT
);

233 
¥oc_d©a_t
 *
	`ªad¥o˘ab3
((*
w™t_èsk
)(
¥oc_t
 *
buf
), 
PROCTAB
 *
__ª°ri˘
 c⁄° 
PT
);

239 
¥oc_t
** 
	`ªad¥o˘ab
(
Êags
, ... );

242 
	`˛o£¥oc
(
PROCTAB
* 
PT
);

254 
¥oc_t
* 
	`ªad¥oc
(
PROCTAB
 *
__ª°ri˘
 c⁄° 
PT
,Öroc_à*__ª°ri˘ 
p
);

255 
¥oc_t
* 
	`ªadèsk
(
PROCTAB
 *
__ª°ri˘
 c⁄° 
PT
, c⁄°Öroc_à*__ª°ri˘ c⁄° 
p
,Öroc_à*__ª°ri˘ 
t
);

256 
¥oc_t
* 
	`ªadeôhî
(
PROCTAB
 *
__ª°ri˘
 c⁄° 
PT
,Öroc_à*__ª°ri˘ 
x
);

259 
	`ªad_cmdlöe
(*
__ª°ri˘
 c⁄° 
d°
, 
sz
, 
pid
);

261 
	`look_up_our_£lf
(
¥oc_t
 *
p
);

264 
	`‰ì¥oc
(
¥oc_t
* 
p
);

267 
¥oc_t
 * 
	`gë_¥oc_°©s
(
pid_t
 
pid
,Öroc_à*
p
);

283 
	#PROC_FILLMEM
 0x0001

284 
	#PROC_FILLCOM
 0x0002

285 
	#PROC_FILLENV
 0x0004

286 
	#PROC_FILLUSR
 0x0008

287 
	#PROC_FILLGRP
 0x0010

288 
	#PROC_FILLSTATUS
 0x0020

289 
	#PROC_FILLSTAT
 0x0040

290 
	#PROC_FILLARG
 0x0100

291 
	#PROC_FILLCGROUP
 0x0200

292 
	#PROC_FILLSUPGRP
 0x0400

293 
	#PROC_FILLOOM
 0x0800

294 
	#PROC_FILLNS
 0x8000

295 
	#PROC_FILLSYSTEMD
 0x80000

296 
	#PROC_FILL_LXC
 0x800000

297 

	)

298 
	#PROC_LOOSE_TASKS
 0x2000

299 

	)

301 
	#PROC_PID
 0x1000

302 
	#PROC_UID
 0x4000

303 

	)

304 
	#PROC_EDITCGRPCVT
 0x10000

305 
	#PROC_EDITCMDLCVT
 0x20000

306 
	#PROC_EDITENVRCVT
 0x40000

307 

	)

309 
	#PROC_SPARE_1
 0x01000000

	)

310 
	#PROC_SPARE_2
 0x02000000

	)

311 
	#PROC_SPARE_3
 0x04000000

	)

312 
	#PROC_SPARE_4
 0x08000000

	)

314 
EXTERN_C_END


	@proc/sig.c

20 
	~<˘y≥.h
>

21 
	~<sig«l.h
>

22 
	~<°rög.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~"sig.h
"

26 
	~"c.h
"

43 #i‚de‡
SIGSYS


44 #w¨nög 
Sènd¨ds
 
ªquúe
 
th©
 <
sig«l
.
h
> 
deföe
 
SIGSYS


45 
	#SIGSYS
 
SIGUNUSED


	)

49 #ifde‡
SIGEMT


50 #unde‡
SIGSTKFLT


53 #i‚de‡
SIGRTMIN


54 #w¨nög 
Sènd¨ds
 
ªquúe
 
th©
 <
sig«l
.
h
> 
deföe
 
SIGRTMIN
; 
assumög
 32

55 
	#SIGRTMIN
 32

	)

59 #i‡
deföed
(
__löux__
Ë&& !deföed(
SIGPWR
)

60 #w¨nög 
Your
 
hódî
 
fûes
 
œck
 
SIGPWR
. (
assumög
 
ô
 
is
 
numbî
 29)

61 
	#SIGPWR
 29

	)

64 
	sm≠°ru˘
 {

65 c⁄° *
	m«me
;

66 
	mnum
;

67 } 
	tm≠°ru˘
;

70 c⁄° 
m≠°ru˘
 
	gsigèbÀ
[] = {

71 {"ABRT", 
SIGABRT
},

72 {"ALRM", 
SIGALRM
},

73 {"BUS", 
SIGBUS
},

74 {"CHLD", 
SIGCHLD
},

75 {"CONT", 
SIGCONT
},

76 #ifde‡
SIGEMT


77 {"EMT", 
SIGEMT
},

79 {"FPE", 
SIGFPE
},

80 {"HUP", 
SIGHUP
},

81 {"ILL", 
SIGILL
},

82 {"INT", 
SIGINT
},

83 {"KILL", 
SIGKILL
},

84 {"PIPE", 
SIGPIPE
},

85 {"POLL", 
SIGPOLL
},

86 {"PROF", 
SIGPROF
},

87 #ifde‡
SIGPWR


88 {"PWR", 
SIGPWR
},

90 {"QUIT", 
SIGQUIT
},

91 {"SEGV", 
SIGSEGV
},

92 #ifde‡
SIGSTKFLT


93 {"STKFLT", 
SIGSTKFLT
},

95 {"STOP", 
SIGSTOP
},

96 {"SYS", 
SIGSYS
},

97 {"TERM", 
SIGTERM
},

98 {"TRAP", 
SIGTRAP
},

99 {"TSTP", 
SIGTSTP
},

100 {"TTIN", 
SIGTTIN
},

101 {"TTOU", 
SIGTTOU
},

102 {"URG", 
SIGURG
},

103 {"USR1", 
SIGUSR1
},

104 {"USR2", 
SIGUSR2
},

105 {"VTALRM", 
SIGVTALRM
},

106 {"WINCH", 
SIGWINCH
},

107 {"XCPU", 
SIGXCPU
},

108 {"XFSZ", 
SIGXFSZ
}

111 c⁄° 
	gnumbî_of_sig«ls
 = (
sigèbÀ
)/(
m≠°ru˘
);

113 
	$com∑ª_sig«l_«mes
(c⁄° *
a
, c⁄° *
b
){

114  
	`°rˇ£cmp
–((c⁄° 
m≠°ru˘
*)
a
)->
«me
, ((c⁄° m≠°ru˘*)
b
)->name );

115 
	}
}

118 
	$sig«l_«me_to_numbî
(c⁄° *
ª°ri˘
 
«me
){

119 
vÆ
;

120 
off£t
;

123 if(!
	`°∫ˇ£cmp
(
«me
,"SIG",3))Çame += 3;

125 if(!
	`°rˇ£cmp
(
«me
,"CLD")Ë 
SIGCHLD
;

126 if(!
	`°rˇ£cmp
(
«me
,"IO")Ë 
SIGPOLL
;

127 if(!
	`°rˇ£cmp
(
«me
,"IOT")Ë 
SIGABRT
;

131 c⁄° 
m≠°ru˘
 
ms
 = {
«me
,0};

132 c⁄° 
m≠°ru˘
 *
ª°ri˘
 c⁄° 
±r
 = 
	`b£¨ch
(

133 &
ms
,

134 
sigèbÀ
,

135 
numbî_of_sig«ls
,

136 (
m≠°ru˘
),

137 
com∑ª_sig«l_«mes


139 if(
±r
ËÖå->
num
;

142 if(!
	`°rˇ£cmp
(
«me
,"RTMIN")Ë 
SIGRTMIN
;

143 if(!
	`°rˇ£cmp
(
«me
,"EXIT"))  0;

144 if(!
	`°rˇ£cmp
(
«me
,"NULL"))  0;

146 
off£t
 = 0;

147 if(!
	`°∫ˇ£cmp
(
«me
,"RTMIN+",6)){

148 
«me
 += 6;

149 
off£t
 = 
SIGRTMIN
;

154 *
ídp
;

155 
vÆ
 = 
	`°πﬁ
(
«me
,&
ídp
,10);

156 if(*
ídp
 ||Éndp==
«me
)  -1;

158 if(
vÆ
+
SIGRTMIN
>127)  -1;

159  
vÆ
+
off£t
;

160 
	}
}

162 c⁄° *
	$sig«l_numbî_to_«me
(
signo
){

163 
buf
[32];

164 
n
 = 
numbî_of_sig«ls
;

165 
signo
 &= 0x7f;

166 
n
--){

167 if(
sigèbÀ
[
n
].
num
==
signo
Ë sigèbÀ[n].
«me
;

169 if(
signo
 =
SIGRTMIN
)  "RTMIN";

170 if(
signo
Ë
	`•rötf
(
buf
, "RTMIN+%d", signo-
SIGRTMIN
);

171 
	`°r˝y
(
buf
,"0");

172  
buf
;

173 
	}
}

175 
	$¥öt_giví_sig«ls
(
¨gc
, c⁄° *
ª°ri˘
 c⁄° *ª°ri˘ 
¨gv
, 
max_löe
){

176 
buf
[1280];

177 
ªt
 = 0;

178 
∂a˚
 = 0;

179 
amt
;

180 if(
¨gc
 > 128)  1;

181 
¨gc
--){

182 
tmpbuf
[16];

183 c⁄° *
ª°ri˘
 c⁄° 
txt
 = *
¨gv
;

184 if(*
txt
 >= '0' && *txt <= '9'){

185 
vÆ
;

186 *
ídp
;

187 
vÆ
 = 
	`°πﬁ
(
txt
,&
ídp
,10);

188 if(*
ídp
){

189 
	`Ârötf
(
°dîr
, "Sig«»\"%s\"ÇŸ known.\n", 
txt
);

190 
ªt
 = 1;

191 
íd
;

193 
amt
 = 
	`•rötf
(
tmpbuf
, "%s", 
	`sig«l_numbî_to_«me
(
vÆ
));

195 
¢o
;

196 
¢o
 = 
	`sig«l_«me_to_numbî
(
txt
);

197 if(
¢o
 == -1){

198 
	`Ârötf
(
°dîr
, "Sig«»\"%s\"ÇŸ known.\n", 
txt
);

199 
ªt
 = 1;

200 
íd
;

202 
amt
 = 
	`•rötf
(
tmpbuf
, "%d", 
¢o
);

205 if(!
∂a˚
){

206 
	`°r˝y
(
buf
,
tmpbuf
);

207 
∂a˚
 = 
amt
;

208 
íd
;

210 if(
amt
+
∂a˚
+1 > 
max_löe
){

211 
	`¥ötf
("%s\n", 
buf
);

212 
	`°r˝y
(
buf
,
tmpbuf
);

213 
∂a˚
 = 
amt
;

214 
íd
;

216 
	`•rötf
(
buf
+
∂a˚
, " %s", 
tmpbuf
);

217 
∂a˚
 +
amt
+1;

218 
íd
:

219 
¨gv
++;

221 if(
∂a˚
Ë
	`¥ötf
("%s\n", 
buf
);

222  
ªt
;

223 
	}
}

231 *
	$°πosig
(c⁄° *
ª°ri˘
 
s
){

232 *
c⁄vîãd
 = 
NULL
, *
c›y
, *
p
, *
ídp
;

233 
i
, 
numsig«l
 = 0;

235 
c›y
 = 
	`°rdup
(
s
);

236 i‡(!
c›y
)

237 
	`xîrx
(
EXIT_FAILURE
, "cannot duplicate string");

238 
p
 = 
c›y
; *p != '\0';Ö++)

239 *
p
 = 
	`touµî
(*p);

240 
p
 = 
c›y
;

241 i‡(
p
[0] == 'S' &&Ö[1] == 'I' &&Ö[2] == 'G')

242 
p
 += 3;

243 i‡(
	`isdigô
(*
p
)){

244 
numsig«l
 = 
	`°πﬁ
(
s
,&
ídp
,10);

245 if(*
ídp
 ||Éndp==
s
Ë 
NULL
;

247 i‡(
numsig«l
){

248 
i
 = 0; i < 
numbî_of_sig«ls
; i++){

249 i‡(
numsig«l
 =
sigèbÀ
[
i
].
num
){

250 
c⁄vîãd
 = 
	`°rdup
(
sigèbÀ
[
i
].
«me
);

255 
i
 = 0; i < 
numbî_of_sig«ls
; i++){

256 i‡(
	`°rcmp
(
p
, 
sigèbÀ
[
i
].
«me
) == 0){

257 
c⁄vîãd
 = 
	`mÆloc
(() * 8);

258 i‡(
c⁄vîãd
)

259 
	`¢¥ötf
(
c⁄vîãd
, (c⁄vîãdË- 1, "%d", 
sigèbÀ
[
i
].
num
);

264 
	`‰ì
(
c›y
);

265  
c⁄vîãd
;

266 
	}
}

268 
	$¥ëty_¥öt_sig«ls
(){

269 
i
 = 0;

270 ++
i
 <
numbî_of_sig«ls
){

271 
n
;

272 
n
 = 
	`¥ötf
("%2d %s", 
i
, 
	`sig«l_numbî_to_«me
(i));

273 if(
n
>0 && 
i
%7Ë
	`¥ötf
("%s", " \0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0" +Ç);

274 
	`¥ötf
("\n");

276 if((
i
-1)%7Ë
	`¥ötf
("\n");

277 
	}
}

279 
	$unix_¥öt_sig«ls
(){

280 
pos
 = 0;

281 
i
 = 0;

282 ++
i
 <
numbî_of_sig«ls
){

283 if(
i
-1Ë
	`¥ötf
("%c", (
pos
>73)?(pos=0,'\n'):(pos++,' ') );

284 
pos
 +
	`¥ötf
("%s", 
	`sig«l_numbî_to_«me
(
i
));

286 
	`¥ötf
("\n");

287 
	}
}

290 
	$öô_sig«l_li°
(Ë
	`__©åibuã__
((
c⁄°ru˘‹
));

291 
	$öô_sig«l_li°
(){

292 if(
numbî_of_sig«ls
 != 31){

293 
	`Ârötf
(
°dîr
, "WARNING: %d sig«l†--ádju°ándÑecompûe.\n", 
numbî_of_sig«ls
);

296 
	}
}

	@proc/sig.h

1 #i‚de‡
PROC_SIG_H


2 
	#PROC_SIG_H


	)

14 
	~"¥o˝s.h
"

16 
EXTERN_C_BEGIN


19 
sig«l_«me_to_numbî
(c⁄° *
__ª°ri˘
 
«me
);

21 c⁄° *
sig«l_numbî_to_«me
(
signo
);

23 
¥öt_giví_sig«ls
(
¨gc
, c⁄° *
__ª°ri˘
 c⁄° *__ª°ri˘ 
¨gv
, 
max_löe
);

25 *
°πosig
(c⁄° *
__ª°ri˘
 
s
);

27 
¥ëty_¥öt_sig«ls
();

29 
unix_¥öt_sig«ls
();

31 
	gEXTERN_C_END


	@proc/slab.c

25 
	~<°dlib.h
>

26 
	~<°dio.h
>

27 
	~<uni°d.h
>

28 
	~<limôs.h
>

29 
	~<˘y≥.h
>

31 
	~"¶ab.h
"

32 
	~"¥o˝s.h
"

33 
	~"Æloc.h
"

35 
	#SLABINFO_LINE_LEN
 2048

	)

36 
	#SLABINFO_VER_LEN
 100

	)

37 
	#SLABINFO_FILE
 "/¥oc/¶aböfo"

	)

39 
¶ab_öfo
 *
	g‰ì_ödex
;

49 
¶ab_öfo
 *
	$gë_¶abnode
()

51 
¶ab_öfo
 *
node
;

53 i‡(
‰ì_ödex
) {

54 
node
 = 
‰ì_ödex
;

55 
‰ì_ödex
 = fªe_ödex->
√xt
;

57 
node
 = 
	`xmÆloc
((
¶ab_öfo
));

60  
node
;

61 
	}
}

69 
	$¶ab_bad«me_dëe˘
(c⁄° *
ª°ri˘
 
buf„r
)

71 
numbî¨ó
=0;

72 *
buf„r
){

73 if((*
buf„r
)==' ')

74 
numbî¨ó
=1;

75 if(
	`ißÕha
(*
buf„r
)&&
numbî¨ó
)

77 
buf„r
++;

80 
	}
}

85 
	$put_¶aböfo
(
¶ab_öfo
 *
hód
)

87 
‰ì_ödex
 = 
hód
;

88 
	}
}

94 
	$‰ì_¶aböfo
(
¶ab_öfo
 *
li°
)

96 
li°
) {

97 
¶ab_öfo
 *
ãmp
 = 
li°
->
√xt
;

98 
	`‰ì
(
li°
);

99 
li°
 = 
ãmp
;

101 
	}
}

133 
	$∑r£_¶aböfo20
(
¶ab_öfo
 **
li°
, 
¶ab_°©
 *
°©s
,

134 
FILE
 *
f
)

136 
¶ab_öfo
 *
cuº
 = 
NULL
, *
¥ev
 = NULL;

137 
buf„r
[
SLABINFO_LINE_LEN
];

138 
íåõs
 = 0;

139 
∑ge_size
 = 
	`gë∑gesize
();

141 
°©s
->
mö_obj_size
 = 
INT_MAX
;

142 
°©s
->
max_obj_size
 = 0;

144 
	`fgës
(
buf„r
, 
SLABINFO_LINE_LEN
, 
f
)) {

145 
assig√d
;

147 i‡(
buf„r
[0] == '#')

150 
cuº
 = 
	`gë_¶abnode
();

151 i‡(!
cuº
)

154 i‡(
íåõs
++ == 0)

155 *
li°
 = 
cuº
;

157 i‡(
¥ev
)

158 
¥ev
->
√xt
 = 
cuº
;

160 
assig√d
 = 
	`ssˇnf
(
buf„r
, "%" 
	`STRINGIFY
(
SLAB_INFO_NAME_LEN
)

161 "†%d %d %d %d %d :Åu«bÀ†%*d %*d %*d : \
 %d %d %*d", 
cuº
->
«me
,

163 &
cuº
->
ƒ_a˘ive_objs
, &cuº->
ƒ_objs
,

164 &
cuº
->
obj_size
, &cuº->
objs_≥r_¶ab
,

165 &
cuº
->
∑ges_≥r_¶ab
, &cuº->
ƒ_a˘ive_¶abs
,

166 &
cuº
->
ƒ_¶abs
);

168 i‡(
assig√d
 < 8) {

169 
	`Ârötf
(
°dîr
, "unrecognizable data in slabinfo!\n");

170 
cuº
 = 
NULL
;

174 i‡(
cuº
->
obj_size
 < 
°©s
->
mö_obj_size
)

175 
°©s
->
mö_obj_size
 = 
cuº
->
obj_size
;

176 i‡(
cuº
->
obj_size
 > 
°©s
->
max_obj_size
)

177 
°©s
->
max_obj_size
 = 
cuº
->
obj_size
;

179 
cuº
->
ˇche_size
 = ()cuº->
ƒ_¶abs
 * cuº->
∑ges_≥r_¶ab
 * 
∑ge_size
;

181 i‡(
cuº
->
ƒ_objs
) {

182 
cuº
->
u£
 = 100 * ()cuº->
ƒ_a˘ive_objs
 / cuº->
ƒ_objs
;

183 
°©s
->
ƒ_a˘ive_ˇches
++;

185 
cuº
->
u£
 = 0;

187 
°©s
->
ƒ_objs
 +
cuº
->nr_objs;

188 
°©s
->
ƒ_a˘ive_objs
 +
cuº
->nr_active_objs;

189 
°©s
->
tŸÆ_size
 +()
cuº
->
ƒ_objs
 * cuº->
obj_size
;

190 
°©s
->
a˘ive_size
 +()
cuº
->
ƒ_a˘ive_objs
 * cuº->
obj_size
;

191 
°©s
->
ƒ_∑ges
 +
cuº
->
ƒ_¶abs
 * cuº->
∑ges_≥r_¶ab
;

192 
°©s
->
ƒ_¶abs
 +
cuº
->nr_slabs;

193 
°©s
->
ƒ_a˘ive_¶abs
 +
cuº
->nr_active_slabs;

195 
¥ev
 = 
cuº
;

198 i‡(!
cuº
) {

199 
	`Ârötf
(
°dîr
, "\rerrorÑeading slabinfo!\n");

203 
cuº
->
√xt
 = 
NULL
;

204 
°©s
->
ƒ_ˇches
 = 
íåõs
;

205 i‡(
°©s
->
ƒ_objs
)

206 
°©s
->
avg_obj_size
 = sèts->
tŸÆ_size
 / sèts->
ƒ_objs
;

209 
	}
}

214 
	$∑r£_¶aböfo11
(
¶ab_öfo
 **
li°
, 
¶ab_°©
 *
°©s
,

215 
FILE
 *
f
)

217 
¶ab_öfo
 *
cuº
 = 
NULL
, *
¥ev
 = NULL;

218 
buf„r
[
SLABINFO_LINE_LEN
];

219 
íåõs
 = 0;

220 
∑ge_size
 = 
	`gë∑gesize
();

222 
°©s
->
mö_obj_size
 = 
INT_MAX
;

223 
°©s
->
max_obj_size
 = 0;

225 
	`fgës
(
buf„r
, 
SLABINFO_LINE_LEN
, 
f
)) {

226 
assig√d
;

228 
cuº
 = 
	`gë_¶abnode
();

229 i‡(!
cuº
)

232 i‡(
íåõs
++ == 0)

233 *
li°
 = 
cuº
;

235 i‡(
¥ev
)

236 
¥ev
->
√xt
 = 
cuº
;

238 
assig√d
 = 
	`ssˇnf
(
buf„r
, "%" 
	`STRINGIFY
(
SLAB_INFO_NAME_LEN
)

240 
cuº
->
«me
, &cuº->
ƒ_a˘ive_objs
,

241 &
cuº
->
ƒ_objs
, &cuº->
obj_size
,

242 &
cuº
->
ƒ_a˘ive_¶abs
, &cuº->
ƒ_¶abs
,

243 &
cuº
->
∑ges_≥r_¶ab
);

245 i‡(
assig√d
 < 6) {

246 
	`Ârötf
(
°dîr
, "unrecognizable data in your slabinfo version 1.1\n\r");

247 if(
	`¶ab_bad«me_dëe˘
(
buf„r
))

248 
	`Ârötf
(
°dîr
, "Foundá¿îr‹ i¿ˇchê«mê©Üöê%s\n", 
buf„r
);

249 
cuº
 = 
NULL
;

253 i‡(
cuº
->
obj_size
 < 
°©s
->
mö_obj_size
)

254 
°©s
->
mö_obj_size
 = 
cuº
->
obj_size
;

255 i‡(
cuº
->
obj_size
 > 
°©s
->
max_obj_size
)

256 
°©s
->
max_obj_size
 = 
cuº
->
obj_size
;

258 
cuº
->
ˇche_size
 = ()cuº->
ƒ_¶abs
 * cuº->
∑ges_≥r_¶ab
 * 
∑ge_size
;

260 i‡(
cuº
->
ƒ_objs
) {

261 
cuº
->
u£
 = 100 * ()cuº->
ƒ_a˘ive_objs
 / cuº->
ƒ_objs
;

262 
°©s
->
ƒ_a˘ive_ˇches
++;

264 
cuº
->
u£
 = 0;

266 i‡(
cuº
->
obj_size
)

267 
cuº
->
objs_≥r_¶ab
 = cuº->
∑ges_≥r_¶ab
 *

268 
∑ge_size
 / 
cuº
->
obj_size
;

270 
°©s
->
ƒ_objs
 +
cuº
->nr_objs;

271 
°©s
->
ƒ_a˘ive_objs
 +
cuº
->nr_active_objs;

272 
°©s
->
tŸÆ_size
 +()
cuº
->
ƒ_objs
 * cuº->
obj_size
;

273 
°©s
->
a˘ive_size
 +()
cuº
->
ƒ_a˘ive_objs
 * cuº->
obj_size
;

274 
°©s
->
ƒ_∑ges
 +
cuº
->
ƒ_¶abs
 * cuº->
∑ges_≥r_¶ab
;

275 
°©s
->
ƒ_¶abs
 +
cuº
->nr_slabs;

276 
°©s
->
ƒ_a˘ive_¶abs
 +
cuº
->nr_active_slabs;

278 
¥ev
 = 
cuº
;

281 i‡(!
cuº
) {

282 
	`Ârötf
(
°dîr
, "\rerrorÑeading slabinfo!\n");

286 
cuº
->
√xt
 = 
NULL
;

287 
°©s
->
ƒ_ˇches
 = 
íåõs
;

288 i‡(
°©s
->
ƒ_objs
)

289 
°©s
->
avg_obj_size
 = sèts->
tŸÆ_size
 / sèts->
ƒ_objs
;

292 
	}
}

299 
	$∑r£_¶aböfo10
(
¶ab_öfo
 **
li°
, 
¶ab_°©
 *
°©s
,

300 
FILE
 *
f
)

302 (Ë
li°
, (Ë
°©s
, (Ë
f
;

303 
	`Ârötf
(
°dîr
, "slabinfo version 1.0Çot yet supported\n");

305 
	}
}

315 
	$gë_¶aböfo
(
¶ab_öfo
 **
li°
, 
¶ab_°©
 *
°©s
)

317 
FILE
 *
¶abfûe
;

318 
buf„r
[
SLABINFO_VER_LEN
];

319 
maj‹
, 
mö‹
, 
ªt
 = 0;

321 
¶abfûe
 = 
	`f›í
(
SLABINFO_FILE
, "r");

322 i‡(!
¶abfûe
) {

323 
	`≥º‹
("f›í " 
SLABINFO_FILE
);

327 i‡(!
	`fgës
(
buf„r
, 
SLABINFO_VER_LEN
, 
¶abfûe
)) {

328 
	`Ârötf
(
°dîr
, "cannotÑead from slabinfo\n");

329 
	`f˛o£
(
¶abfûe
);

333 i‡(
	`ssˇnf
(
buf„r
, "¶aböfÿ- vîsi⁄: %d.%d", &
maj‹
, &
mö‹
) != 2) {

334 
	`Ârötf
(
°dîr
, "notÅhe good old slabinfo we know\n");

335 
	`f˛o£
(
¶abfûe
);

339 i‡(
maj‹
 == 2)

340 
ªt
 = 
	`∑r£_¶aböfo20
(
li°
, 
°©s
, 
¶abfûe
);

341 i‡(
maj‹
 =1 && 
mö‹
 == 1)

342 
ªt
 = 
	`∑r£_¶aböfo11
(
li°
, 
°©s
, 
¶abfûe
);

343 i‡(
maj‹
 =1 && 
mö‹
 == 0)

344 
ªt
 = 
	`∑r£_¶aböfo10
(
li°
, 
°©s
, 
¶abfûe
);

346 
	`Ârötf
(
°dîr
, "unrecognizable slabinfo version\n");

347 
	`f˛o£
(
¶abfûe
);

351 
	`f˛o£
(
¶abfûe
);

353  
ªt
;

354 
	}
}

	@proc/slab.h

1 #i‚de‡
_PROC_SLAB_H


2 
	#_PROC_SLAB_H


	)

4 
	#SLAB_INFO_NAME_LEN
 128

	)

6 
	s¶ab_öfo
 {

7 
	m«me
[
SLAB_INFO_NAME_LEN
];

8 
¶ab_öfo
 *
	m√xt
;

9 
	mˇche_size
;

10 
	mƒ_objs
;

11 
	mƒ_a˘ive_objs
;

12 
	mobj_size
;

13 
	mobjs_≥r_¶ab
;

14 
	m∑ges_≥r_¶ab
;

15 
	mƒ_¶abs
;

16 
	mƒ_a˘ive_¶abs
;

17 
	mu£
;

20 
	s¶ab_°©
 {

21 
	mtŸÆ_size
;

22 
	ma˘ive_size
;

23 
	mƒ_objs
;

24 
	mƒ_a˘ive_objs
;

25 
	mƒ_∑ges
;

26 
	mƒ_¶abs
;

27 
	mƒ_a˘ive_¶abs
;

28 
	mƒ_ˇches
;

29 
	mƒ_a˘ive_ˇches
;

30 
	mavg_obj_size
;

31 
	mmö_obj_size
;

32 
	mmax_obj_size
;

35 
put_¶aböfo
(
¶ab_öfo
 *);

36 
‰ì_¶aböfo
(
¶ab_öfo
 *);

37 
gë_¶aböfo
(
¶ab_öfo
 **, 
¶ab_°©
 *);

	@proc/sysinfo.c

22 
	~<°dboﬁ.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<˘y≥.h
>

27 
	~<loˇÀ.h
>

29 
	~<uni°d.h
>

30 
	~<f˙é.h
>

31 #ifde‡
__CYGWIN__


32 
	~<sys/∑øm.h
>

34 
	~"Æloc.h
"

35 
	~"vîsi⁄.h
"

36 
	~"sysöfo.h
"

38 #i‚de‡
HZ


39 
	~<√töë/ö.h
>

42 #i‚de‡
__CYGWIN__


43 
	~<lök.h
>

45 
	~<ñf.h
>

47 
	gsmp_num_˝us
;

48 
	g∑ge_byãs
;

50 
	#BAD_OPEN_MESSAGE
 \

54 " I¿thêmó¡ime,Ñu¿\"mou¡Öro¯/¥o¯-à¥oc\"\n"

	)

56 
	#STAT_FILE
 "/¥oc/°©"

	)

57 
	g°©_fd
 = -1;

58 
	#UPTIME_FILE
 "/¥oc/u±ime"

	)

59 
	gu±ime_fd
 = -1;

60 
	#LOADAVG_FILE
 "/¥oc/lﬂdavg"

	)

61 
	glﬂdavg_fd
 = -1;

62 
	#MEMINFO_FILE
 "/¥oc/memöfo"

	)

63 
	gmemöfo_fd
 = -1;

64 
	#VMINFO_FILE
 "/¥oc/vm°©"

	)

65 
	gvmöfo_fd
 = -1;

66 
	#VM_MIN_FREE_FILE
 "/¥oc/sys/vm/mö_‰ì_kbyãs"

	)

67 
	gvm_mö_‰ì_fd
 = -1;

73 
	gbuf
[8192];

79 
	#FILE_TO_BUF
(
fûíame
, 
fd
) do{ \

80 
loˇl_n
; \

81 i‡(
fd
 =-1 && (fd = 
	`›í
(
fûíame
, 
O_RDONLY
)) == -1) { \

82 
	`Âuts
(
BAD_OPEN_MESSAGE
, 
°dîr
); \

83 
	`fÊush
(
NULL
); \

84 
	`_exô
(102); \

86 
	`l£ek
(
fd
, 0L, 
SEEK_SET
); \

87 i‡((
loˇl_n
 = 
	`ªad
(
fd
, 
buf
,  buf - 1)) < 0) { \

88 
	`≥º‹
(
fûíame
); \

89 
	`fÊush
(
NULL
); \

90 
	`_exô
(103); \

92 
buf
[
loˇl_n
] = '\0'; \

93 }0)

	)

96 
	#SET_IF_DESIRED
(
x
,
y
Ëdo{ if(xË*(xË(y); }0)

	)

99 #i‚de‡
__CYGWIN__


100 
	#MIN
(
x
,
y
Ë((xË< (yË? (xË: (y))

	)

104 
	$u±ime
(*
ª°ri˘
 
u±ime_£cs
, *ª°ri˘ 
idÀ_£cs
) {

105 
up
=0, 
idÀ
=0;

106 *
ßvñoˇÀ
;

108 
	`FILE_TO_BUF
(
UPTIME_FILE
,
u±ime_fd
);

109 
ßvñoˇÀ
 = 
	`°rdup
(
	`£éoˇÀ
(
LC_NUMERIC
, 
NULL
));

110 
	`£éoˇÀ
(
LC_NUMERIC
,"C");

111 i‡(
	`ssˇnf
(
buf
, "%l‡%lf", &
up
, &
idÀ
) < 2) {

112 
	`£éoˇÀ
(
LC_NUMERIC
,
ßvñoˇÀ
);

113 
	`‰ì
(
ßvñoˇÀ
);

114 
	`Âuts
("bad d©®ö " 
UPTIME_FILE
 "\n", 
°dîr
);

117 
	`£éoˇÀ
(
LC_NUMERIC
,
ßvñoˇÀ
);

118 
	`‰ì
(
ßvñoˇÀ
);

119 
	`SET_IF_DESIRED
(
u±ime_£cs
, 
up
);

120 
	`SET_IF_DESIRED
(
idÀ_£cs
, 
idÀ
);

121  
up
;

122 
	}
}

124 
	$gëbtime
() {

125 
btime
 = 0;

126 
boﬁ
 
found_btime
 = 
Ál£
;

127 
FILE
 *
f
;

129 i‡(
btime
)

130  
btime
;

134 i‡(!(
f
 = 
	`f›í
(
STAT_FILE
, "r"))) {

135 
	`Âuts
(
BAD_OPEN_MESSAGE
, 
°dîr
);

136 
	`fÊush
(
NULL
);

137 
	`_exô
(102);

140 (
	`fgës
(
buf
,  buf, 
f
))) {

141 i‡(
	`ssˇnf
(
buf
, "btimê%lu", &
btime
) == 1) {

142 
found_btime
 = 
åue
;

146 
	`f˛o£
(
f
);

148 i‡(!
found_btime
) {

149 
	`Âuts
("missög btimêö " 
STAT_FILE
 "\n", 
°dîr
);

150 
	`exô
(1);

153  
btime
;

154 
	}
}

187 
	gHîtz
;

189 
	$ﬁd_Hîtz_hack
(){

190 
u£r_j
, 
ni˚_j
, 
sys_j
, 
Ÿhî_j
, 
waô_j
, 
húq_j
, 
súq_j
, 
°ﬁ_j
;

191 
up_1
, 
up_2
, 
£c⁄ds
;

192 
jiffõs
;

193 
h
;

194 *
ßvñoˇÀ
;

195 
hz
;

197 #ifde‡
_SC_CLK_TCK


198 if((
hz
 = 
	`sysc⁄f
(
_SC_CLK_TCK
)) > 0){

199 
Hîtz
 = 
hz
;

204 
waô_j
 = 
húq_j
 = 
súq_j
 = 
°ﬁ_j
 = 0;

205 
ßvñoˇÀ
 = 
	`°rdup
(
	`£éoˇÀ
(
LC_NUMERIC
, 
NULL
));

206 
	`£éoˇÀ
(
LC_NUMERIC
, "C");

208 
	`FILE_TO_BUF
(
UPTIME_FILE
,
u±ime_fd
); 
	`ssˇnf
(
buf
, "%lf", &
up_1
);

210 
	`FILE_TO_BUF
(
STAT_FILE
,
°©_fd
);

211 
	`ssˇnf
(
buf
, "˝u %Œu %Œu %Œu %Œu %Œu %Œu %Œu %Œu", &
u£r_j
, &
ni˚_j
, &
sys_j
, &
Ÿhî_j
, &
waô_j
, &
húq_j
, &
súq_j
, &
°ﬁ_j
);

212 
	`FILE_TO_BUF
(
UPTIME_FILE
,
u±ime_fd
); 
	`ssˇnf
(
buf
, "%lf", &
up_2
);

214 } ()–(
up_2
-
up_1
)*1000.0/up_1 ));

215 
	`£éoˇÀ
(
LC_NUMERIC
, 
ßvñoˇÀ
);

216 
	`‰ì
(
ßvñoˇÀ
);

217 
jiffõs
 = 
u£r_j
 + 
ni˚_j
 + 
sys_j
 + 
Ÿhî_j
 + 
waô_j
 + 
húq_j
 + 
súq_j
 + 
°ﬁ_j
 ;

218 
£c⁄ds
 = (
up_1
 + 
up_2
) / 2;

219 
h
 = ()–()
jiffõs
/
£c⁄ds
/
smp_num_˝us
 );

221 
h
){

222 9 ... 11 : 
Hîtz
 = 10; ;

223 18 ... 22 : 
Hîtz
 = 20; ;

224 30 ... 34 : 
Hîtz
 = 32; ;

225 48 ... 52 : 
Hîtz
 = 50; ;

226 58 ... 61 : 
Hîtz
 = 60; ;

227 62 ... 65 : 
Hîtz
 = 64; ;

228 95 ... 105 : 
Hîtz
 = 100; ;

229 124 ... 132 : 
Hîtz
 = 128; ;

230 195 ... 204 : 
Hîtz
 = 200; ;

231 247 ... 252 : 
Hîtz
 = 250; ;

232 253 ... 260 : 
Hîtz
 = 256; ;

233 393 ... 408 : 
Hîtz
 = 400; ;

234 410 ... 600 : 
Hîtz
 = 500; ;

235 790 ... 808 : 
Hîtz
 = 800; ;

236 990 ... 1010 : 
Hîtz
 = 1000; ;

237 1015 ... 1035 : 
Hîtz
 = 1024; ;

238 1180 ... 1220 : 
Hîtz
 = 1200; ;

240 #ifde‡
HZ


241 
Hîtz
 = ()
HZ
;

244 
Hîtz
 = (()==(Ë|| 
	`ht⁄s
(999)==999) ? 100UL : 1024UL;

246 
	`Ârötf
(
°dîr
, "Unknow¿HZ vÆue! (%dËAssumê%Ld.\n", 
h
, 
Hîtz
);

248 
	}
}

251 #i‚de‡
AT_SECURE


252 
	#AT_SECURE
 23

254 

	)

255 #i‚de‡
AT_CLKTCK


256 
	#AT_CLKTCK
 17

258 

	)

259 
	#NOTE_NOT_FOUND
 42

	)

261 ** 
ívú⁄
;

263 
	$föd_ñf_nŸe
(
ty≥
)

265 #ifde‡
__CYGWIN__


266  
NOTE_NOT_FOUND
;

268 
	`ElfW
(
auxv_t
Ë
auxv_°ru˘
;

269 
	`ElfW
(
auxv_t
Ë*
auxv_ãmp
;

270 
FILE
 *
fd
;

271 
i
;

272 
	`ElfW
(
auxv_t
Ë*
auxv
 = 
NULL
;

273 *
ï
 = (*)
ívú⁄
;

274 
ªt_vÆ
 = 
NOTE_NOT_FOUND
;

277 if(!
auxv
) {

279 
fd
 = 
	`f›í
("/proc/self/auxv", "rb");

281 if(!
fd
) {

286 *
ï
++);

287 *
ï
){

288 if(
ï
[0]==
ty≥
) Ép[1];

289 
ï
+=2;

291  
NOTE_NOT_FOUND
;

294 
auxv
 = (
	`ElfW
(
auxv_t
Ë*Ë
	`mÆloc
(
	`gë∑gesize
());

295 i‡(!
auxv
) {

296 
	`≥º‹
("malloc");

297 
	`exô
(
EXIT_FAILURE
);

300 
i
 = 0;

302 
	`‰ód
(&
auxv_°ru˘
, (
	`ElfW
(
auxv_t
)), 1, 
fd
);

303 
auxv
[
i
] = 
auxv_°ru˘
;

304 
i
++;

305 } 
auxv_°ru˘
.
a_ty≥
 !
AT_NULL
);

307 
	`f˛o£
(
fd
);

311 
auxv_ãmp
 = 
auxv
;

312 
i
 = 0;

314 if(
auxv_ãmp
[
i
].
a_ty≥
 =
ty≥
) {

315 
ªt_vÆ
 = ()
auxv_ãmp
[
i
].
a_un
.
a_vÆ
;

318 
i
++;

319 } 
auxv_ãmp
[
i
].
a_ty≥
 !
AT_NULL
);

321 i‡(
auxv
){

322 
auxv_ãmp
 = 
NULL
;

323 
	`‰ì
(
auxv
);

324 
auxv
 = 
NULL
;

326  
ªt_vÆ
;

328 
	}
}

330 
	ghave_¥ivs
;

332 
	$check_f‹_¥ivs
(){

333 
rc
 = 
	`föd_ñf_nŸe
(
AT_SECURE
);

334 if(
rc
==
NOTE_NOT_FOUND
){

337 
rc
 = 
	`gëeuid
(Ë!
	`gëuid
(Ë|| 
	`gëegid
(Ë!
	`gëgid
();

339  !!
rc
;

340 
	}
}

342 
	$öô_lib¥oc
(Ë
	`__©åibuã__
((
c⁄°ru˘‹
));

343 
	$öô_lib¥oc
(){

344 
have_¥ivs
 = 
	`check_f‹_¥ivs
();

345 
löux_vîsi⁄_code
 = 
	`¥o˝s_löux_vîsi⁄
();

347 
	`˝uöfo
();

348 
∑ge_byãs
 = 
	`sysc⁄f
(
_SC_PAGESIZE
);

350 #ifde‡
__löux__


351 if(
löux_vîsi⁄_code
 > 
	`LINUX_VERSION
(2, 4, 0)){

352 
Hîtz
 = 
	`föd_ñf_nŸe
(
AT_CLKTCK
);

353 if(
Hîtz
!=
NOTE_NOT_FOUND
) ;

357 #i‡
	`deföed
(
__FªeBSD_kî√l__
Ë|| deföed(
__FªeBSD__
)

362 
Hîtz
 = 100;

365 #ifde‡
__CYGWIN__


367 
Hîtz
 = ()
HZ
;

370 
	`ﬁd_Hîtz_hack
();

371 
	}
}

380 #i‚de‡
NAN


381 
	#NAN
 (-0.0)

	)

383 
	#JT
 

	)

384 
	$eight_˝u_numbîs
(*
ª°ri˘
 
uªt
, *ª°ri˘ 
ƒë
, *ª°ri˘ 
§ë
, *ª°ri˘ 
úë
, *ª°ri˘ 
wªt
, *ª°ri˘ 
xªt
, *ª°ri˘ 
yªt
, *ª°ri˘ 
zªt
){

385 
tmp_u
, 
tmp_n
, 
tmp_s
, 
tmp_i
, 
tmp_w
, 
tmp_x
, 
tmp_y
, 
tmp_z
;

386 
sˇÀ
;

387 
JT
 
ﬁd_u
, 
ﬁd_n
, 
ﬁd_s
, 
ﬁd_i
, 
ﬁd_w
, 
ﬁd_x
, 
ﬁd_y
, 
ﬁd_z
;

388 
JT
 
√w_u
, 
√w_n
, 
√w_s
, 
√w_i
, 
√w_w
, 
√w_x
, 
√w_y
, 
√w_z
;

389 
JT
 
ticks_∑°
;

391 
tmp_w
 = 0.0;

392 
√w_w
 = 0;

393 
tmp_x
 = 0.0;

394 
√w_x
 = 0;

395 
tmp_y
 = 0.0;

396 
√w_y
 = 0;

397 
tmp_z
 = 0.0;

398 
√w_z
 = 0;

400 
	`FILE_TO_BUF
(
STAT_FILE
,
°©_fd
);

401 
	`ssˇnf
(
buf
, "˝u %Œu %Œu %Œu %Œu %Œu %Œu %Œu %Œu", &
√w_u
, &
√w_n
, &
√w_s
, &
√w_i
, &
√w_w
, &
√w_x
, &
√w_y
, &
√w_z
);

402 
ticks_∑°
 = (
√w_u
+
√w_n
+
√w_s
+
√w_i
+
√w_w
+
√w_x
+
√w_y
+
√w_z
)-(
ﬁd_u
+
ﬁd_n
+
ﬁd_s
+
ﬁd_i
+
ﬁd_w
+
ﬁd_x
+
ﬁd_y
+
ﬁd_z
);

403 if(
ticks_∑°
){

404 
sˇÀ
 = 100.0 / ()
ticks_∑°
;

405 
tmp_u
 = ( ()
√w_u
 - ()
ﬁd_u
 ) * 
sˇÀ
;

406 
tmp_n
 = ( ()
√w_n
 - ()
ﬁd_n
 ) * 
sˇÀ
;

407 
tmp_s
 = ( ()
√w_s
 - ()
ﬁd_s
 ) * 
sˇÀ
;

408 
tmp_i
 = ( ()
√w_i
 - ()
ﬁd_i
 ) * 
sˇÀ
;

409 
tmp_w
 = ( ()
√w_w
 - ()
ﬁd_w
 ) * 
sˇÀ
;

410 
tmp_x
 = ( ()
√w_x
 - ()
ﬁd_x
 ) * 
sˇÀ
;

411 
tmp_y
 = ( ()
√w_y
 - ()
ﬁd_y
 ) * 
sˇÀ
;

412 
tmp_z
 = ( ()
√w_z
 - ()
ﬁd_z
 ) * 
sˇÀ
;

414 
tmp_u
 = 
NAN
;

415 
tmp_n
 = 
NAN
;

416 
tmp_s
 = 
NAN
;

417 
tmp_i
 = 
NAN
;

418 
tmp_w
 = 
NAN
;

419 
tmp_x
 = 
NAN
;

420 
tmp_y
 = 
NAN
;

421 
tmp_z
 = 
NAN
;

423 
	`SET_IF_DESIRED
(
uªt
, 
tmp_u
);

424 
	`SET_IF_DESIRED
(
ƒë
, 
tmp_n
);

425 
	`SET_IF_DESIRED
(
§ë
, 
tmp_s
);

426 
	`SET_IF_DESIRED
(
úë
, 
tmp_i
);

427 
	`SET_IF_DESIRED
(
wªt
, 
tmp_w
);

428 
	`SET_IF_DESIRED
(
xªt
, 
tmp_x
);

429 
	`SET_IF_DESIRED
(
yªt
, 
tmp_y
);

430 
	`SET_IF_DESIRED
(
zªt
, 
tmp_z
);

431 
ﬁd_u
=
√w_u
;

432 
ﬁd_n
=
√w_n
;

433 
ﬁd_s
=
√w_s
;

434 
ﬁd_i
=
√w_i
;

435 
ﬁd_w
=
√w_w
;

436 
ﬁd_x
=
√w_x
;

437 
ﬁd_y
=
√w_y
;

438 
ﬁd_z
=
√w_z
;

439 
	}
}

440 #unde‡
JT


444 
	$lﬂdavg
(*
ª°ri˘
 
av1
, *ª°ri˘ 
av5
, *ª°ri˘ 
av15
) {

445 
avg_1
=0, 
avg_5
=0, 
avg_15
=0;

446 *
ßvñoˇÀ
;

448 
	`FILE_TO_BUF
(
LOADAVG_FILE
,
lﬂdavg_fd
);

449 
ßvñoˇÀ
 = 
	`°rdup
(
	`£éoˇÀ
(
LC_NUMERIC
, 
NULL
));

450 
	`£éoˇÀ
(
LC_NUMERIC
, "C");

451 i‡(
	`ssˇnf
(
buf
, "%l‡%l‡%lf", &
avg_1
, &
avg_5
, &
avg_15
) < 3) {

452 
	`Âuts
("bad d©®ö " 
LOADAVG_FILE
 "\n", 
°dîr
);

453 
	`‰ì
(
ßvñoˇÀ
);

454 
	`exô
(1);

456 
	`£éoˇÀ
(
LC_NUMERIC
, 
ßvñoˇÀ
);

457 
	`‰ì
(
ßvñoˇÀ
);

458 
	`SET_IF_DESIRED
(
av1
, 
avg_1
);

459 
	`SET_IF_DESIRED
(
av5
, 
avg_5
);

460 
	`SET_IF_DESIRED
(
av15
, 
avg_15
);

461 
	}
}

463 
	gbuff
[
BUFFSIZE
];

466 
	$¸ash
(c⁄° *
fûíame
) {

467 
	`≥º‹
(
fûíame
);

468 
	`exô
(
EXIT_FAILURE
);

469 
	}
}

473 
	$gëru¬îs
(*
ª°ri˘
 
ru¬ög
, *ª°ri˘ 
blocked
) {

474 
dúít
 *
ít
;

475 
DIR
 *
¥oc
;

477 *
ru¬ög
=0;

478 *
blocked
=0;

480 if((
¥oc
=
	`›ídú
("/¥oc"))==
NULL
Ë
	`¸ash
("/proc");

482 –
ít
=
	`ªaddú
(
¥oc
) )) {

483 
tbuf
[32];

484 *
˝
;

485 
fd
;

486 
c
;

488 i‡(!
	`isdigô
(
ít
->
d_«me
[0])) ;

489 
	`•rötf
(
tbuf
, "/¥oc/%s/°©", 
ít
->
d_«me
);

491 
fd
 = 
	`›í
(
tbuf
, 
O_RDONLY
, 0);

492 i‡(
fd
 == -1) ;

493 
	`mem£t
(
tbuf
, '\0', Åbuf);

494 
	`ªad
(
fd
, 
tbuf
, Åbuf - 1);

495 
	`˛o£
(
fd
);

497 
˝
 = 
	`°ºchr
(
tbuf
, ')');

498 if(!
˝
) ;

499 
c
 = 
˝
[2];

501 i‡(
c
=='R') {

502 (*
ru¬ög
)++;

505 i‡(
c
=='D') {

506 (*
blocked
)++;

510 
	`˛o£dú
(
¥oc
);

511 
	}
}

515 
	$gë°©
(
jiff
 *
ª°ri˘
 
cu£
, jif‡*ª°ri˘ 
ci˚
, jif‡*ª°ri˘ 
csys
, jif‡*ª°ri˘ 
cide
, jif‡*ª°ri˘ 
ciow
, jif‡*ª°ri˘ 
cxxx
, jif‡*ª°ri˘ 
cyyy
, jif‡*ª°ri˘ 
czzz
,

516 *
ª°ri˘
 
pö
, *ª°ri˘ 
pout
, *ª°ri˘ 
s_ö
, *ª°ri˘ 
sout
,

517 *
ª°ri˘
 
öå
, *ª°ri˘ 
˘xt
,

518 *
ª°ri˘
 
ru¬ög
, *ª°ri˘ 
blocked
,

519 *
ª°ri˘
 
btime
, *ª°ri˘ 
¥o˚s£s
) {

520 
fd
;

521 
Œbuf
 = 0;

522 
√ed_vm°©_fûe
 = 0;

523 
√ed_¥oc_sˇn
 = 0;

524 c⁄° * 
b
;

525 
buff
[
BUFFSIZE
-1] = 0;

527 if(
fd
){

528 
	`l£ek
(
fd
, 0L, 
SEEK_SET
);

530 
fd
 = 
	`›í
("/¥oc/°©", 
O_RDONLY
, 0);

531 if(
fd
 =-1Ë
	`¸ash
("/proc/stat");

533 
	`ªad
(
fd
,
buff
,
BUFFSIZE
-1);

534 *
öå
 = 0;

535 *
ciow
 = 0;

536 *
cxxx
 = 0;

537 *
cyyy
 = 0;

538 *
czzz
 = 0;

540 
b
 = 
	`°r°r
(
buff
, "cpu ");

541 if(
b
Ë
	`ssˇnf
(b, "˝u %Œu %Œu %Œu %Œu %Œu %Œu %Œu %Œu", 
cu£
, 
ci˚
, 
csys
, 
cide
, 
ciow
, 
cxxx
, 
cyyy
, 
czzz
);

543 
b
 = 
	`°r°r
(
buff
, "page ");

544 if(
b
Ë
	`ssˇnf
(b, "∑gê%lu %lu", 
pö
, 
pout
);

545 
√ed_vm°©_fûe
 = 1;

547 
b
 = 
	`°r°r
(
buff
, "swap ");

548 if(
b
Ë
	`ssˇnf
(b, "sw≠ %lu %lu", 
s_ö
, 
sout
);

549 
√ed_vm°©_fûe
 = 1;

551 
b
 = 
	`°r°r
(
buff
, "intr ");

552 if(
b
Ë
	`ssˇnf
(b, "öå %Œu", &
Œbuf
);

553 *
öå
 = 
Œbuf
;

555 
b
 = 
	`°r°r
(
buff
, "ctxt ");

556 if(
b
Ë
	`ssˇnf
(b, "˘xà%Œu", &
Œbuf
);

557 *
˘xt
 = 
Œbuf
;

559 
b
 = 
	`°r°r
(
buff
, "btime ");

560 if(
b
Ë
	`ssˇnf
(b, "btimê%u", 
btime
);

562 
b
 = 
	`°r°r
(
buff
, "processes ");

563 if(
b
Ë
	`ssˇnf
(b, "¥o˚s£†%u", 
¥o˚s£s
);

565 
b
 = 
	`°r°r
(
buff
, "procs_running ");

566 if(
b
Ë
	`ssˇnf
(b, "¥ocs_ru¬ög %u", 
ru¬ög
);

567 
√ed_¥oc_sˇn
 = 1;

569 
b
 = 
	`°r°r
(
buff
, "procs_blocked ");

570 if(
b
Ë
	`ssˇnf
(b, "¥ocs_blocked %u", 
blocked
);

571 
√ed_¥oc_sˇn
 = 1;

573 if(
√ed_¥oc_sˇn
){

574 
	`gëru¬îs
(
ru¬ög
, 
blocked
);

577 if(*
ru¬ög
)

578 (*
ru¬ög
)--;

580 if(
√ed_vm°©_fûe
){

581 
	`vmöfo
();

582 *
pö
 = 
vm_pgpgö
;

583 *
pout
 = 
vm_pgpgout
;

584 *
s_ö
 = 
vm_pswpö
;

585 *
sout
 = 
vm_pswpout
;

587 
	}
}

601 
	smem_èbÀ_°ru˘
 {

602 c⁄° *
	m«me
;

603 *
	m¶Ÿ
;

604 } 
	tmem_èbÀ_°ru˘
;

606 
	$com∑ª_mem_èbÀ_°ru˘s
(c⁄° *
a
, c⁄° *
b
){

607  
	`°rcmp
(((c⁄° 
mem_èbÀ_°ru˘
*)
a
)->
«me
,((c⁄° mem_èbÀ_°ru˘*)
b
)->name);

608 
	}
}

643 
	gkb_maö_sh¨ed
;

645 
	gkb_∑ge_ˇche
;

646 
	gkb_maö_buf„rs
;

647 
	gkb_maö_‰ì
;

648 
	gkb_maö_tŸÆ
;

649 
	gkb_sw≠_‰ì
;

650 
	gkb_sw≠_tŸÆ
;

652 
	gkb_high_‰ì
;

653 
	gkb_high_tŸÆ
;

654 
	gkb_low_‰ì
;

655 
	gkb_low_tŸÆ
;

656 
	gkb_maö_avaûabÀ
;

658 
	gkb_a˘ive
;

659 
	gkb_öa˘_œundry
;

660 
	gkb_öa˘_dúty
;

661 
	gkb_öa˘_˛ón
;

662 
	gkb_öa˘_èrgë
;

663 
	gkb_sw≠_ˇched
;

665 
	gkb_maö_ˇched
;

666 
	gkb_sw≠_u£d
;

667 
	gkb_maö_u£d
;

669 
	gkb_wrôeback
;

670 
	gkb_¶ab
;

671 
	gƒ_ªvî£m≠s
;

672 
	gkb_commôãd_as
;

673 
	gkb_dúty
;

674 
	gkb_öa˘ive
;

675 
	gkb_m≠≥d
;

676 
	gkb_∑gëabÀs
;

678 
	gkb_vmÆloc_chunk
;

679 
	gkb_vmÆloc_tŸÆ
;

680 
	gkb_vmÆloc_u£d
;

682 
	gkb_™⁄_∑ges
;

683 
	gkb_boun˚
;

684 
	gkb_commô_limô
;

685 
	gkb_nfs_un°abÀ
;

687 
	gkb_mö_‰ì
;

689 
	gkb_¶ab_ª˛aimabÀ
;

690 
	gkb_¶ab_uƒe˛aimabÀ
;

692 
	gkb_a˘ive_fûe
;

693 
	gkb_öa˘ive_fûe
;

696 
	$memöfo
(){

697 
«mebuf
[32];

698 
löux_vîsi⁄_code
 = 
	`¥o˝s_löux_vîsi⁄
();

699 
mem_èbÀ_°ru˘
 
födme
 = { 
«mebuf
, 
NULL
};

700 
mem_èbÀ_°ru˘
 *
found
;

701 *
hód
;

702 *
èû
;

703 c⁄° 
mem_èbÀ_°ru˘
 
mem_èbÀ
[] = {

704 {"A˘ive", &
kb_a˘ive
},

705 {"A˘ive(fûe)", &
kb_a˘ive_fûe
},

706 {"An⁄Pages", &
kb_™⁄_∑ges
},

707 {"Boun˚", &
kb_boun˚
},

708 {"Buf„rs", &
kb_maö_buf„rs
},

709 {"Cached", &
kb_∑ge_ˇche
},

710 {"CommôLimô", &
kb_commô_limô
},

711 {"Commôãd_AS", &
kb_commôãd_as
},

712 {"Dúty", &
kb_dúty
},

713 {"HighFªe", &
kb_high_‰ì
},

714 {"HighTŸÆ", &
kb_high_tŸÆ
},

715 {"I«˘_˛ón", &
kb_öa˘_˛ón
},

716 {"I«˘_dúty", &
kb_öa˘_dúty
},

717 {"I«˘_œundry",&
kb_öa˘_œundry
},

718 {"I«˘_èrgë", &
kb_öa˘_èrgë
},

719 {"I«˘ive", &
kb_öa˘ive
},

720 {"I«˘ive(fûe)",&
kb_öa˘ive_fûe
},

721 {"LowFªe", &
kb_low_‰ì
},

722 {"LowTŸÆ", &
kb_low_tŸÆ
},

723 {"M≠≥d", &
kb_m≠≥d
},

724 {"MemAvaûabÀ", &
kb_maö_avaûabÀ
},

725 {"MemFªe", &
kb_maö_‰ì
},

726 {"MemTŸÆ", &
kb_maö_tŸÆ
},

727 {"NFS_Un°abÀ", &
kb_nfs_un°abÀ
},

728 {"PageTabÀs", &
kb_∑gëabÀs
},

729 {"Revî£M≠s", &
ƒ_ªvî£m≠s
},

730 {"SRe˛aimabÀ", &
kb_¶ab_ª˛aimabÀ
},

731 {"SUƒe˛aim", &
kb_¶ab_uƒe˛aimabÀ
},

732 {"Shmem", &
kb_maö_sh¨ed
},

733 {"Sœb", &
kb_¶ab
},

734 {"Sw≠Cached", &
kb_sw≠_ˇched
},

735 {"Sw≠Fªe", &
kb_sw≠_‰ì
},

736 {"Sw≠TŸÆ", &
kb_sw≠_tŸÆ
},

737 {"VmÆlocChunk", &
kb_vmÆloc_chunk
},

738 {"VmÆlocTŸÆ", &
kb_vmÆloc_tŸÆ
},

739 {"VmÆlocU£d", &
kb_vmÆloc_u£d
},

740 {"Wrôeback", &
kb_wrôeback
},

742 c⁄° 
mem_èbÀ_cou¡
 = (
mem_èbÀ
)/(
mem_èbÀ_°ru˘
);

743 
w©îm¨k_low
;

744 sig√d 
mem_avaûabÀ
, 
mem_u£d
;

746 
	`FILE_TO_BUF
(
MEMINFO_FILE
,
memöfo_fd
);

748 
kb_öa˘ive
 = ~0UL;

749 
kb_low_tŸÆ
 = 
kb_maö_avaûabÀ
 = 0;

751 
hód
 = 
buf
;

753 
èû
 = 
	`°rchr
(
hód
, ':');

754 if(!
èû
) ;

755 *
èû
 = '\0';

756 if(
	`°æí
(
hód
Ë>(
«mebuf
)){

757 
hód
 = 
èû
+1;

758 
√xéöe
;

760 
	`°r˝y
(
«mebuf
,
hód
);

761 
found
 = 
	`b£¨ch
(&
födme
, 
mem_èbÀ
, 
mem_èbÀ_cou¡
,

762 (
mem_èbÀ_°ru˘
), 
com∑ª_mem_èbÀ_°ru˘s


764 
hód
 = 
èû
+1;

765 if(!
found
Ë
√xéöe
;

766 *(
found
->
¶Ÿ
Ë()
	`°πouŒ
(
hód
,&
èû
,10);

767 
√xéöe
:

768 
èû
 = 
	`°rchr
(
hód
, '\n');

769 if(!
èû
) ;

770 
hód
 = 
èû
+1;

772 if(!
kb_low_tŸÆ
){

773 
kb_low_tŸÆ
 = 
kb_maö_tŸÆ
;

774 
kb_low_‰ì
 = 
kb_maö_‰ì
;

776 if(
kb_öa˘ive
==~0UL){

777 
kb_öa˘ive
 = 
kb_öa˘_dúty
 + 
kb_öa˘_˛ón
 + 
kb_öa˘_œundry
;

779 
kb_maö_ˇched
 = 
kb_∑ge_ˇche
 + 
kb_¶ab_ª˛aimabÀ
;

780 
kb_sw≠_u£d
 = 
kb_sw≠_tŸÆ
 - 
kb_sw≠_‰ì
;

785 i‡(
kb_maö_avaûabÀ
 > 
kb_maö_tŸÆ
)

786 
kb_maö_avaûabÀ
 = 
kb_maö_‰ì
;

787 
mem_u£d
 = 
kb_maö_tŸÆ
 - 
kb_maö_‰ì
 - 
kb_maö_ˇched
 - 
kb_maö_buf„rs
;

788 i‡(
mem_u£d
 < 0)

789 
mem_u£d
 = 
kb_maö_tŸÆ
 - 
kb_maö_‰ì
;

790 
kb_maö_u£d
 = ()
mem_u£d
;

793 i‡(!
kb_maö_avaûabÀ
) {

794 #ifde‡
__löux__


795 i‡(
löux_vîsi⁄_code
 < 
	`LINUX_VERSION
(2, 6, 27))

796 
kb_maö_avaûabÀ
 = 
kb_maö_‰ì
;

798 
	`FILE_TO_BUF
(
VM_MIN_FREE_FILE
, 
vm_mö_‰ì_fd
);

799 
kb_mö_‰ì
 = (Ë
	`°πouŒ
(
buf
,&
èû
,10);

801 
w©îm¨k_low
 = 
kb_mö_‰ì
 * 5 / 4;

803 
mem_avaûabÀ
 = (sig√d )
kb_maö_‰ì
 - 
w©îm¨k_low


804 + 
kb_öa˘ive_fûe
 + 
kb_a˘ive_fûe
 - 
	`MIN
((kb_öa˘ive_fûê+ kb_a˘ive_fûeË/ 2, 
w©îm¨k_low
)

805 + 
kb_¶ab_ª˛aimabÀ
 - 
	`MIN
(kb_¶ab_ª˛aimabÀ / 2, 
w©îm¨k_low
);

807 i‡(
mem_avaûabÀ
 < 0) mem_available = 0;

808 
kb_maö_avaûabÀ
 = ()
mem_avaûabÀ
;

811 
kb_maö_avaûabÀ
 = 
kb_maö_‰ì
;

814 
	}
}

820 
	svm_èbÀ_°ru˘
 {

821 c⁄° *
	m«me
;

822 *
	m¶Ÿ
;

823 } 
	tvm_èbÀ_°ru˘
;

825 
	$com∑ª_vm_èbÀ_°ru˘s
(c⁄° *
a
, c⁄° *
b
){

826  
	`°rcmp
(((c⁄° 
vm_èbÀ_°ru˘
*)
a
)->
«me
,((c⁄° vm_èbÀ_°ru˘*)
b
)->name);

827 
	}
}

830 
	gvm_ƒ_dúty
;

831 
	gvm_ƒ_wrôeback
;

832 
	gvm_ƒ_∑geˇche
;

833 
	gvm_ƒ_∑ge_èbÀ_∑ges
;

834 
	gvm_ƒ_ªvî£_m≠s
;

835 
	gvm_ƒ_m≠≥d
;

836 
	gvm_ƒ_¶ab
;

837 
	gvm_ƒ_¶ab_ª˛aimabÀ
;

838 
	gvm_ƒ_¶ab_uƒe˛aimabÀ
;

839 
	gvm_ƒ_a˘ive_fûe
;

840 
	gvm_ƒ_öa˘ive_fûe
;

841 
	gvm_ƒ_‰ì_∑ges
;

842 
	gvm_pgpgö
;

843 
	gvm_pgpgout
;

844 
	gvm_pswpö
;

845 
	gvm_pswpout
;

846 
	gvm_pgÆloc
;

847 
	gvm_pg‰ì
;

848 
	gvm_pga˘iv©e
;

849 
	gvm_pgdó˘iv©e
;

850 
	gvm_pgÁu…
;

851 
	gvm_pgmajÁu…
;

852 
	gvm_pgsˇn
;

853 
	gvm_pgªfûl
;

854 
	gvm_pg°ól
;

855 
	gvm_ksw≠d_°ól
;

857 
	gvm_∑geouåun
;

858 
	gvm_Æloc°Æl
;

859 
	gvm_pgrŸ©ed
;

861 
	gvm_pgÆloc_dma
;

862 
	gvm_pgÆloc_high
;

863 
	gvm_pgÆloc_n‹mÆ
;

864 
	gvm_pgªfûl_dma
;

865 
	gvm_pgªfûl_high
;

866 
	gvm_pgªfûl_n‹mÆ
;

867 
	gvm_pgsˇn_dúe˘_dma
;

868 
	gvm_pgsˇn_dúe˘_high
;

869 
	gvm_pgsˇn_dúe˘_n‹mÆ
;

870 
	gvm_pgsˇn_ksw≠d_dma
;

871 
	gvm_pgsˇn_ksw≠d_high
;

872 
	gvm_pgsˇn_ksw≠d_n‹mÆ
;

873 
	gvm_pg°ól_dma
;

874 
	gvm_pg°ól_high
;

875 
	gvm_pg°ól_n‹mÆ
;

877 
	gvm_ksw≠d_öode°ól
;

878 
	gvm_ƒ_un°abÀ
;

879 
	gvm_pgöode°ól
;

880 
	gvm_¶abs_sˇ¬ed
;

882 
	$vmöfo
(){

883 
«mebuf
[32];

884 
vm_èbÀ_°ru˘
 
födme
 = { 
«mebuf
, 
NULL
};

885 
vm_èbÀ_°ru˘
 *
found
;

886 *
hód
;

887 *
èû
;

888 c⁄° 
vm_èbÀ_°ru˘
 
vm_èbÀ
[] = {

889 {"Æloc°Æl", &
vm_Æloc°Æl
},

890 {"ksw≠d_öode°ól", &
vm_ksw≠d_öode°ól
},

891 {"ksw≠d_°ól", &
vm_ksw≠d_°ól
},

892 {"ƒ_a˘ive_fûe", &
vm_ƒ_a˘ive_fûe
},

893 {"ƒ_dúty", &
vm_ƒ_dúty
},

894 {"ƒ_‰ì_∑ges", &
vm_ƒ_‰ì_∑ges
},

895 {"ƒ_öa˘ive_fûe", &
vm_ƒ_öa˘ive_fûe
},

896 {"ƒ_m≠≥d", &
vm_ƒ_m≠≥d
},

897 {"ƒ_∑ge_èbÀ_∑ges", &
vm_ƒ_∑ge_èbÀ_∑ges
},

898 {"ƒ_∑geˇche", &
vm_ƒ_∑geˇche
},

899 {"ƒ_ªvî£_m≠s", &
vm_ƒ_ªvî£_m≠s
},

900 {"ƒ_¶ab", &
vm_ƒ_¶ab
},

901 {"ƒ_¶ab_ª˛aimabÀ", &
vm_ƒ_¶ab_ª˛aimabÀ
},

902 {"ƒ_¶ab_uƒe˛aimabÀ",&
vm_ƒ_¶ab_uƒe˛aimabÀ
},

903 {"ƒ_un°abÀ", &
vm_ƒ_un°abÀ
},

904 {"ƒ_wrôeback", &
vm_ƒ_wrôeback
},

905 {"∑geouåun", &
vm_∑geouåun
},

906 {"pga˘iv©e", &
vm_pga˘iv©e
},

907 {"pgÆloc", &
vm_pgÆloc
},

908 {"pgÆloc_dma", &
vm_pgÆloc_dma
},

909 {"pgÆloc_high", &
vm_pgÆloc_high
},

910 {"pgÆloc_n‹mÆ", &
vm_pgÆloc_n‹mÆ
},

911 {"pgdó˘iv©e", &
vm_pgdó˘iv©e
},

912 {"pgÁu…", &
vm_pgÁu…
},

913 {"pg‰ì", &
vm_pg‰ì
},

914 {"pgöode°ól", &
vm_pgöode°ól
},

915 {"pgmajÁu…", &
vm_pgmajÁu…
},

916 {"pgpgö", &
vm_pgpgö
},

917 {"pgpgout", &
vm_pgpgout
},

918 {"pgªfûl", &
vm_pgªfûl
},

919 {"pgªfûl_dma", &
vm_pgªfûl_dma
},

920 {"pgªfûl_high", &
vm_pgªfûl_high
},

921 {"pgªfûl_n‹mÆ", &
vm_pgªfûl_n‹mÆ
},

922 {"pgrŸ©ed", &
vm_pgrŸ©ed
},

923 {"pgsˇn", &
vm_pgsˇn
},

924 {"pgsˇn_dúe˘_dma", &
vm_pgsˇn_dúe˘_dma
},

925 {"pgsˇn_dúe˘_high", &
vm_pgsˇn_dúe˘_high
},

926 {"pgsˇn_dúe˘_n‹mÆ",&
vm_pgsˇn_dúe˘_n‹mÆ
},

927 {"pgsˇn_ksw≠d_dma", &
vm_pgsˇn_ksw≠d_dma
},

928 {"pgsˇn_ksw≠d_high", &
vm_pgsˇn_ksw≠d_high
},

929 {"pgsˇn_ksw≠d_n‹mÆ",&
vm_pgsˇn_ksw≠d_n‹mÆ
},

930 {"pg°ól", &
vm_pg°ól
},

931 {"pg°ól_dma", &
vm_pg°ól_dma
},

932 {"pg°ól_high", &
vm_pg°ól_high
},

933 {"pg°ól_n‹mÆ", &
vm_pg°ól_n‹mÆ
},

934 {"pswpö", &
vm_pswpö
},

935 {"pswpout", &
vm_pswpout
},

936 {"¶abs_sˇ¬ed", &
vm_¶abs_sˇ¬ed
},

938 c⁄° 
vm_èbÀ_cou¡
 = (
vm_èbÀ
)/(
vm_èbÀ_°ru˘
);

940 #i‡
__SIZEOF_LONG__
 == 4

941 
¶ŸŒ
;

944 
vm_pgÆloc
 = 0;

945 
vm_pgªfûl
 = 0;

946 
vm_pgsˇn
 = 0;

947 
vm_pg°ól
 = 0;

949 
	`FILE_TO_BUF
(
VMINFO_FILE
,
vmöfo_fd
);

951 
hód
 = 
buf
;

953 
èû
 = 
	`°rchr
(
hód
, ' ');

954 if(!
èû
) ;

955 *
èû
 = '\0';

956 if(
	`°æí
(
hód
Ë>(
«mebuf
)){

957 
hód
 = 
èû
+1;

958 
√xéöe
;

960 
	`°r˝y
(
«mebuf
,
hód
);

961 
found
 = 
	`b£¨ch
(&
födme
, 
vm_èbÀ
, 
vm_èbÀ_cou¡
,

962 (
vm_èbÀ_°ru˘
), 
com∑ª_vm_èbÀ_°ru˘s


964 
hód
 = 
èû
+1;

965 if(!
found
Ë
√xéöe
;

966 #i‡
__SIZEOF_LONG__
 == 4

970 
¶ŸŒ
 = 
	`°πouŒ
(
hód
,&
èû
,10);

971 *(
found
->
¶Ÿ
Ë()
¶ŸŒ
;

973 *(
found
->
¶Ÿ
Ë
	`°πoul
(
hód
,&
èû
,10);

975 
√xéöe
:

980 
èû
 = 
	`°rchr
(
hód
, '\n');

981 if(!
èû
) ;

982 
hód
 = 
èû
+1;

984 if(!
vm_pgÆloc
)

985 
vm_pgÆloc
 = 
vm_pgÆloc_dma
 + 
vm_pgÆloc_high
 + 
vm_pgÆloc_n‹mÆ
;

986 if(!
vm_pgªfûl
)

987 
vm_pgªfûl
 = 
vm_pgªfûl_dma
 + 
vm_pgªfûl_high
 + 
vm_pgªfûl_n‹mÆ
;

988 if(!
vm_pgsˇn
)

989 
vm_pgsˇn
 = 
vm_pgsˇn_dúe˘_dma
 + 
vm_pgsˇn_dúe˘_high
 + 
vm_pgsˇn_dúe˘_n‹mÆ


990 + 
vm_pgsˇn_ksw≠d_dma
 + 
vm_pgsˇn_ksw≠d_high
 + 
vm_pgsˇn_ksw≠d_n‹mÆ
;

991 if(!
vm_pg°ól
)

992 
vm_pg°ól
 = 
vm_pg°ól_dma
 + 
vm_pg°ól_high
 + 
vm_pg°ól_n‹mÆ
;

993 
	}
}

999 
	$gë∑πôi⁄s_num
(
disk_°©
 *
disks
, 
ndisks
){

1000 
i
=0;

1001 
∑πôi⁄s
=0;

1003 
i
=0;i<
ndisks
;i++){

1004 
∑πôi⁄s
+=
disks
[
i
].partitions;

1006  
∑πôi⁄s
;

1008 
	}
}

1011 
	$is_disk
(*
dev
)

1013 
sy•©h
[64];

1014 *
¶ash
;

1016 (
¶ash
 = 
	`°rchr
(
dev
, '/')))

1017 *
¶ash
 = '!';

1018 
	`¢¥ötf
(
sy•©h
, (sy•©h), "/sys/block/%s", 
dev
);

1019  !(
	`ac˚ss
(
sy•©h
, 
F_OK
));

1020 
	}
}

1024 
	$gëdisk°©
(
disk_°©
 **
disks
, 
∑πôi⁄_°©
 **
∑πôi⁄s
){

1025 
FILE
* 
fd
;

1026 
cDisk
 = 0;

1027 
cP¨tôi⁄
 = 0;

1028 
fõlds
;

1029 
dummy
;

1030 
dev«me
[35];

1032 *
disks
 = 
NULL
;

1033 *
∑πôi⁄s
 = 
NULL
;

1034 
buff
[
BUFFSIZE
-1] = 0;

1035 
fd
 = 
	`f›í
("/proc/diskstats", "rb");

1036 if(!
fd
Ë
	`¸ash
("/proc/diskstats");

1039 i‡(!
	`fgës
(
buff
,
BUFFSIZE
-1,
fd
)){

1040 
	`f˛o£
(
fd
);

1043 
fõlds
 = 
	`ssˇnf
(
buff
, " %*d %*d %34†%*u %*u %*u %*u %*u %*u %*u %*u %*u %*u %u", 
dev«me
, &
dummy
);

1044 i‡(
fõlds
 =2 && 
	`is_disk
(
dev«me
)){

1045 (*
disks
Ë
	`xªÆloc
(*disks, (
cDisk
+1)*(
disk_°©
));

1046 
	`ssˇnf
(
buff
, " %*d %*d %31s %u %u %llu %u %u %u %llu %u %u %u %u",

1049 (*
disks
)[
cDisk
].
disk_«me
,

1050 &(*
disks
)[
cDisk
].
ªads
,

1051 &(*
disks
)[
cDisk
].
mîged_ªads
,

1052 &(*
disks
)[
cDisk
].
ªads_£˘‹s
,

1053 &(*
disks
)[
cDisk
].
mûli_ªadög
,

1054 &(*
disks
)[
cDisk
].
wrôes
,

1055 &(*
disks
)[
cDisk
].
mîged_wrôes
,

1056 &(*
disks
)[
cDisk
].
wrôãn_£˘‹s
,

1057 &(*
disks
)[
cDisk
].
mûli_wrôög
,

1058 &(*
disks
)[
cDisk
].
ö¥ogªss_IO
,

1059 &(*
disks
)[
cDisk
].
mûli_•ít_IO
,

1060 &(*
disks
)[
cDisk
].
weighãd_mûli_•ít_IO


1062 (*
disks
)[
cDisk
].
∑πôi⁄s
=0;

1063 
cDisk
++;

1065 (*
∑πôi⁄s
Ë
	`xªÆloc
(*∑πôi⁄s, (
cP¨tôi⁄
+1)*(
∑πôi⁄_°©
));

1066 
	`fÊush
(
°dout
);

1067 
	`ssˇnf
(
buff
, (
fõlds
 == 2)

1072 (*
∑πôi⁄s
)[
cP¨tôi⁄
].
∑πôi⁄_«me
,

1073 &(*
∑πôi⁄s
)[
cP¨tôi⁄
].
ªads
,

1074 &(*
∑πôi⁄s
)[
cP¨tôi⁄
].
ªads_£˘‹s
,

1075 &(*
∑πôi⁄s
)[
cP¨tôi⁄
].
wrôes
,

1076 &(*
∑πôi⁄s
)[
cP¨tôi⁄
].
ªque°ed_wrôes


1079 i‡(
cDisk
 > 0) {

1080 (*
∑πôi⁄s
)[
cP¨tôi⁄
++].
∑ª¡_disk
 = 
cDisk
-1;

1081 (*
disks
)[
cDisk
-1].
∑πôi⁄s
++;

1086  
cDisk
;

1087 
	}
}

1092 
	$gë¶aböfo
 (
¶ab_ˇche
 **
¶ab
){

1093 
FILE
* 
fd
;

1094 
cSœb
 = 0;

1095 
buff
[
BUFFSIZE
-1] = 0;

1096 *
¶ab
 = 
NULL
;

1097 
fd
 = 
	`f›í
("/proc/slabinfo", "rb");

1098 if(!
fd
Ë
	`¸ash
("/proc/slabinfo");

1099 
	`fgës
(
buff
,
BUFFSIZE
-1,
fd
)){

1100 if(!
	`memcmp
("¶aböfÿ- vîsi⁄:",
buff
,19)) ;

1101 if(*
buff
 == '#') ;

1102 (*
¶ab
Ë
	`xªÆloc
(*¶ab, (
cSœb
+1)*(
¶ab_ˇche
));

1103 
	`ssˇnf
(
buff
, "%47s %u %u %u %u",

1104 (*
¶ab
)[
cSœb
].
«me
,

1105 &(*
¶ab
)[
cSœb
].
a˘ive_objs
,

1106 &(*
¶ab
)[
cSœb
].
num_objs
,

1107 &(*
¶ab
)[
cSœb
].
objsize
,

1108 &(*
¶ab
)[
cSœb
].
obj≥r¶ab


1110 
cSœb
++;

1112 
	`f˛o£
(
fd
);

1113  
cSœb
;

1114 
	}
}

1118 
	$gë_pid_digôs
(){

1119 
pidbuf
[24];

1120 *
ídp
;

1121 
rc
;

1122 
fd
;

1123 
ªt
;

1125 if(
ªt
Ë
out
;

1126 
ªt
 = 5;

1127 
fd
 = 
	`›í
("/¥oc/sys/kî√l/pid_max", 
O_RDONLY
);

1128 if(
fd
==-1Ë
out
;

1129 
rc
 = 
	`ªad
(
fd
, 
pidbuf
, Öidbuf);

1130 
	`˛o£
(
fd
);

1131 if(
rc
<3Ë
out
;

1132 
pidbuf
[
rc
] = '\0';

1133 
rc
 = 
	`°πﬁ
(
pidbuf
,&
ídp
,10);

1134 if(
rc
<42Ë
out
;

1135 if(*
ídp
 && *ídp!='\n'Ë
out
;

1136 
rc
--;

1137 
ªt
 = 0;

1138 
rc
){

1139 
rc
 /= 10;

1140 
ªt
++;

1142 
out
:

1143  
ªt
;

1144 
	}
}

1148 
	$˝uöfo
 () {

1160 
smp_num_˝us
 = 
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
);

1161 i‡(
smp_num_˝us
<1)

1162 
smp_num_˝us
=1;

1163 
	}
}

	@proc/sysinfo.h

1 #i‚de‡
PROC_SYSINFO_H


2 
	#PROC_SYSINFO_H


	)

3 
	~<sys/ty≥s.h
>

4 
	~<dúít.h
>

5 
	~"¥o˝s.h
"

7 
EXTERN_C_BEGIN


9 
Hîtz
;

10 
smp_num_˝us
;

11 
have_¥ivs
;

12 
∑ge_byãs
;

15 
	#JT
 

	)

16 
eight_˝u_numbîs
(
JT
 *
uªt
, JT *
ƒë
, JT *
§ë
, JT *
úë
, JT *
wªt
, JT *
xªt
, JT *
yªt
, JT *
zªt
);

17 #unde‡
JT


20 
u±ime
 (*
u±ime_£cs
, *
idÀ_£cs
);

21 
gëbtime
();

22 
lﬂdavg
(*
av1
, *
av5
, *
av15
);

25 
kb_maö_sh¨ed
;

27 
kb_maö_buf„rs
;

28 
kb_maö_ˇched
;

29 
kb_maö_‰ì
;

30 
kb_maö_tŸÆ
;

31 
kb_sw≠_‰ì
;

32 
kb_sw≠_tŸÆ
;

34 
kb_high_‰ì
;

35 
kb_high_tŸÆ
;

36 
kb_low_‰ì
;

37 
kb_low_tŸÆ
;

38 
kb_maö_avaûabÀ
;

40 
kb_a˘ive
;

41 
kb_öa˘_œundry
;

42 
kb_öa˘_dúty
;

43 
kb_öa˘_˛ón
;

44 
kb_öa˘_èrgë
;

45 
kb_sw≠_ˇched
;

47 
kb_sw≠_u£d
;

48 
kb_maö_u£d
;

50 
kb_wrôeback
;

51 
kb_¶ab
;

52 
ƒ_ªvî£m≠s
;

53 
kb_commôãd_as
;

54 
kb_dúty
;

55 
kb_öa˘ive
;

56 
kb_m≠≥d
;

57 
kb_∑gëabÀs
;

59 
	#BUFFSIZE
 (64*1024)

	)

60 
	tjiff
;

61 
gë°©
(
jiff
 *
__ª°ri˘
 
cu£
, jif‡*__ª°ri˘ 
ci˚
, jif‡*__ª°ri˘ 
csys
, jif‡*__ª°ri˘ 
cide
, jif‡*__ª°ri˘ 
ciow
, jif‡*__ª°ri˘ 
cxxx
, jif‡*__ª°ri˘ 
cyyy
, jif‡*__ª°ri˘ 
czzz
,

62 *
__ª°ri˘
 
pö
, *__ª°ri˘ 
pout
, *__ª°ri˘ 
s_ö
, *__ª°ri˘ 
sout
,

63 *
__ª°ri˘
 
öå
, *__ª°ri˘ 
˘xt
,

64 *
__ª°ri˘
 
ru¬ög
, *__ª°ri˘ 
blocked
,

65 *
__ª°ri˘
 
btime
, *__ª°ri˘ 
¥o˚s£s
);

67 
memöfo
();

70 
vm_ƒ_dúty
;

71 
vm_ƒ_wrôeback
;

72 
vm_ƒ_∑geˇche
;

73 
vm_ƒ_∑ge_èbÀ_∑ges
;

74 
vm_ƒ_ªvî£_m≠s
;

75 
vm_ƒ_m≠≥d
;

76 
vm_ƒ_¶ab
;

77 
vm_ƒ_¶ab_ª˛aimabÀ
;

78 
vm_ƒ_¶ab_uƒe˛aimabÀ
;

79 
vm_ƒ_a˘ive_fûe
;

80 
vm_ƒ_öa˘ive_fûe
;

81 
vm_ƒ_‰ì_∑ges
;

82 
vm_pgpgö
;

83 
vm_pgpgout
;

84 
vm_pswpö
;

85 
vm_pswpout
;

86 
vm_pgÆloc
;

87 
vm_pg‰ì
;

88 
vm_pga˘iv©e
;

89 
vm_pgdó˘iv©e
;

90 
vm_pgÁu…
;

91 
vm_pgmajÁu…
;

92 
vm_pgsˇn
;

93 
vm_pgªfûl
;

94 
vm_pg°ól
;

95 
vm_ksw≠d_°ól
;

96 
vm_∑geouåun
;

97 
vm_Æloc°Æl
;

99 
vmöfo
();

101 
	sdisk_°©
{

102 
	mªads_£˘‹s
;

103 
	mwrôãn_£˘‹s
;

104 
	mdisk_«me
 [32];

105 
	mö¥ogªss_IO
;

106 
	mmîged_ªads
;

107 
	mmîged_wrôes
;

108 
	mmûli_ªadög
;

109 
	mmûli_•ít_IO
;

110 
	mmûli_wrôög
;

111 
	m∑πôi⁄s
;

112 
	mªads
;

113 
	mweighãd_mûli_•ít_IO
;

114 
	mwrôes
;

115 }
	tdisk_°©
;

117 
	s∑πôi⁄_°©
{

118 
	m∑πôi⁄_«me
 [35];

119 
	mªads_£˘‹s
;

120 
	m∑ª¡_disk
;

121 
	mªads
;

122 
	mwrôes
;

123 
	mªque°ed_wrôes
;

124 }
	t∑πôi⁄_°©
;

126 
gë∑πôi⁄s_num
(
disk_°©
 *
disks
, 
ndisks
);

127 
gëdisk°©
 (
disk_°©
**,
∑πôi⁄_°©
**);

129 
	s¶ab_ˇche
{

130 
	m«me
[48];

131 
	ma˘ive_objs
;

132 
	mnum_objs
;

133 
	mobjsize
;

134 
	mobj≥r¶ab
;

135 }
	t¶ab_ˇche
;

137 
gë¶aböfo
 (
¶ab_ˇche
**);

139 
	$gë_pid_digôs
(Ë
FUNCTION
;

141 
	`˝uöfo
 ();

143 
EXTERN_C_END


	@proc/version.c

23 
	~<î∫o.h
>

24 
	~<°dio.h
>

25 
	~"¥o˝s-¥iv©e.h
"

26 
	~"vîsi⁄.h
"

28 
	#PROCFS_OSRELEASE
 "/¥oc/sys/kî√l/o§ñó£"

	)

44 
PROCPS_EXPORT
 
	$¥o˝s_löux_vîsi⁄
()

46 
FILE
 *
Â
;

47 
buf
[256];

48 
x
 = 0, 
y
 = 0, 
z
 = 0;

49 
vîsi⁄_°rög_dïth
;

51 i‡((
Â
 = 
	`f›í
(
PROCFS_OSRELEASE
, "r")Ë=
NULL
)

52  -
î∫o
;

53 i‡(
	`fgës
(
buf
, 256, 
Â
Ë=
NULL
) {

54 
	`f˛o£
(
Â
);

55  -
EIO
;

57 
	`f˛o£
(
Â
);

58 
vîsi⁄_°rög_dïth
 = 
	`ssˇnf
(
buf
, "%u.%u.%u", &
x
, &
y
, &
z
);

59 i‡((
vîsi⁄_°rög_dïth
 < 2) ||

60 ((
vîsi⁄_°rög_dïth
 < 3Ë&& (
x
 < 3)))

61  -
ERANGE
;

62  
	`LINUX_VERSION
(
x
,
y
,
z
);

63 
	}
}

	@proc/version.h

23 #i‚de‡
PROC_VERSION_H


24 
	#PROC_VERSION_H


	)

26 #ifde‡
__˝lu•lus


30 
¥o˝s_löux_vîsi⁄
();

33 
	#LINUX_VERSION
(
x
,
y
,
z
Ë(0x10000*(xË+ 0x100*(yË+ z)

	)

34 
	#LINUX_VERSION_MAJOR
(
x
Ë(((x)>>16Ë& 0xFF)

	)

35 
	#LINUX_VERSION_MINOR
(
x
Ë(((x)>> 8Ë& 0xFF)

	)

36 
	#LINUX_VERSION_PATCH
(
x
Ë–(xË& 0xFF)

	)

38 #ifde‡
__˝lu•lus


	@proc/wchan.c

20 
	~<°dio.h
>

21 
	~<°rög.h
>

22 
	~<f˙é.h
>

23 
	~<uni°d.h
>

24 
	~<sys/°©.h
>

26 
	~"wch™.h
"

29 c⁄° * 
	$lookup_wch™
 (
pid
) {

30 
buf
[64];

31 c⁄° *
ªt
 = 
buf
;

32 
ssize_t
 
num
;

33 
fd
;

35 
	`¢¥ötf
(
buf
,  buf, "/¥oc/%d/wch™", 
pid
);

36 
fd
 = 
	`›í
(
buf
, 
O_RDONLY
);

37 i‡(
fd
==-1)  "?";

39 
num
 = 
	`ªad
(
fd
, 
buf
,  buf - 1);

40 
	`˛o£
(
fd
);

42 i‡(
num
<1)  "?";

43 
buf
[
num
] = '\0';

45 i‡(
buf
[0]=='0' && buf[1]=='\0')  "-";

48 i‡(*
ªt
=='.')Ñet++;

49 *
ªt
=='_')Ñet++;

51  
ªt
;

52 
	}
}

	@proc/wchan.h

1 #i‚de‡
PROCPS_PROC_WCHAN_H


2 
	#PROCPS_PROC_WCHAN_H


	)

4 
	~"¥o˝s.h
"

6 
EXTERN_C_BEGIN


8 c⁄° * 
lookup_wch™
 (
pid
);

10 
	gEXTERN_C_END


	@proc/whattime.c

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

32 
	~<°rög.h
>

33 
	~<f˙é.h
>

34 
	~<uni°d.h
>

35 
	~<time.h
>

36 
	~<utmp.h
>

37 
	~<sys/io˘l.h
>

38 
	~"wh©time.h
"

39 
	~"sysöfo.h
"

41 
	gbuf
[128];

42 
	gav
[3];

44 *
	$•röt_u±ime
(
hum™_ªadabÀ
) {

45 
utmp
 *
utmp°ru˘
;

46 
upmöuãs
, 
uphours
, 
updays
, 
upwìks
, 
upyórs
, 
updeˇdes
;

47 
pos
;

48 
comma
;

49 
tm
 *
ªÆtime
;

50 
time_t
 
ªÆ£c⁄ds
;

51 
numu£r
;

52 
u±ime_£cs
, 
idÀ_£cs
;

56 i‡(!
hum™_ªadabÀ
) {

57 
	`time
(&
ªÆ£c⁄ds
);

58 
ªÆtime
 = 
	`loˇ…ime
(&
ªÆ£c⁄ds
);

59 
pos
 = 
	`•rötf
(
buf
, " %02d:%02d:%02d ",

60 
ªÆtime
->
tm_hour
,Ñó…ime->
tm_mö
,Ñó…ime->
tm_£c
);

62 
pos
 = 0;

67 
	`u±ime
(&
u±ime_£cs
, &
idÀ_£cs
);

69 i‡(
hum™_ªadabÀ
) {

70 
updeˇdes
 = (Ë
u±ime_£cs
 / (60*60*24*365*10);

71 
upyórs
 = ((Ë
u±ime_£cs
 / (60*60*24*365)) % 10;

72 
upwìks
 = ((Ë
u±ime_£cs
 / (60*60*24*7)) % 52;

73 
updays
 = ((Ë
u±ime_£cs
 / (60*60*24)) % 7;

76 
updays
 = (Ë
u±ime_£cs
 / (60*60*24);

78 
	`°rˇt
 (
buf
, "up ");

79 
pos
 += 3;

81 i‡(!
hum™_ªadabÀ
) {

82 i‡(
updays
)

83 
pos
 +
	`•rötf
(
buf
 +Öos, "%d day%s, ", 
updays
, (updays != 1) ? "s" : "");

86 
upmöuãs
 = (Ë
u±ime_£cs
 / 60;

87 
uphours
 = 
upmöuãs
 / 60;

88 
uphours
 = uphours % 24;

89 
upmöuãs
 = upminutes % 60;

91 i‡(!
hum™_ªadabÀ
) {

92 if(
uphours
)

93 
pos
 +
	`•rötf
(
buf
 +Öos, "%2d:%02d, ", 
uphours
, 
upmöuãs
);

95 
pos
 +
	`•rötf
(
buf
 +Öos, "%d mö, ", 
upmöuãs
);

99 
numu£r
 = 0;

100 
	`£tuã¡
();

101 (
utmp°ru˘
 = 
	`gëuã¡
())) {

102 i‡((
utmp°ru˘
->
ut_ty≥
 =
USER_PROCESS
) &&

103 (
utmp°ru˘
->
ut_«me
[0] != '\0'))

104 
numu£r
++;

106 
	`íduã¡
();

108 
pos
 +
	`•rötf
(
buf
 +Öos, "%2d u£r%s, ", 
numu£r
,Çumuser == 1 ? "" : "s");

110 
	`lﬂdavg
(&
av
[0], &av[1], &av[2]);

112 
pos
 +
	`•rötf
(
buf
 +Öos, "Üoadáverage: %.2f, %.2f, %.2f",

113 
av
[0],áv[1],áv[2]);

116 i‡(
hum™_ªadabÀ
) {

117 
comma
 = 0;

119 i‡(
updeˇdes
) {

120 
pos
 +
	`•rötf
(
buf
 +Öos, "%d %s", 
updeˇdes
,

121 
updeˇdes
 > 1 ? "decades" : "decade");

122 
comma
 += 1;

125 i‡(
upyórs
) {

126 
pos
 +
	`•rötf
(
buf
 +Öos, "%s%d %s", 
comma
 > 0 ? ", " : "", 
upyórs
,

127 
upyórs
 > 1 ? "years" : "year");

128 
comma
 += 1;

131 i‡(
upwìks
) {

132 
pos
 +
	`•rötf
(
buf
 +Öos, "%s%d %s", 
comma
 > 0 ? ", " : "", 
upwìks
,

133 
upwìks
 > 1 ? "weeks" : "week");

134 
comma
 += 1;

137 i‡(
updays
) {

138 
pos
 +
	`•rötf
(
buf
 +Öos, "%s%d %s", 
comma
 > 0 ? ", " : "", 
updays
,

139 
updays
 > 1 ? "days" : "day");

140 
comma
 += 1;

143 i‡(
uphours
) {

144 
pos
 +
	`•rötf
(
buf
 +Öos, "%s%d %s", 
comma
 > 0 ? ", " : "", 
uphours
,

145 
uphours
 > 1 ? "hours" : "hour");

146 
comma
 += 1;

149 i‡(
upmöuãs
) {

150 
pos
 +
	`•rötf
(
buf
 +Öos, "%s%d %s", 
comma
 > 0 ? ", " : "", 
upmöuãs
,

151 
upmöuãs
 > 1 ? "minutes" : "minute");

152 
comma
 += 1;

156  
buf
;

157 
	}
}

159 
	$¥öt_u±ime
(
hum™_ªadabÀ
) {

160 
	`¥ötf
("%s\n", 
	`•röt_u±ime
(
hum™_ªadabÀ
));

161 
	}
}

	@proc/whattime.h

1 #i‚de‡
PROC_WHATTIME_H


2 
	#PROC_WHATTIME_H


	)

4 
	~"¥o˝s.h
"

6 
EXTERN_C_BEGIN


8 
¥öt_u±ime
(
hum™_ªadabÀ
);

9 *
•röt_u±ime
(
hum™_ªadabÀ
);

11 
	gEXTERN_C_END


	@ps/common.h

12 #i‚de‡
PROCPS_PS_H


13 
	#PROCPS_PS_H


	)

15 
	~"../ö˛ude/∆s.h
"

16 
	~"../¥oc/¥o˝s.h
"

17 
	~"../¥oc/esˇ≥.h
"

18 
	~"../¥oc/ªad¥oc.h
"

21 
	#åa˚
(...Ë
	`¥ötf
(## 
__VA_ARGS__
)

	)

23 
	#åa˚
(...)

	)

30 
	#SEL_RUID
 1

	)

31 
	#SEL_EUID
 2

	)

32 
	#SEL_SUID
 3

	)

33 
	#SEL_FUID
 4

	)

34 
	#SEL_RGID
 5

	)

35 
	#SEL_EGID
 6

	)

36 
	#SEL_SGID
 7

	)

37 
	#SEL_FGID
 8

	)

38 
	#SEL_PGRP
 9

	)

39 
	#SEL_PID
 10

	)

40 
	#SEL_TTY
 11

	)

41 
	#SEL_SESS
 12

	)

42 
	#SEL_COMM
 13

	)

43 
	#SEL_PPID
 14

	)

44 
	#SEL_PID_QUICK
 15

	)

47 
	#U98
 0

	)

48 
	#XXX
 1

	)

49 
	#DEC
 2

	)

50 
	#AIX
 3

	)

51 
	#SCO
 4

	)

52 
	#LNX
 5

	)

53 
	#BSD
 6

	)

54 
	#SUN
 7

	)

55 
	#HPU
 8

	)

56 
	#SGI
 9

	)

57 
	#SOE
 10

	)

58 
	#TST
 11

	)

74 
	#OUTBUF_SIZE
 (2 * 64*1024 * 
ESC_STRETCH
)

	)

80 
	#CF_JUST_MASK
 0x0f

	)

82 
	#CF_USER
 1

83 
	#CF_LEFT
 2

	)

84 
	#CF_RIGHT
 3

	)

85 
	#CF_UNLIMITED
 4

	)

86 
	#CF_WCHAN
 5

87 
	#CF_SIGNAL
 6

89 
	#CF_PIDMAX
 0x00000010

91 
	#CF_PRINT_THREAD_ONLY
 0x10000000

	)

92 
	#CF_PRINT_PROCESS_ONLY
 0x20000000

	)

93 
	#CF_PRINT_EVERY_TIME
 0x40000000

	)

94 
	#CF_PRINT_AS_NEEDED
 0x80000000

95 
	#CF_PRINT_MASK
 0xf0000000

	)

97 
	#√eds_f‹_£À˘
 (
PROC_FILLSTAT
 | 
PROC_FILLSTATUS
)

	)

100 
	#TF_B_H
 0x0001

	)

101 
	#TF_B_m
 0x0002

	)

102 
	#TF_U_m
 0x0004

	)

103 
	#TF_U_T
 0x0008

	)

104 
	#TF_U_L
 0x0010

	)

105 
	#TF_show_¥oc
 0x0100

106 
	#TF_show_èsk
 0x0200

107 
	#TF_show_bŸh
 0x0400

108 
	#TF_loo£_èsks
 0x0800

109 
	#TF_no_s‹t
 0x1000

110 
	#TF_no_f‹e°
 0x2000

111 
	#TF_mu°_u£
 0x4000

112 

	)

114 
	#PER_BROKEN_o
 0x0001

	)

115 
	#PER_BSD_h
 0x0002

	)

116 
	#PER_BSD_m
 0x0004

	)

117 
	#PER_IRIX_l
 0x0008

	)

118 
	#PER_FORCE_BSD
 0x0010

	)

119 
	#PER_GOOD_o
 0x0020

	)

120 
	#PER_OLD_m
 0x0040

	)

121 
	#PER_NO_DEFAULT_g
 0x0080

	)

122 
	#PER_ZAP_ADDR
 0x0100

	)

123 
	#PER_SANE_USER
 0x0200

	)

124 
	#PER_HPUX_x
 0x0400

	)

125 
	#PER_SVR4_x
 0x0800

	)

126 
	#PER_BSD_COLS
 0x1000

	)

127 
	#PER_UNIX_COLS
 0x2000

	)

130 
	#SS_B_x
 0x01

	)

131 
	#SS_B_g
 0x02

	)

132 
	#SS_U_d
 0x04

	)

133 
	#SS_U_a
 0x08

	)

134 
	#SS_B_a
 0x10

	)

137 
	#FF_Uf
 0x0001

	)

138 
	#FF_Uj
 0x0002

	)

139 
	#FF_Ul
 0x0004

	)

140 
	#FF_Bj
 0x0008

	)

141 
	#FF_Bl
 0x0010

	)

142 
	#FF_Bs
 0x0020

	)

143 
	#FF_Bu
 0x0040

	)

144 
	#FF_Bv
 0x0080

	)

145 
	#FF_LX
 0x0100

	)

146 
	#FF_Lm
 0x0200

	)

147 
	#FF_Fc
 0x0400

	)

150 
	#FM_c
 0x0001

	)

151 
	#FM_j
 0x0002

	)

152 
	#FM_y
 0x0004

	)

154 
	#FM_P
 0x0010

	)

155 
	#FM_M
 0x0020

	)

157 
	#FM_F
 0x0080

	)

161 
	#SF_U_O
 1

	)

162 
	#SF_U_o
 2

	)

163 
	#SF_B_O
 3

	)

164 
	#SF_B_o
 4

	)

165 
	#SF_B_m
 5

	)

166 
	#SF_G_s‹t
 6

	)

167 
	#SF_G_f‹m©
 7

	)

170 
	#HEAD_SINGLE
 0

	)

171 
	#HEAD_NONE
 1

	)

172 
	#HEAD_MULTI
 2

	)

186 
	u£l_uni⁄
 {

187 
pid_t
 
	mpid
;

188 
pid_t
 
	mµid
;

189 
uid_t
 
	muid
;

190 
gid_t
 
	mgid
;

191 
dev_t
 
	mây
;

192 
	mcmd
[16];

193 } 
	t£l_uni⁄
;

195 
	s£À˘i⁄_node
 {

196 
£À˘i⁄_node
 *
	m√xt
;

197 
£l_uni⁄
 *
	mu
;

198 
	mn
;

199 
	mty≥code
;

200 } 
	t£À˘i⁄_node
;

202 
	ss‹t_node
 {

203 
s‹t_node
 *
	m√xt
;

204 (*
	m§
)(c⁄° 
¥oc_t
* 
	mP
, c⁄°Öroc_t* 
	mQ
);

205 
	mªvî£
;

206 
	mty≥code
;

207 
	m√ed
;

208 } 
	ts‹t_node
;

210 
	sf‹m©_node
 {

211 
f‹m©_node
 *
	m√xt
;

212 *
	m«me
;

213 (*
	m¥
)(*
ª°ri˘
 c⁄° 
	moutbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
	mµ
);

215 
	mwidth
;

216 
	m√ed
;

217 
	mvíd‹
;

218 
	mÊags
;

219 
	mty≥code
;

220 } 
	tf‹m©_node
;

222 
	sf‹m©_°ru˘
 {

223 c⁄° *
	m•ec
;

224 c⁄° *
	mhód
;

225 (* c⁄° 
	m¥
)(*
ª°ri˘
 c⁄° 
	moutbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
	mµ
);

226 (* c⁄° 
	m§
)(c⁄° 
¥oc_t
* 
	mP
, c⁄°Öroc_t* 
	mQ
);

227 c⁄° 
	mwidth
;

228 c⁄° 
	m√ed
;

229 c⁄° 
	mvíd‹
;

230 c⁄° 
	mÊags
;

231 } 
	tf‹m©_°ru˘
;

234 
	sma¸o_°ru˘
 {

235 c⁄° *
	m•ec
;

236 c⁄° *
	mhód
;

237 } 
	tma¸o_°ru˘
;

241 
	saix_°ru˘
 {

242 c⁄° 
	mdesc
;

243 c⁄° *
	m•ec
;

244 c⁄° *
	mhód
;

245 } 
	taix_°ru˘
;

247 
	ssh‹ts‹t_°ru˘
 {

248 c⁄° 
	mdesc
;

249 c⁄° *
	m•ec
;

250 } 
	tsh‹ts‹t_°ru˘
;

253 
	ssf_node
 {

254 
sf_node
 *
	m√xt
;

255 
f‹m©_node
 *
	mf_cooked
;

256 
s‹t_node
 *
	ms_cooked
;

257 *
	msf
;

258 
	msf_code
;

259 } 
	tsf_node
;

264 
show_⁄e_¥oc
(c⁄° 
¥oc_t
 *
ª°ri˘
 c⁄° 
p
, c⁄° 
f‹m©_node
 *ª°ri˘ 
fmt
);

265 
¥öt_f‹m©_•ecifõrs
();

266 c⁄° 
aix_°ru˘
 *
£¨ch_aix_¨øy
(c⁄° 
födme
);

267 c⁄° 
sh‹ts‹t_°ru˘
 *
£¨ch_sh‹ts‹t_¨øy
(c⁄° 
födme
);

268 c⁄° 
f‹m©_°ru˘
 *
£¨ch_f‹m©_¨øy
(c⁄° *
födme
);

269 c⁄° 
ma¸o_°ru˘
 *
£¨ch_ma¸o_¨øy
(c⁄° *
födme
);

270 
öô_ouçut
();

271 
¥_n›
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
);

274 
ª£t_globÆ
();

277 
Æl_¥o˚s£s
;

278 c⁄° *
bsd_j_f‹m©
;

279 c⁄° *
bsd_l_f‹m©
;

280 c⁄° *
bsd_s_f‹m©
;

281 c⁄° *
bsd_u_f‹m©
;

282 c⁄° *
bsd_v_f‹m©
;

283 
bsd_c_›ti⁄
;

284 
bsd_e_›ti⁄
;

285 
uid_t
 
ˇched_euid
;

286 
dev_t
 
ˇched_ây
;

287 
f‹e°_¥efix
[4 * 32*1024 + 100];

288 
f‹e°_ty≥
;

289 
f‹m©_Êags
;

290 
f‹m©_node
 *
f‹m©_li°
;

291 
f‹m©_modifõrs
;

292 
hódî_g≠
;

293 
hódî_ty≥
;

294 
ö˛ude_dód_chûdªn
;

295 
löes_to_√xt_hódî
;

296 
max_löe_width
;

297 
√g©e_£À˘i⁄
;

298 
∑ge_size
;

299 
≥rs⁄Æôy
;

300 
¥e„r_bsd_deÁu…s
;

301 
ru¬ög_⁄ly
;

302 
s¸ìn_cﬁs
;

303 
s¸ìn_rows
;

304 
time_t
 
£c⁄ds_sö˚_boŸ
;

305 
£À˘i⁄_node
 *
£À˘i⁄_li°
;

306 
sim∂e_£À˘
;

307 
s‹t_node
 *
s‹t_li°
;

308 c⁄° *
sysv_f_f‹m©
;

309 c⁄° *
sysv_Ê_f‹m©
;

310 c⁄° *
sysv_j_f‹m©
;

311 c⁄° *
sysv_l_f‹m©
;

312 
thªad_Êags
;

313 
unix_f_›ti⁄
;

314 
u£r_is_numbî
;

315 
wch™_is_numbî
;

316 c⁄° *
the_w‹d_hñp
;

321 *
my«me
;

324 
de„r_sf_›ti⁄
(c⁄° *
¨g
, 
sour˚
);

325 c⁄° *
¥o˚ss_sf_›ti⁄s
();

326 
ª£t_s‹tf‹m©
();

329 
w™t_this_¥oc
(
¥oc_t
 *
buf
);

330 c⁄° *
£À˘_bôs_£tup
();

333 
	$do_hñp
(c⁄° *
›t
, 
rc
Ë
NORETURN
;

336 
	`£lf_öfo
();

337 
	`ˇè°r›hic_Áûuª
(c⁄° *
fûíame
, 
löíum
,

338 c⁄° *
mesßge
);

341 
	`¨g_∑r£
(
¨gc
, *
¨gv
[]);

	@ps/display.c

20 
	~<gΩ.h
>

21 
	~<loˇÀ.h
>

22 
	~<pwd.h
>

23 
	~<sig«l.h
>

24 
	~<°dio.h
>

25 
	~<°dlib.h
>

26 
	~<°rög.h
>

27 
	~<uni°d.h
>

29 
	~<sys/sysma¸os.h
>

30 
	~<sys/ty≥s.h
>

32 
	~"../¥oc/Æloc.h
"

33 
	~"../¥oc/ªad¥oc.h
"

34 
	~"../¥oc/sig.h
"

35 
	~"../¥oc/sysöfo.h
"

36 
	~"../¥oc/vîsi⁄.h
"

37 
	~"../¥oc/wch™.h
"

39 
	~"../ö˛ude/fûeutûs.h
"

40 
	~"../ö˛ude/c.h
"

41 
	~"comm⁄.h
"

43 #i‚de‡
SIGCHLD


44 
	#SIGCHLD
 
SIGCLD


	)

47 *
	gmy«me
;

50 
	$sig«l_h™dÀr
(
signo
){

51 if(
signo
==
SIGPIPE
Ë
	`_exô
(0);

53 
	`Ârötf
(
°dîr
,

54 
	`_
("Signal %d (%s) caught by %s (%s).\n"),

55 
signo
,

56 
	`sig«l_numbî_to_«me
(
signo
),

57 
my«me
,

58 
PACKAGE_VERSION


60 
signo
) {

61 
SIGHUP
:

62 
SIGUSR1
:

63 
SIGUSR2
:

64 
	`exô
(
EXIT_FAILURE
);

66 
	`îr‹_©_löe
(0, 0, 
__FILE__
, 
__LINE__
, "%s", 
	`_
("pleaseÑeportÅhis bug"));

67 
	`sig«l
(
signo
, 
SIG_DFL
);

68 
	`kûl
(
	`gëpid
(), 
signo
);

70 
	}
}

73 #unde‡
DEBUG


74 #ifde‡
DEBUG


75 
öô_°ack_åa˚
(*
¥og_«me
);

77 
	~<˘y≥.h
>

79 
	$hex_dump
(*
vp
){

80 *
ch¨li°
;

81 
i
 = 0;

82 
löe
 = 45;

83 *
˝
 = (*)
vp
;

85 
löe
--){

86 
	`¥ötf
("%8lx ", ()
˝
);

87 
ch¨li°
 = 
˝
;

88 
˝
 += 16;

89 
i
=0; i<16; i++){

90 if((
ch¨li°
[
i
]>31) && (charlist[i]<127)){

91 
	`¥ötf
("%c", 
ch¨li°
[
i
]);

93 
	`¥ötf
(".");

96 
	`¥ötf
(" ");

97 
i
=0; i<16; i++Ë
	`¥ötf
(" %2x",()(()(
ch¨li°
[i])));

98 
	`¥ötf
("\n");

99 
i
=0;

101 
	}
}

103 
	$show_tgid
(*
s
, 
n
, 
£l_uni⁄
 *
d©a
){

104 
	`¥ötf
("%† ", 
s
);

105 --
n
){

106 
	`¥ötf
("%d,", 
d©a
[
n
].
tgid
);

108 
	`¥ötf
("%d\n", 
d©a
[0].
tgid
);

109 
	}
}

111 
	$show_uid
(*
s
, 
n
, 
£l_uni⁄
 *
d©a
){

112 
∑sswd
 *
pw_d©a
;

113 
	`¥ötf
("%† ", 
s
);

114 --
n
){

115 
pw_d©a
 = 
	`gëpwuid
(
d©a
[
n
].
uid
);

116 if(
pw_d©a
Ë
	`¥ötf
("%s,",Öw_d©a->
pw_«me
);

117 
	`¥ötf
("%d,", 
d©a
[
n
].
uid
);

119 
pw_d©a
 = 
	`gëpwuid
(
d©a
[
n
].
uid
);

120 if(
pw_d©a
Ë
	`¥ötf
("%s\n",Öw_d©a->
pw_«me
);

121 
	`¥ötf
("%d\n", 
d©a
[
n
].
uid
);

122 
	}
}

124 
	$show_gid
(*
s
, 
n
, 
£l_uni⁄
 *
d©a
){

125 
group
 *
gr_d©a
;

126 
	`¥ötf
("%† ", 
s
);

127 --
n
){

128 
gr_d©a
 = 
	`gëgrgid
(
d©a
[
n
].
gid
);

129 if(
gr_d©a
Ë
	`¥ötf
("%s,", gr_d©a->
gr_«me
);

130 
	`¥ötf
("%d,", 
d©a
[
n
].
gid
);

132 
gr_d©a
 = 
	`gëgrgid
(
d©a
[
n
].
gid
);

133 if(
gr_d©a
Ë
	`¥ötf
("%s\n", gr_d©a->
gr_«me
);

134 
	`¥ötf
("%d\n", 
d©a
[
n
].
gid
);

135 
	}
}

137 
	$show_ây
(*
s
, 
n
, 
£l_uni⁄
 *
d©a
){

138 
	`¥ötf
("%† ", 
s
);

139 --
n
){

140 
	`¥ötf
("%d:%d,", ()
	`maj‹
(
d©a
[
n
].
ây
), ()
	`mö‹
(data[n].tty));

142 
	`¥ötf
("%d:%d\n", ()
	`maj‹
(
d©a
[
n
].
ây
), ()
	`mö‹
(data[n].tty));

143 
	}
}

145 
	$show_cmd
(*
s
, 
n
, 
£l_uni⁄
 *
d©a
){

146 
	`¥ötf
("%† ", 
s
);

147 --
n
){

148 
	`¥ötf
("%.8s,", 
d©a
[
n
].
cmd
);

150 
	`¥ötf
("%.8s\n", 
d©a
[0].
cmd
);

151 
	}
}

153 
	$¨g_show
(){

154 
£À˘i⁄_node
 *
wÆk
 = 
£À˘i⁄_li°
;

155 
wÆk
){

156 
wÆk
->
ty≥code
){

157 
SEL_RUID
: 
	`show_uid
("RUID", 
wÆk
->
n
, wÆk->
u
); ;

158 
SEL_EUID
: 
	`show_uid
("EUID", 
wÆk
->
n
, wÆk->
u
); ;

159 
SEL_SUID
: 
	`show_uid
("SUID", 
wÆk
->
n
, wÆk->
u
); ;

160 
SEL_FUID
: 
	`show_uid
("FUID", 
wÆk
->
n
, wÆk->
u
); ;

161 
SEL_RGID
: 
	`show_gid
("RGID", 
wÆk
->
n
, wÆk->
u
); ;

162 
SEL_EGID
: 
	`show_gid
("EGID", 
wÆk
->
n
, wÆk->
u
); ;

163 
SEL_SGID
: 
	`show_gid
("SGID", 
wÆk
->
n
, wÆk->
u
); ;

164 
SEL_FGID
: 
	`show_gid
("FGID", 
wÆk
->
n
, wÆk->
u
); ;

165 
SEL_PGRP
: 
	`show_pid
("PGRP", 
wÆk
->
n
, wÆk->
u
); ;

166 
SEL_PID
 : 
	`show_pid
("PID ", 
wÆk
->
n
, wÆk->
u
); ;

167 
SEL_PID_QUICK
 : 
	`show_pid
("PID_QUICK ", 
wÆk
->
n
, wÆk->
u
); ;

168 
SEL_PPID
: 
	`show_pid
("PPID", 
wÆk
->
n
, wÆk->
u
); ;

169 
SEL_TTY
 : 
	`show_ây
("TTY ", 
wÆk
->
n
, wÆk->
u
); ;

170 
SEL_SESS
: 
	`show_pid
("SESS", 
wÆk
->
n
, wÆk->
u
); ;

171 
SEL_COMM
: 
	`show_cmd
("COMM", 
wÆk
->
n
, wÆk->
u
); ;

172 : 
	`¥ötf
("GarbageÅypecode value!\n");

174 
wÆk
 = wÆk->
√xt
;

176 
	}
}

184 
	$check_hódîs
(){

185 
f‹m©_node
 *
wÆk
 = 
f‹m©_li°
;

186 
hód_n‹mÆ
 = 0;

187 if(
hódî_ty≥
==
HEAD_MULTI
){

188 
hódî_g≠
 = 
s¸ìn_rows
-1;

191 if(
hódî_ty≥
==
HEAD_NONE
){

192 
löes_to_√xt_hódî
 = -1;

195 
wÆk
){

196 if(!*(
wÆk
->
«me
)){

197 
wÆk
 = wÆk->
√xt
;

200 if(
wÆk
->
¥
){

201 
hód_n‹mÆ
++;

202 
wÆk
 = wÆk->
√xt
;

205 
wÆk
 = wÆk->
√xt
;

207 if(!
hód_n‹mÆ
Ë
löes_to_√xt_hódî
 = -1;

208 
	}
}

212 
	$check_s‹t_√eds
(
s‹t_node
 *
wÆk
){

213 
√eds
 = 0;

214 
wÆk
){

215 
√eds
 |
wÆk
->
√ed
;

216 
wÆk
 = wÆk->
√xt
;

218  
√eds
;

219 
	}
}

223 
	$cﬁÀ˘_f‹m©_√eds
(
f‹m©_node
 *
wÆk
){

224 
√eds
 = 0;

225 
wÆk
){

226 
√eds
 |
wÆk
->
√ed
;

227 
wÆk
 = wÆk->
√xt
;

229  
√eds
;

230 
	}
}

232 
f‹m©_node
 *
	g¥oc_f‹m©_li°
;

233 
f‹m©_node
 *
	gèsk_f‹m©_li°
;

235 
	g√eds_f‹_thªads
;

236 
	g√eds_f‹_s‹t
;

237 
	g¥oc_f‹m©_√eds
;

238 
	gèsk_f‹m©_√eds
;

240 
	#√eds_f‹_f‹m©
 (
¥oc_f‹m©_√eds
|
èsk_f‹m©_√eds
)

	)

242 
	#PROC_ONLY_FLAGS
 (
PROC_FILLENV
|
PROC_FILLARG
|
PROC_FILLCOM
|
PROC_FILLMEM
|
PROC_FILLCGROUP
)

	)

245 
	$li°s_™d_√eds
(){

246 
	`check_hódîs
();

249 if(
thªad_Êags
 & 
TF_show_bŸh
){

250 
f‹m©_node
 
p‚
, 
t‚
;

251 
f‹m©_node
 *
wÆk
 = 
f‹m©_li°
;

252 
f‹m©_node
 *
p_íd
 = &
p‚
;

253 
f‹m©_node
 *
t_íd
 = &
t‚
;

254 
wÆk
){

255 
f‹m©_node
 *
√w
 = 
	`mÆloc
((format_node));

256 
	`mem˝y
(
√w
,
wÆk
,(
f‹m©_node
));

257 
p_íd
->
√xt
 = 
wÆk
;

258 
t_íd
->
√xt
 = 
√w
;

259 
p_íd
 = 
wÆk
;

260 
t_íd
 = 
√w
;

261 
wÆk
->
Êags
 & 
CF_PRINT_MASK
){

262 
CF_PRINT_THREAD_ONLY
:

263 
p_íd
->
¥
 = 
¥_n›
;

264 
p_íd
->
√ed
 = 0;

266 
CF_PRINT_PROCESS_ONLY
:

267 
t_íd
->
¥
 = 
¥_n›
;

268 
t_íd
->
√ed
 = 0;

271 
	`ˇè°r›hic_Áûuª
(
__FILE__
, 
__LINE__
, 
	`_
("pleaseÑeportÅhis bug"));

273 
CF_PRINT_AS_NEEDED
:

274 
CF_PRINT_EVERY_TIME
:

277 
wÆk
 = wÆk->
√xt
;

279 
t_íd
->
√xt
 = 
NULL
;

280 
p_íd
->
√xt
 = 
NULL
;

281 
¥oc_f‹m©_li°
 = 
p‚
.
√xt
;

282 
èsk_f‹m©_li°
 = 
t‚
.
√xt
;

284 
¥oc_f‹m©_li°
 = 
f‹m©_li°
;

285 
èsk_f‹m©_li°
 = 
f‹m©_li°
;

288 
¥oc_f‹m©_√eds
 = 
	`cﬁÀ˘_f‹m©_√eds
(
¥oc_f‹m©_li°
);

289 
èsk_f‹m©_√eds
 = 
	`cﬁÀ˘_f‹m©_√eds
(
èsk_f‹m©_li°
);

291 
√eds_f‹_s‹t
 = 
	`check_s‹t_√eds
(
s‹t_li°
);

294 
¥oc_f‹m©_√eds
 |(
èsk_f‹m©_√eds
 &~ 
PROC_ONLY_FLAGS
);

295 
èsk_f‹m©_√eds
 &~
PROC_ONLY_FLAGS
;

297 if(
bsd_c_›ti⁄
){

298 
¥oc_f‹m©_√eds
 &~
PROC_FILLARG
;

299 
√eds_f‹_s‹t
 &~
PROC_FILLARG
;

301 if(!
unix_f_›ti⁄
){

302 
¥oc_f‹m©_√eds
 &~
PROC_FILLCOM
;

303 
√eds_f‹_s‹t
 &~
PROC_FILLCOM
;

306 if(
¥oc_f‹m©_√eds
 & 
PROC_FILLARG
){

307 
¥oc_f‹m©_√eds
 |(
PROC_FILLCOM
 | 
PROC_EDITCMDLCVT
);

308 
¥oc_f‹m©_√eds
 &~
PROC_FILLARG
;

310 if(
bsd_e_›ti⁄
){

311 if(
¥oc_f‹m©_√eds
&
PROC_FILLCOM
Ë¥oc_f‹m©_√ed†|
PROC_FILLENV
;

314 if(
thªad_Êags
&
TF_loo£_èsks
Ë
√eds_f‹_thªads
 |
PROC_LOOSE_TASKS
;

315 
	}
}

321 
	$w™t_this_¥oc_p˝u
(
¥oc_t
 *
buf
){

322 
u£d_jiffõs
;

323 
p˝u
 = 0;

324 
£c⁄ds
;

326 if(!
	`w™t_this_¥oc
(
buf
))  0;

328 
u£d_jiffõs
 = 
buf
->
utime
 + buf->
°ime
;

329 if(
ö˛ude_dód_chûdªn
Ë
u£d_jiffõs
 +(
buf
->
cutime
 + buf->
c°ime
);

331 
£c⁄ds
 = 
£c⁄ds_sö˚_boŸ
 - 
buf
->
°¨t_time
 / 
Hîtz
;

332 if(
£c⁄ds
Ë
p˝u
 = (
u£d_jiffõs
 * 1000ULL / 
Hîtz
) / seconds;

334 
buf
->
p˝u
 =Öcpu;

337 
	}
}

340 
	$sim∂e_•ew
(){

341 
¥oc_t
 
buf
, 
buf2
;

342 
PROCTAB
* 
±p
;

343 
pid_t
* 
pidli°
;

344 
Êags
;

345 
i
;

347 
pidli°
 = 
NULL
;

348 
Êags
 = 
√eds_f‹_f‹m©
 | 
√eds_f‹_s‹t
 | 
√eds_f‹_£À˘
 | 
√eds_f‹_thªads
;

351 i‡(
£À˘i⁄_li°
 && sñe˘i⁄_li°->
ty≥code
 =
SEL_PID_QUICK
) {

352 
Êags
 |
PROC_PID
;

354 
pidli°
 = (
pid_t
*Ë
	`mÆloc
(
£À˘i⁄_li°
->
n
 * (pid_t));

355 i‡(!
pidli°
) {

356 
	`Ârötf
(
°dîr
, 
	`_
("error:ÇotÉnough memory\n"));

357 
	`exô
(1);

360 
i
 = 0; i < 
£À˘i⁄_li°
->
n
; i++) {

361 
pidli°
[
i
] = 
£À˘i⁄_li°
->
u
[£À˘i⁄_li°->
n
-i-1].
pid
;

365 
±p
 = 
	`›í¥oc
(
Êags
, 
pidli°
);

366 if(!
±p
) {

367 
	`Ârötf
(
°dîr
, 
	`_
("error: canÇotáccess /proc\n"));

368 
	`exô
(1);

370 
thªad_Êags
 & (
TF_show_¥oc
|
TF_loo£_èsks
|
TF_show_èsk
)){

371 
TF_show_¥oc
:

372 
	`ªad¥oc
(
±p
,&
buf
)){

373 if(
	`w™t_this_¥oc
(&
buf
)){

374 
	`show_⁄e_¥oc
(&
buf
, 
¥oc_f‹m©_li°
);

378 
TF_show_¥oc
|
TF_loo£_èsks
:

379 
	`ªad¥oc
(
±p
,&
buf
)){

381 
	`ªadèsk
(
±p
,&
buf
,&
buf2
)){

382 if(!
	`w™t_this_¥oc
(&
buf
)) ;

383 
	`show_⁄e_¥oc
(&
buf2
, 
èsk_f‹m©_li°
);

387 
TF_show_¥oc
|
TF_show_èsk
:

388 
	`ªad¥oc
(
±p
,&
buf
)){

389 if(
	`w™t_this_¥oc
(&
buf
)){

390 
	`show_⁄e_¥oc
(&
buf
, 
¥oc_f‹m©_li°
);

392 
	`ªadèsk
(
±p
,&
buf
,&
buf2
)Ë
	`show_⁄e_¥oc
(&buf2, 
èsk_f‹m©_li°
);

396 
TF_show_èsk
:

397 
	`ªad¥oc
(
±p
,&
buf
)){

398 if(
	`w™t_this_¥oc
(&
buf
)){

400 
	`ªadèsk
(
±p
,&
buf
,&
buf2
)Ë
	`show_⁄e_¥oc
(&buf2, 
èsk_f‹m©_li°
);

405 
	`˛o£¥oc
(
±p
);

407 i‡(
pidli°
Ë
	`‰ì
(pidlist);

408 
	}
}

411 
	$¥ï_f‹e°_s‹t
(){

412 
s‹t_node
 *
tmp_li°
 = 
s‹t_li°
;

413 c⁄° 
f‹m©_°ru˘
 *
öcomög
;

415 if(!
s‹t_li°
) {

416 
öcomög
 = 
	`£¨ch_f‹m©_¨øy
("start_time");

417 if(!
öcomög
Ë{ 
	`Ârötf
(
°dîr
, 
	`_
("couldÇŸ föd sèπ_time\n")); 
	`exô
(1); }

418 
tmp_li°
 = 
	`mÆloc
((
s‹t_node
));

419 
tmp_li°
->
ªvî£
 = 0;

420 
tmp_li°
->
ty≥code
 = '?';

421 
tmp_li°
->
§
 = 
öcomög
->sr;

422 
tmp_li°
->
√ed
 = 
öcomög
->need;

423 
tmp_li°
->
√xt
 = 
s‹t_li°
;

424 
s‹t_li°
 = 
tmp_li°
;

427 
öcomög
 = 
	`£¨ch_f‹m©_¨øy
("ppid");

428 if(!
öcomög
Ë{ 
	`Ârötf
(
°dîr
, 
	`_
("couldÇŸ födÖpid\n")); 
	`exô
(1); }

429 
tmp_li°
 = 
	`mÆloc
((
s‹t_node
));

430 
tmp_li°
->
ªvî£
 = 0;

431 
tmp_li°
->
ty≥code
 = '?';

432 
tmp_li°
->
§
 = 
öcomög
->sr;

433 
tmp_li°
->
√ed
 = 
öcomög
->need;

434 
tmp_li°
->
√xt
 = 
s‹t_li°
;

435 
s‹t_li°
 = 
tmp_li°
;

436 
	}
}

440 
¥oc_t
 **
	g¥o˚s£s
;

443 
	$com∑ª_two_¥ocs
(c⁄° *
a
, c⁄° *
b
){

444 
s‹t_node
 *
tmp_li°
 = 
s‹t_li°
;

445 
tmp_li°
){

446 
ªsu…
;

447 
ªsu…
 = (*
tmp_li°
->
§
)(*(c⁄° 
¥oc_t
 *c⁄°*)
a
, *(c⁄°Öroc_à*c⁄°*)
b
);

448 if(
ªsu…
Ë (
tmp_li°
->
ªvî£
) ? -result :Ñesult;

449 
tmp_li°
 =Åmp_li°->
√xt
;

452 
	}
}

455 
	$show_¥oc_¨øy
(
PROCTAB
 *
ª°ri˘
 
±p
, 
n
){

456 
¥oc_t
 **
p
 = 
¥o˚s£s
;

457 
n
--){

458 if(
thªad_Êags
 & 
TF_show_¥oc
Ë
	`show_⁄e_¥oc
(*
p
, 
¥oc_f‹m©_li°
);

459 if(
thªad_Êags
 & 
TF_show_èsk
){

460 
¥oc_t
 
buf2
;

462 
	`ªadèsk
(
±p
,*
p
,&
buf2
)Ë
	`show_⁄e_¥oc
(&buf2, 
èsk_f‹m©_li°
);

464 
p
++;

466 
	}
}

470 
	#ADOPTED
(
x
Ë1

	)

471 
	$show_åì
(c⁄° 
£lf
, c⁄° 
n
, c⁄° 
Àvñ
, c⁄° 
have_siblög
){

472 
i
 = 0;

473 if(
Àvñ
){

475 if(
have_siblög
Ë
f‹e°_¥efix
[
Àvñ
-1] = '+';

476 
f‹e°_¥efix
[
Àvñ
-1] = 'L';

477 
f‹e°_¥efix
[
Àvñ
] = '\0';

479 
	`show_⁄e_¥oc
(
¥o˚s£s
[
£lf
],
f‹m©_li°
);

481 if(
i
 >
n
) ;

482 if(
¥o˚s£s
[
i
]->
µid
 =¥o˚s£s[
£lf
]->
XXXID
) ;

483 
i
++;

485 if(
Àvñ
){

487 if(
have_siblög
Ë
f‹e°_¥efix
[
Àvñ
-1] = '|';

488 
f‹e°_¥efix
[
Àvñ
-1] = ' ';

489 
f‹e°_¥efix
[
Àvñ
] = '\0';

492 
£lf_pid
;

493 
m‹e_chûdªn
 = 1;

494 if(
i
 >
n
) ;

495 
£lf_pid
=
¥o˚s£s
[
£lf
]->
XXXID
;

496 if(
i
+1 >
n
)

497 
m‹e_chûdªn
 = 0;

499 if(
¥o˚s£s
[
i
+1]->
µid
 !
£lf_pid
Ë
m‹e_chûdªn
 = 0;

500 if(
£lf_pid
==1 && 
	`ADOPTED
(
¥o˚s£s
[
i
]Ë&& 
f‹e°_ty≥
!='u')

501 
	`show_åì
(
i
++, 
n
, 
Àvñ
, 
m‹e_chûdªn
);

503 
	`show_åì
(
i
++, 
n
, 
Àvñ
+1, 
m‹e_chûdªn
);

504 if(!
m‹e_chûdªn
) ;

507 
f‹e°_¥efix
[
Àvñ
] = '\0';

509 
	}
}

512 
	$show_f‹e°
(c⁄° 
n
){

513 
i
 = 
n
;

514 
j
;

515 
i
--){

516 
j
 = 
n
;

517 
j
--){

518 if(
¥o˚s£s
[
j
]->
XXXID
 =¥o˚s£s[
i
]->
µid
Ë
nŸ_roŸ
;

520 
	`show_åì
(
i
,
n
,0,0);

521 
nŸ_roŸ
:

525 
	}
}

528 
	$w™t_this_¥oc_n›
(
¥oc_t
 *
dummy
){

529 ()
dummy
;

531 
	}
}

535 
	$Áncy_•ew
(){

536 
¥oc_d©a_t
 *
pd
 = 
NULL
;

537 
PROCTAB
 *
ª°ri˘
 
±p
;

538 
n
 = 0;

540 
±p
 = 
	`›í¥oc
(
√eds_f‹_f‹m©
 | 
√eds_f‹_s‹t
 | 
√eds_f‹_£À˘
 | 
√eds_f‹_thªads
);

541 if(!
±p
) {

542 
	`Ârötf
(
°dîr
, 
	`_
("error: canÇotáccess /proc\n"));

543 
	`exô
(1);

546 if(
thªad_Êags
 & 
TF_loo£_èsks
){

547 
pd
 = 
	`ªad¥o˘ab3
(
w™t_this_¥oc_p˝u
, 
±p
);

549 
pd
 = 
	`ªad¥o˘ab2
(
w™t_this_¥oc_p˝u
, (*)0xdódbóful, 
±p
);

551 
n
 = 
pd
->n;

552 
¥o˚s£s
 = 
pd
->
èb
;

554 if(!
n
) ;

555 if(
f‹e°_ty≥
Ë
	`¥ï_f‹e°_s‹t
();

556 
	`qs‹t
(
¥o˚s£s
, 
n
, (
¥oc_t
*), 
com∑ª_two_¥ocs
);

557 if(
f‹e°_ty≥
Ë
	`show_f‹e°
(
n
);

558 
	`show_¥oc_¨øy
(
±p
,
n
);

559 
	`˛o£¥oc
(
±p
);

560 
	}
}

562 
	$¨g_check_c⁄Êi˘s
()

564 
£À˘i⁄_li°_Àn
;

565 
has_quick_pid
;

567 
£À˘i⁄_node
 *
wÆk
 = 
£À˘i⁄_li°
;

568 
has_quick_pid
 = 0;

569 
£À˘i⁄_li°_Àn
 = 0;

571 
wÆk
) {

572 i‡(
wÆk
->
ty≥code
 =
SEL_PID_QUICK
Ë
has_quick_pid
++;

573 
wÆk
 = wÆk->
√xt
;

574 
£À˘i⁄_li°_Àn
++;

578 i‡(
has_quick_pid
 > 1) {

579 
	`Ârötf
(
°dîr
, "q/-q/--quick-pid can only be used once.\n");

580 
	`exô
(1);

584 i‡(
has_quick_pid
 && 
£À˘i⁄_li°_Àn
 > has_quick_pid) {

585 
	`Ârötf
(
°dîr
, "q/-q/--quick-pid cannot be combined with other selection options.\n");

586 
	`exô
(1);

590 i‡(
has_quick_pid
 && 
f‹e°_ty≥
) {

591 
	`Ârötf
(
°dîr
, "q/-q/--quick-pid cannot be usedÅogether with forestÅypeÜistings.\n");

592 
	`exô
(1);

596 i‡(
has_quick_pid
 && 
s‹t_li°
) {

597 
	`Ârötf
(
°dîr
, "q/-q,--quick-pid cannot be usedÅogether with sort options.\n");

598 
	`exô
(1);

602 i‡(
has_quick_pid
 && 
√g©e_£À˘i⁄
) {

603 
	`Ârötf
(
°dîr
, "q/-q/--quick-pid cannot be usedÅogether withÇegation switches.\n");

604 
	`exô
(1);

607 
	}
}

610 
	$maö
(
¨gc
, *
¨gv
[]){

611 
	`©exô
(
˛o£_°dout
);

612 
my«me
 = 
	`°ºchr
(*
¨gv
, '/');

613 i‡(
my«me
Ë++my«me; my«mê*
¨gv
;

615 
	`£éoˇÀ
 (
LC_ALL
, "");

616 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

617 
	`ãxtdomaö
(
PACKAGE
);

619 #ifde‡
DEBUG


620 
	`öô_°ack_åa˚
(
¨gv
[0]);

623 
siga˘i⁄
 
ß
;

624 
i
 = 32;

625 
	`mem£t
(&
ß
, 0, (sa));

626 
ß
.
ß_h™dÀr
 = 
sig«l_h™dÀr
;

627 
	`sigfûl£t
(&
ß
.
ß_mask
);

628 
i
--) i){

630 
	`siga˘i⁄
(
i
,&
ß
,
NULL
);

632 
SIGCONT
:

633 
SIGINT
:

634 
SIGTSTP
:

635 
SIGTTOU
:

636 
SIGQUIT
:

637 
SIGPROF
:

638 
SIGKILL
:

639 
SIGSTOP
:

640 
SIGWINCH
:

647 
	`ª£t_globÆ
();

649 
	`¨g_∑r£
(
¨gc
,
¨gv
);

652 
	`¨g_check_c⁄Êi˘s
();

655 
	`åa˚
("s¸ì¿i†%ux%u\n",
s¸ìn_cﬁs
,
s¸ìn_rows
);

657 
	`åa˚
("=======Ös output follows =======\n");

659 
	`öô_ouçut
();

661 
	`li°s_™d_√eds
();

663 if(
f‹e°_ty≥
 || 
s‹t_li°
Ë
	`Áncy_•ew
();

664 
	`sim∂e_•ew
();

665 
	`show_⁄e_¥oc
((
¥oc_t
 *)-1,
f‹m©_li°
);

667 
	}
}

	@ps/global.c

20 
	~<f˙é.h
>

21 
	~<gΩ.h
>

22 
	~<pwd.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<ãrmios.h
>

27 
	~<uni°d.h
>

29 
	~<sys/io˘l.h
>

30 
	~<sys/°©.h
>

31 
	~<sys/sysma¸os.h
>

32 
	~<sys/ty≥s.h
>

34 
	~"../¥oc/wch™.h
"

35 
	~"../¥oc/vîsi⁄.h
"

36 
	~"../¥oc/sysöfo.h
"

38 
	~"../ö˛ude/c.h
"

39 
	~"comm⁄.h
"

41 #i‚de‡
__GNU_LIBRARY__


42 
	#__GNU_LIBRARY__
 -1

	)

44 #i‚de‡
__GLIBC__


45 
	#__GLIBC__
 -1

	)

47 #i‚de‡
__GLIBC_MINOR__


48 
	#__GLIBC_MINOR__
 -1

	)

52 c⁄° * 
	gßved_≥rs⁄Æôy_ãxt
 = "You foundá bug!";

54 
	gÆl_¥o˚s£s
 = -1;

55 c⁄° *
	gbsd_j_f‹m©
 = (const *)0xdeadbeef;

56 c⁄° *
	gbsd_l_f‹m©
 = (const *)0xdeadbeef;

57 c⁄° *
	gbsd_s_f‹m©
 = (const *)0xdeadbeef;

58 c⁄° *
	gbsd_u_f‹m©
 = (const *)0xdeadbeef;

59 c⁄° *
	gbsd_v_f‹m©
 = (const *)0xdeadbeef;

60 
	gbsd_c_›ti⁄
 = -1;

61 
	gbsd_e_›ti⁄
 = -1;

62 
uid_t
 
	gˇched_euid
 = -1;

63 
dev_t
 
	gˇched_ây
 = -1;

64 
	gf‹e°_¥efix
[4 * 32*1024 + 100];

65 
	gf‹e°_ty≥
 = -1;

66 
	gf‹m©_Êags
 = 0xffffffff;

67 
f‹m©_node
 *
	gf‹m©_li°
 = (format_node *)0xdeadbeef;

68 
	gf‹m©_modifõrs
 = 0xffffffff;

69 
	ghódî_g≠
 = -1;

70 
	ghódî_ty≥
 = -1;

71 
	gö˛ude_dód_chûdªn
 = -1;

72 
	glöes_to_√xt_hódî
 = -1;

73 
	g√g©e_£À˘i⁄
 = -1;

74 
	gru¬ög_⁄ly
 = -1;

75 
	g∑ge_size
 = -1;

76 
	g≥rs⁄Æôy
 = 0xffffffff;

77 
	g¥e„r_bsd_deÁu…s
 = -1;

78 
	gs¸ìn_cﬁs
 = -1;

79 
	gs¸ìn_rows
 = -1;

80 
time_t
 
	g£c⁄ds_sö˚_boŸ
 = -1;

81 
£À˘i⁄_node
 *
	g£À˘i⁄_li°
 = (selection_node *)0xdeadbeef;

82 
	gsim∂e_£À˘
 = 0xffffffff;

83 
s‹t_node
 *
	gs‹t_li°
 = (sort_node *)0xdeadbeef;

84 c⁄° *
	gsysv_f_f‹m©
 = (const *)0xdeadbeef;

85 c⁄° *
	gsysv_Ê_f‹m©
 = (const *)0xdeadbeef;

86 c⁄° *
	gsysv_j_f‹m©
 = (const *)0xdeadbeef;

87 c⁄° *
	gsysv_l_f‹m©
 = (const *)0xdeadbeef;

88 
	gthªad_Êags
 = 0xffffffff;

89 
	gunix_f_›ti⁄
 = -1;

90 
	gu£r_is_numbî
 = -1;

91 
	gwch™_is_numbî
 = -1;

92 c⁄° *
	gthe_w‹d_hñp
;

94 
	$ª£t_£À˘i⁄_li°
(){

95 
£À˘i⁄_node
 *
ﬁd
;

96 
£À˘i⁄_node
 *
wÆk
 = 
£À˘i⁄_li°
;

97 if(
£À˘i⁄_li°
 =(
£À˘i⁄_node
 *)0xdeadbeef){

98 
£À˘i⁄_li°
 = 
NULL
;

101 
wÆk
){

102 
ﬁd
 = 
wÆk
;

103 
wÆk
 = 
ﬁd
->
√xt
;

104 
	`‰ì
(
ﬁd
->
u
);

105 
	`‰ì
(
ﬁd
);

107 
£À˘i⁄_li°
 = 
NULL
;

108 
	}
}

126 
	$£t_s¸ìn_size
(){

127 
wösize
 
ws
;

128 *
cﬁumns
;

129 *
löes
;

132 
fd
;

133 if(
	`io˘l
(
STDOUT_FILENO
, 
TIOCGWINSZ
, &
ws
Ë!-1 && ws.
ws_cﬁ
>0 && ws.
ws_row
>0) ;

134 if(
	`io˘l
(
STDERR_FILENO
, 
TIOCGWINSZ
, &
ws
Ë!-1 && ws.
ws_cﬁ
>0 && ws.
ws_row
>0) ;

135 if(
	`io˘l
(
STDIN_FILENO
, 
TIOCGWINSZ
, &
ws
Ë!-1 && ws.
ws_cﬁ
>0 && ws.
ws_row
>0) ;

136 
fd
 = 
	`›í
("/dev/ây", 
O_NOCTTY
|
O_NONBLOCK
|
O_RDONLY
);

137 if(
fd
 != -1){

138 
ªt
 = 
	`io˘l
(
fd
, 
TIOCGWINSZ
, &
ws
);

139 
	`˛o£
(
fd
);

140 if(
ªt
 !-1 && 
ws
.
ws_cﬁ
>0 && ws.
ws_row
>0) ;

143 
ws
.
ws_cﬁ
 = 80;

144 
ws
.
ws_row
 = 24;

146 
s¸ìn_cﬁs
 = 
ws
.
ws_cﬁ
;

147 
s¸ìn_rows
 = 
ws
.
ws_row
;

150 if(!
	`ißây
(
STDOUT_FILENO
)Ë
s¸ìn_cﬁs
 = 
OUTBUF_SIZE
;

152 
cﬁumns
 = 
	`gëív
("COLUMNS");

153 if(
cﬁumns
 && *columns){

154 
t
;

155 *
íd±r
;

156 
t
 = 
	`°πﬁ
(
cﬁumns
, &
íd±r
, 0);

157 if(!*
íd±r
 && (
t
>0Ë&& (t<()
OUTBUF_SIZE
)Ë
s¸ìn_cﬁs
 = ()t;

160 
löes
 = 
	`gëív
("LINES");

161 if(
löes
 && *lines){

162 
t
;

163 *
íd±r
;

164 
t
 = 
	`°πﬁ
(
löes
, &
íd±r
, 0);

165 if(!*
íd±r
 && (
t
>0Ë&& (t<()
OUTBUF_SIZE
)Ë
s¸ìn_rows
 = ()t;

168 if((
s¸ìn_cﬁs
<9Ë|| (
s¸ìn_rows
<2))

169 
	`Ârötf
(
°dîr
,
	`_
("your %dx%d screen size is bogus.ÉxpectÅrouble\n"),

170 
s¸ìn_cﬁs
, 
s¸ìn_rows


172 
	}
}

176 
	s≥rs⁄Æôy_èbÀ_°ru˘
 {

177 c⁄° *
	m«me
;

178 c⁄° *
	mjump
;

179 } 
	t≥rs⁄Æôy_èbÀ_°ru˘
;

181 
	$com∑ª_≥rs⁄Æôy_èbÀ_°ru˘s
(c⁄° *
a
, c⁄° *
b
){

182  
	`°rˇ£cmp
(((c⁄° 
≥rs⁄Æôy_èbÀ_°ru˘
*)
a
)->
«me
,((c⁄°Öîs⁄Æôy_èbÀ_°ru˘*)
b
)->name);

183 
	}
}

185 c⁄° *
	$£t_≥rs⁄Æôy
(){

186 c⁄° *
s
;

187 
size_t
 
¶
;

188 
buf
[16];

189 
≥rs⁄Æôy_èbÀ_°ru˘
 
födme
 = { 
buf
, 
NULL
};

190 
≥rs⁄Æôy_èbÀ_°ru˘
 *
found
;

191 c⁄° 
≥rs⁄Æôy_èbÀ_°ru˘
 
≥rs⁄Æôy_èbÀ
[] = {

192 {"390", &&
ˇ£_390
},

193 {"aix", &&
ˇ£_aix
},

194 {"bsd", &&
ˇ£_bsd
},

195 {"com∑q", &&
ˇ£_com∑q
},

196 {"debün", &&
ˇ£_debün
},

197 {"deÁu…", &&
ˇ£_deÁu…
},

198 {"digôÆ", &&
ˇ£_digôÆ
},

199 {"gnu", &&
ˇ£_gnu
},

200 {"hp", &&
ˇ£_hp
},

201 {"hpux", &&
ˇ£_hpux
},

202 {"úix", &&
ˇ£_úix
},

203 {"löux", &&
ˇ£_löux
},

204 {"ﬁd", &&
ˇ£_ﬁd
},

205 {"os390", &&
ˇ£_os390
},

206 {"posix", &&
ˇ£_posix
},

207 {"s390", &&
ˇ£_s390
},

208 {"sco", &&
ˇ£_sco
},

209 {"sgi", &&
ˇ£_sgi
},

210 {"sﬁ¨is2", &&
ˇ£_sﬁ¨is2
},

211 {"sunos4", &&
ˇ£_sunos4
},

212 {"svr4", &&
ˇ£_svr4
},

213 {"sysv", &&
ˇ£_sysv
},

214 {"åu64", &&
ˇ£_åu64
},

215 {"unix", &&
ˇ£_unix
},

216 {"unix95", &&
ˇ£_unix95
},

217 {"unix98", &&
ˇ£_unix98
},

218 {"unknown", &&
ˇ£_unknown
}

220 c⁄° 
≥rs⁄Æôy_èbÀ_cou¡
 = (
≥rs⁄Æôy_èbÀ
)/(
≥rs⁄Æôy_èbÀ_°ru˘
);

222 
≥rs⁄Æôy
 = 0;

223 
¥e„r_bsd_deÁu…s
 = 0;

225 
bsd_j_f‹m©
 = "OL_j";

226 
bsd_l_f‹m©
 = "OL_l";

227 
bsd_s_f‹m©
 = "OL_s";

228 
bsd_u_f‹m©
 = "OL_u";

229 
bsd_v_f‹m©
 = "OL_v";

232 
sysv_f_f‹m©
 = 
NULL
;

233 
sysv_Ê_f‹m©
 = 
NULL
;

234 
sysv_j_f‹m©
 = 
NULL
;

235 
sysv_l_f‹m©
 = 
NULL
;

237 
s
 = 
	`gëív
("PS_PERSONALITY");

238 if(!
s
 || !*sË†
	`gëív
("CMD_ENV");

239 if(!
s
 || !*s) s="unknown";

240 if(
	`gëív
("I_WANT_A_BROKEN_PS")Ë
s
="old";

241 
¶
 = 
	`°æí
(
s
);

242 if(
¶
 > 15Ë 
	`_
("environment specifiedán unknownÖersonality");

243 
	`°∫˝y
(
buf
, 
s
, 
¶
);

244 
buf
[
¶
] = '\0';

245 i‡((
ßved_≥rs⁄Æôy_ãxt
 = 
	`°rdup
(
buf
))==
NULL
) {

246 
	`Ârötf
(
°dîr
, 
	`_
("cannot strdup()ÖersonalityÅext\n"));

247 
	`exô
(
EXIT_FAILURE
);

250 
found
 = 
	`b£¨ch
(&
födme
, 
≥rs⁄Æôy_èbÀ
, 
≥rs⁄Æôy_èbÀ_cou¡
,

251 (
≥rs⁄Æôy_èbÀ_°ru˘
), 
com∑ª_≥rs⁄Æôy_èbÀ_°ru˘s


254 if(!
found
Ë 
	`_
("environment specifiedán unknownÖersonality");

256 *(
found
->
jump
);

258 
ˇ£_bsd
:

259 
≥rs⁄Æôy
 = 
PER_FORCE_BSD
 | 
PER_BSD_h
 | 
PER_BSD_m
;

260 
¥e„r_bsd_deÁu…s
 = 1;

261 
bsd_j_f‹m©
 = "FB_j";

262 
bsd_l_f‹m©
 = "FB_l";

264 
bsd_u_f‹m©
 = "FB_u";

265 
bsd_v_f‹m©
 = "FB_v";

266  
NULL
;

268 
ˇ£_ﬁd
:

269 
≥rs⁄Æôy
 = 
PER_FORCE_BSD
 | 
PER_OLD_m
;

270 
¥e„r_bsd_deÁu…s
 = 1;

271  
NULL
;

273 
ˇ£_debün
:

274 
ˇ£_gnu
:

275 
≥rs⁄Æôy
 = 
PER_GOOD_o
 | 
PER_OLD_m
;

276 
¥e„r_bsd_deÁu…s
 = 1;

277 
sysv_f_f‹m©
 = "RD_f";

279 
sysv_j_f‹m©
 = "RD_j";

280 
sysv_l_f‹m©
 = "RD_l";

281  
NULL
;

283 
ˇ£_löux
:

284 
≥rs⁄Æôy
 = 
PER_GOOD_o
 | 
PER_ZAP_ADDR
 | 
PER_SANE_USER
;

285  
NULL
;

287 
ˇ£_deÁu…
:

288 
ˇ£_unknown
:

289  
NULL
;

291 
ˇ£_aix
:

292 
bsd_j_f‹m©
 = "FB_j";

293 
bsd_l_f‹m©
 = "FB_l";

295 
bsd_u_f‹m©
 = "FB_u";

296 
bsd_v_f‹m©
 = "FB_v";

297  
NULL
;

299 
ˇ£_åu64
:

300 
ˇ£_com∑q
:

301 
ˇ£_digôÆ
:

304 
≥rs⁄Æôy
 = 
PER_GOOD_o
 | 
PER_BSD_h
;

305 
¥e„r_bsd_deÁu…s
 = 1;

306 
sysv_f_f‹m©
 = "F5FMT";

307 
sysv_Ê_f‹m©
 = "FL5FMT";

308 
sysv_j_f‹m©
 = "JFMT";

309 
sysv_l_f‹m©
 = "L5FMT";

310 
bsd_j_f‹m©
 = "JFMT";

311 
bsd_l_f‹m©
 = "LFMT";

312 
bsd_s_f‹m©
 = "SFMT";

313 
bsd_u_f‹m©
 = "UFMT";

314 
bsd_v_f‹m©
 = "VFMT";

315  
NULL
;

317 
ˇ£_sunos4
:

318 
≥rs⁄Æôy
 = 
PER_NO_DEFAULT_g
;

319 
¥e„r_bsd_deÁu…s
 = 1;

320 
bsd_j_f‹m©
 = "FB_j";

321 
bsd_l_f‹m©
 = "FB_l";

323 
bsd_u_f‹m©
 = "FB_u";

324 
bsd_v_f‹m©
 = "FB_v";

325  
NULL
;

327 
ˇ£_úix
:

328 
ˇ£_sgi
:

329 
s
 = 
	`gëív
("_XPG");

330 if(
s
 && s[0]>'0' && s[0]<='9')

331  
NULL
;

332 
≥rs⁄Æôy
 = 
PER_IRIX_l
;

333  
NULL
;

335 
ˇ£_os390
:

336 
ˇ£_s390
:

337 
ˇ£_390
:

338 
sysv_j_f‹m©
 = "J390";

339  
NULL
;

341 
ˇ£_hp
:

342 
ˇ£_hpux
:

343 
≥rs⁄Æôy
 = 
PER_HPUX_x
;

344  
NULL
;

346 
ˇ£_svr4
:

347 
ˇ£_sysv
:

348 
ˇ£_sco
:

349 
≥rs⁄Æôy
 = 
PER_SVR4_x
;

350  
NULL
;

352 
ˇ£_posix
:

353 
ˇ£_sﬁ¨is2
:

354 
ˇ£_unix95
:

355 
ˇ£_unix98
:

356 
ˇ£_unix
:

357  
NULL
;

358 
	}
}

362 
	$ª£t_globÆ
(){

363 
¥oc_t
 
p
;

364 
	`ª£t_£À˘i⁄_li°
();

365 
	`look_up_our_£lf
(&
p
);

366 
	`£t_s¸ìn_size
();

367 
	`£t_≥rs⁄Æôy
();

369 
Æl_¥o˚s£s
 = 0;

370 
bsd_c_›ti⁄
 = 0;

371 
bsd_e_›ti⁄
 = 0;

372 
ˇched_euid
 = 
	`gëeuid
();

373 
ˇched_ây
 = 
p
.
ây
;

375 
f‹e°_ty≥
 = 0;

376 
f‹m©_Êags
 = 0;

377 
f‹m©_li°
 = 
NULL
;

378 
f‹m©_modifõrs
 = 0;

379 
hódî_g≠
 = -1;

380 
hódî_ty≥
 = 
HEAD_SINGLE
;

381 
ö˛ude_dód_chûdªn
 = 0;

382 
löes_to_√xt_hódî
 = 1;

383 
√g©e_£À˘i⁄
 = 0;

384 
∑ge_size
 = 
	`gë∑gesize
();

385 
ru¬ög_⁄ly
 = 0;

386 
£c⁄ds_sö˚_boŸ
 = 
	`u±ime
(0,0);

387 
£À˘i⁄_li°
 = 
NULL
;

388 
sim∂e_£À˘
 = 0;

389 
s‹t_li°
 = 
NULL
;

390 
thªad_Êags
 = 0;

391 
unix_f_›ti⁄
 = 0;

392 
u£r_is_numbî
 = 0;

393 
wch™_is_numbî
 = 0;

401 
the_w‹d_hñp
 = 
	`_
("help");

402 
	}
}

404 c⁄° 
	g¨chdefs
[] =

405 #ifde‡
__Æpha__


408 #ifde‡
__¨m__


411 #ifde‡
__hµa__


414 #ifde‡
__i386__


417 #ifde‡
__ü64__


420 #ifde‡
__mc68000__


423 #ifde‡
__mùs64__


426 #ifde‡
__mùs__


429 #ifde‡
__powîpc__


432 #ifde‡
__sh3__


435 #ifde‡
__sh__


438 #ifde‡
__•¨c__


441 #ifde‡
__•¨c_v9__


444 #ifde‡
__x86_64__


450 
	$£lf_öfo
(){

451 
löux_vîsi⁄_code
 = 
	`¥o˝s_löux_vîsi⁄
();

452 
	`Ârötf
(
°dîr
,

463 
bsd_j_f‹m©
 ? bsd_j_format : "(none)",

464 
bsd_l_f‹m©
 ? bsd_l_format : "(none)",

465 
bsd_s_f‹m©
 ? bsd_s_format : "(none)",

466 
bsd_u_f‹m©
 ? bsd_u_format : "(none)",

467 
bsd_v_f‹m©
 ? bsd_v_format : "(none)",

468 
sysv_f_f‹m©
 ? sysv_f_format : "(none)",

469 
sysv_Ê_f‹m©
 ? sysv_fl_format : "(none)",

470 
sysv_j_f‹m©
 ? sysv_j_format : "(none)",

471 
sysv_l_f‹m©
 ? sysv_l_format : "(none)"

474 
	`Ârötf
(
°dîr
, "%†vîsi⁄ %s\n", 
PACKAGE_NAME
, 
PACKAGE_VERSION
);

475 
	`Ârötf
(
°dîr
, "Linux version %d.%d.%d\n",

476 
	`LINUX_VERSION_MAJOR
(
löux_vîsi⁄_code
),

477 
	`LINUX_VERSION_MINOR
(
löux_vîsi⁄_code
),

478 
	`LINUX_VERSION_PATCH
(
löux_vîsi⁄_code
)

481 
	`Ârötf
(
°dîr
, "Compiled with: glibc %d.%d, gcc %d.%d\n\n",

482 
__GLIBC__
, 
__GLIBC_MINOR__
, 
__GNUC__
, 
__GNUC_MINOR__


485 
	`Ârötf
(
°dîr
,

489 
hódî_g≠
, 
löes_to_√xt_hódî
,

490 
s¸ìn_cﬁs
, 
s¸ìn_rows


493 
	`Ârötf
(
°dîr
,

496 
≥rs⁄Æôy
, 
ßved_≥rs⁄Æôy_ãxt
,

497 
ˇched_euid
, ()
	`maj‹
(
ˇched_ây
), ()
	`mö‹
(ˇched_ây), 
Hîtz
,

498 ()(
∑ge_size
)

501 
	`Ârötf
(
°dîr
,

503 ()(
¥oc_t
), ()(), ()(
KLONG
)

506 
	`Ârötf
(
°dîr
, "¨chdefs:%s\n", 
¨chdefs
);

507 
	}
}

509 
__©åibuã__
 ((
__n‹ëu∫__
))

510 
	$ˇè°r›hic_Áûuª
(c⁄° *
fûíame
,

511 
löíum
,

512 c⁄° *
mesßge
)

514 
	`îr‹_©_löe
(0, 0, 
fûíame
, 
löíum
, "%s", 
mesßge
);

515 
	`exô
(
EXIT_FAILURE
);

516 
	}
}

	@ps/help.c

20 
	~<î∫o.h
>

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<°rög.h
>

25 
	~"comm⁄.h
"

29 
	mHELP_SMP
, 
	mHELP_LST
, 
	mHELP_OUT
,

30 
	mHELP_THD
, 
	mHELP_MSC
, 
	mHELP_ALL
,

31 
	mHELP_deÁu…


35 c⁄° *
	mw‹d
;

36 c⁄° *
	mabrv
;

37 } 
	ghñp_èb
[
HELP_deÁu…
];

40 
	$∑r£_hñp_›t
 (c⁄° *
›t
) {

63 
hñp_èb
[
HELP_SMP
].
w‹d
 = 
	`_
("sim∂e"); hñp_èb[HELP_SMP].
abrv
 = _("s");

65 
hñp_èb
[
HELP_LST
].
w‹d
 = 
	`_
("li°"); hñp_èb[HELP_LST].
abrv
 = _("l");

67 
hñp_èb
[
HELP_OUT
].
w‹d
 = 
	`_
("ouçut"); hñp_èb[HELP_OUT].
abrv
 = _("o");

69 
hñp_èb
[
HELP_THD
].
w‹d
 = 
	`_
("thªads"); hñp_èb[HELP_THD].
abrv
 = _("t");

71 
hñp_èb
[
HELP_MSC
].
w‹d
 = 
	`_
("misc"); hñp_èb[HELP_MSC].
abrv
 = _("m");

73 
hñp_èb
[
HELP_ALL
].
w‹d
 = 
	`_
("Æl"); hñp_èb[HELP_ALL].
abrv
 = _("a");

79 if(
›t
) {

80 
i
;

81 
i
 = 
HELP_SMP
; i < 
HELP_deÁu…
; i++)

82 i‡(!
	`°rcmp
(
›t
, 
hñp_èb
[
i
].
w‹d
Ë|| !°rcmp(›t, hñp_èb[i].
abrv
))

83  
i
;

85  
HELP_deÁu…
;

86 
	}
}

89 
	$do_hñp
 (c⁄° *
›t
, 
rc
Ë
NORETURN
;

90 
	$do_hñp
 (c⁄° *
›t
, 
rc
) {

91 
FILE
 *
out
 = (
rc
 =
EXIT_SUCCESS
Ë? 
°dout
 : 
°dîr
;

92 
£˘i⁄
 = 
	`∑r£_hñp_›t
(
›t
);

94 
	`Ârötf
(
out
, 
	`_
("\n"

96 " %†[›ti⁄s]\n"), 
my«me
);

98 i‡(
£˘i⁄
 =
HELP_SMP
 || se˘i⁄ =
HELP_ALL
) {

99 
	`Âuts
(
	`_
("\nBasi¯›ti⁄s:\n"), 
out
);

100 
	`Âuts
(
	`_
(" -A, -êáŒÖro˚s£s\n"), 
out
);

101 
	`Âuts
(
	`_
(" -®áŒ wôhÅty,Éx˚± sessi⁄Üódîs\n"), 
out
);

102 
	`Âuts
(
	`_
("ááŒ wôhÅty, in˛udög othî u£rs\n"), 
out
);

103 
	`Âuts
(
	`_
(" -dáŒÉx˚± sessi⁄Üódîs\n"), 
out
);

104 
	`Âuts
(
	`_
(" -N, --de£À˘Çeg©ê£À˘i⁄\n"), 
out
);

105 
	`Âuts
(
	`_
("Ñ o∆yÑu¬ögÖro˚s£s\n"), 
out
);

106 
	`Âuts
(
	`_
(" TáŒÖro˚s£†⁄Åhi†ãrmöÆ\n"), 
out
);

107 
	`Âuts
(
	`_
(" xÖro˚s£†wôhouàc⁄åﬁlögÅtys\n"), 
out
);

109 i‡(
£˘i⁄
 =
HELP_LST
 || se˘i⁄ =
HELP_ALL
) {

110 
	`Âuts
(
	`_
("\nSñe˘i⁄ byÜi°:\n"), 
out
);

111 
	`Âuts
(
	`_
(" -C <comm™d> comm™dÇame\n"), 
out
);

112 
	`Âuts
(
	`_
(" -G, --Grou∞<GID>Ñó»grou∞id o∏«me\n"), 
out
);

113 
	`Âuts
(
	`_
(" -g, --grou∞<group> sessi⁄ o∏ef„˘ivêgrou∞«me\n"), 
out
);

114 
	`Âuts
(
	`_
(" -p,Ö, --pid <PID>Öro˚s†id\n"), 
out
);

115 
	`Âuts
(
	`_
(" --µid <PID>Ö¨íà¥o˚s†id\n"), 
out
);

116 
	`Âuts
(
	`_
(" -q, q, --quick-pid <PID>\n"

117 "Öro˚s†id (quick mode)\n"), 
out
);

118 
	`Âuts
(
	`_
(" -s, --sid <£ssi⁄> sessi⁄ id\n"), 
out
);

119 
	`Âuts
(
	`_
(" -t,Å, --ây <ây>ÅîmöÆ\n"), 
out
);

120 
	`Âuts
(
	`_
(" -u, U, --u£∏<UID>Éf„˘ivêu£∏id o∏«me\n"), 
out
);

121 
	`Âuts
(
	`_
(" -U, --U£∏<UID>Ñó»u£∏id o∏«me\n"), 
out
);

122 
	`Âuts
(
	`_
("\n"

125 "á bœnk-£∑øãdÜi°É.g. '-∞123 4567'\n"), 
out
);

127 i‡(
£˘i⁄
 =
HELP_OUT
 || se˘i⁄ =
HELP_ALL
) {

128 
	`Âuts
(
	`_
("\nOuçuàf‹m©s:\n"), 
out
);

129 
	`Âuts
(
	`_
(" -FÉxå®fuŒ\n"), 
out
);

130 
	`Âuts
(
	`_
(" -‡ fuŒ-f‹m©, in˛udög comm™dÜöes\n"), 
out
);

131 
	`Âuts
(
	`_
(" f, --f‹e°ásciò¨à¥o˚s†åì\n"), 
out
);

132 
	`Âuts
(
	`_
(" -H showÖro˚s†hõørchy\n"), 
out
);

133 
	`Âuts
(
	`_
(" -j job†f‹m©\n"), 
out
);

134 
	`Âuts
(
	`_
(" j BSD job c⁄åﬁ f‹m©\n"), 
out
);

135 
	`Âuts
(
	`_
(" -»Ü⁄g f‹m©\n"), 
out
);

136 
	`Âuts
(
	`_
("Ü BSDÜ⁄g f‹m©\n"), 
out
);

137 
	`Âuts
(
	`_
(" -M, Zádd securôy d©®(f‹ SELöux)\n"), 
out
);

138 
	`Âuts
(
	`_
(" -O <f‹m©>Öªlﬂded wôh deÁu… cﬁumns\n"), 
out
);

139 
	`Âuts
(
	`_
(" O <f‹m©>á†-O, wôh BSDÖîs⁄Æôy\n"), 
out
);

140 
	`Âuts
(
	`_
(" -o, o, --format <format>\n"

141 " u£r-deföed f‹m©\n"), 
out
);

142 
	`Âuts
(
	`_
(" s sig«»f‹m©\n"), 
out
);

143 
	`Âuts
(
	`_
(" u u£r-‹õ¡ed f‹m©\n"), 
out
);

144 
	`Âuts
(
	`_
(" v vútuÆ mem‹y f‹m©\n"), 
out
);

145 
	`Âuts
(
	`_
(" XÑegi°î f‹m©\n"), 
out
);

146 
	`Âuts
(
	`_
(" -y dÿnŸ show fœgs, showÑs†vs.ádd∏(u£d wôh -l)\n"), 
out
);

147 
	`Âuts
(
	`_
(" --c⁄ãxà di•œy securôy c⁄ãxà(f‹ SELöux)\n"), 
out
);

148 
	`Âuts
(
	`_
(" --hódî†ÑïóàhódîÜöes, o√ÖîÖage\n"), 
out
);

149 
	`Âuts
(
	`_
(" --no-hódî† dÿnŸÖröàhódîáàÆl\n"), 
out
);

150 
	`Âuts
(
	`_
(" --cols, --columns, --width <num>\n"

151 " së s¸ì¿width\n"), 
out
);

152 
	`Âuts
(
	`_
(" --rows, --lines <num>\n"

153 " së s¸ì¿height\n"), 
out
);

155 i‡(
£˘i⁄
 =
HELP_THD
 || se˘i⁄ =
HELP_ALL
) {

156 
	`Âuts
(
	`_
("\nShowÅhªads:\n"), 
out
);

157 
	`Âuts
(
	`_
(" Há†i‡they wîê¥o˚s£s\n"), 
out
);

158 
	`Âuts
(
	`_
(" -LÖossibly wôh LWPánd NLWP cﬁumns\n"), 
out
);

159 
	`Âuts
(
	`_
(" -m, má·îÖro˚s£s\n"), 
out
);

160 
	`Âuts
(
	`_
(" -TÖossibly wôh SPID cﬁumn\n"), 
out
);

162 i‡(
£˘i⁄
 =
HELP_MSC
 || se˘i⁄ =
HELP_ALL
) {

163 
	`Âuts
(
	`_
("\nMis˚Œ™eou†›ti⁄s:\n"), 
out
);

164 
	`Âuts
(
	`_
(" -¯ show schedulög cœs†wôh -»›ti⁄\n"), 
out
);

165 
	`Âuts
(
	`_
(" c showÅruêcomm™dÇame\n"), 
out
);

166 
	`Âuts
(
	`_
("É showÅhêívú⁄míàa·î comm™d\n"), 
out
);

167 
	`Âuts
(
	`_
(" k, --s‹à s≥cify s‹à‹dîás: [+|-]key[,[+|-]key[,...]]\n"), 
out
);

168 
	`Âuts
(
	`_
(" L show f‹m© s≥cifõrs\n"), 
out
);

169 
	`Âuts
(
	`_
("Ç di•œyÇumîi¯uidánd wch™\n"), 
out
);

170 
	`Âuts
(
	`_
(" S, --cumuœtivê in˛udêsomêdód chûdÖro˚s†d©a\n"), 
out
);

171 
	`Âuts
(
	`_
(" -y dÿnŸ show fœgs, showÑs†(⁄ly wôh -l)\n"), 
out
);

172 
	`Âuts
(
	`_
(" -V, V, --vîsi⁄ di•œy vîsi⁄ inf‹m©i⁄ándÉxô\n"), 
out
);

173 
	`Âuts
(
	`_
(" -w, w u∆imôed ouçuàwidth\n"), 
out
);

174 
	`Ârötf
(
out
, 
	`_
("\n"

177 , 
the_w‹d_hñp


178 , 
hñp_èb
[
HELP_SMP
].
w‹d
, hñp_èb[
HELP_LST
].word

179 , 
hñp_èb
[
HELP_OUT
].
w‹d
, hñp_èb[
HELP_THD
].word

180 , 
hñp_èb
[
HELP_MSC
].
w‹d
, hñp_èb[
HELP_ALL
].word);

182 i‡(
£˘i⁄
 =
HELP_deÁu…
) {

195 
	`Ârötf
(
out
, 
	`_
("\n"

199 , 
my«me
, 
the_w‹d_hñp


200 , 
hñp_èb
[
HELP_SMP
].
w‹d
, hñp_èb[
HELP_LST
].word

201 , 
hñp_èb
[
HELP_OUT
].
w‹d
, hñp_èb[
HELP_THD
].word

202 , 
hñp_èb
[
HELP_MSC
].
w‹d
, hñp_èb[
HELP_ALL
].word

203 , 
my«me
, 
the_w‹d_hñp


204 , 
hñp_èb
[
HELP_SMP
].
abrv
, hñp_èb[
HELP_LST
].abrv

205 , 
hñp_èb
[
HELP_OUT
].
abrv
, hñp_èb[
HELP_THD
].abrv

206 , 
hñp_èb
[
HELP_MSC
].
abrv
, hñp_èb[
HELP_ALL
].abrv);

208 
	`Ârötf
(
out
, 
	`_
("\nFor more details seeÖs(1).\n"));

209 
	`exô
(
rc
);

210 
	}
}

	@ps/output.c

48 
	~<˘y≥.h
>

49 #i‡
ENABLE_LIBSELINUX


50 
	~<dlf˙.h
>

52 
	~<f˙é.h
>

53 
	~<gΩ.h
>

54 
	~<limôs.h
>

55 
	~<pwd.h
>

56 
	~<°dio.h
>

57 
	~<°dlib.h
>

58 
	~<°rög.h
>

59 
	~<time.h
>

60 
	~<uni°d.h
>

62 
	~<sys/io˘l.h
>

63 
	~<sys/mm™.h
>

64 
	~<sys/ªsour˚.h
>

65 
	~<sys/ty≥s.h
>

67 
	~"../¥oc/ªad¥oc.h
"

68 
	~"../¥oc/sysöfo.h
"

69 
	~"../¥oc/wch™.h
"

70 
	~"../¥oc/¥o˝s.h
"

71 
	~"../¥oc/dev«me.h
"

72 
	~"../¥oc/esˇ≥.h
"

73 
	~"../¥oc/numa.h
"

75 
	~"comm⁄.h
"

76 
	~<sys/sysˇŒ.h
>

81 
	#COLWID
 240

	)

83 
	gmax_rightw¨d
 = 0x12345678;

84 
	gmax_À·w¨d
 = 0x12345678;

88 
	gwide_sig«ls
;

90 
time_t
 
	g£c⁄ds_sö˚_1970
;

91 
	g∑ge_shi·
;

97 
	$§_n›
(c⁄° 
¥oc_t
* 
a
, c⁄°Öroc_t* 
b
){

98 ()
a
;()
b
;

100 
	}
}

102 
	$§_cgroup
(c⁄° 
¥oc_t
* 
a
, c⁄°Öroc_t* 
b
)

105 i‡(*
a
->
cgroup
 =
NULL
 || *
b
->cgroup == NULL)

107  
	`°rcmp
(*
a
->
cgroup
, *
b
->cgroup);

108 
	}
}

110 
	#CMP_STR
(
NAME
) \

111 
§_
 ## 
	`NAME
(c⁄° 
¥oc_t
* 
P
, c⁄°Öroc_t* 
Q
) { \

112  
	`°rcmp
(
P
->
NAME
, 
Q
->NAME); \

113 }

	)

115 
	#CMP_INT
(
NAME
) \

116 
§_
 ## 
	`NAME
 (c⁄° 
¥oc_t
* 
P
, c⁄°Öroc_t* 
Q
) { \

117 i‡(
P
->
NAME
 < 
Q
->NAME)  -1; \

118 i‡(
P
->
NAME
 > 
Q
->NAME)  1; \

120 }

	)

126 
	#CMP_SMALL
(
NAME
) \

127 
§_
 ## 
	`NAME
 (c⁄° 
¥oc_t
* 
P
, c⁄°Öroc_t* 
Q
) { \

128  ()(
P
->
NAME
Ë- ()(
Q
->NAME); \

129 }

	)

130 
	#CMP_SMALL2
(
NAME
,
WHAT
) \

131 
§_
 ## 
	`NAME
 (c⁄° 
¥oc_t
* 
P
, c⁄°Öroc_t* 
Q
) { \

132  ()(
P
->
WHAT
Ë- ()(
Q
->WHAT); \

133 }

	)

135 
	#cook_time
(
P
Ë(P->
utime
 + P->
°ime
Ë/ 
Hîtz


	)

137 
	#cook_ëime
(
P
Ë((()
£c⁄ds_sö˚_boŸ
 >(P->
°¨t_time
 / 
Hîtz
)Ë? (()£c⁄ds_sö˚_boŸ - (P->°¨t_timê/ Hîtz)Ë: 0)

	)

139 
	#CMP_COOKED_TIME
(
NAME
) \

140 
§_
 ## 
	`NAME
 (c⁄° 
¥oc_t
* 
P
, c⁄°Öroc_t* 
Q
) { \

141 
p_time
,
q_time
; \

142 
p_time
=
cook_
 ##
	`NAME
 (
P
); \

143 
q_time
=
cook_
 ##
	`NAME
 (
Q
); \

144 i‡(
p_time
 < 
q_time
)  -1; \

145 i‡(
p_time
 > 
q_time
)  1; \

147 }

	)

149 
	#CMP_NS
(
NAME
, 
ID
) \

150 
§_
 ## 
	`NAME
 (c⁄° 
¥oc_t
* 
P
, c⁄°Öroc_t* 
Q
) { \

151 i‡(()
P
->
ns
[
ID
] < ()
Q
->ns[ID])  -1; \

152 i‡(()
P
->
ns
[
ID
] > ()
Q
->ns[ID])  1; \

154 }

	)

156 
	$CMP_INT
(
π¥io
)

157 
	$CMP_SMALL
(
sched
)

158 
	$CMP_INT
(
cutime
)

159 
	$CMP_SMALL
(
¥i‹ôy
)

160 
	$CMP_SMALL
(
∆wp
)

161 
	$CMP_SMALL
(
ni˚
)

162 
	$CMP_INT
(
rss
)

163 
	$CMP_INT
(
Æ¨m
)

164 
	$CMP_INT
(
size
)

165 
	$CMP_INT
(
ªsidít
)

166 
	$CMP_INT
(
sh¨e
)

167 
	$CMP_INT
(
ås
)

168 
	$CMP_INT
(
Ãs
)

169 
	$CMP_INT
(
drs
)

170 
	$CMP_INT
(
dt
)

172 
	$CMP_INT
(
vm_size
)

173 
	$CMP_INT
(
vm_lock
)

174 
	$CMP_INT
(
vm_rss
)

175 
	$CMP_INT
(
vm_d©a
)

176 
	$CMP_INT
(
vm_°ack
)

177 
	$CMP_INT
(
vm_exe
)

178 
	$CMP_INT
(
vm_lib
)

179 
	$CMP_INT
(
vsize
)

180 
	$CMP_INT
(
rss_æim
)

181 
	$CMP_SMALL
(
Êags
)

182 
	$CMP_INT
(
mö_Êt
)

183 
	$CMP_INT
(
maj_Êt
)

184 
	$CMP_INT
(
cmö_Êt
)

185 
	$CMP_INT
(
cmaj_Êt
)

186 
	$CMP_INT
(
utime
)

187 
	$CMP_INT
(
°ime
)

188 
	$CMP_INT
(
°¨t_code
)

189 
	$CMP_INT
(
íd_code
)

190 
	$CMP_INT
(
°¨t_°ack
)

191 
	$CMP_INT
(
k°k_e•
)

192 
	$CMP_INT
(
k°k_eù
)

193 
	$CMP_INT
(
°¨t_time
)

194 
	$CMP_INT
(
wch™
)

199 
	$CMP_STR
(
ru£r
)

200 
	$CMP_STR
(
eu£r
)

201 
	$CMP_STR
(
su£r
)

202 
	$CMP_STR
(
fu£r
)

203 
	$CMP_STR
(
rgroup
)

204 
	$CMP_STR
(
egroup
)

205 
	$CMP_STR
(
sgroup
)

206 
	$CMP_STR
(
fgroup
)

207 
	$CMP_STR
(
cmd
)

210 
	$CMP_INT
(
ruid
)

211 
	$CMP_INT
(
rgid
)

212 
	$CMP_INT
(
euid
)

213 
	$CMP_INT
(
egid
)

214 
	$CMP_INT
(
suid
)

215 
	$CMP_INT
(
sgid
)

216 
	$CMP_INT
(
fuid
)

217 
	$CMP_INT
(
fgid
)

218 
	$CMP_SMALL2
(
¥ocs
,
tgid
)

219 
	$CMP_SMALL2
(
èsks
,
tid
)

220 
	$CMP_SMALL
(
µid
)

221 
	$CMP_SMALL
(
pgΩ
)

222 
	$CMP_SMALL
(
£ssi⁄
)

223 
	$CMP_INT
(
ây
)

224 
	$CMP_SMALL
(
çgid
)

226 
	$CMP_SMALL
(
p˝u
)

228 
	$CMP_SMALL
(
°©e
)

230 
	$CMP_COOKED_TIME
(
time
)

231 
	$CMP_COOKED_TIME
(
ëime
)

233 
	`CMP_NS
(
ù˙s
, 
IPCNS
);

234 
	`CMP_NS
(
m¡ns
, 
MNTNS
);

235 
	`CMP_NS
(
√äs
, 
NETNS
);

236 
	`CMP_NS
(
pidns
, 
PIDNS
);

237 
	`CMP_NS
(
u£∫s
, 
USERNS
);

238 
	`CMP_NS
(
ut¢s
, 
UTSNS
);

240 
	$CMP_STR
(
lx˙ame
)

241 
	$CMP_STR
(
cg«me
)

244 
	$§_sw≠abÀ
(c⁄° 
¥oc_t
* 
P
, c⁄°Öroc_t* 
Q
) {

245 
p_sw≠abÀ
 = 
P
->
vm_d©a
 + P->
vm_°ack
;

246 
q_sw≠abÀ
 = 
Q
->
vm_d©a
 + Q->
vm_°ack
;

247 i‡(
p_sw≠abÀ
 < 
q_sw≠abÀ
)  -1;

248 i‡(
p_sw≠abÀ
 > 
q_sw≠abÀ
)  1;

250 
	}
}

257 
	$¥_n›
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

258 ()
µ
;

259  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%c", '-');

260 
	}
}

339 
	$f‹e°_hñ≥r
(*
ª°ri˘
 c⁄° 
outbuf
){

340 *
p
 = 
f‹e°_¥efix
;

341 *
q
 = 
outbuf
;

342 
rightw¨d
=
max_rightw¨d
;

343 if(!*
p
)  0;

345 if(
f‹e°_ty≥
 ='u'Ë
unixy
;

346 *
p
){

347 *
p
){

348 ' ': 
	`°r˝y
(
q
, " "); ;

349 'L': 
	`°r˝y
(
q
, " \\_ "); ;

350 '+': 
	`°r˝y
(
q
, " \\_ "); ;

351 '|': 
	`°r˝y
(
q
, " | "); ;

352 '\0':  
q
-
outbuf
;

354 i‡(
rightw¨d
-4 < 0) {

355 *(
q
+
rightw¨d
)='\0';

356  
max_rightw¨d
;

358 
q
 += 4;

359 
rightw¨d
 -= 4;

360 
p
++;

362  
q
-
outbuf
;

363 
unixy
:

364 *
p
){

365 *
p
){

366 ' ': 
	`°r˝y
(
q
, " "); ;

367 'L': 
	`°r˝y
(
q
, " "); ;

368 '+': 
	`°r˝y
(
q
, " "); ;

369 '|': 
	`°r˝y
(
q
, " "); ;

370 '\0':  
q
-
outbuf
;

372 i‡(
rightw¨d
-2 < 0) {

373 *(
q
+
rightw¨d
)='\0';

374  
max_rightw¨d
;

376 
q
 += 2;

377 
rightw¨d
 -= 2;

378 
p
++;

380  
q
-
outbuf
;

381 
	}
}

401 
	$¥_¨gs
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

402 *
ídp
 = 
outbuf
;

403 
rightw¨d
 = 
max_rightw¨d
;

404 
fh
 = 
	`f‹e°_hñ≥r
(
outbuf
);

406 
ídp
 +
fh
;

407 
rightw¨d
 -
fh
;

409 if(
µ
->
cmdlöe
 && !
bsd_c_›ti⁄
)

410 
ídp
 +
	`esˇ≥d_c›y
”ndp, *
µ
->
cmdlöe
, 
OUTBUF_SIZE
, &
rightw¨d
);

412 
ídp
 +
	`esˇ≥_comm™d
”ndp, 
µ
, 
OUTBUF_SIZE
, &
rightw¨d
, 
ESC_DEFUNCT
);

414 if(
bsd_e_›ti⁄
 && 
rightw¨d
>1) {

415 if(
µ
->
ívú⁄
 && *pp->environ) {

416 *
ídp
++ = ' ';

417 
rightw¨d
--;

418 
ídp
 +
	`esˇ≥_°æi°
”ndp, 
µ
->
ívú⁄
, 
OUTBUF_SIZE
, &
rightw¨d
);

421  
max_rightw¨d
-
rightw¨d
;

422 
	}
}

428 
	$¥_comm
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

429 *
ídp
 = 
outbuf
;

430 
rightw¨d
 = 
max_rightw¨d
;

431 
fh
 = 
	`f‹e°_hñ≥r
(
outbuf
);

433 
ídp
 +
fh
;

434 
rightw¨d
 -
fh
;

436 if(
µ
->
cmdlöe
 && 
unix_f_›ti⁄
)

437 
ídp
 +
	`esˇ≥d_c›y
”ndp, *
µ
->
cmdlöe
, 
OUTBUF_SIZE
, &
rightw¨d
);

439 
ídp
 +
	`esˇ≥_comm™d
”ndp, 
µ
, 
OUTBUF_SIZE
, &
rightw¨d
, 
ESC_DEFUNCT
);

441 if(
bsd_e_›ti⁄
 && 
rightw¨d
>1) {

442 if(
µ
->
ívú⁄
 && *pp->environ) {

443 *
ídp
++ = ' ';

444 
rightw¨d
--;

445 
ídp
 +
	`esˇ≥_°æi°
”ndp, 
µ
->
ívú⁄
, 
OUTBUF_SIZE
, &
rightw¨d
);

448  
max_rightw¨d
-
rightw¨d
;

449 
	}
}

451 
	$¥_cg«me
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

452 
rightw¨d
 = 
max_rightw¨d
;

454 
	`esˇ≥d_c›y
(
outbuf
, 
µ
->
cg«me
, 
OUTBUF_SIZE
, &
rightw¨d
);

455  
max_rightw¨d
-
rightw¨d
;

456 
	}
}

458 
	$¥_cgroup
(*
ª°ri˘
 c⁄° 
outbuf
,c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
) {

459 
rightw¨d
 = 
max_rightw¨d
;

461 
	`esˇ≥d_c›y
(
outbuf
, *
µ
->
cgroup
, 
OUTBUF_SIZE
, &
rightw¨d
);

462  
max_rightw¨d
-
rightw¨d
;

463 
	}
}

466 
	$¥_‚ame
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

467 *
ídp
 = 
outbuf
;

468 
rightw¨d
 = 
max_rightw¨d
;

469 
fh
 = 
	`f‹e°_hñ≥r
(
outbuf
);

471 
ídp
 +
fh
;

472 
rightw¨d
 -
fh
;

474 i‡(
rightw¨d
>8)

475 
rightw¨d
 = 8;

477 
ídp
 +
	`esˇ≥_°r
”ndp, 
µ
->
cmd
, 
OUTBUF_SIZE
, &
rightw¨d
);

479  
max_rightw¨d
-
rightw¨d
;

480 
	}
}

483 
	$¥_ëime
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

484 
t
;

485 
dd
,
hh
,
mm
,
ss
;

486 *
˝
 = 
outbuf
;

487 
t
 = 
	`cook_ëime
(
µ
);

488 
ss
 = 
t
%60;

489 
t
 /= 60;

490 
mm
 = 
t
%60;

491 
t
 /= 60;

492 
hh
 = 
t
%24;

493 
t
 /= 24;

494 
dd
 = 
t
;

495 
˝
 +=–
dd
 ? 
	`¢¥ötf
(˝, 
COLWID
, "%u-", dd) : 0 );

496 
˝
 +=–(
dd
 || 
hh
Ë? 
	`¢¥ötf
(˝, 
COLWID
, "%02u:", hh) : 0 );

497 
˝
 +
	`¢¥ötf
(˝, 
COLWID
, "%02u:%02u", 
mm
, 
ss
) ;

498  ()(
˝
-
outbuf
);

499 
	}
}

502 
	$¥_ëimes
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

503 
t
 = 
	`cook_ëime
(
µ
);

504  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%u", 
t
);

505 
	}
}

508 
	$¥_c
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

509 
tŸÆ_time
;

510 
p˝u
 = 0;

511 
£c⁄ds
;

512 
tŸÆ_time
 = 
µ
->
utime
 +Öp->
°ime
;

513 if(
ö˛ude_dód_chûdªn
Ë
tŸÆ_time
 +(
µ
->
cutime
 +Öp->
c°ime
);

514 
£c⁄ds
 = 
	`cook_ëime
(
µ
);

515 if(
£c⁄ds
Ë
p˝u
 = (
tŸÆ_time
 * 100ULL / 
Hîtz
) / seconds;

516 i‡(
p˝u
 > 99U)Öcpu = 99U;

517  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%2u", 
p˝u
);

518 
	}
}

521 
	$¥_ªÆ˝u
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

523 
n˝u
 = 
	`sysˇŒ
(335, 
µ
->
tid
);

524  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%d", 
n˝u
);

525 
	}
}

528 
	$¥_my¥io
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

530 
¥io
 = 
µ
->
¥i‹ôy
 + 100;

531  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%d", 
¥io
);

532 
	}
}

535 
	$¥_swôches
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

537 
ƒ_swôches
;

538 
ƒ_swôches
 = 
	`sysˇŒ
(332, 
µ
->
tid
);

540  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%d", 
ƒ_swôches
);

541 
	}
}

543 
	$¥_ru¬ög
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

545 
ƒ_ru¬ög
;

546 
ƒ_ru¬ög
 = 
	`sysˇŒ
(334, 
µ
->
tid
);

548  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%d", 
ƒ_ru¬ög
);

549 
	}
}

550 
	$¥_siblög
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

552 
ƒ_siblög
;

553 
ƒ_siblög
 = 
	`sysˇŒ
(333, 
µ
->
tid
);

555  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%d", 
ƒ_siblög
);

556 
	}
}

562 
	$¥_p˝u
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

563 
tŸÆ_time
;

564 
p˝u
 = 0;

565 
£c⁄ds
;

566 
tŸÆ_time
 = 
µ
->
utime
 +Öp->
°ime
;

567 if(
ö˛ude_dód_chûdªn
Ë
tŸÆ_time
 +(
µ
->
cutime
 +Öp->
c°ime
);

568 
£c⁄ds
 = 
	`cook_ëime
(
µ
);

569 if(
£c⁄ds
Ë
p˝u
 = (
tŸÆ_time
 * 1000ULL / 
Hîtz
) / seconds;

570 i‡(
p˝u
 > 999U)

571  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%u", 
p˝u
/10U);

572  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%u.%u", 
p˝u
/10U,Öcpu%10U);

573 
	}
}

575 
	$¥_˝
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

576 
tŸÆ_time
;

577 
p˝u
 = 0;

578 
£c⁄ds
;

579 
tŸÆ_time
 = 
µ
->
utime
 +Öp->
°ime
;

580 if(
ö˛ude_dód_chûdªn
Ë
tŸÆ_time
 +(
µ
->
cutime
 +Öp->
c°ime
);

581 
£c⁄ds
 = 
	`cook_ëime
(
µ
);

582 if(
£c⁄ds
Ë
p˝u
 = (
tŸÆ_time
 * 1000ULL / 
Hîtz
) / seconds;

583 i‡(
p˝u
 > 999U)Öcpu = 999U;

584  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%3u", 
p˝u
);

585 
	}
}

587 
	$¥_pgid
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

588  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%u", 
µ
->
pgΩ
);

589 
	}
}

590 
	$¥_µid
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

591  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%u", 
µ
->
µid
);

592 
	}
}

596 
	$¥_time
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

597 
t
;

598 
dd
,
hh
,
mm
,
ss
;

599 
c
;

600 
t
 = 
	`cook_time
(
µ
);

601 
ss
 = 
t
%60;

602 
t
 /= 60;

603 
mm
 = 
t
%60;

604 
t
 /= 60;

605 
hh
 = 
t
%24;

606 
t
 /= 24;

607 
dd
 = 
t
;

608 
c
 =–
dd
 ? 
	`¢¥ötf
(
outbuf
, 
COLWID
, "%u-", dd) : 0 );

609 
c
 +=–
	`¢¥ötf
(
outbuf
+c, 
COLWID
, "%02u:%02u:%02u", 
hh
, 
mm
, 
ss
) );

610  
c
;

611 
	}
}

621 
	$¥_vsz
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

622  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%lu", 
µ
->
vm_size
);

623 
	}
}

671 
	$¥_¥i‹ôy
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

672  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%ld", 
µ
->
¥i‹ôy
);

673 
	}
}

677 
	$¥_›ri
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

678  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%ld", 60 + 
µ
->
¥i‹ôy
);

679 
	}
}

683 
	$¥_¥i_foo
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

684  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%ld", 
µ
->
¥i‹ôy
 - 20);

685 
	}
}

689 
	$¥_¥i_b¨
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

690  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%ld", 
µ
->
¥i‹ôy
 + 1);

691 
	}
}

695 
	$¥_¥i_baz
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

696  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%ld", 
µ
->
¥i‹ôy
 + 100);

697 
	}
}

702 
	$¥_¥i
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

703  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%ld", 39 - 
µ
->
¥i‹ôy
);

704 
	}
}

708 
	$¥_¥i_≠i
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

709  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%ld", -1 - 
µ
->
¥i‹ôy
);

710 
	}
}

716 
	$¥_ni˚
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

717 if(
µ
->
sched
!=0 &&Öp->sched!=3 &&Öp->sched!=-1Ë 
	`¢¥ötf
(
outbuf
, 
COLWID
, "-");

718  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%ld", 
µ
->
ni˚
);

719 
	}
}

731 
	$¥_˛ass
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

732 
µ
->
sched
){

733 -1:  
	`¢¥ötf
(
outbuf
, 
COLWID
, "-");

734 0:  
	`¢¥ötf
(
outbuf
, 
COLWID
, "TS");

735 1:  
	`¢¥ötf
(
outbuf
, 
COLWID
, "FF");

736 2:  
	`¢¥ötf
(
outbuf
, 
COLWID
, "RR");

737 3:  
	`¢¥ötf
(
outbuf
, 
COLWID
, "B");

738 4:  
	`¢¥ötf
(
outbuf
, 
COLWID
, "ISO");

739 5:  
	`¢¥ötf
(
outbuf
, 
COLWID
, "IDL");

740 6:  
	`¢¥ötf
(
outbuf
, 
COLWID
, "DLN");

741 7:  
	`¢¥ötf
(
outbuf
, 
COLWID
, "#7");

742 8:  
	`¢¥ötf
(
outbuf
, 
COLWID
, "#8");

743 9:  
	`¢¥ötf
(
outbuf
, 
COLWID
, "#9");

744 :  
	`¢¥ötf
(
outbuf
, 
COLWID
, "?");

746 
	}
}

753 
	$¥_π¥io
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

754 if(
µ
->
sched
==0 ||Öp->sched==()-1Ë 
	`¢¥ötf
(
outbuf
, 
COLWID
, "-");

755  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%ld", 
µ
->
π¥io
);

756 
	}
}

757 
	$¥_sched
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

758 if(
µ
->
sched
==()-1Ë 
	`¢¥ötf
(
outbuf
, 
COLWID
, "-");

759  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%ld", 
µ
->
sched
);

760 
	}
}

764 
	$¥_wch™
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

780 c⁄° *
w
;

781 
size_t
 
Àn
;

782 if(!(
µ
->
wch™
 & 0xffffff)Ë 
	`mem˝y
(
outbuf
,"-",2),1;

783 if(
wch™_is_numbî
Ë 
	`¢¥ötf
(
outbuf
, 
COLWID
, "%x", ()(
µ
->
wch™
) & 0xffffffu);

784 
w
 = 
	`lookup_wch™
(
µ
->
XXXID
);

785 
Àn
 = 
	`°æí
(
w
);

786 if(
Àn
>
max_rightw¨d
)Üen=max_rightward;

787 
	`mem˝y
(
outbuf
, 
w
, 
Àn
);

788 
outbuf
[
Àn
] = '\0';

789  
Àn
;

790 
	}
}

792 
	$¥_w«me
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

802 c⁄° *
w
;

803 
size_t
 
Àn
;

804 if(!(
µ
->
wch™
 & 0xffffff)Ë 
	`mem˝y
(
outbuf
,"-",2),1;

805 
w
 = 
	`lookup_wch™
(
µ
->
XXXID
);

806 
Àn
 = 
	`°æí
(
w
);

807 if(
Àn
>
max_rightw¨d
)Üen=max_rightward;

808 
	`mem˝y
(
outbuf
, 
w
, 
Àn
);

809 
outbuf
[
Àn
] = '\0';

810  
Àn
;

811 
	}
}

813 
	$¥_nwch™
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

814 if(!(
µ
->
wch™
 & 0xffffff)Ë 
	`mem˝y
(
outbuf
,"-",2),1;

815  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%x", ()(
µ
->
wch™
) & 0xffffffu);

816 
	}
}

820 
	$¥_ây4
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

822  
	`dev_to_ây
(
outbuf
, 4, 
µ
->
ây
,Öp->
XXXID
, 
ABBREV_DEV
|
ABBREV_TTY
|
ABBREV_PTS
);

823 
	}
}

826 
	$¥_ây8
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

828  
	`dev_to_ây
(
outbuf
, 
COLWID
, 
µ
->
ây
,Öp->
XXXID
, 
ABBREV_DEV
);

829 
	}
}

833 
	$¥_ﬁd°©e
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

834  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%s", 
	`°©us
(
µ
));

835 
	}
}

839 
	$¥_°©
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

840 
íd
 = 0;

841 
outbuf
[
íd
++] = 
µ
->
°©e
;

843 if(
µ
->
ni˚
 < 0Ë
outbuf
[
íd
++] = '<';

844 if(
µ
->
ni˚
 > 0Ë
outbuf
[
íd
++] = 'N';

851 if(
µ
->
vm_lock
Ë
outbuf
[
íd
++] = 'L';

852 if(
µ
->
£ssi⁄
 =µ->
tgid
Ë
outbuf
[
íd
++] = 's';

853 if(
µ
->
∆wp
 > 1Ë
outbuf
[
íd
++] = 'l';

854 if(
µ
->
pgΩ
 =µ->
çgid
Ë
outbuf
[
íd
++] = '+';

855 
outbuf
[
íd
] = '\0';

856  
íd
;

857 
	}
}

860 
	$¥_s
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

861 
outbuf
[0] = 
µ
->
°©e
;

862 
outbuf
[1] = '\0';

864 
	}
}

866 
	$¥_Êag
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

869  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%o", ()(
µ
->
Êags
>>6U)&0x7U);

870 
	}
}

888 
	$¥_°ackp
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

889  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%0*lx", ()(2*()), 
µ
->
°¨t_°ack
);

890 
	}
}

892 
	$¥_e•
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

893  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%0*lx", ()(2*()), 
µ
->
k°k_e•
);

894 
	}
}

896 
	$¥_eù
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

897  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%0*lx", ()(2*()), 
µ
->
k°k_eù
);

898 
	}
}

901 
	$ﬁd_time_hñ≥r
(*
d°
, 
t
, 
ªl
) {

902 if(!
t
Ë 
	`¢¥ötf
(
d°
, 
COLWID
, " -");

903 if(
t
 =~0ULLË 
	`¢¥ötf
(
d°
, 
COLWID
, " xx");

904 if(()(
t
-=
ªl
) < 0)Å=0ULL;

905 if(
t
>9999ULLË 
	`¢¥ötf
(
d°
, 
COLWID
, "%5llu",Å/100ULL);

906  
	`¢¥ötf
(
d°
, 
COLWID
, "%2u.%02u", ()
t
/100U, ()t%100U);

907 
	}
}

909 
	$¥_bsdtime
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

910 
t
;

911 
u
;

912 
t
 = 
µ
->
utime
 +Öp->
°ime
;

913 if(
ö˛ude_dód_chûdªn
Ë
t
 +(
µ
->
cutime
 +Öp->
c°ime
);

914 
u
 = 
t
 / 
Hîtz
;

915  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%3u:%02u", 
u
/60U, u%60U);

916 
	}
}

918 
	$¥_bsd°¨t
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

919 
time_t
 
°¨t
;

920 
time_t
 
£c⁄ds_ago
;

921 
°¨t
 = 
	`gëbtime
(Ë+ 
µ
->
°¨t_time
 / 
Hîtz
;

922 
£c⁄ds_ago
 = 
£c⁄ds_sö˚_1970
 - 
°¨t
;

923 if(
£c⁄ds_ago
 < 0) seconds_ago=0;

924 if(
£c⁄ds_ago
 > 3600*24Ë
	`°r˝y
(
outbuf
, 
	`˘ime
(&
°¨t
)+4);

925 
	`°r˝y
(
outbuf
, 
	`˘ime
(&
°¨t
)+10);

926 
outbuf
[6] = '\0';

928 
	}
}

930 
	$¥_Æ¨m
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

931  
	`ﬁd_time_hñ≥r
(
outbuf
, 
µ
->
Æ¨m
, 0ULL);

932 
	}
}

935 
	$¥_sz
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

936  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%lu", (
µ
->
vm_size
)/(
∑ge_size
/1024));

937 
	}
}

956 
	$¥_dsiz
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

957 
dsiz
 = 0;

958 if(
µ
->
vsize
Ë
dsiz
 +’p->vsizê-Öp->
íd_code
 +Öp->
°¨t_code
) >> 10;

959  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%ld", 
dsiz
);

960 
	}
}

963 
	$¥_tsiz
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

964 
tsiz
 = 0;

965 if(
µ
->
vsize
Ë
tsiz
 +’p->
íd_code
 -Öp->
°¨t_code
) >> 10;

966  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%ld", 
tsiz
);

967 
	}
}

970 
	$¥_drs
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

971 
drs
 = 0;

972 if(
µ
->
vsize
Ë
drs
 +’p->vsizê-Öp->
íd_code
 +Öp->
°¨t_code
) >> 10;

973  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%ld", 
drs
);

974 
	}
}

977 
	$¥_ås
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

978 
ås
 = 0;

979 if(
µ
->
vsize
Ë
ås
 +’p->
íd_code
 -Öp->
°¨t_code
) >> 10;

980  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%ld", 
ås
);

981 
	}
}

984 
	$¥_sw≠abÀ
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

985  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%ld", 
µ
->
vm_d©a
 +Öp->
vm_°ack
);

986 
	}
}

989 
	$¥_size
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

990  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%ld", 
µ
->
size
);

991 
	}
}

994 
	$¥_möÊt
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

995 
Êt
 = 
µ
->
mö_Êt
;

996 if(
ö˛ude_dód_chûdªn
Ë
Êt
 +
µ
->
cmö_Êt
;

997  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%ld", 
Êt
);

998 
	}
}

1000 
	$¥_majÊt
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1001 
Êt
 = 
µ
->
maj_Êt
;

1002 if(
ö˛ude_dód_chûdªn
Ë
Êt
 +
µ
->
cmaj_Êt
;

1003  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%ld", 
Êt
);

1004 
	}
}

1006 
	$¥_lim
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1007 if(
µ
->
rss_æim
 =
RLIM_INFINITY
){

1008 
outbuf
[0] = 'x';

1009 
outbuf
[1] = 'x';

1010 
outbuf
[2] = '\0';

1013  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%5ld", 
µ
->
rss_æim
 >> 10);

1014 
	}
}

1017 
	$¥_p§
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1018  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%d", 
µ
->
¥o˚ss‹
);

1019 
	}
}

1021 
	$¥_numa
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1022 
fú°
 = 1;

1023 i‡(
fú°
Ë{ 
	`numa_öô
(); first = 0; }

1024  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%d", 
	`numa_node_of_˝u
(
µ
->
¥o˚ss‹
));

1025 
	}
}

1027 
	$¥_rss
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1028  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%lu", 
µ
->
vm_rss
);

1029 
	}
}

1032 
	$¥_pmem
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1033 
pmem
 = 0;

1034 
pmem
 = 
µ
->
vm_rss
 * 1000ULL / 
kb_maö_tŸÆ
;

1035 i‡(
pmem
 > 999)Ömem = 999;

1036  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%2u.%u", ()(
pmem
/10), ()(pmem%10));

1037 
	}
}

1039 
	$¥_l°¨t
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1040 
time_t
 
t
;

1041 
t
 = 
	`gëbtime
(Ë+ 
µ
->
°¨t_time
 / 
Hîtz
;

1042  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%24.24s", 
	`˘ime
(&
t
));

1043 
	}
}

1054 
	$¥_°ime
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1055 
tm
 *
¥oc_time
;

1056 
tm
 *
our_time
;

1057 
time_t
 
t
;

1058 c⁄° *
fmt
;

1059 
tm_yór
;

1060 
tm_yday
;

1061 
our_time
 = 
	`loˇ…ime
(&
£c⁄ds_sö˚_1970
);

1062 
tm_yór
 = 
our_time
->tm_year;

1063 
tm_yday
 = 
our_time
->tm_yday;

1064 
t
 = 
	`gëbtime
(Ë+ 
µ
->
°¨t_time
 / 
Hîtz
;

1065 
¥oc_time
 = 
	`loˇ…ime
(&
t
);

1066 
fmt
 = "%H:%M";

1067 if(
tm_yday
 !
¥oc_time
->tm_ydayË
fmt
 = "%b%d";

1068 if(
tm_yór
 !
¥oc_time
->tm_yórË
fmt
 = "%Y";

1069  
	`°r·ime
(
outbuf
, 42, 
fmt
, 
¥oc_time
);

1070 
	}
}

1072 
	$¥_°¨t
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1073 
time_t
 
t
;

1074 *
°r
;

1075 
t
 = 
	`gëbtime
(Ë+ 
µ
->
°¨t_time
 / 
Hîtz
;

1076 
°r
 = 
	`˘ime
(&
t
);

1077 if(
°r
[8]==' ') str[8]='0';

1078 if(
°r
[11]==' ') str[11]='0';

1079 if(()
t
+60*60*24 > ()
£c⁄ds_sö˚_1970
)

1080  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%8.8s", 
°r
+11);

1081  
	`¢¥ötf
(
outbuf
, 
COLWID
, " %6.6s", 
°r
+4);

1082 
	}
}

1085 #ifde‡
SIGNAL_STRING


1086 
	$hñp_¥_sig
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° *ª°ri˘ c⁄° 
sig
){

1087 
Àn
 = 0;

1088 
Àn
 = 
	`°æí
(
sig
);

1089 if(
wide_sig«ls
){

1090 if(
Àn
>8Ë 
	`¢¥ötf
(
outbuf
, 
COLWID
, "%s", 
sig
);

1091  
	`¢¥ötf
(
outbuf
, 
COLWID
, "00000000%s", 
sig
);

1093 if(
Àn
-
	`°r•n
(
sig
,"0") > 8)

1094  
	`¢¥ötf
(
outbuf
, 
COLWID
, "<%s", 
sig
+
Àn
-8);

1095  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%s", 
sig
+
Àn
-8);

1096 
	}
}

1098 
	$hñp_¥_sig
(
sig
){

1099 if(
wide_sig«ls
Ë 
	`¢¥ötf
(
outbuf
, 
COLWID
, "%016Lx", 
sig
);

1100 if(
sig
>>32Ë 
	`¢¥ötf
(
outbuf
, 
COLWID
, "<%08Lx", sig&0xffffffffLL);

1101  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%08Lx", 
sig
&0xffffffffLL);

1102 
	}
}

1106 
	$¥_tsig
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1107  
	`hñp_¥_sig
(
outbuf
, 
µ
->
_sig≤d
);

1108 
	}
}

1111 
	$¥_sig
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1112  
	`hñp_¥_sig
(
outbuf
, 
µ
->
sig«l
);

1113 
	}
}

1114 
	$¥_sigmask
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1115  
	`hñp_¥_sig
(
outbuf
, 
µ
->
blocked
);

1116 
	}
}

1117 
	$¥_sigign‹e
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1118  
	`hñp_¥_sig
(
outbuf
, 
µ
->
sigign‹e
);

1119 
	}
}

1120 
	$¥_sigˇtch
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1121  
	`hñp_¥_sig
(
outbuf
, 
µ
->
sigˇtch
);

1122 
	}
}

1133 
	$¥_egid
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1134  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%d", 
µ
->
egid
);

1135 
	}
}

1136 
	$¥_rgid
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1137  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%d", 
µ
->
rgid
);

1138 
	}
}

1139 
	$¥_sgid
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1140  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%d", 
µ
->
sgid
);

1141 
	}
}

1142 
	$¥_fgid
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1143  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%d", 
µ
->
fgid
);

1144 
	}
}

1146 
	$¥_euid
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1147  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%d", 
µ
->
euid
);

1148 
	}
}

1149 
	$¥_ruid
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1150  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%d", 
µ
->
ruid
);

1151 
	}
}

1152 
	$¥_suid
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1153  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%d", 
µ
->
suid
);

1154 
	}
}

1155 
	$¥_fuid
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1156  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%d", 
µ
->
fuid
);

1157 
	}
}

1170 
	$do_¥_«me
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° *ª°ri˘ c⁄° 
«me
, 
u
){

1171 if(!
u£r_is_numbî
){

1172 
rightw¨d
 = 
OUTBUF_SIZE
;

1173 
Àn
;

1175 
	`esˇ≥_°r
(
outbuf
, 
«me
, 
OUTBUF_SIZE
, &
rightw¨d
);

1176 
Àn
 = 
OUTBUF_SIZE
-
rightw¨d
;

1178 if(
Àn
 <()
max_rightw¨d
)

1179  
Àn
;

1181 
Àn
 = 
max_rightw¨d
-1;

1182 
outbuf
[
Àn
++] = '+';

1183 
outbuf
[
Àn
] = 0;

1184  
Àn
;

1186  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%u", 
u
);

1187 
	}
}

1189 
	$¥_ru£r
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1190  
	`do_¥_«me
(
outbuf
, 
µ
->
ru£r
,Öp->
ruid
);

1191 
	}
}

1192 
	$¥_eu£r
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1193  
	`do_¥_«me
(
outbuf
, 
µ
->
eu£r
,Öp->
euid
);

1194 
	}
}

1195 
	$¥_fu£r
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1196  
	`do_¥_«me
(
outbuf
, 
µ
->
fu£r
,Öp->
fuid
);

1197 
	}
}

1198 
	$¥_su£r
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1199  
	`do_¥_«me
(
outbuf
, 
µ
->
su£r
,Öp->
suid
);

1200 
	}
}

1201 
	$¥_egroup
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1202  
	`do_¥_«me
(
outbuf
, 
µ
->
egroup
,Öp->
egid
);

1203 
	}
}

1204 
	$¥_rgroup
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1205  
	`do_¥_«me
(
outbuf
, 
µ
->
rgroup
,Öp->
rgid
);

1206 
	}
}

1207 
	$¥_fgroup
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1208  
	`do_¥_«me
(
outbuf
, 
µ
->
fgroup
,Öp->
fgid
);

1209 
	}
}

1210 
	$¥_sgroup
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1211  
	`do_¥_«me
(
outbuf
, 
µ
->
sgroup
,Öp->
sgid
);

1212 
	}
}

1217 
	$¥_¥ocs
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1218  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%u", 
µ
->
tgid
);

1219 
	}
}

1221 
	$¥_èsks
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1222  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%u", 
µ
->
tid
);

1223 
	}
}

1225 
	$¥_∆wp
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1226  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%d", 
µ
->
∆wp
);

1227 
	}
}

1229 
	$¥_£ss
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1230  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%u", 
µ
->
£ssi⁄
);

1231 
	}
}

1233 
	$¥_supgid
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1234 
rightw¨d
 = 
max_rightw¨d
;

1235 
	`esˇ≥d_c›y
(
outbuf
, 
µ
->
supgid
, 
OUTBUF_SIZE
, &
rightw¨d
);

1236  
max_rightw¨d
-
rightw¨d
;

1237 
	}
}

1239 
	$¥_supgΩ
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1240 
rightw¨d
 = 
max_rightw¨d
;

1241 
	`esˇ≥d_c›y
(
outbuf
, 
µ
->
supgΩ
, 
OUTBUF_SIZE
, &
rightw¨d
);

1242  
max_rightw¨d
-
rightw¨d
;

1243 
	}
}

1245 
	$¥_çgid
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1246  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%d", 
µ
->
çgid
);

1247 
	}
}

1250 
	$¥_sgi_p
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1251 if(
µ
->
°©e
 ='R'Ë 
	`¢¥ötf
(
outbuf
, 
COLWID
, "%d",Öp->
¥o˚ss‹
);

1252  
	`¢¥ötf
(
outbuf
, 
COLWID
, "*");

1253 
	}
}

1256 
	$¥_sd_unô
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1257  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%s", 
µ
->
sd_unô
);

1258 
	}
}

1260 
	$¥_sd_£ssi⁄
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1261  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%s", 
µ
->
sd_£ss
);

1262 
	}
}

1264 
	$¥_sd_ouid
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1265  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%s", 
µ
->
sd_ouid
);

1266 
	}
}

1268 
	$¥_sd_machöe
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1269  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%s", 
µ
->
sd_mach
);

1270 
	}
}

1272 
	$¥_sd_uunô
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1273  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%s", 
µ
->
sd_uunô
);

1274 
	}
}

1276 
	$¥_sd_£©
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1277  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%s", 
µ
->
sd_£©
);

1278 
	}
}

1280 
	$¥_sd_¶i˚
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1281  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%s", 
µ
->
sd_¶i˚
);

1282 
	}
}

1285 
	#_¥_ns
(
NAME
, 
ID
)\

1286 
¥_
##
	`NAME
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
) {\

1287 i‡(
µ
->
ns
[
ID
])\

1288  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%lu", ()
µ
->
ns
[
ID
]);\

1290  
	`¢¥ötf
(
outbuf
, 
COLWID
, "-");\

1291 }

	)

1292 
_¥_ns
(
ù˙s
, 
IPCNS
);

1293 
_¥_ns
(
m¡ns
, 
MNTNS
);

1294 
_¥_ns
(
√äs
, 
NETNS
);

1295 
_¥_ns
(
pidns
, 
PIDNS
);

1296 
_¥_ns
(
u£∫s
, 
USERNS
);

1297 
_¥_ns
(
ut¢s
, 
UTSNS
);

1300 
	$¥_lx˙ame
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1301  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%s", 
µ
->
lx˙ame
);

1302 
	}
}

1311 
	$¥_c⁄ãxt
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1312 (*
ps_‰ìc⁄
)(*) = 0;

1313 (*
ps_gëpidc⁄
)(
pid_t
 
pid
, **
c⁄ãxt
) = 0;

1314 
£löux_íabÀd
 = 0;;

1315 
size_t
 
Àn
;

1316 *
c⁄ãxt
;

1318 #i‡
ENABLE_LIBSELINUX


1319 (*
ps_is_£löux_íabÀd
)() = 0;

1320 
åõd_lﬂd
 = 0;

1322 if(!
ps_gëpidc⁄
 && !
åõd_lﬂd
){

1323 *
h™dÀ
 = 
	`dl›í
("lib£löux.so.1", 
RTLD_NOW
);

1324 if(
h™dÀ
){

1325 
ps_‰ìc⁄
 = 
	`dlsym
(
h™dÀ
, "freecon");

1326 if(
	`dÀº‹
())

1327 
ps_‰ìc⁄
 = 0;

1328 
	`dÀº‹
();

1329 
ps_gëpidc⁄
 = 
	`dlsym
(
h™dÀ
, "getpidcon");

1330 if(
	`dÀº‹
())

1331 
ps_gëpidc⁄
 = 0;

1332 
ps_is_£löux_íabÀd
 = 
	`dlsym
(
h™dÀ
, "is_selinux_enabled");

1333 if(
	`dÀº‹
())

1334 
ps_is_£löux_íabÀd
 = 0;

1336 
£löux_íabÀd
 = 
	`ps_is_£löux_íabÀd
();

1338 
åõd_lﬂd
++;

1341 if(
ps_gëpidc⁄
 && 
£löux_íabÀd
 && !
	`ps_gëpidc⁄
(
µ
->
tgid
, &
c⁄ãxt
)){

1342 
size_t
 
max_Àn
 = 
OUTBUF_SIZE
-1;

1343 
Àn
 = 
	`°æí
(
c⁄ãxt
);

1344 if(
Àn
 > 
max_Àn
)Üen = max_len;

1345 
	`mem˝y
(
outbuf
, 
c⁄ãxt
, 
Àn
);

1346 i‡(
outbuf
[
Àn
-1] == '\n') --len;

1347 
outbuf
[
Àn
] = '\0';

1348 
	`ps_‰ìc⁄
(
c⁄ãxt
);

1350 
fûíame
[48];

1351 
ssize_t
 
num_ªad
;

1352 
fd
;

1356 
	`¢¥ötf
(
fûíame
,  fûíame, "/¥oc/%d/©å/cuºít", 
µ
->
tgid
);

1358 i‡((
fd
 = 
	`›í
(
fûíame
, 
O_RDONLY
, 0)) != -1) {

1359 
num_ªad
 = 
	`ªad
(
fd
, 
outbuf
, 
OUTBUF_SIZE
-1);

1360 
	`˛o£
(
fd
);

1361 i‡(
num_ªad
 > 0) {

1362 
outbuf
[
num_ªad
] = '\0';

1363 
Àn
 = 0;

1364 
	`i•röt
(
outbuf
[
Àn
]))

1365 
Àn
++;

1366 
outbuf
[
Àn
] = '\0';

1367 if(
Àn
)

1368  
Àn
;

1371 
outbuf
[0] = '-';

1372 
outbuf
[1] = '\0';

1373 
Àn
 = 1;

1375  
Àn
;

1376 
	}
}

1381 
	$¥_t_u∆imôed
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1382 c⁄° *c⁄° 
vÆs
[] = {"[123456789-12345] <defunct>","ps","123456789-123456"};

1383 ()
µ
;

1384 
	`¢¥ötf
(
outbuf
, 
max_rightw¨d
+1, "%s", 
vÆs
[
löes_to_√xt_hódî
%3u]);

1385  
	`°æí
(
outbuf
);

1386 
	}
}

1387 
	$¥_t_u∆imôed2
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1388 c⁄° *c⁄° 
vÆs
[] = {"unlimited", "[123456789-12345] <defunct>","ps","123456789-123456"};

1389 ()
µ
;

1390 
	`¢¥ötf
(
outbuf
, 
max_rightw¨d
+1, "%s", 
vÆs
[
löes_to_√xt_hódî
%4u]);

1391  
	`°æí
(
outbuf
);

1392 
	}
}

1395 
	$¥_t_right
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1396 c⁄° *c⁄° 
vÆs
[] = {"999-23:59:59","99-23:59:59","9-23:59:59","59:59"};

1397 ()
µ
;

1398  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%s", 
vÆs
[
löes_to_√xt_hódî
%4u]);

1399 
	}
}

1400 
	$¥_t_right2
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1401 c⁄° *c⁄° 
vÆs
[] = {"999-23:59:59","99-23:59:59","9-23:59:59"};

1402 ()
µ
;

1403  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%s", 
vÆs
[
löes_to_√xt_hódî
%3u]);

1404 
	}
}

1407 
	$¥_t_À·
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1408 c⁄° *c⁄° 
vÆs
[] = {"tty7","pts/9999","iseries/vtty42","ttySMX0","3270/tty4"};

1409 ()
µ
;

1410  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%s", 
vÆs
[
löes_to_√xt_hódî
%5u]);

1411 
	}
}

1412 
	$¥_t_À·2
(*
ª°ri˘
 c⁄° 
outbuf
, c⁄° 
¥oc_t
 *ª°ri˘ c⁄° 
µ
){

1413 c⁄° *c⁄° 
vÆs
[] = {"tty7","pts/9999","ttySMX0","3270/tty4"};

1414 ()
µ
;

1415  
	`¢¥ötf
(
outbuf
, 
COLWID
, "%s", 
vÆs
[
löes_to_√xt_hódî
%4u]);

1416 
	}
}

1445 
	#USER
 
CF_USER


1446 
	#LEFT
 
CF_LEFT


	)

1447 
	#RIGHT
 
CF_RIGHT


	)

1448 
	#UNLIMITED
 
CF_UNLIMITED


	)

1449 
	#WCHAN
 
CF_WCHAN


1450 
	#SIGNAL
 
CF_SIGNAL


1451 
	#PIDMAX
 
CF_PIDMAX


	)

1452 
	#TO
 
CF_PRINT_THREAD_ONLY


	)

1453 
	#PO
 
CF_PRINT_PROCESS_ONLY


	)

1454 
	#ET
 
CF_PRINT_EVERY_TIME


	)

1455 
	#AN
 
CF_PRINT_AS_NEEDED


1456 

	)

1458 
	#MEM
 
PROC_FILLMEM


	)

1459 
	#ARG
 
PROC_FILLARG


	)

1460 
	#COM
 
PROC_FILLCOM


	)

1461 
	#ENV
 
PROC_FILLENV


	)

1462 
	#USR
 
PROC_FILLUSR


	)

1463 
	#GRP
 
PROC_FILLGRP


	)

1464 
	#NS
 
PROC_FILLNS


	)

1465 
	#LXC
 
PROC_FILL_LXC


	)

1466 
	#SD
 
PROC_FILLSYSTEMD


	)

1467 
	#SGRP
 
PROC_FILLSTATUS
 | 
PROC_FILLSUPGRP


	)

1468 
	#CGRP
 
PROC_FILLCGROUP
 | 
PROC_EDITCGRPCVT


	)

1476 
	#LNx
 
LNX


	)

1481 c⁄° 
f‹m©_°ru˘
 
	gf‹m©_¨øy
[] = {

1483 {"%˝u", "%CPU", 
¥_p˝u
, 
§_p˝u
, 4, 0, 
BSD
, 
ET
|
RIGHT
},

1484 {"%mem", "%MEM", 
¥_pmem
, 
§_rss
, 4, 0, 
BSD
, 
PO
|
RIGHT
},

1485 {"_À·", "LLLLLLLL", 
¥_t_À·
, 
§_n›
, 8, 0, 
TST
, 
ET
|
LEFT
},

1486 {"_À·2", "L2L2L2L2", 
¥_t_À·2
, 
§_n›
, 8, 0, 
TST
, 
ET
|
LEFT
},

1487 {"_right", "RRRRRRRRRRR", 
¥_t_right
, 
§_n›
, 11, 0, 
TST
, 
ET
|
RIGHT
},

1488 {"_right2", "R2R2R2R2R2R", 
¥_t_right2
, 
§_n›
, 11, 0, 
TST
, 
ET
|
RIGHT
},

1489 {"_u∆imôed","U", 
¥_t_u∆imôed
, 
§_n›
, 16, 0, 
TST
, 
ET
|
UNLIMITED
},

1490 {"_u∆imôed2","U2", 
¥_t_u∆imôed2
, 
§_n›
, 16, 0, 
TST
, 
ET
|
UNLIMITED
},

1491 {"acÊag", "ACFLG", 
¥_n›
, 
§_n›
, 5, 0, 
XXX
, 
AN
|
RIGHT
},

1492 {"acÊg", "ACFLG", 
¥_n›
, 
§_n›
, 5, 0, 
BSD
, 
AN
|
RIGHT
},

1493 {"addr", "ADDR", 
¥_n›
, 
§_n›
, 4, 0, 
XXX
, 
AN
|
RIGHT
},

1494 {"addr_1", "ADDR", 
¥_n›
, 
§_n›
, 1, 0, 
LNX
, 
AN
|
LEFT
},

1495 {"Æ¨m", "ALARM", 
¥_Æ¨m
, 
§_Æ¨m
, 5, 0, 
LNX
, 
AN
|
RIGHT
},

1496 {"¨gc", "ARGC", 
¥_n›
, 
§_n›
, 4, 0, 
LNX
, 
PO
|
RIGHT
},

1497 {"¨gs", "COMMAND", 
¥_¨gs
, 
§_cmd
, 27, 
ARG
, 
U98
, 
PO
|
UNLIMITED
},

1498 {"©ime", "TIME", 
¥_time
, 
§_time
, 8, 0, 
SOE
, 
ET
|
RIGHT
},

1499 {"blocked", "BLOCKED", 
¥_sigmask
, 
§_n›
, 9, 0, 
BSD
, 
TO
|
SIGNAL
},

1500 {"bnd", "BND", 
¥_n›
, 
§_n›
, 1, 0, 
AIX
, 
TO
|
RIGHT
},

1501 {"bsd°¨t", "START", 
¥_bsd°¨t
, 
§_n›
, 6, 0, 
LNX
, 
ET
|
RIGHT
},

1502 {"bsdtime", "TIME", 
¥_bsdtime
, 
§_n›
, 6, 0, 
LNX
, 
ET
|
RIGHT
},

1503 {"c", "C", 
¥_c
, 
§_p˝u
, 2, 0, 
SUN
, 
ET
|
RIGHT
},

1504 {"ˇught", "CAUGHT", 
¥_sigˇtch
, 
§_n›
, 9, 0, 
BSD
, 
TO
|
SIGNAL
},

1505 {"cg«me", "CGNAME", 
¥_cg«me
, 
§_cg«me
, 27,
CGRP
, 
LNX
, 
PO
|
UNLIMITED
},

1506 {"cgroup", "CGROUP", 
¥_cgroup
, 
§_cgroup
, 27,
CGRP
, 
LNX
, 
PO
|
UNLIMITED
},

1507 {"˛ass", "CLS", 
¥_˛ass
, 
§_sched
, 3, 0, 
XXX
, 
TO
|
LEFT
},

1508 {"˛s", "CLS", 
¥_˛ass
, 
§_sched
, 3, 0, 
HPU
, 
TO
|
RIGHT
},

1509 {"cmaj_Êt", "-", 
¥_n›
, 
§_cmaj_Êt
, 1, 0, 
LNX
, 
AN
|
RIGHT
},

1510 {"cmd", "CMD", 
¥_¨gs
, 
§_cmd
, 27, 
ARG
, 
DEC
, 
PO
|
UNLIMITED
},

1511 {"cmö_Êt", "-", 
¥_n›
, 
§_cmö_Êt
, 1, 0, 
LNX
, 
AN
|
RIGHT
},

1512 {"˙sw≠", "-", 
¥_n›
, 
§_n›
, 1, 0, 
LNX
, 
AN
|
RIGHT
},

1513 {"comm", "COMMAND", 
¥_comm
, 
§_cmd
, 15, 
COM
, 
U98
, 
PO
|
UNLIMITED
},

1514 {"comm™d", "COMMAND", 
¥_¨gs
, 
§_cmd
, 27, 
ARG
, 
XXX
, 
PO
|
UNLIMITED
},

1515 {"c⁄ãxt", "CONTEXT", 
¥_c⁄ãxt
, 
§_n›
, 31, 0, 
LNX
, 
ET
|
LEFT
},

1516 {"˝", "CP", 
¥_˝
, 
§_p˝u
, 3, 0, 
DEC
, 
ET
|
RIGHT
},

1517 {"˝u", "CPU", 
¥_n›
, 
§_n›
, 3, 0, 
BSD
, 
AN
|
RIGHT
},

1518 {"˝uid", "CPUID", 
¥_p§
, 
§_n›
, 5, 0, 
BSD
, 
TO
|
RIGHT
},

1519 {"˝utime", "TIME", 
¥_time
, 
§_time
, 8, 0, 
DEC
, 
ET
|
RIGHT
},

1520 {"˘id", "CTID", 
¥_n›
, 
§_n›
, 5, 0, 
SUN
, 
ET
|
RIGHT
},

1521 {"cursig", "CURSIG", 
¥_n›
, 
§_n›
, 6, 0, 
DEC
, 
AN
|
RIGHT
},

1522 {"cutime", "-", 
¥_n›
, 
§_cutime
, 1, 0, 
LNX
, 
AN
|
RIGHT
},

1523 {"cwd", "CWD", 
¥_n›
, 
§_n›
, 3, 0, 
LNX
, 
AN
|
LEFT
},

1524 {"drs", "DRS", 
¥_drs
, 
§_drs
, 5, 
MEM
, 
LNX
, 
PO
|
RIGHT
},

1525 {"dsiz", "DSIZ", 
¥_dsiz
, 
§_n›
, 4, 0, 
LNX
, 
PO
|
RIGHT
},

1526 {"egid", "EGID", 
¥_egid
, 
§_egid
, 5, 0, 
LNX
, 
ET
|
RIGHT
},

1527 {"egroup", "EGROUP", 
¥_egroup
, 
§_egroup
, 8, 
GRP
, 
LNX
, 
ET
|
USER
},

1528 {"eù", "EIP", 
¥_eù
, 
§_k°k_eù
, ()(2*()), 0, 
LNX
, 
TO
|
RIGHT
},

1529 {"emul", "EMUL", 
¥_n›
, 
§_n›
, 13, 0, 
BSD
, 
PO
|
LEFT
},

1530 {"íd_code", "E_CODE", 
¥_n›
, 
§_íd_code
, ()(2*()), 0, 
LNx
, 
PO
|
RIGHT
},

1531 {"ívú⁄","ENVIRONMENT",
¥_n›
, 
§_n›
, 11, 
ENV
, 
LNx
, 
PO
|
UNLIMITED
},

1532 {"e•", "ESP", 
¥_e•
, 
§_k°k_e•
, ()(2*()), 0, 
LNX
, 
TO
|
RIGHT
},

1533 {"ëime", "ELAPSED", 
¥_ëime
, 
§_ëime
, 11, 0, 
U98
, 
ET
|
RIGHT
},

1534 {"ëimes", "ELAPSED", 
¥_ëimes
, 
§_ëime
, 7, 0, 
BSD
, 
ET
|
RIGHT
},

1535 {"euid", "EUID", 
¥_euid
, 
§_euid
, 5, 0, 
LNX
, 
ET
|
RIGHT
},

1536 {"eu£r", "EUSER", 
¥_eu£r
, 
§_eu£r
, 8, 
USR
, 
LNX
, 
ET
|
USER
},

1537 {"f", "F", 
¥_Êag
, 
§_Êags
, 1, 0, 
XXX
, 
ET
|
RIGHT
},

1538 {"fgid", "FGID", 
¥_fgid
, 
§_fgid
, 5, 0, 
LNX
, 
ET
|
RIGHT
},

1539 {"fgroup", "FGROUP", 
¥_fgroup
, 
§_fgroup
, 8, 
GRP
, 
LNX
, 
ET
|
USER
},

1540 {"Êag", "F", 
¥_Êag
, 
§_Êags
, 1, 0, 
DEC
, 
ET
|
RIGHT
},

1541 {"Êags", "F", 
¥_Êag
, 
§_Êags
, 1, 0, 
BSD
, 
ET
|
RIGHT
},

1542 {"‚ame", "COMMAND", 
¥_‚ame
, 
§_n›
, 8, 0, 
SUN
, 
PO
|
LEFT
},

1543 {"fsgid", "FSGID", 
¥_fgid
, 
§_fgid
, 5, 0, 
LNX
, 
ET
|
RIGHT
},

1544 {"fsgroup", "FSGROUP", 
¥_fgroup
, 
§_fgroup
, 8, 
GRP
, 
LNX
, 
ET
|
USER
},

1545 {"fsuid", "FSUID", 
¥_fuid
, 
§_fuid
, 5, 0, 
LNX
, 
ET
|
RIGHT
},

1546 {"fsu£r", "FSUSER", 
¥_fu£r
, 
§_fu£r
, 8, 
USR
, 
LNX
, 
ET
|
USER
},

1547 {"fuid", "FUID", 
¥_fuid
, 
§_fuid
, 5, 0, 
LNX
, 
ET
|
RIGHT
},

1548 {"fu£r", "FUSER", 
¥_fu£r
, 
§_fu£r
, 8, 
USR
, 
LNX
, 
ET
|
USER
},

1549 {"gid", "GID", 
¥_egid
, 
§_egid
, 5, 0, 
SUN
, 
ET
|
RIGHT
},

1550 {"group", "GROUP", 
¥_egroup
, 
§_egroup
, 8, 
GRP
, 
U98
, 
ET
|
USER
},

1551 {"ign‹ed", "IGNORED", 
¥_sigign‹e
,
§_n›
, 9, 0, 
BSD
, 
TO
|
SIGNAL
},

1552 {"öblk", "INBLK", 
¥_n›
, 
§_n›
, 5, 0, 
BSD
, 
AN
|
RIGHT
},

1553 {"öblock", "INBLK", 
¥_n›
, 
§_n›
, 5, 0, 
DEC
, 
AN
|
RIGHT
},

1554 {"öçri", "PRI", 
¥_›ri
, 
§_¥i‹ôy
, 3, 0, 
HPU
, 
TO
|
RIGHT
},

1555 {"ù˙s", "IPCNS", 
¥_ù˙s
, 
§_ù˙s
, 10, 
NS
, 
LNX
, 
ET
|
RIGHT
},

1556 {"jid", "JID", 
¥_n›
, 
§_n›
, 1, 0, 
SGI
, 
PO
|
RIGHT
},

1557 {"jobc", "JOBC", 
¥_n›
, 
§_n›
, 4, 0, 
XXX
, 
AN
|
RIGHT
},

1558 {"kåa˚", "KTRACE", 
¥_n›
, 
§_n›
, 8, 0, 
BSD
, 
AN
|
RIGHT
},

1559 {"kåa˚p", "KTRACEP", 
¥_n›
, 
§_n›
, 8, 0, 
BSD
, 
AN
|
RIGHT
},

1560 {"œbñ", "LABEL", 
¥_c⁄ãxt
, 
§_n›
, 31, 0, 
SGI
, 
ET
|
LEFT
},

1561 {"œ°˝u", "C", 
¥_p§
, 
§_n›
, 3, 0, 
BSD
, 
TO
|
RIGHT
},

1562 {"lim", "LIM", 
¥_lim
, 
§_rss_æim
, 5, 0, 
BSD
, 
AN
|
RIGHT
},

1563 {"logö", "LOGNAME", 
¥_n›
, 
§_n›
, 8, 0, 
BSD
, 
AN
|
LEFT
},

1564 {"log«me", "LOGNAME", 
¥_n›
, 
§_n›
, 8, 0, 
XXX
, 
AN
|
LEFT
},

1565 {"l⁄gäame", "TTY", 
¥_ây8
, 
§_ây
, 8, 0, 
DEC
, 
PO
|
LEFT
},

1566 {"l£ssi⁄", "SESSION", 
¥_sd_£ssi⁄
, 
§_n›
, 11, 
SD
, 
LNX
, 
ET
|
LEFT
},

1567 {"l°¨t", "STARTED", 
¥_l°¨t
, 
§_n›
, 24, 0, 
XXX
, 
ET
|
RIGHT
},

1568 {"luid", "LUID", 
¥_n›
, 
§_n›
, 5, 0, 
LNX
, 
ET
|
RIGHT
},

1569 {"lu£r", "LUSER", 
¥_n›
, 
§_n›
, 8, 
USR
, 
LNX
, 
ET
|
USER
},

1570 {"lwp", "LWP", 
¥_èsks
, 
§_èsks
, 5, 0, 
SUN
, 
TO
|
PIDMAX
|
RIGHT
},

1571 {"lxc", "LXC", 
¥_lx˙ame
, 
§_lx˙ame
, 8, 
LXC
, 
LNX
, 
ET
|
LEFT
},

1572 {"m_drs", "DRS", 
¥_drs
, 
§_drs
, 5, 
MEM
, 
LNx
, 
PO
|
RIGHT
},

1573 {"m_dt", "DT", 
¥_n›
, 
§_dt
, 4, 
MEM
, 
LNx
, 
PO
|
RIGHT
},

1574 {"m_Ãs", "LRS", 
¥_n›
, 
§_Ãs
, 5, 
MEM
, 
LNx
, 
PO
|
RIGHT
},

1575 {"m_ªsidít", "RES", 
¥_n›
, 
§_ªsidít
, 5,
MEM
, 
LNx
, 
PO
|
RIGHT
},

1576 {"m_sh¨e", "SHRD", 
¥_n›
, 
§_sh¨e
, 5, 
MEM
, 
LNx
, 
PO
|
RIGHT
},

1577 {"m_size", "SIZE", 
¥_size
, 
§_size
, 5, 
MEM
, 
LNX
, 
PO
|
RIGHT
},

1578 {"m_sw≠", "SWAP", 
¥_n›
, 
§_n›
, 5, 0, 
LNx
, 
PO
|
RIGHT
},

1579 {"m_ås", "TRS", 
¥_ås
, 
§_ås
, 5, 
MEM
, 
LNx
, 
PO
|
RIGHT
},

1580 {"machöe", "MACHINE", 
¥_sd_machöe
, 
§_n›
, 31, 
SD
, 
LNX
, 
ET
|
LEFT
},

1581 {"maj_Êt", "MAJFL", 
¥_majÊt
, 
§_maj_Êt
, 6, 0, 
LNX
, 
AN
|
RIGHT
},

1582 {"majÊt", "MAJFLT", 
¥_majÊt
, 
§_maj_Êt
, 6, 0, 
XXX
, 
AN
|
RIGHT
},

1583 {"mö_Êt", "MINFL", 
¥_möÊt
, 
§_mö_Êt
, 6, 0, 
LNX
, 
AN
|
RIGHT
},

1584 {"möÊt", "MINFLT", 
¥_möÊt
, 
§_mö_Êt
, 6, 0, 
XXX
, 
AN
|
RIGHT
},

1585 {"m¡ns", "MNTNS", 
¥_m¡ns
, 
§_m¡ns
, 10, 
NS
, 
LNX
, 
ET
|
RIGHT
},

1586 {"msgrcv", "MSGRCV", 
¥_n›
, 
§_n›
, 6, 0, 
XXX
, 
AN
|
RIGHT
},

1587 {"msg¢d", "MSGSND", 
¥_n›
, 
§_n›
, 6, 0, 
XXX
, 
AN
|
RIGHT
},

1588 {"mwch™", "MWCHAN", 
¥_n›
, 
§_n›
, 6, 0, 
BSD
, 
TO
|
WCHAN
},

1589 {"my_¥io", "PRI", 
¥_my¥io
, 
§_n›
, 8, 0, 
XXX
, 
TO
|
WCHAN
},

1590 {"√äs", "NETNS", 
¥_√äs
, 
§_√äs
, 10, 
NS
, 
LNX
, 
ET
|
RIGHT
},

1591 {"ni", "NI", 
¥_ni˚
, 
§_ni˚
, 3, 0, 
BSD
, 
TO
|
RIGHT
},

1592 {"ni˚", "NI", 
¥_ni˚
, 
§_ni˚
, 3, 0, 
U98
, 
TO
|
RIGHT
},

1593 {"nivcsw", "IVCSW", 
¥_n›
, 
§_n›
, 5, 0, 
XXX
, 
AN
|
RIGHT
},

1594 {"∆wp", "NLWP", 
¥_∆wp
, 
§_∆wp
, 4, 0, 
SUN
, 
PO
|
RIGHT
},

1595 {"nsig«ls", "NSIGS", 
¥_n›
, 
§_n›
, 5, 0, 
DEC
, 
AN
|
RIGHT
},

1596 {"nsigs", "NSIGS", 
¥_n›
, 
§_n›
, 5, 0, 
BSD
, 
AN
|
RIGHT
},

1597 {"nsw≠", "NSWAP", 
¥_n›
, 
§_n›
, 5, 0, 
XXX
, 
AN
|
RIGHT
},

1598 {"numa", "NUMA", 
¥_numa
, 
§_n›
, 4, 0, 
XXX
, 
AN
|
RIGHT
},

1599 {"nvcsw", "VCSW", 
¥_n›
, 
§_n›
, 5, 0, 
XXX
, 
AN
|
RIGHT
},

1600 {"nwch™", "WCHAN", 
¥_nwch™
, 
§_n›
, 6, 0, 
XXX
, 
TO
|
RIGHT
},

1601 {"›ri", "PRI", 
¥_›ri
, 
§_¥i‹ôy
, 3, 0, 
SUN
, 
TO
|
RIGHT
},

1602 {"osz", "SZ", 
¥_n›
, 
§_n›
, 2, 0, 
SUN
, 
PO
|
RIGHT
},

1603 {"oublk", "OUBLK", 
¥_n›
, 
§_n›
, 5, 0, 
BSD
, 
AN
|
RIGHT
},

1604 {"oublock", "OUBLK", 
¥_n›
, 
§_n›
, 5, 0, 
DEC
, 
AN
|
RIGHT
},

1605 {"ouid", "OWNER", 
¥_sd_ouid
, 
§_n›
, 5, 
SD
, 
LNX
, 
ET
|
LEFT
},

1606 {"p_ru", "P_RU", 
¥_n›
, 
§_n›
, 6, 0, 
BSD
, 
AN
|
RIGHT
},

1607 {"∑ddr", "PADDR", 
¥_n›
, 
§_n›
, 6, 0, 
BSD
, 
AN
|
RIGHT
},

1608 {"∑geö", "PAGEIN", 
¥_majÊt
, 
§_maj_Êt
, 6, 0, 
XXX
, 
AN
|
RIGHT
},

1609 {"p˝u", "%CPU", 
¥_p˝u
, 
§_p˝u
, 4, 0, 
U98
, 
ET
|
RIGHT
},

1610 {"≥ndög", "PENDING", 
¥_sig
, 
§_n›
, 9, 0, 
BSD
, 
ET
|
SIGNAL
},

1611 {"pgid", "PGID", 
¥_pgid
, 
§_pgΩ
, 5, 0, 
U98
, 
PO
|
PIDMAX
|
RIGHT
},

1612 {"pgΩ", "PGRP", 
¥_pgid
, 
§_pgΩ
, 5, 0, 
LNX
, 
PO
|
PIDMAX
|
RIGHT
},

1613 {"pid", "PID", 
¥_¥ocs
, 
§_¥ocs
, 5, 0, 
U98
, 
PO
|
PIDMAX
|
RIGHT
},

1614 {"pidns", "PIDNS", 
¥_pidns
, 
§_pidns
, 10, 
NS
, 
LNX
, 
ET
|
RIGHT
},

1615 {"pmem", "%MEM", 
¥_pmem
, 
§_rss
, 4, 0, 
XXX
, 
PO
|
RIGHT
},

1616 {"poù", "-", 
¥_n›
, 
§_n›
, 1, 0, 
BSD
, 
AN
|
RIGHT
},

1617 {"pﬁicy", "POL", 
¥_˛ass
, 
§_sched
, 3, 0, 
DEC
, 
TO
|
LEFT
},

1618 {"µid", "PPID", 
¥_µid
, 
§_µid
, 5, 0, 
U98
, 
PO
|
PIDMAX
|
RIGHT
},

1619 {"¥i", "PRI", 
¥_¥i
, 
§_n›
, 3, 0, 
XXX
, 
TO
|
RIGHT
},

1620 {"¥i_≠i", "API", 
¥_¥i_≠i
, 
§_n›
, 3, 0, 
LNX
, 
TO
|
RIGHT
},

1621 {"¥i_b¨", "BAR", 
¥_¥i_b¨
, 
§_n›
, 3, 0, 
LNX
, 
TO
|
RIGHT
},

1622 {"¥i_baz", "BAZ", 
¥_¥i_baz
, 
§_n›
, 3, 0, 
LNX
, 
TO
|
RIGHT
},

1623 {"¥i_foo", "FOO", 
¥_¥i_foo
, 
§_n›
, 3, 0, 
LNX
, 
TO
|
RIGHT
},

1624 {"¥i‹ôy", "PRI", 
¥_¥i‹ôy
, 
§_¥i‹ôy
, 3, 0, 
LNX
, 
TO
|
RIGHT
},

1625 {"¥mgΩ", "PRMGRP", 
¥_n›
, 
§_n›
, 12, 0, 
HPU
, 
PO
|
RIGHT
},

1626 {"¥mid", "PRMID", 
¥_n›
, 
§_n›
, 12, 0, 
HPU
, 
PO
|
RIGHT
},

1627 {"¥oje˘", "PROJECT", 
¥_n›
, 
§_n›
, 12, 0, 
SUN
, 
PO
|
LEFT
},

1628 {"¥ojid", "PROJID", 
¥_n›
, 
§_n›
, 5, 0, 
SUN
, 
PO
|
RIGHT
},

1629 {"p£t", "PSET", 
¥_n›
, 
§_n›
, 4, 0, 
DEC
, 
TO
|
RIGHT
},

1630 {"p§", "PSR", 
¥_p§
, 
§_n›
, 3, 0, 
DEC
, 
TO
|
RIGHT
},

1631 {"psx¥i", "PPR", 
¥_n›
, 
§_n›
, 3, 0, 
DEC
, 
TO
|
RIGHT
},

1632 {"ª", "RE", 
¥_n›
, 
§_n›
, 3, 0, 
BSD
, 
AN
|
RIGHT
},

1633 {"ªÆ˝u", "CPU#", 
¥_ªÆ˝u
, 
§_n›
, 4, 0, 
BSD
, 
AN
|
RIGHT
},

1634 {"ªsidít", "RES", 
¥_n›
, 
§_ªsidít
, 5,
MEM
, 
LNX
, 
PO
|
RIGHT
},

1635 {"rgid", "RGID", 
¥_rgid
, 
§_rgid
, 5, 0, 
XXX
, 
ET
|
RIGHT
},

1636 {"rgroup", "RGROUP", 
¥_rgroup
, 
§_rgroup
, 8, 
GRP
, 
U98
, 
ET
|
USER
},

1637 {"æök", "RLINK", 
¥_n›
, 
§_n›
, 8, 0, 
BSD
, 
AN
|
RIGHT
},

1638 {"rss", "RSS", 
¥_rss
, 
§_rss
, 5, 0, 
XXX
, 
PO
|
RIGHT
},

1639 {"rssize", "RSS", 
¥_rss
, 
§_vm_rss
, 5, 0, 
DEC
, 
PO
|
RIGHT
},

1640 {"rsz", "RSZ", 
¥_rss
, 
§_vm_rss
, 5, 0, 
BSD
, 
PO
|
RIGHT
},

1641 {"π¥io", "RTPRIO", 
¥_π¥io
, 
§_π¥io
, 6, 0, 
BSD
, 
TO
|
RIGHT
},

1642 {"ruid", "RUID", 
¥_ruid
, 
§_ruid
, 5, 0, 
XXX
, 
ET
|
RIGHT
},

1643 {"run_p", "RUNNING", 
¥_ru¬ög
, 
§_n›
, 10, 0, 
BSD
, 
ET
|
RIGHT
},

1644 {"ru£r", "RUSER", 
¥_ru£r
, 
§_ru£r
, 8, 
USR
, 
U98
, 
ET
|
USER
},

1645 {"s", "S", 
¥_s
, 
§_°©e
, 1, 0, 
SUN
, 
TO
|
LEFT
},

1646 {"sched", "SCH", 
¥_sched
, 
§_sched
, 3, 0, 
AIX
, 
TO
|
RIGHT
},

1647 {"s˙t", "SCNT", 
¥_n›
, 
§_n›
, 4, 0, 
DEC
, 
AN
|
RIGHT
},

1648 {"scou¡", "SC", 
¥_n›
, 
§_n›
, 4, 0, 
AIX
, 
AN
|
RIGHT
},

1649 {"£©", "SEAT", 
¥_sd_£©
, 
§_n›
, 11, 
SD
, 
LNX
, 
ET
|
LEFT
},

1650 {"£ss", "SESS", 
¥_£ss
, 
§_£ssi⁄
, 5, 0, 
XXX
, 
PO
|
PIDMAX
|
RIGHT
},

1651 {"£ssi⁄", "SESS", 
¥_£ss
, 
§_£ssi⁄
, 5, 0, 
LNX
, 
PO
|
PIDMAX
|
RIGHT
},

1652 {"sgi_p", "P", 
¥_sgi_p
, 
§_n›
, 1, 0, 
LNX
, 
TO
|
RIGHT
},

1653 {"sgi_rss", "RSS", 
¥_rss
, 
§_n›
, 4, 0, 
LNX
, 
PO
|
LEFT
},

1654 {"sgid", "SGID", 
¥_sgid
, 
§_sgid
, 5, 0, 
LNX
, 
ET
|
RIGHT
},

1655 {"sgroup", "SGROUP", 
¥_sgroup
, 
§_sgroup
, 8, 
GRP
, 
LNX
, 
ET
|
USER
},

1656 {"sh¨e", "-", 
¥_n›
, 
§_sh¨e
, 1, 
MEM
, 
LNX
, 
PO
|
RIGHT
},

1657 {"siblög", "SIBLING", 
¥_siblög
, 
§_n›
, 10, 0, 
XXX
, 
ET
|
RIGHT
},

1658 {"sid", "SID", 
¥_£ss
, 
§_£ssi⁄
, 5, 0, 
XXX
, 
PO
|
PIDMAX
|
RIGHT
},

1659 {"sig", "PENDING", 
¥_sig
, 
§_n›
, 9, 0, 
XXX
, 
ET
|
SIGNAL
},

1660 {"sig_block", "BLOCKED", 
¥_sigmask
, 
§_n›
, 9, 0, 
LNX
, 
TO
|
SIGNAL
},

1661 {"sig_ˇtch", "CATCHED", 
¥_sigˇtch
, 
§_n›
, 9, 0, 
LNX
, 
TO
|
SIGNAL
},

1662 {"sig_ign‹e", "IGNORED",
¥_sigign‹e
, 
§_n›
, 9, 0, 
LNX
, 
TO
|
SIGNAL
},

1663 {"sig_≥nd", "SIGNAL", 
¥_sig
, 
§_n›
, 9, 0, 
LNX
, 
ET
|
SIGNAL
},

1664 {"sigˇtch", "CAUGHT", 
¥_sigˇtch
, 
§_n›
, 9, 0, 
XXX
, 
TO
|
SIGNAL
},

1665 {"sigign‹e", "IGNORED", 
¥_sigign‹e
,
§_n›
, 9, 0, 
XXX
, 
TO
|
SIGNAL
},

1666 {"sigmask", "BLOCKED", 
¥_sigmask
, 
§_n›
, 9, 0, 
XXX
, 
TO
|
SIGNAL
},

1667 {"size", "SIZE", 
¥_sw≠abÀ
, 
§_sw≠abÀ
, 5, 0, 
SCO
, 
PO
|
RIGHT
},

1668 {"¶", "SL", 
¥_n›
, 
§_n›
, 3, 0, 
XXX
, 
AN
|
RIGHT
},

1669 {"¶i˚", "SLICE", 
¥_sd_¶i˚
, 
§_n›
, 31, 
SD
, 
LNX
, 
ET
|
LEFT
},

1670 {"•id", "SPID", 
¥_èsks
, 
§_èsks
, 5, 0, 
SGI
, 
TO
|
PIDMAX
|
RIGHT
},

1671 {"°ackp", "STACKP", 
¥_°ackp
, 
§_°¨t_°ack
, ()(2*()), 0, 
LNX
, 
PO
|
RIGHT
},

1672 {"°¨t", "STARTED", 
¥_°¨t
, 
§_n›
, 8, 0, 
XXX
, 
ET
|
RIGHT
},

1673 {"°¨t_code", "S_CODE", 
¥_n›
, 
§_°¨t_code
, ()(2*()), 0, 
LNx
, 
PO
|
RIGHT
},

1674 {"°¨t_°ack", "STACKP", 
¥_°ackp
, 
§_°¨t_°ack
, ()(2*()), 0, 
LNX
, 
PO
|
RIGHT
},

1675 {"°¨t_time", "START", 
¥_°ime
, 
§_°¨t_time
, 5, 0, 
LNx
, 
ET
|
RIGHT
},

1676 {"°©", "STAT", 
¥_°©
, 
§_°©e
, 4, 0, 
BSD
, 
TO
|
LEFT
},

1677 {"°©e", "S", 
¥_s
, 
§_°©e
, 1, 0, 
XXX
, 
TO
|
LEFT
},

1678 {"°©us", "STATUS", 
¥_n›
, 
§_n›
, 6, 0, 
DEC
, 
AN
|
RIGHT
},

1679 {"°ime", "STIME", 
¥_°ime
, 
§_°ime
, 5, 0, 
XXX
, 
ET
|
RIGHT
},

1680 {"suid", "SUID", 
¥_suid
, 
§_suid
, 5, 0, 
LNx
, 
ET
|
RIGHT
},

1681 {"supgid", "SUPGID", 
¥_supgid
, 
§_n›
, 20, 0, 
LNX
, 
PO
|
UNLIMITED
},

1682 {"supgΩ", "SUPGRP", 
¥_supgΩ
, 
§_n›
, 40,
SGRP
, 
LNX
, 
PO
|
UNLIMITED
},

1683 {"su£r", "SUSER", 
¥_su£r
, 
§_su£r
, 8, 
USR
, 
LNx
, 
ET
|
USER
},

1684 {"svgid", "SVGID", 
¥_sgid
, 
§_sgid
, 5, 0, 
XXX
, 
ET
|
RIGHT
},

1685 {"svgroup", "SVGROUP", 
¥_sgroup
, 
§_sgroup
, 8, 
GRP
, 
LNX
, 
ET
|
USER
},

1686 {"svuid", "SVUID", 
¥_suid
, 
§_suid
, 5, 0, 
XXX
, 
ET
|
RIGHT
},

1687 {"svu£r", "SVUSER", 
¥_su£r
, 
§_su£r
, 8, 
USR
, 
LNX
, 
ET
|
USER
},

1688 {"swôches", "SWITCHES",
¥_swôches
, 
§_n›
, 10, 0, 
BSD
, 
ET
|
RIGHT
},

1689 {"sy°ime", "SYSTEM", 
¥_n›
, 
§_n›
, 6, 0, 
DEC
, 
ET
|
RIGHT
},

1690 {"sz", "SZ", 
¥_sz
, 
§_n›
, 5, 0, 
HPU
, 
PO
|
RIGHT
},

1691 {"èskid", "TASKID", 
¥_n›
, 
§_n›
, 5, 0, 
SUN
, 
TO
|
PIDMAX
|
RIGHT
},

1692 {"tdev", "TDEV", 
¥_n›
, 
§_n›
, 4, 0, 
XXX
, 
AN
|
RIGHT
},

1693 {"tgid", "TGID", 
¥_¥ocs
, 
§_¥ocs
, 5, 0, 
LNX
, 
PO
|
PIDMAX
|
RIGHT
},

1694 {"thcou¡", "THCNT", 
¥_∆wp
, 
§_∆wp
, 5, 0, 
AIX
, 
PO
|
RIGHT
},

1695 {"tid", "TID", 
¥_èsks
, 
§_èsks
, 5, 0, 
AIX
, 
TO
|
PIDMAX
|
RIGHT
},

1696 {"time", "TIME", 
¥_time
, 
§_time
, 8, 0, 
U98
, 
ET
|
RIGHT
},

1697 {"timeout", "TMOUT", 
¥_n›
, 
§_n›
, 5, 0, 
LNX
, 
AN
|
RIGHT
},

1698 {"tmout", "TMOUT", 
¥_n›
, 
§_n›
, 5, 0, 
LNX
, 
AN
|
RIGHT
},

1699 {"äame", "TTY", 
¥_ây8
, 
§_ây
, 8, 0, 
DEC
, 
PO
|
LEFT
},

1700 {"çgid", "TPGID", 
¥_çgid
, 
§_çgid
, 5, 0, 
XXX
, 
PO
|
PIDMAX
|
RIGHT
},

1701 {"ås", "TRS", 
¥_ås
, 
§_ås
, 4, 
MEM
, 
AIX
, 
PO
|
RIGHT
},

1702 {"åss", "TRSS", 
¥_ås
, 
§_ås
, 4, 
MEM
, 
BSD
, 
PO
|
RIGHT
},

1703 {"t£ss", "TSESS", 
¥_n›
, 
§_n›
, 5, 0, 
BSD
, 
PO
|
PIDMAX
|
RIGHT
},

1704 {"t£ssi⁄", "TSESS", 
¥_n›
, 
§_n›
, 5, 0, 
DEC
, 
PO
|
PIDMAX
|
RIGHT
},

1705 {"tsid", "TSID", 
¥_n›
, 
§_n›
, 5, 0, 
BSD
, 
PO
|
PIDMAX
|
RIGHT
},

1706 {"tsig", "PENDING", 
¥_tsig
, 
§_n›
, 9, 0, 
BSD
, 
ET
|
SIGNAL
},

1707 {"tsiz", "TSIZ", 
¥_tsiz
, 
§_n›
, 4, 0, 
BSD
, 
PO
|
RIGHT
},

1708 {"â", "TT", 
¥_ây8
, 
§_ây
, 8, 0, 
BSD
, 
PO
|
LEFT
},

1709 {"ây", "TT", 
¥_ây8
, 
§_ây
, 8, 0, 
U98
, 
PO
|
LEFT
},

1710 {"ây4", "TTY", 
¥_ây4
, 
§_ây
, 4, 0, 
LNX
, 
PO
|
LEFT
},

1711 {"ây8", "TTY", 
¥_ây8
, 
§_ây
, 8, 0, 
LNX
, 
PO
|
LEFT
},

1712 {"u_¥o˝", "UPROCP", 
¥_n›
, 
§_n›
, 6, 0, 
DEC
, 
AN
|
RIGHT
},

1713 {"ucmd", "CMD", 
¥_comm
, 
§_cmd
, 15, 
COM
, 
DEC
, 
PO
|
UNLIMITED
},

1714 {"ucomm", "COMMAND", 
¥_comm
, 
§_cmd
, 15, 
COM
, 
XXX
, 
PO
|
UNLIMITED
},

1715 {"uid", "UID", 
¥_euid
, 
§_euid
, 5, 0, 
XXX
, 
ET
|
RIGHT
},

1716 {"uid_hack", "UID", 
¥_eu£r
, 
§_eu£r
, 8, 
USR
, 
XXX
, 
ET
|
USER
},

1717 {"umask", "UMASK", 
¥_n›
, 
§_n›
, 5, 0, 
DEC
, 
AN
|
RIGHT
},

1718 {"u«me", "USER", 
¥_eu£r
, 
§_eu£r
, 8, 
USR
, 
DEC
, 
ET
|
USER
},

1719 {"unô", "UNIT", 
¥_sd_unô
, 
§_n›
, 31, 
SD
, 
LNX
, 
ET
|
LEFT
},

1720 {"u¥", "UPR", 
¥_n›
, 
§_n›
, 3, 0, 
BSD
, 
TO
|
RIGHT
},

1721 {"u¥o˝", "UPROCP", 
¥_n›
, 
§_n›
, 8, 0, 
BSD
, 
AN
|
RIGHT
},

1722 {"u£r", "USER", 
¥_eu£r
, 
§_eu£r
, 8, 
USR
, 
U98
, 
ET
|
USER
},

1723 {"u£∫s", "USERNS", 
¥_u£∫s
, 
§_u£∫s
, 10, 
NS
, 
LNX
, 
ET
|
RIGHT
},

1724 {"u£πime", "USER", 
¥_n›
, 
§_n›
, 4, 0, 
DEC
, 
ET
|
RIGHT
},

1725 {"u§¥i", "UPR", 
¥_n›
, 
§_n›
, 3, 0, 
DEC
, 
TO
|
RIGHT
},

1726 {"utû", "C", 
¥_c
, 
§_p˝u
, 2, 0, 
SGI
, 
ET
|
RIGHT
},

1727 {"utime", "UTIME", 
¥_n›
, 
§_utime
, 6, 0, 
LNx
, 
ET
|
RIGHT
},

1728 {"ut¢s", "UTSNS", 
¥_ut¢s
, 
§_ut¢s
, 10, 
NS
, 
LNX
, 
ET
|
RIGHT
},

1729 {"uunô", "UUNIT", 
¥_sd_uunô
, 
§_n›
, 31, 
SD
, 
LNX
, 
ET
|
LEFT
},

1730 {"vm_d©a", "DATA", 
¥_n›
, 
§_vm_d©a
, 5, 0, 
LNx
, 
PO
|
RIGHT
},

1731 {"vm_exe", "EXE", 
¥_n›
, 
§_vm_exe
, 5, 0, 
LNx
, 
PO
|
RIGHT
},

1732 {"vm_lib", "LIB", 
¥_n›
, 
§_vm_lib
, 5, 0, 
LNx
, 
PO
|
RIGHT
},

1733 {"vm_lock", "LCK", 
¥_n›
, 
§_vm_lock
, 3, 0, 
LNx
, 
PO
|
RIGHT
},

1734 {"vm_°ack", "STACK", 
¥_n›
, 
§_vm_°ack
, 5, 0, 
LNx
, 
PO
|
RIGHT
},

1735 {"vsize", "VSZ", 
¥_vsz
, 
§_vsize
, 6, 0, 
DEC
, 
PO
|
RIGHT
},

1736 {"vsz", "VSZ", 
¥_vsz
, 
§_vm_size
, 6, 0, 
U98
, 
PO
|
RIGHT
},

1737 {"wch™", "WCHAN", 
¥_wch™
, 
§_wch™
, 6, 0, 
XXX
, 
TO
|
WCHAN
},

1738 {"w«me", "WCHAN", 
¥_w«me
, 
§_n›
, 6, 0, 
SGI
, 
TO
|
WCHAN
},

1739 {"x°©", "XSTAT", 
¥_n›
, 
§_n›
, 5, 0, 
BSD
, 
AN
|
RIGHT
},

1740 {"z⁄e", "ZONE", 
¥_c⁄ãxt
, 
§_n›
, 31, 0, 
SUN
, 
ET
|
LEFT
},

1741 {"z⁄eid", "ZONEID", 
¥_n›
, 
§_n›
, 31, 0, 
SUN
, 
ET
|
RIGHT
},

1742 {"~", "-", 
¥_n›
, 
§_n›
, 1, 0, 
LNX
, 
AN
|
RIGHT
}

1745 #unde‡
USER


1746 #unde‡
LEFT


1747 #unde‡
RIGHT


1748 #unde‡
UNLIMITED


1749 #unde‡
WCHAN


1750 #unde‡
SIGNAL


1751 #unde‡
PIDMAX


1752 #unde‡
PO


1753 #unde‡
TO


1754 #unde‡
AN


1755 #unde‡
ET


1757 c⁄° 
	gf‹m©_¨øy_cou¡
 = (
f‹m©_¨øy
)/(
f‹m©_°ru˘
);

1764 c⁄° 
ma¸o_°ru˘
 
	gma¸o_¨øy
[] = {

1828 c⁄° 
	gma¸o_¨øy_cou¡
 = (
ma¸o_¨øy
)/(
ma¸o_°ru˘
);

1833 c⁄° 
aix_°ru˘
 
	gaix_¨øy
[] = {

1856 c⁄° 
sh‹ts‹t_°ru˘
 
	gsh‹ts‹t_¨øy
[] = {

1890 
	$¥öt_f‹m©_•ecifõrs
(){

1891 c⁄° 
f‹m©_°ru˘
 *
wÆk
 = 
f‹m©_¨øy
;

1892 *(
wÆk
->
•ec
) != '~'){

1893 if(
wÆk
->
¥
 !
¥_n›
Ë
	`¥ötf
("%-12.12†%-8.8s\n", wÆk->
•ec
, wÆk->
hód
);

1894 
wÆk
++;

1896 
	}
}

1900 
	$com∑ª_f‹m©_°ru˘s
(c⁄° *
a
, c⁄° *
b
){

1901  
	`°rcmp
(((c⁄° 
f‹m©_°ru˘
*)
a
)->
•ec
,((c⁄° f‹m©_°ru˘*)
b
)->spec);

1902 
	}
}

1904 
	$com∑ª_ma¸o_°ru˘s
(c⁄° *
a
, c⁄° *
b
){

1905  
	`°rcmp
(((c⁄° 
ma¸o_°ru˘
*)
a
)->
•ec
,((c⁄° ma¸o_°ru˘*)
b
)->spec);

1906 
	}
}

1910 c⁄° 
sh‹ts‹t_°ru˘
 *
	$£¨ch_sh‹ts‹t_¨øy
(c⁄° 
födme
){

1911 c⁄° 
sh‹ts‹t_°ru˘
 *
wÆk
 = 
sh‹ts‹t_¨øy
;

1912 
wÆk
->
desc
 != '~'){

1913 if(
wÆk
->
desc
 =
födme
)  walk;

1914 
wÆk
++;

1916  
NULL
;

1917 
	}
}

1919 c⁄° 
aix_°ru˘
 *
	$£¨ch_aix_¨øy
(c⁄° 
födme
){

1920 c⁄° 
aix_°ru˘
 *
wÆk
 = 
aix_¨øy
;

1921 
wÆk
->
desc
 != '~'){

1922 if(
wÆk
->
desc
 =
födme
)  walk;

1923 
wÆk
++;

1925  
NULL
;

1926 
	}
}

1928 c⁄° 
f‹m©_°ru˘
 *
	$£¨ch_f‹m©_¨øy
(c⁄° *
födme
){

1929 
f‹m©_°ru˘
 
key
;

1930 
key
.
•ec
 = 
födme
;

1931  
	`b£¨ch
(&
key
, 
f‹m©_¨øy
, 
f‹m©_¨øy_cou¡
,

1932 (
f‹m©_°ru˘
), 
com∑ª_f‹m©_°ru˘s


1934 
	}
}

1936 c⁄° 
ma¸o_°ru˘
 *
	$£¨ch_ma¸o_¨øy
(c⁄° *
födme
){

1937 
ma¸o_°ru˘
 
key
;

1938 
key
.
•ec
 = 
födme
;

1939  
	`b£¨ch
(&
key
, 
ma¸o_¨øy
, 
ma¸o_¨øy_cou¡
,

1940 (
ma¸o_°ru˘
), 
com∑ª_ma¸o_°ru˘s


1942 
	}
}

1944 
	ga˘ive_cﬁs
;

1947 
	$check_hódî_width
(){

1948 
f‹m©_node
 *
wÆk
 = 
f‹m©_li°
;

1949 
tŸÆ
 = 0;

1950 
was_n‹mÆ
 = 0;

1951 
i
 = 0;

1952 
sigs
 = 0;

1953 
wÆk
){

1954 (
wÆk
->
Êags
Ë& 
CF_JUST_MASK
){

1956 
tŸÆ
 +
wÆk
->
width
;

1957 
tŸÆ
 +
was_n‹mÆ
;

1958 
was_n‹mÆ
 = 1;

1960 
CF_SIGNAL
:

1961 
sigs
++;

1962 
tŸÆ
 +
wÆk
->
width
;

1963 
tŸÆ
 +
was_n‹mÆ
;

1964 
was_n‹mÆ
 = 1;

1966 
CF_UNLIMITED
:

1967 if(
wÆk
->
√xt
Ë
tŸÆ
 +wÆk->
width
;

1968 
tŸÆ
 += 3;

1969 
tŸÆ
 +
was_n‹mÆ
;

1970 
was_n‹mÆ
 = 1;

1973 
tŸÆ
 +
wÆk
->
width
;

1974 
was_n‹mÆ
 = 0;

1977 
wÆk
 = wÆk->
√xt
;

1980 
i
++;

1981 
a˘ive_cﬁs
 = 
s¸ìn_cﬁs
 * 
i
;

1982 if(
a˘ive_cﬁs
>=
tŸÆ
) ;

1983 if(
s¸ìn_cﬁs
*
i
 >
OUTBUF_SIZE
/2) ;

1985 
wide_sig«ls
 = (
tŸÆ
+
sigs
*7 <
a˘ive_cﬁs
);

1986 
	}
}

1992 
	#SPACE_AMOUNT
 144

	)

1994 *
	gßved_outbuf
;

1996 
	$show_⁄e_¥oc
(c⁄° 
¥oc_t
 *
ª°ri˘
 c⁄° 
p
, c⁄° 
f‹m©_node
 *ª°ri˘ 
fmt
){

1998 
c‹ª˘
 = 0;

1999 
a˘uÆ
 = 0;

2000 
amou¡
 = 0;

2001 
À·∑d
 = 0;

2002 
•a˚
 = 0;

2003 
do•a˚
 = 0;

2004 
Àgô
 = 0;

2005 
sz
 = 0;

2006 
tmp•a˚
 = 0;

2007 *
ª°ri˘
 c⁄° 
outbuf
 = 
ßved_outbuf
;

2008 
did_°uff
 = 0;

2010 if(
	`u∆ikñy
(-1==()
p
)){

2011 if(
did_°uff
) ;

2013 if(!--
löes_to_√xt_hódî
){

2014 
löes_to_√xt_hódî
 = 
hódî_g≠
;

2015 
	`show_⁄e_¥oc
(
NULL
,
fmt
);

2018 
	`exô
(1);

2020 if(
	`likñy
(
p
)){

2021 if(
	`u∆ikñy
(!--
löes_to_√xt_hódî
)){

2022 
löes_to_√xt_hódî
 = 
hódî_g≠
;

2023 
	`show_⁄e_¥oc
(
NULL
,
fmt
);

2026 
did_°uff
 = 1;

2027 if(
	`u∆ikñy
(
a˘ive_cﬁs
>()
OUTBUF_SIZE
)Ë
	`Ârötf
(
°dîr
,
	`_
("fix bignessÉrror\n"));

2031 
Àgô
 = 0;

2037 if(
	`likñy
(
fmt
->
√xt
)){

2038 
max_rightw¨d
 = 
fmt
->
width
;

2039 
tmp•a˚
 = 0;

2044 
tmp•a˚
 = 
c‹ª˘
-
a˘uÆ
;

2045 i‡(
tmp•a˚
<1){

2046 
tmp•a˚
 = 
do•a˚
;

2047 
max_rightw¨d
 = 
a˘ive_cﬁs
-
a˘uÆ
-
tmp•a˚
;

2049 
max_rightw¨d
 = 
a˘ive_cﬁs
 - ( (
c‹ª˘
>
a˘uÆ
) ? correct :áctual );

2052 
max_À·w¨d
 = 
fmt
->
width
 + 
a˘uÆ
 - 
c‹ª˘
;

2058 if(
	`likñy
(
p
Ë&&Üikñy(
fmt
->
¥
)Ë
amou¡
 = (*fmt->¥)(
outbuf
,p);

2059 
amou¡
 = 
	`°æí
(
	`°r˝y
(
outbuf
, 
fmt
->
«me
));

2061 (
fmt
->
Êags
Ë& 
CF_JUST_MASK
){

2063 
À·∑d
 = 0;

2065 
CF_LEFT
:

2066 
À·∑d
 = 0;

2068 
CF_RIGHT
:

2069 
À·∑d
 = 
fmt
->
width
 - 
amou¡
;

2070 if(
À·∑d
 < 0)Üeftpad = 0;

2072 
CF_SIGNAL
:

2074 if(
wide_sig«ls
){

2075 
À·∑d
 = 16 - 
amou¡
;

2076 
Àgô
 = 7;

2078 
À·∑d
 = 9 - 
amou¡
;

2080 if(
À·∑d
 < 0)Üeftpad = 0;

2082 
CF_USER
:

2083 
À·∑d
 = 
fmt
->
width
 - 
amou¡
;

2084 if(
À·∑d
 < 0)Üeftpad = 0;

2085 if(!
u£r_is_numbî
Ë
À·∑d
 = 0;

2087 
CF_WCHAN
:

2088 if(
wch™_is_numbî
){

2089 
À·∑d
 = 
fmt
->
width
 - 
amou¡
;

2090 if(
À·∑d
 < 0)Üeftpad = 0;

2093 i‡((
a˘ive_cﬁs
-
a˘uÆ
-
tmp•a˚
)<1)

2094 
outbuf
[1] = '\0';

2095 
À·∑d
 = 0;

2098 
CF_UNLIMITED
:

2100 if(
a˘ive_cﬁs
-
a˘uÆ
-
tmp•a˚
 < 1)

2101 
outbuf
[1] = '\0';

2102 
À·∑d
 = 0;

2106 
	`Ârötf
(
°dîr
, 
	`_
("badálignment code\n"));

2119 
•a˚
 = 
c‹ª˘
 - 
a˘uÆ
 + 
À·∑d
;

2120 if(
•a˚
<1Ë•a˚=
do•a˚
;

2121 if(
	`u∆ikñy
(
•a˚
>
SPACE_AMOUNT
)) space=SPACE_AMOUNT;

2124 
sz
 = 
	`°æí
(
outbuf
);

2127 if(
	`u∆ikñy
(!
fmt
->
√xt
)){

2129 
outbuf
[
sz
] = '\n';

2130 
	`fwrôe
(
outbuf
-
•a˚
, s∑˚+
sz
+1, 1, 
°dout
);

2134 
	`fwrôe
(
outbuf
-
•a˚
, s∑˚+
sz
, 1, 
°dout
);

2135 
a˘uÆ
 +
•a˚
+
amou¡
;

2136 
c‹ª˘
 +
fmt
->
width
;

2137 
c‹ª˘
 +
Àgô
;

2138 if(
fmt
->
¥
 && fmt->
√xt
->pr){

2139 
c‹ª˘
++;

2140 
do•a˚
 = 1;

2142 
do•a˚
 = 0;

2144 
fmt
 = fmt->
√xt
;

2156 
	}
}

2159 
	$öô_ouçut
(){

2160 
outbuf_∑ges
;

2161 *
outbuf
;

2163 
∑ge_size
){

2164 65536: 
∑ge_shi·
 = 16; ;

2165 32768: 
∑ge_shi·
 = 15; ;

2166 16384: 
∑ge_shi·
 = 14; ;

2167 8192: 
∑ge_shi·
 = 13; ;

2168 : 
	`Ârötf
(
°dîr
, 
	`_
("unknownÖage size (assume 4096)\n"));

2169 4096: 
∑ge_shi·
 = 12; ;

2170 2048: 
∑ge_shi·
 = 11; ;

2171 1024: 
∑ge_shi·
 = 10; ;

2175 
outbuf_∑ges
 = (
OUTBUF_SIZE
+
SPACE_AMOUNT
+
∑ge_size
-1)/page_size;

2176 
outbuf
 = 
	`mm≠
(

2178 
∑ge_size
 * (
outbuf_∑ges
+1),

2179 
PROT_READ
 | 
PROT_WRITE
,

2180 
MAP_PRIVATE
 | 
MAP_ANONYMOUS
,

2184 
	`mem£t
(
outbuf
, ' ', 
SPACE_AMOUNT
);

2185 if(
SPACE_AMOUNT
==
∑ge_size
Ë
	`m¥Ÿe˘
(
outbuf
,Öage_size, 
PROT_READ
);

2186 
	`m¥Ÿe˘
(
outbuf
 + 
∑ge_size
*
outbuf_∑ges
,Öage_size, 
PROT_NONE
);

2187 
ßved_outbuf
 = 
outbuf
 + 
SPACE_AMOUNT
;

2190 
£c⁄ds_sö˚_1970
 = 
	`time
(
NULL
);

2192 
	`memöfo
();

2194 
	`check_hódî_width
();

2195 
	}
}

	@ps/parser.c

24 
	~<gΩ.h
>

25 
	~<pwd.h
>

26 
	~<°dio.h
>

27 
	~<°dlib.h
>

28 
	~<°rög.h
>

29 
	~<uni°d.h
>

31 
	~<sys/°©.h
>

32 
	~<sys/ty≥s.h
>

34 
	~"../¥oc/Æloc.h
"

36 
	~"comm⁄.h
"

37 
	~"c.h
"

39 
	#ARG_GNU
 0

	)

40 
	#ARG_END
 1

	)

41 
	#ARG_PGRP
 2

	)

42 
	#ARG_SYSV
 3

	)

43 
	#ARG_PID
 4

	)

44 
	#ARG_BSD
 5

	)

45 
	#ARG_FAIL
 6

	)

46 
	#ARG_SESS
 7

	)

48 
	gw_cou¡
 = 0;

50 
	gps_¨gc
;

51 **
	gps_¨gv
;

52 
	gthißrg
;

53 *
	gÊag±r
;

54 
	gf‹˚_bsd
 = 0;

56 
	#ex˛usive
(
x
Ëif((
ps_¨gc
 !2Ë|| 
	`°rcmp
(
ps_¨gv
[1],x)) \

57  
	`_
("thê›ti⁄ i†ex˛usive: " 
x
)

	)

60 
	$di•œy_ps_vîsi⁄
()

62 
	`Ârötf
(
°dout
, 
PROCPS_NG_VERSION
);

63 
	}
}

71 c⁄° *
	$gë_›t_¨g
(){

72 if(*(
Êag±r
+1)){

73  
Êag±r
+1;

75 if(
thißrg
+2 > 
ps_¨gc
Ë 
NULL
;

77 if(*(
ps_¨gv
[
thißrg
+1]Ë='\0'Ë 
NULL
;

78  
ps_¨gv
[++
thißrg
];

79 
	}
}

83 c⁄° *
	$∑r£_pid
(*
°r
, 
£l_uni⁄
 *
ªt
){

84 *
ídp
;

85 
num
;

86 
num
 = 
	`°πoul
(
°r
, &
ídp
, 0);

87 if(*
ídp
 !'\0'Ë 
	`_
("process IDÜist syntaxÉrror");

88 if(
num
<1Ë 
	`_
("process ID out ofÑange");

89 if(
num
 > 0x7fffffffULË 
	`_
("process ID out ofÑange");

90 
ªt
->
pid
 = 
num
;

92 
	}
}

94 c⁄° *
	$∑r£_uid
(*
°r
, 
£l_uni⁄
 *
ªt
){

95 
∑sswd
 *
∑sswd_d©a
;

96 *
ídp
;

97 
num
;

98 
num
 = 
	`°πoul
(
°r
, &
ídp
, 0);

99 if(*
ídp
 != '\0'){

100 
∑sswd_d©a
 = 
	`gëpw«m
(
°r
);

101 if(!
∑sswd_d©a
){

102 if(!
√g©e_£À˘i⁄
Ë 
	`_
("userÇame doesÇotÉxist");

103 
num
 = -1;

106 
num
 = 
∑sswd_d©a
->
pw_uid
;

108 if(!
√g©e_£À˘i⁄
 && (
num
 > 0xffffff„UL)Ë 
	`_
("user ID out ofÑange");

109 
ªt
->
uid
 = 
num
;

111 
	}
}

113 c⁄° *
	$∑r£_gid
(*
°r
, 
£l_uni⁄
 *
ªt
){

114 
group
 *
group_d©a
;

115 *
ídp
;

116 
num
;

117 
num
 = 
	`°πoul
(
°r
, &
ídp
, 0);

118 if(*
ídp
 != '\0'){

119 
group_d©a
 = 
	`gëg∫am
(
°r
);

120 if(!
group_d©a
){

121 if(!
√g©e_£À˘i⁄
Ë 
	`_
("groupÇame doesÇotÉxist");

122 
num
 = -1;

125 
num
 = 
group_d©a
->
gr_gid
;

127 if(!
√g©e_£À˘i⁄
 && (
num
 > 0xffffff„UL)Ë 
	`_
("group ID out ofÑange");

128 
ªt
->
gid
 = 
num
;

130 
	}
}

132 c⁄° *
	$∑r£_cmd
(*
°r
, 
£l_uni⁄
 *
ªt
){

133 
	`°∫˝y
(
ªt
->
cmd
, 
°r
, Ñet->cmd);

134 
ªt
->
cmd
[(ret->cmd)-1] = '\0';

136 
	}
}

138 c⁄° *
	$∑r£_ây
(*
°r
, 
£l_uni⁄
 *
ªt
){

139 
°©
 
sbuf
;

140 
∑th
[4096];

141 if(
°r
[0]=='/'){

142 if(
	`°©
(
°r
, &
sbuf
Ë>0Ë
found_ô
;

143  
	`_
("TTY couldÇot be found");;

145 
	#lookup
(
p
) \

146 
	`¢¥ötf
(
∑th
,4096,
p
,
°r
); \

147 if(
	`°©
(
∑th
, &
sbuf
Ë>0Ë
found_ô


	)

149 
	`lookup
("/dev/pts/%s");

150 
	`lookup
("/dev/%s");

151 
	`lookup
("/dev/tty%s");

152 
	`lookup
("/dev/pty%s");

153 
	`lookup
("/dev/%snsole");

154 if(!
	`°rcmp
(
°r
,"-")){

155 
ªt
->
ây
 = 0;

158 if(!
	`°rcmp
(
°r
,"?")){

159 
ªt
->
ây
 = 0;

162 if(!*(
°r
+1Ë&& (
	`°©
(°r,&
sbuf
)>=0)){

163 
ªt
->
ây
 = 0;

166 #unde‡
lookup


167  
	`_
("TTY couldÇot be found");;

168 
found_ô
:

169 if(!
	`S_ISCHR
(
sbuf
.
°_mode
)Ë 
	`_
("list member wasÇotá TTY");

170 
ªt
->
ây
 = 
sbuf
.
°_rdev
;

172 
	}
}

177 c⁄° *
	$∑r£_li°
(c⁄° *
¨g
, c⁄° *(*
∑r£_‚
)(*, 
£l_uni⁄
 *) ){

178 
£À˘i⁄_node
 *
node
;

179 *
buf
;

180 *
£p_loc
;

181 *
wÆk
;

182 
ôems
;

183 
√ed_ôem
;

184 c⁄° *
îr
;

186 
node
 = 
	`mÆloc
((
£À˘i⁄_node
));

187 
node
->
u
 = 
	`mÆloc
(
	`°æí
(
¨g
)*(
£l_uni⁄
));

188 
node
->
n
 = 0;

189 
buf
 = 
	`°rdup
(
¨g
);

191 
√ed_ôem
 = 1;

192 
ôems
 = 0;

193 
wÆk
 = 
buf
;

194 
îr
 = 
	`_
("improperÜist");

196 *
wÆk
){

198 if(
√ed_ôem
Ë
∑r£_îr‹
;

199 
√ed_ôem
=1;

202 if(
√ed_ôem
Ë
ôems
++;

203 
√ed_ôem
=0;

205 } *++
wÆk
);

206 if(
√ed_ôem
Ë
∑r£_îr‹
;

207 
node
->
n
 = 
ôems
;

209 
wÆk
 = 
buf
;

210 
ôems
--){

211 
£p_loc
 = 
	`°Ωbrk
(
wÆk
," ,\t");

212 if(
£p_loc
) *sep_loc = '\0';

213 if(–
îr
=(
∑r£_‚
)(
wÆk
, 
node
->
u
+
ôems
Ë)Ë
∑r£_îr‹
;

214 
wÆk
 = 
£p_loc
 + 1;

216 
	`‰ì
(
buf
);

217 
node
->
√xt
 = 
£À˘i⁄_li°
;

218 
£À˘i⁄_li°
 = 
node
;

219  
NULL
;

220 
∑r£_îr‹
:

221 
	`‰ì
(
buf
);

222 
	`‰ì
(
node
->
u
);

223 
	`‰ì
(
node
);

224  
îr
;

225 
	}
}

228 c⁄° *
	$∑r£_sysv_›ti⁄
(){

229 c⁄° *
¨g
;

230 c⁄° *
îr
;

232 
Êag±r
 = 
ps_¨gv
[
thißrg
];

233 *++
Êag±r
){

234 *
Êag±r
){

236 
	`åa˚
("-A selectsállÖrocesses\n");

237 
Æl_¥o˚s£s
 = 1;

240 
	`åa˚
("-C select byÖrocessÇame\n");

241 
¨g
=
	`gë_›t_¨g
();

242 if(!
¨g
Ë 
	`_
("list of commandÇames must follow -C");

243 
îr
=
	`∑r£_li°
(
¨g
, 
∑r£_cmd
);

244 if(
îr
) Érr;

245 
£À˘i⁄_li°
->
ty≥code
 = 
SEL_COMM
;

246  
NULL
;

248 
	`åa˚
("-F does fullerÜisting\n");

249 
f‹m©_modifõrs
 |
FM_F
;

250 
f‹m©_Êags
 |
FF_Uf
;

251 
unix_f_›ti⁄
 = 1;

254 
	`åa˚
("-G select by RGID (supportsÇames)\n");

255 
¨g
=
	`gë_›t_¨g
();

256 if(!
¨g
Ë 
	`_
("list ofÑeal groups must follow -G");

257 
îr
=
	`∑r£_li°
(
¨g
, 
∑r£_gid
);

258 if(
îr
) Érr;

259 
£À˘i⁄_li°
->
ty≥code
 = 
SEL_RGID
;

260  
NULL
;

262 
	`åa˚
("-HÖrocess hierarchy (like ASCIIárt forest option)\n");

263 
f‹e°_ty≥
 = 'u';

267 
	`åa˚
("-J select by job ID\n");

268 
¨g
=
	`gë_›t_¨g
();

269 if(!
¨g
Ë 
	`_
("list of jobs must follow -J");

270 
îr
=
	`∑r£_li°
(
¨g
, 
∑r£_jid
);

271 if(
îr
) Érr;

272 
£À˘i⁄_li°
->
ty≥code
 = 
SEL_JID
;

273  
NULL
;

282 
	`åa˚
("-LÖrint LWP (thread) info\n");

283 
thªad_Êags
 |
TF_U_L
;

287 
	`åa˚
("-MÖrint securityÜabel for Mandatory Access Control\n");

288 
f‹m©_modifõrs
 |
FM_M
;

291 
	`åa˚
("-NÇegates\n");

292 
√g©e_£À˘i⁄
 = 1;

295 
	`åa˚
("-O isÖreloaded -o\n");

296 
¨g
=
	`gë_›t_¨g
();

297 if(!
¨g
Ë 
	`_
("format or sort specification must follow -O");

298 
	`de„r_sf_›ti⁄
(
¨g
, 
SF_U_O
);

299  
NULL
;

301 
	`åa˚
("-Pádds columns of PRM info (HP-UX), PSR (SunOS), or capabilities (IRIX)\n");

302 
f‹m©_modifõrs
 |
FM_P
;

306 
	`åa˚
("-R select by PRM group\n");

307 
¨g
=
	`gë_›t_¨g
();

308 if(!
¨g
Ë 
	`_
("list of PRM groups must follow -R");

309 
îr
=
	`∑r£_li°
(
¨g
, 
∑r£_¥m
);

310 if(
îr
) Érr;

311 
£À˘i⁄_li°
->
ty≥code
 = 
SEL_PRM
;

312  
NULL
;

320 
	`åa˚
("-Tádds strange SPID column (old sproc()Åhreads?)\n");

321 
thªad_Êags
 |
TF_U_T
;

325 
	`åa˚
("-U select by RUID (supportsÇames)\n");

326 
¨g
=
	`gë_›t_¨g
();

327 if(!
¨g
Ë 
	`_
("list ofÑeal users must follow -U");

328 
îr
=
	`∑r£_li°
(
¨g
, 
∑r£_uid
);

329 if(
îr
) Érr;

330 
£À˘i⁄_li°
->
ty≥code
 = 
SEL_RUID
;

331  
NULL
;

333 
	`åa˚
("-VÖrints version\n");

334 
	`ex˛usive
("-V");

335 
	`di•œy_ps_vîsi⁄
();

336 
	`exô
(0);

340 
	`åa˚
("-Z shows full MAC info\n");

341 
f‹m©_modifõrs
 |
FM_M
;

344 
	`åa˚
("-a selectáll witháÅty, but omit sessionÜeaders\n");

345 
sim∂e_£À˘
 |
SS_U_a
;

349 
	`åa˚
("-c changes scheduling info\n");

350 
f‹m©_modifõrs
 |
FM_c
;

353 
	`åa˚
("-d selectáll, but omit sessionÜeaders\n");

354 
sim∂e_£À˘
 |
SS_U_d
;

357 
	`åa˚
("-e selectsállÖrocesses\n");

358 
Æl_¥o˚s£s
 = 1;

361 
	`åa˚
("-f does fullÜisting\n");

362 
f‹m©_Êags
 |
FF_Uf
;

363 
unix_f_›ti⁄
 = 1;

366 
	`åa˚
("-g selects by sessionÜeader OR by groupÇame\n");

367 
¨g
=
	`gë_›t_¨g
();

368 if(!
¨g
Ë 
	`_
("list of sessionÜeaders ORÉffective groupÇames must follow -g");

369 
îr
=
	`∑r£_li°
(
¨g
, 
∑r£_pid
);

370 if(!
îr
){

371 
£À˘i⁄_li°
->
ty≥code
 = 
SEL_SESS
;

372  
NULL
;

374 
îr
=
	`∑r£_li°
(
¨g
, 
∑r£_gid
);

375 if(!
îr
){

376 
£À˘i⁄_li°
->
ty≥code
 = 
SEL_EGID
;

377  
NULL
;

379  
	`_
("list of sessionÜeaders ORÉffective group IDs was invalid");

381 
	`åa˚
("-j jobs format\n");

383 if(
sysv_j_f‹m©
Ë
f‹m©_Êags
 |
FF_Uj
;

384 
f‹m©_modifõrs
 |
FM_j
;

387 
	`åa˚
("-lÜong format\n");

388 
f‹m©_Êags
 |
FF_Ul
;

391 
	`åa˚
("-m showsÅhreads\n");

393 
thªad_Êags
 |
TF_U_m
;

401 
	`åa˚
("-o user-defined format\n");

402 
¨g
=
	`gë_›t_¨g
();

403 if(!
¨g
Ë 
	`_
("format specification must follow -o");

404 
	`de„r_sf_›ti⁄
(
¨g
, 
SF_U_o
);

405  
NULL
;

407 
	`åa˚
("-p select by PID\n");

408 
¨g
=
	`gë_›t_¨g
();

409 if(!
¨g
Ë 
	`_
("list ofÖrocess IDs must follow -p");

410 
îr
=
	`∑r£_li°
(
¨g
, 
∑r£_pid
);

411 if(
îr
) Érr;

412 
£À˘i⁄_li°
->
ty≥code
 = 
SEL_PID
;

413  
NULL
;

415 
	`åa˚
("-q quick select by PID.\n");

416 
¨g
=
	`gë_›t_¨g
();

417 if(!
¨g
)  "List ofÖrocess IDs must follow -q.";

418 
îr
=
	`∑r£_li°
(
¨g
, 
∑r£_pid
);

419 if(
îr
) Érr;

420 
£À˘i⁄_li°
->
ty≥code
 = 
SEL_PID_QUICK
;

421  
NULL
;

424 
	`åa˚
("-r some Digital UnixÅhingábout warnings...\n");

425 
	`åa˚
(" or SCO's optionÅo chroot() forÇew /procánd /dev\n");

426  
	`_
("the -r option isÑeserved");

430 
	`åa˚
("-s selectÖrocesses belongingÅoÅhe sessions given\n");

431 
¨g
=
	`gë_›t_¨g
();

432 if(!
¨g
Ë 
	`_
("list of session IDs must follow -s");

433 
îr
=
	`∑r£_li°
(
¨g
, 
∑r£_pid
);

434 if(
îr
) Érr;

435 
£À˘i⁄_li°
->
ty≥code
 = 
SEL_SESS
;

436  
NULL
;

438 
	`åa˚
("-t select byÅty\n");

439 
¨g
=
	`gë_›t_¨g
();

440 if(!
¨g
Ë 
	`_
("list ofÅerminals (pty,Åty...) must follow -t");

441 
îr
=
	`∑r£_li°
(
¨g
, 
∑r£_ây
);

442 if(
îr
) Érr;

443 
£À˘i⁄_li°
->
ty≥code
 = 
SEL_TTY
;

444  
NULL
;

446 
	`åa˚
("-u select by userÉffective ID (supportsÇames)\n");

447 
¨g
=
	`gë_›t_¨g
();

448 if(!
¨g
Ë 
	`_
("list of users must follow -u");

449 
îr
=
	`∑r£_li°
(
¨g
, 
∑r£_uid
);

450 if(
îr
) Érr;

451 
£À˘i⁄_li°
->
ty≥code
 = 
SEL_EUID
;

452  
NULL
;

454 
	`åa˚
("-w wide output\n");

455 
w_cou¡
++;

458 if(
≥rs⁄Æôy
 & 
PER_SVR4_x
){

460 
	`åa˚
("-x worksÜike Sun Solaris & SCO Unixware -y option\n");

461 
f‹m©_modifõrs
 |
FM_y
;

464 if(
≥rs⁄Æôy
 & 
PER_HPUX_x
){

465 
	`åa˚
("-xÉxtendsÅhe commandÜine\n");

466 
w_cou¡
 += 2;

467 
unix_f_›ti⁄
 = 1;

470  
	`_
("must setÖersonalityÅo get -x option");

472 
	`åa˚
("-yÖrintÜnone info in UID/USER column or do Sun -l hack\n");

473 
f‹m©_modifõrs
 |
FM_y
;

478 
	`åa˚
("-z showsáliased MAC info\n");

479 
f‹m©_modifõrs
 |
FM_M
;

483 
	`åa˚
("-z secects by zone\n");

484 
¨g
=
	`gë_›t_¨g
();

485 if(!
¨g
Ë 
	`_
("list of zones (contexts,Üabels, whatever?) must follow -z");

486 
îr
=
	`∑r£_li°
(
¨g
, 
∑r£_z⁄e
);

487 if(
îr
) Érr;

488 
£À˘i⁄_li°
->
ty≥code
 = 
SEL_ZONE
;

489  
NULL
;

492  
	`_
("embedded '-'ámong SysV options makesÇo sense");

495 
	`ˇè°r›hic_Áûuª
(
__FILE__
, 
__LINE__
, 
	`_
("pleaseÑeportÅhis bug"));

498  
	`_
("unsupported SysV option");

501  
NULL
;

502 
	}
}

505 c⁄° *
	$∑r£_bsd_›ti⁄
(){

506 c⁄° *
¨g
;

507 c⁄° *
îr
;

509 
Êag±r
 = 
ps_¨gv
[
thißrg
];

510 if(
Êag±r
[0]=='-'){

511 if(!
f‹˚_bsd
Ë 
	`_
("cannot happen -Öroblem #1");

513 
Êag±r
--;

514 if(
≥rs⁄Æôy
 & 
PER_FORCE_BSD
){

515 if(!
f‹˚_bsd
Ë 
	`_
("cannot happen -Öroblem #2");

517 if(
f‹˚_bsd
Ë 
	`_
("second chanceÖarse failed,Çot BSD or SysV");

521 *++
Êag±r
){

522 *
Êag±r
){

524 
	`åa˚
("0..9Öld BSD-style select byÖrocess ID\n");

525 
¨g
=
Êag±r
;

526 
îr
=
	`∑r£_li°
(
¨g
, 
∑r£_pid
);

527 if(
îr
) Érr;

528 
£À˘i⁄_li°
->
ty≥code
 = 
SEL_PID
;

529  
NULL
;

533 
	`åa˚
("A increasesÅheárgument space (Digital Unix)\n");

534  
	`_
("option A isÑeserved");

538 
	`åa˚
("C useÑaw CPUÅime for %%CPU instead of decayingáve\n");

539  
	`_
("option C isÑeserved");

543 
	`åa˚
("HÖrint LWP (thread) info\n");

544 
thªad_Êags
 |
TF_B_H
;

548 
	`åa˚
("LÜistáll format specifiers\n");

549 
	`ex˛usive
("L");

550 
	`¥öt_f‹m©_•ecifõrs
();

551 
	`exô
(0);

553 
	`åa˚
("M MacOS XÅhread display,Üike AIX/Tru64\n");

554 
thªad_Êags
 |
TF_B_m
;

557 
	`åa˚
("OÜike o + defaults,áddÇew columnsáfter PID,álso sort\n");

558 
¨g
=
	`gë_›t_¨g
();

559 if(!
¨g
Ë 
	`_
("format or sort specification must follow O");

560 
	`de„r_sf_›ti⁄
(
¨g
, 
SF_B_O
);

561  
NULL
;

564 
	`åa˚
("S include dead kids in sum\n");

565 
ö˛ude_dód_chûdªn
 = 1;

568 
	`åa˚
("T selectállÖrocesses onÅhisÅerminal\n");

571 
£À˘i⁄_node
 *
node
;

572 
node
 = 
	`mÆloc
((
£À˘i⁄_node
));

573 
node
->
u
 = 
	`mÆloc
((
£l_uni⁄
));

574 
node
->
u
[0].
ây
 = 
ˇched_ây
;

575 
node
->
ty≥code
 = 
SEL_TTY
;

576 
node
->
n
 = 1;

577 
node
->
√xt
 = 
£À˘i⁄_li°
;

578 
£À˘i⁄_li°
 = 
node
;

582 
	`åa˚
("U selectÖrocesses for specified users\n");

583 
¨g
=
	`gë_›t_¨g
();

584 if(!
¨g
Ë 
	`_
("list of users must follow U");

585 
îr
=
	`∑r£_li°
(
¨g
, 
∑r£_uid
);

586 if(
îr
) Érr;

587 
£À˘i⁄_li°
->
ty≥code
 = 
SEL_EUID
;

588  
NULL
;

590 
	`åa˚
("V show version info\n");

591 
	`ex˛usive
("V");

592 
	`di•œy_ps_vîsi⁄
();

593 
	`exô
(0);

595 
	`åa˚
("W N/A get swap info from ...Çot /dev/drum.\n");

596  
	`_
("obsolete W optionÇot supported (you haveá /dev/drum?)");

599 
	`åa˚
("X old Linux i386Ñegister format\n");

600 
f‹m©_Êags
 |
FF_LX
;

603 
	`åa˚
("ZÖrint securityÜabel for Mandatory Access Control.\n");

604 
f‹m©_modifõrs
 |
FM_M
;

607 
	`åa˚
("a selectáll w/tty, including other users\n");

608 
sim∂e_£À˘
 |
SS_B_a
;

611 
	`åa˚
("cÅrue commandÇame\n");

612 
bsd_c_›ti⁄
 = 1;

619 
	`åa˚
("eÉnvironment\n");

620 
bsd_e_›ti⁄
 = 1;

623 
	`åa˚
("f ASCIIárt forest\n");

624 
f‹e°_ty≥
 = 'b';

627 
	`åa˚
("g _all_,Éven groupÜeaders\n");

628 
sim∂e_£À˘
 |
SS_B_g
;

631 
	`åa˚
("hÑepeat header\n");

632 if(
hódî_ty≥
Ë 
	`_
("only one heading option may be specified");

633 if(
≥rs⁄Æôy
 & 
PER_BSD_h
Ë
hódî_ty≥
 = 
HEAD_MULTI
;

634 
hódî_ty≥
 = 
HEAD_NONE
;

637 
	`åa˚
("j job control format\n");

638 
f‹m©_Êags
 |
FF_Bj
;

645 
	`åa˚
("k specify sorting keywords\n");

646 
¨g
=
	`gë_›t_¨g
();

647 if(!
¨g
Ë 
	`_
("long sort specification must follow 'k'");

648 
	`de„r_sf_›ti⁄
(
¨g
, 
SF_G_s‹t
);

649  
NULL
;

651 
	`åa˚
("l displayÜong format\n");

652 
f‹m©_Êags
 |
FF_Bl
;

655 
	`åa˚
("mállÅhreads, sort on mem use, show mem info\n");

656 if(
≥rs⁄Æôy
 & 
PER_OLD_m
){

657 
f‹m©_Êags
 |
FF_Lm
;

660 if(
≥rs⁄Æôy
 & 
PER_BSD_m
){

661 
	`de„r_sf_›ti⁄
("pmem", 
SF_B_m
);

664 
thªad_Êags
 |
TF_B_m
;

667 
	`åa˚
("nÇumeric output for WCHAN,ánd USERÑeplaced by UID\n");

668 
wch™_is_numbî
 = 1;

669 
u£r_is_numbî
 = 1;

673 
	`åa˚
("o specify user-defined format\n");

674 
¨g
=
	`gë_›t_¨g
();

675 if(!
¨g
Ë 
	`_
("format specification must follow o");

676 
	`de„r_sf_›ti⁄
(
¨g
, 
SF_B_o
);

677  
NULL
;

679 
	`åa˚
("p select byÖrocess ID\n");

680 
¨g
=
	`gë_›t_¨g
();

681 if(!
¨g
Ë 
	`_
("list ofÖrocess IDs must followÖ");

682 
îr
=
	`∑r£_li°
(
¨g
, 
∑r£_pid
);

683 if(
îr
) Érr;

684 
£À˘i⁄_li°
->
ty≥code
 = 
SEL_PID
;

685  
NULL
;

687 
	`åa˚
("q Quick select byÖrocess ID\n");

688 
¨g
=
	`gë_›t_¨g
();

689 if(!
¨g
)  "List ofÖrocess IDs must follow q.";

690 
îr
=
	`∑r£_li°
(
¨g
, 
∑r£_pid
);

691 if(
îr
) Érr;

692 
£À˘i⁄_li°
->
ty≥code
 = 
SEL_PID_QUICK
;

693  
NULL
;

695 
	`åa˚
("r selectÑunningÖrocesses\n");

696 
ru¬ög_⁄ly
 = 1;

699 
	`åa˚
("s display signal format\n");

700 
f‹m©_Êags
 |
FF_Bs
;

703 
	`åa˚
("t select byÅty\n");

705 
¨g
=
	`gë_›t_¨g
();

706 if(!
¨g
){

708 
£À˘i⁄_node
 *
node
;

709 
node
 = 
	`mÆloc
((
£À˘i⁄_node
));

710 
node
->
u
 = 
	`mÆloc
((
£l_uni⁄
));

711 
node
->
u
[0].
ây
 = 
ˇched_ây
;

712 
node
->
ty≥code
 = 
SEL_TTY
;

713 
node
->
n
 = 1;

714 
node
->
√xt
 = 
£À˘i⁄_li°
;

715 
£À˘i⁄_li°
 = 
node
;

716  
NULL
;

718 
îr
=
	`∑r£_li°
(
¨g
, 
∑r£_ây
);

719 if(
îr
) Érr;

720 
£À˘i⁄_li°
->
ty≥code
 = 
SEL_TTY
;

721  
NULL
;

723 
	`åa˚
("u display user-oriented\n");

724 
f‹m©_Êags
 |
FF_Bu
;

727 
	`åa˚
("v display virtual memory\n");

728 
f‹m©_Êags
 |
FF_Bv
;

731 
	`åa˚
("w wide output\n");

732 
w_cou¡
++;

735 
	`åa˚
("x selectÖrocesses without controllingÅtys\n");

736 
sim∂e_£À˘
 |
SS_B_x
;

739  
	`_
("embedded '-'ámong BSD options makesÇo sense");

742 
	`ˇè°r›hic_Áûuª
(
__FILE__
, 
__LINE__
, 
	`_
("pleaseÑeportÅhis bug"));

745  
	`_
("unsupported option (BSD syntax)");

748  
NULL
;

749 
	}
}

756 c⁄° *
	$gøb_gnu_¨g
(){

757 *
Êag±r
){

759  
NULL
;

761 if(*++
Êag±r
)  flagptr;

762  
NULL
;

766 if(
thißrg
+2 > 
ps_¨gc
Ë 
NULL
;

768 if(*(
ps_¨gv
[
thißrg
+1]Ë='\0'Ë 
NULL
;

769  
ps_¨gv
[++
thißrg
];

770 
	}
}

772 
	sgnu_èbÀ_°ru˘
 {

773 c⁄° *
	m«me
;

774 c⁄° *
	mjump
;

775 } 
	tgnu_èbÀ_°ru˘
;

777 
	$com∑ª_gnu_èbÀ_°ru˘s
(c⁄° *
a
, c⁄° *
b
){

778  
	`°rcmp
(((c⁄° 
gnu_èbÀ_°ru˘
*)
a
)->
«me
,((c⁄° gnu_èbÀ_°ru˘*)
b
)->name);

779 
	}
}

782 c⁄° *
	$∑r£_gnu_›ti⁄
(){

783 c⁄° *
¨g
;

784 c⁄° *
îr
;

785 *
s
;

786 
size_t
 
¶
;

787 
buf
[16];

788 
gnu_èbÀ_°ru˘
 
födme
 = { 
buf
, 
NULL
};

789 
gnu_èbÀ_°ru˘
 *
found
;

790 c⁄° 
gnu_èbÀ_°ru˘
 
gnu_èbÀ
[] = {

791 {"Group", &&
ˇ£_Group
},

792 {"U£r", &&
ˇ£_U£r
},

793 {"cﬁs", &&
ˇ£_cﬁs
},

794 {"cﬁumns", &&
ˇ£_cﬁumns
},

795 {"c⁄ãxt", &&
ˇ£_c⁄ãxt
},

796 {"cumuœtive", &&
ˇ£_cumuœtive
},

797 {"de£À˘", &&
ˇ£_de£À˘
},

798 {"f‹e°", &&
ˇ£_f‹e°
},

799 {"f‹m©", &&
ˇ£_f‹m©
},

800 {"group", &&
ˇ£_group
},

801 {"hódî", &&
ˇ£_hódî
},

802 {"hódîs", &&
ˇ£_hódîs
},

803 {"hódög", &&
ˇ£_hódög
},

804 {"hódögs", &&
ˇ£_hódögs
},

806 {"öfo", &&
ˇ£_öfo
},

807 {"löes", &&
ˇ£_löes
},

808 {"no-hódî", &&
ˇ£_no_hódî
},

809 {"no-hódîs", &&
ˇ£_no_hódîs
},

810 {"no-hódög", &&
ˇ£_no_hódög
},

811 {"no-hódögs", &&
ˇ£_no_hódögs
},

812 {"nohódî", &&
ˇ£_nohódî
},

813 {"nohódîs", &&
ˇ£_nohódîs
},

814 {"nohódög", &&
ˇ£_nohódög
},

815 {"nohódögs", &&
ˇ£_nohódögs
},

816 {"pid", &&
ˇ£_pid
},

817 {"µid", &&
ˇ£_µid
},

818 {"quick-pid", &&
ˇ£_pid_quick
},

819 {"rows", &&
ˇ£_rows
},

820 {"sid", &&
ˇ£_sid
},

821 {"s‹t", &&
ˇ£_s‹t
},

822 {"ây", &&
ˇ£_ây
},

823 {"u£r", &&
ˇ£_u£r
},

824 {"vîsi⁄", &&
ˇ£_vîsi⁄
},

825 {"width", &&
ˇ£_width
},

827 c⁄° 
gnu_èbÀ_cou¡
 = (
gnu_èbÀ
)/(
gnu_èbÀ_°ru˘
);

829 
s
 = 
ps_¨gv
[
thißrg
]+2;

830 
¶
 = 
	`°rc•n
(
s
,":=");

831 if(
¶
 > 15Ë 
	`_
("unknown gnuÜong option");

832 
	`°∫˝y
(
buf
, 
s
, 
¶
);

833 
buf
[
¶
] = '\0';

834 
Êag±r
 = 
s
+
¶
;

836 
found
 = 
	`b£¨ch
(&
födme
, 
gnu_èbÀ
, 
gnu_èbÀ_cou¡
,

837 (
gnu_èbÀ_°ru˘
), 
com∑ª_gnu_èbÀ_°ru˘s


840 if(!
found
) {

841 i‡(!
	`°rcmp
(
buf
, 
the_w‹d_hñp
))

842 
ˇ£_hñp
;

843  
	`_
("unknown gnuÜong option");

846 *(
found
->
jump
);

848 
ˇ£_Group
:

849 
	`åa˚
("--Group\n");

850 
¨g
 = 
	`gøb_gnu_¨g
();

851 if(!
¨g
Ë 
	`_
("list ofÑeal groups must follow --Group");

852 
îr
=
	`∑r£_li°
(
¨g
, 
∑r£_gid
);

853 if(
îr
) Érr;

854 
£À˘i⁄_li°
->
ty≥code
 = 
SEL_RGID
;

855  
NULL
;

856 
ˇ£_U£r
:

857 
	`åa˚
("--User\n");

858 
¨g
 = 
	`gøb_gnu_¨g
();

859 if(!
¨g
Ë 
	`_
("list ofÑeal users must follow --User");

860 
îr
=
	`∑r£_li°
(
¨g
, 
∑r£_uid
);

861 if(
îr
) Érr;

862 
£À˘i⁄_li°
->
ty≥code
 = 
SEL_RUID
;

863  
NULL
;

864 
ˇ£_cﬁs
:

865 
ˇ£_width
:

866 
ˇ£_cﬁumns
:

867 
	`åa˚
("--cols\n");

868 
¨g
 = 
	`gøb_gnu_¨g
();

869 if(
¨g
 && *arg){

870 
t
;

871 *
íd±r
;

872 
t
 = 
	`°πﬁ
(
¨g
, &
íd±r
, 0);

873 if(!*
íd±r
 && (
t
>0) && (t<2000000000)){

874 
s¸ìn_cﬁs
 = ()
t
;

875  
NULL
;

878  
	`_
("number of columns must follow --cols, --width, or --columns");

879 
ˇ£_cumuœtive
:

880 
	`åa˚
("--cumulative\n");

881 if(
s
[
¶
]Ë 
	`_
("option --cumulative doesÇotÅakeánárgument");

882 
ö˛ude_dód_chûdªn
 = 1;

883  
NULL
;

884 
ˇ£_de£À˘
:

885 
	`åa˚
("--deselect\n");

886 if(
s
[
¶
]Ë 
	`_
("option --deselect doesÇotÅakeánárgument");

887 
√g©e_£À˘i⁄
 = 1;

888  
NULL
;

889 
ˇ£_no_hódî
:

890 
ˇ£_no_hódîs
:

891 
ˇ£_no_hódög
:

892 
ˇ£_no_hódögs
:

893 
ˇ£_nohódî
:

894 
ˇ£_nohódîs
:

895 
ˇ£_nohódög
:

896 
ˇ£_nohódögs
:

897 
	`åa˚
("--noheaders\n");

898 if(
s
[
¶
]Ë 
	`_
("option --no-heading doesÇotÅakeánárgument");

899 if(
hódî_ty≥
Ë 
	`_
("only one heading option may be specified");

900 
hódî_ty≥
 = 
HEAD_NONE
;

901  
NULL
;

902 
ˇ£_hódî
:

903 
ˇ£_hódîs
:

904 
ˇ£_hódög
:

905 
ˇ£_hódögs
:

906 
	`åa˚
("--headers\n");

907 if(
s
[
¶
]Ë 
	`_
("option --heading doesÇotÅakeánárgument");

908 if(
hódî_ty≥
Ë 
	`_
("only one heading option may be specified");

909 
hódî_ty≥
 = 
HEAD_MULTI
;

910  
NULL
;

911 
ˇ£_f‹e°
:

912 
	`åa˚
("--forest\n");

913 if(
s
[
¶
]Ë 
	`_
("option --forest doesÇotÅakeánárgument");

914 
f‹e°_ty≥
 = 'g';

915  
NULL
;

916 
ˇ£_f‹m©
:

917 
	`åa˚
("--format\n");

918 
¨g
=
	`gøb_gnu_¨g
();

919 if(!
¨g
Ë 
	`_
("format specification must follow --format");

920 
	`de„r_sf_›ti⁄
(
¨g
, 
SF_G_f‹m©
);

921  
NULL
;

922 
ˇ£_group
:

923 
	`åa˚
("--group\n");

924 
¨g
 = 
	`gøb_gnu_¨g
();

925 if(!
¨g
Ë 
	`_
("list ofÉffective groups must follow --group");

926 
îr
=
	`∑r£_li°
(
¨g
, 
∑r£_gid
);

927 if(
îr
) Érr;

928 
£À˘i⁄_li°
->
ty≥code
 = 
SEL_EGID
;

929  
NULL
;

930 
ˇ£_hñp
:

931 
	`åa˚
("--help\n");

932 
¨g
 = 
	`gøb_gnu_¨g
();

933 
	`do_hñp
(
¨g
, 
EXIT_SUCCESS
);

934 
ˇ£_öfo
:

935 
	`åa˚
("--info\n");

936 
	`ex˛usive
("--info");

937 
	`£lf_öfo
();

938 
	`exô
(0);

939  
NULL
;

940 
ˇ£_pid
:

941 
	`åa˚
("--pid\n");

942 
¨g
 = 
	`gøb_gnu_¨g
();

943 if(!
¨g
Ë 
	`_
("list ofÖrocess IDs must follow --pid");

944 
îr
=
	`∑r£_li°
(
¨g
, 
∑r£_pid
);

945 if(
îr
) Érr;

946 
£À˘i⁄_li°
->
ty≥code
 = 
SEL_PID
;

947  
NULL
;

948 
ˇ£_pid_quick
:

949 
	`åa˚
("--quick-pid\n");

950 
¨g
 = 
	`gøb_gnu_¨g
();

951 if(!
¨g
)  "List ofÖrocess IDs must follow --quick-pid.";

952 
îr
=
	`∑r£_li°
(
¨g
, 
∑r£_pid
);

953 if(
îr
) Érr;

954 
£À˘i⁄_li°
->
ty≥code
 = 
SEL_PID_QUICK
;

955  
NULL
;

956 
ˇ£_µid
:

957 
	`åa˚
("--ppid\n");

958 
¨g
 = 
	`gøb_gnu_¨g
();

959 if(!
¨g
Ë 
	`_
("list ofÖrocess IDs must follow --ppid");

960 
îr
=
	`∑r£_li°
(
¨g
, 
∑r£_pid
);

961 if(
îr
) Érr;

962 
£À˘i⁄_li°
->
ty≥code
 = 
SEL_PPID
;

963  
NULL
;

964 
ˇ£_rows
:

965 
ˇ£_löes
:

966 
	`åa˚
("--rows\n");

967 
¨g
 = 
	`gøb_gnu_¨g
();

968 if(
¨g
 && *arg){

969 
t
;

970 *
íd±r
;

971 
t
 = 
	`°πﬁ
(
¨g
, &
íd±r
, 0);

972 if(!*
íd±r
 && (
t
>0) && (t<2000000000)){

973 
s¸ìn_rows
 = ()
t
;

974  
NULL
;

977  
	`_
("number ofÑows must follow --rows or --lines");

978 
ˇ£_sid
:

979 
	`åa˚
("--sid\n");

980 
¨g
 = 
	`gøb_gnu_¨g
();

981 if(!
¨g
Ë 
	`_
("some sidÅhing(s) must follow --sid");

982 
îr
=
	`∑r£_li°
(
¨g
, 
∑r£_pid
);

983 if(
îr
) Érr;

984 
£À˘i⁄_li°
->
ty≥code
 = 
SEL_SESS
;

985  
NULL
;

986 
ˇ£_s‹t
:

987 
	`åa˚
("--sort\n");

988 
¨g
=
	`gøb_gnu_¨g
();

989 if(!
¨g
Ë 
	`_
("long sort specification must follow --sort");

990 
	`de„r_sf_›ti⁄
(
¨g
, 
SF_G_s‹t
);

991  
NULL
;

992 
ˇ£_ây
:

993 
	`åa˚
("--tty\n");

994 
¨g
 = 
	`gøb_gnu_¨g
();

995 if(!
¨g
Ë 
	`_
("list ofÅtys must follow --tty");

996 
îr
=
	`∑r£_li°
(
¨g
, 
∑r£_ây
);

997 if(
îr
) Érr;

998 
£À˘i⁄_li°
->
ty≥code
 = 
SEL_TTY
;

999  
NULL
;

1000 
ˇ£_u£r
:

1001 
	`åa˚
("--user\n");

1002 
¨g
 = 
	`gøb_gnu_¨g
();

1003 if(!
¨g
Ë 
	`_
("list ofÉffective users must follow --user");

1004 
îr
=
	`∑r£_li°
(
¨g
, 
∑r£_uid
);

1005 if(
îr
) Érr;

1006 
£À˘i⁄_li°
->
ty≥code
 = 
SEL_EUID
;

1007  
NULL
;

1008 
ˇ£_vîsi⁄
:

1009 
	`åa˚
("--version\n");

1010 
	`ex˛usive
("--version");

1011 
	`di•œy_ps_vîsi⁄
();

1012 
	`exô
(0);

1013  
NULL
;

1014 
ˇ£_c⁄ãxt
:

1015 
	`åa˚
("--context\n");

1016 
f‹m©_Êags
 |
FF_Fc
;

1017  
NULL
;

1018 
	}
}

1021 c⁄° *
	$∑r£_åaûög_pids
(){

1022 
£À˘i⁄_node
 *
pidnode
;

1023 
£À˘i⁄_node
 *
gΩnode
;

1024 
£À˘i⁄_node
 *
sidnode
;

1025 **
¨gp
;

1026 c⁄° *
îr
;

1027 
i
;

1029 
i
 = 
ps_¨gc
 - 
thißrg
;

1030 
¨gp
 = 
ps_¨gv
 + 
thißrg
;

1031 
thißrg
 = 
ps_¨gc
 - 1;

1033 
pidnode
 = 
	`mÆloc
((
£À˘i⁄_node
));

1034 
pidnode
->
u
 = 
	`mÆloc
(
i
*(
£l_uni⁄
));

1035 
pidnode
->
n
 = 0;

1037 
gΩnode
 = 
	`mÆloc
((
£À˘i⁄_node
));

1038 
gΩnode
->
u
 = 
	`mÆloc
(
i
*(
£l_uni⁄
));

1039 
gΩnode
->
n
 = 0;

1041 
sidnode
 = 
	`mÆloc
((
£À˘i⁄_node
));

1042 
sidnode
->
u
 = 
	`mÆloc
(
i
*(
£l_uni⁄
));

1043 
sidnode
->
n
 = 0;

1045 
i
--){

1046 *
d©a
;

1047 
d©a
 = *(
¨gp
++);

1048 *
d©a
){

1049 : 
îr
 = 
	`∑r£_pid
–
d©a
, 
pidnode
->
u
 +Öidnode->
n
++); ;

1050 '-': 
îr
 = 
	`∑r£_pid
(++
d©a
, 
gΩnode
->
u
 + gΩnode->
n
++); ;

1051 '+': 
îr
 = 
	`∑r£_pid
(++
d©a
, 
sidnode
->
u
 + sidnode->
n
++); ;

1053 if(
îr
) Érr;

1056 if(
pidnode
->
n
){

1057 
pidnode
->
√xt
 = 
£À˘i⁄_li°
;

1058 
£À˘i⁄_li°
 = 
pidnode
;

1059 
£À˘i⁄_li°
->
ty≥code
 = 
SEL_PID
;

1062 if(
gΩnode
->
n
){

1063 
gΩnode
->
√xt
 = 
£À˘i⁄_li°
;

1064 
£À˘i⁄_li°
 = 
gΩnode
;

1065 
£À˘i⁄_li°
->
ty≥code
 = 
SEL_PGRP
;

1068 if(
sidnode
->
n
){

1069 
sidnode
->
√xt
 = 
£À˘i⁄_li°
;

1070 
£À˘i⁄_li°
 = 
sidnode
;

1071 
£À˘i⁄_li°
->
ty≥code
 = 
SEL_SESS
;

1074  
NULL
;

1075 
	}
}

1079 
	$ª£t_∑r£r
(){

1080 
w_cou¡
 = 0;

1081 
	}
}

1083 
	$¨g_ty≥
(c⁄° *
°r
){

1084 
tmp
 = 
°r
[0];

1085 if((
tmp
>='a'Ë&& (tmp<='z')Ë 
ARG_BSD
;

1086 if((
tmp
>='A'Ë&& (tmp<='Z')Ë 
ARG_BSD
;

1087 if((
tmp
>='0'Ë&& (tmp<='9')Ë 
ARG_PID
;

1088 if(
tmp
=='+'Ë 
ARG_SESS
;

1089 if(
tmp
!='-'Ë 
ARG_FAIL
;

1090 
tmp
 = 
°r
[1];

1091 if((
tmp
>='a'Ë&& (tmp<='z')Ë 
ARG_SYSV
;

1092 if((
tmp
>='A'Ë&& (tmp<='Z')Ë 
ARG_SYSV
;

1093 if((
tmp
>='0'Ë&& (tmp<='9')Ë 
ARG_PGRP
;

1094 if(
tmp
!='-'Ë 
ARG_FAIL
;

1095 
tmp
 = 
°r
[2];

1096 if((
tmp
>='a'Ë&& (tmp<='z')Ë 
ARG_GNU
;

1097 if((
tmp
>='A'Ë&& (tmp<='Z')Ë 
ARG_GNU
;

1098 if(
tmp
=='\0'Ë 
ARG_END
;

1099  
ARG_FAIL
;

1100 
	}
}

1103 c⁄° *
	$∑r£_Æl_›ti⁄s
(){

1104 c⁄° *
îr
 = 
NULL
;

1105 
©
;

1106 ++
thißrg
 < 
ps_¨gc
){

1107 
	`åa˚
("∑r£_Æl_›ti⁄†ˇŒögárg_ty≥ f‹ \"%s\"\n", 
ps_¨gv
[
thißrg
]);

1108 
©
 = 
	`¨g_ty≥
(
ps_¨gv
[
thißrg
]);

1109 
	`åa˚
("ps_¨gv[thißrg] i†%s\n", 
ps_¨gv
[
thißrg
]);

1110 
©
){

1111 
ARG_GNU
:

1112 
îr
 = 
	`∑r£_gnu_›ti⁄
();

1114 
ARG_SYSV
:

1115 if(!
f‹˚_bsd
){

1116 
îr
 = 
	`∑r£_sysv_›ti⁄
();

1118 
ARG_BSD
:

1119 if(
f‹˚_bsd
 && !(
≥rs⁄Æôy
 & 
PER_FORCE_BSD
)Ë 
	`_
("way bad");

1121 
¥e„r_bsd_deÁu…s
 = 1;

1122 
îr
 = 
	`∑r£_bsd_›ti⁄
();

1124 
ARG_PGRP
:

1125 
ARG_SESS
:

1126 
ARG_PID
:

1127 
¥e„r_bsd_deÁu…s
 = 1;

1128 
îr
 = 
	`∑r£_åaûög_pids
();

1130 
ARG_END
:

1131 
ARG_FAIL
:

1132 
	`åa˚
(" FAIL/END o¿[%s]\n",
ps_¨gv
[
thißrg
]);

1133  
	`_
("garbage option");

1136 
	`¥ötf
(" ? %s\n",
ps_¨gv
[
thißrg
]);

1137  
	`_
("something broke");

1139 if(
îr
) Érr;

1141  
NULL
;

1142 
	}
}

1144 
	$choo£_dimísi⁄s
(){

1145 if(
w_cou¡
 && (
s¸ìn_cﬁs
<132)) screen_cols=132;

1146 if(
w_cou¡
>1Ë
s¸ìn_cﬁs
=
OUTBUF_SIZE
;

1148 
	}
}

1150 c⁄° *
	$thªad_›ti⁄_check
(){

1151 if(!
thªad_Êags
){

1152 
thªad_Êags
 = 
TF_show_¥oc
;

1153  
NULL
;

1156 if(
f‹e°_ty≥
){

1157  
	`_
("thread display conflicts with forest display");

1161 if((
thªad_Êags
&
TF_B_H
Ë&& (thªad_Êags&(
TF_B_m
|
TF_U_m
)))

1162  
	`_
("thread flags conflict; can't use H with m or -m");

1163 if((
thªad_Êags
&
TF_B_m
Ë&& (thªad_Êags&
TF_U_m
))

1164  
	`_
("thread flags conflict; can't use both mánd -m");

1165 if((
thªad_Êags
&
TF_U_L
Ë&& (thªad_Êags&
TF_U_T
))

1166  
	`_
("thread flags conflict; can't use both -Lánd -T");

1168 if(
thªad_Êags
&
TF_B_H
Ëthªad_Êag†|(
TF_show_¥oc
|
TF_loo£_èsks
);

1169 if(
thªad_Êags
&(
TF_B_m
|
TF_U_m
)Ëthªad_Êag†|(
TF_show_¥oc
|
TF_show_èsk
|
TF_show_bŸh
);

1171 if(
thªad_Êags
&(
TF_U_T
|
TF_U_L
)){

1172 if(
thªad_Êags
&(
TF_B_m
|
TF_U_m
|
TF_B_H
)){

1176 
thªad_Êags
 |
TF_mu°_u£
;

1179 
thªad_Êags
 |
TF_show_èsk
;

1184  
NULL
;

1185 
	}
}

1187 
	$¨g_∑r£
(
¨gc
, *
¨gv
[]){

1188 c⁄° *
îr
 = 
NULL
;

1189 c⁄° *
îr2
 = 
NULL
;

1190 
ps_¨gc
 = 
¨gc
;

1191 
ps_¨gv
 = 
¨gv
;

1192 
thißrg
 = 0;

1194 if(
≥rs⁄Æôy
 & 
PER_FORCE_BSD
Ë
åy_bsd
;

1196 
îr
 = 
	`∑r£_Æl_›ti⁄s
();

1197 if(
îr
Ë
åy_bsd
;

1198 
îr
 = 
	`thªad_›ti⁄_check
();

1199 if(
îr
Ë
åy_bsd
;

1200 
îr
 = 
	`¥o˚ss_sf_›ti⁄s
();

1201 if(
îr
Ë
åy_bsd
;

1202 
îr
 = 
	`£À˘_bôs_£tup
();

1203 if(
îr
Ë
åy_bsd
;

1205 
	`choo£_dimísi⁄s
();

1208 
åy_bsd
:

1209 
	`åa˚
("---------ÇowÅry BSD ------\n");

1211 
	`ª£t_globÆ
();

1212 
	`ª£t_∑r£r
();

1213 
	`ª£t_s‹tf‹m©
();

1214 
f‹m©_Êags
 = 0;

1215 
ps_¨gc
 = 
¨gc
;

1216 
ps_¨gv
 = 
¨gv
;

1217 
thißrg
 = 0;

1219 
f‹˚_bsd
=1;

1220 
¥e„r_bsd_deÁu…s
=1;

1221 if(!–(
PER_OLD_m
|
PER_BSD_m
Ë& 
≥rs⁄Æôy
 ))

1222 
≥rs⁄Æôy
 |
PER_OLD_m
;

1225 
îr2
 = 
	`∑r£_Æl_›ti⁄s
();

1226 if(
îr2
Ë
tŸÆ_Áûuª
;

1227 
îr2
 = 
	`thªad_›ti⁄_check
();

1228 if(
îr2
Ë
tŸÆ_Áûuª
;

1229 
îr2
 = 
	`¥o˚ss_sf_›ti⁄s
();

1230 if(
îr2
Ë
tŸÆ_Áûuª
;

1231 
îr2
 = 
	`£À˘_bôs_£tup
();

1232 if(
îr2
Ë
tŸÆ_Áûuª
;

1234 
	`choo£_dimísi⁄s
();

1237 
tŸÆ_Áûuª
:

1238 
	`ª£t_∑r£r
();

1239 if(
≥rs⁄Æôy
 & 
PER_FORCE_BSD
Ë
	`Ârötf
(
°dîr
, 
	`_
("îr‹: %s\n"), 
îr2
);

1240 
	`Ârötf
(
°dîr
, 
	`_
("îr‹: %s\n"), 
îr
);

1241 
	`do_hñp
(
NULL
, 
EXIT_FAILURE
);

1242 
	}
}

	@ps/select.c

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

24 
	~"../¥oc/¥o˝s.h
"

25 
	~"../¥oc/ªad¥oc.h
"

27 
	~"comm⁄.h
"

31 
	#has_our_euid
(
p
Ë(()’)->
euid
 =()
ˇched_euid
)

	)

32 
	#⁄_our_ây
(
p
Ë(()’)->
ây
 =()
ˇched_ây
)

	)

33 
	#ru¬ög
(
p
Ë((’)->
°©e
=='R')||(’)->°©e=='D'))

	)

34 
	#£ssi⁄_Àadî
(
p
Ë(’)->
£ssi⁄
 =’)->
tgid
)

	)

35 
	#wôhout_a_ây
(
p
Ë(!’)->
ây
)

	)

37 
	g£À˘_bôs
 = 0;

40 c⁄° *
	$£À˘_bôs_£tup
(){

41 
swôch_vÆ
 = 0;

43 if(!
sim∂e_£À˘
 && !
¥e„r_bsd_deÁu…s
){

44 
£À˘_bôs
 = 0xaa00;

45  
NULL
;

48 if–!(
≥rs⁄Æôy
 & 
PER_NO_DEFAULT_g
Ë&& !(
sim∂e_£À˘
&(
SS_U_a
|
SS_U_d
)) )

49 
swôch_vÆ
 = 
sim∂e_£À˘
|
SS_B_g
;

51 
swôch_vÆ
 = 
sim∂e_£À˘
;

52 
swôch_vÆ
){

54 
SS_U_a
 | 
SS_U_d
: 
£À˘_bôs
 = 0x3f3f; ;

55 
SS_U_a
: 
£À˘_bôs
 = 0x0303; ;

56 
SS_U_d
: 
£À˘_bôs
 = 0x3333; ;

58 0: 
£À˘_bôs
 = 0x0202; ;

59 
SS_B_a
: 
£À˘_bôs
 = 0x0303; ;

60 
SS_B_x
 : 
£À˘_bôs
 = 0x2222; ;

61 
SS_B_x
 | 
SS_B_a
: 
£À˘_bôs
 = 0x3333; ;

63 
SS_B_g
 : 
£À˘_bôs
 = 0x0a0a; ;

64 
SS_B_g
 | 
SS_B_a
: 
£À˘_bôs
 = 0x0f0f; ;

65 
SS_B_g
 | 
SS_B_x
 : 
£À˘_bôs
 = 0xaaaa; ;

66 
SS_B_g
 | 
SS_B_x
 | 
SS_B_a
:

67 
Æl_¥o˚s£s
 = 1;

68 
sim∂e_£À˘
 = 0;

71  
	`_
("process selection options conflict");

74  
NULL
;

75 
	}
}

78 
	$èbÀ_ac˚±
(
¥oc_t
 *
buf
){

79 
¥oc_ödex
;

80 
¥oc_ödex
 = (
	`has_our_euid
(
buf
) <<0)

81 | (
	`£ssi⁄_Àadî
(
buf
) <<1)

82 | (
	`wôhout_a_ây
(
buf
) <<2)

83 | (
	`⁄_our_ây
(
buf
) <<3);

84  (
£À˘_bôs
 & (1<<
¥oc_ödex
));

85 
	}
}

88 
	$¥oc_was_li°ed
(
¥oc_t
 *
buf
){

89 
£À˘i⁄_node
 *
¢
 = 
£À˘i⁄_li°
;

90 
i
;

91 if(!
¢
)  0;

92 
¢
){

93 
¢
->
ty≥code
){

95 
	`ˇè°r›hic_Áûuª
(
__FILE__
, 
__LINE__
, 
	`_
("pleaseÑeportÅhis bug"));

97 
	#ªtu∫_if_m©ch
(
foo
,
b¨
) \

98 
i
=
¢
->
n
; i--) \

99 if(()(
buf
->
foo
Ë=()(*(
¢
->
u
+
i
)).
b¨
) \

100  1

	)

102 ; 
SEL_RUID
: 
	`ªtu∫_if_m©ch
(
ruid
,
uid
);

103 ; 
SEL_EUID
: 
	`ªtu∫_if_m©ch
(
euid
,
uid
);

104 ; 
SEL_SUID
: 
	`ªtu∫_if_m©ch
(
suid
,
uid
);

105 ; 
SEL_FUID
: 
	`ªtu∫_if_m©ch
(
fuid
,
uid
);

107 ; 
SEL_RGID
: 
	`ªtu∫_if_m©ch
(
rgid
,
gid
);

108 ; 
SEL_EGID
: 
	`ªtu∫_if_m©ch
(
egid
,
gid
);

109 ; 
SEL_SGID
: 
	`ªtu∫_if_m©ch
(
sgid
,
gid
);

110 ; 
SEL_FGID
: 
	`ªtu∫_if_m©ch
(
fgid
,
gid
);

112 ; 
SEL_PGRP
: 
	`ªtu∫_if_m©ch
(
pgΩ
,
pid
);

113 ; 
SEL_PID
 : 
	`ªtu∫_if_m©ch
(
tgid
,
pid
);

114 ; 
SEL_PID_QUICK
 : 
	`ªtu∫_if_m©ch
(
tgid
,
pid
);

115 ; 
SEL_PPID
: 
	`ªtu∫_if_m©ch
(
µid
,ppid);

116 ; 
SEL_TTY
 : 
	`ªtu∫_if_m©ch
(
ây
,tty);

117 ; 
SEL_SESS
: 
	`ªtu∫_if_m©ch
(
£ssi⁄
,
pid
);

119 ; 
SEL_COMM
: 
i
=
¢
->
n
; i--)

120 if(!
	`°∫cmp
–
buf
->
cmd
, (*(
¢
->
u
+
i
)).cmd, 15 ))  1;

124 #unde‡
ªtu∫_if_m©ch


127 
¢
 = sn->
√xt
;

130 
	}
}

134 
	$w™t_this_¥oc
(
¥oc_t
 *
buf
){

135 
ac˚±ed_¥oc
 = 1;

139 if(
Æl_¥o˚s£s
Ë
föish
;

142 if((
sim∂e_£À˘
 || !
£À˘i⁄_li°
))

143 if(
	`èbÀ_ac˚±
(
buf
)Ë
föish
;

146 if(
	`¥oc_was_li°ed
(
buf
)Ë
föish
;

149 
ac˚±ed_¥oc
 = 0;

152 
föish
:

153 if(
ru¬ög_⁄ly
 && !
	`ru¬ög
(
buf
)Ë
ac˚±ed_¥oc
 = 0;

154 if(
√g©e_£À˘i⁄
Ë !
ac˚±ed_¥oc
;

155  
ac˚±ed_¥oc
;

156 
	}
}

	@ps/sortformat.c

20 
	~<gΩ.h
>

21 
	~<pwd.h
>

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

26 
	~<sys/ty≥s.h
>

28 
	~"../¥oc/ªad¥oc.h
"

29 
	~"../¥oc/sysöfo.h
"

31 
	~"comm⁄.h
"

33 
sf_node
 *
	gsf_li°
 = 
NULL
;

34 
	ghave_gnu_s‹t
 = 0;

35 
	gÆªady_∑r£d_s‹t
 = 0;

36 
	gÆªady_∑r£d_f‹m©
 = 0;

40 
f‹m©_node
 *
	$do_⁄e_•ec
(c⁄° *
•ec
, c⁄° *
ovîride
){

41 
	`¥ötf
("do one spec()\n");

42 c⁄° 
f‹m©_°ru˘
 *
fs
;

43 c⁄° 
ma¸o_°ru˘
 *
ms
;

45 
fs
 = 
	`£¨ch_f‹m©_¨øy
(
•ec
);

47 if(
fs
){

48 
w1
, 
w2
;

49 
f‹m©_node
 *
thi¢ode
;

50 
thi¢ode
 = 
	`mÆloc
((
f‹m©_node
));

51 if(
fs
->
Êags
 & 
CF_PIDMAX
){

52 
w1
 = ()
	`gë_pid_digôs
();

53 
w2
 = 
	`°æí
(
fs
->
hód
);

54 if(
w2
>
w1
) w1=w2;

56 
w1
 = 
fs
->
width
;

58 if(
ovîride
){

59 
w2
 = 
	`°æí
(
ovîride
);

60 
thi¢ode
->
width
 = (
w1
>
w2
)?w1:w2;

61 
thi¢ode
->
«me
 = 
	`°rdup
(
ovîride
);

63 
thi¢ode
->
width
 = 
w1
;

64 
thi¢ode
->
«me
 = 
	`°rdup
(
fs
->
hód
);

66 
thi¢ode
->
¥
 = 
fs
->pr;

67 
thi¢ode
->
√ed
 = 
fs
->need;

68 
thi¢ode
->
víd‹
 = 
fs
->vendor;

69 
thi¢ode
->
Êags
 = 
fs
->flags;

70 
thi¢ode
->
√xt
 = 
NULL
;

71  
thi¢ode
;

75 
ms
 = 
	`£¨ch_ma¸o_¨øy
(
•ec
);

76 if(
ms
){

77 
f‹m©_node
 *
li°
 = 
NULL
;

78 
f‹m©_node
 *
√wnode
;

79 c⁄° *
wÆk
;

80 
di°
;

81 
buf
[16];

82 
wÆk
 = 
ms
->
hód
;

83 *
wÆk
){

84 
di°
 = 
	`°rc•n
(
wÆk
, ", ");

85 
	`°∫˝y
(
buf
,
wÆk
,
di°
);

86 
buf
[
di°
] = '\0';

87 
√wnode
 = 
	`do_⁄e_•ec
(
buf
,
ovîride
);

88 
√wnode
->
√xt
 = 
li°
;

89 
li°
 = 
√wnode
;

90 
wÆk
 +
di°
;

91 if(*
wÆk
) walk++;

93  
li°
;

96  
NULL
;

97 
	}
}

101 
	$O_wøp
(
sf_node
 *
s‚
, 
Ÿy≥
){

102 
f‹m©_node
 *
‚ode
;

103 
f‹m©_node
 *
ídp
;

104 c⁄° *
åaûî
;

106 
åaûî
 = (
Ÿy≥
=='b') ? "END_BSD" : "END_SYS5" ;

108 
‚ode
 = 
	`do_⁄e_•ec
("pid",
NULL
);

109 if(!
‚ode
)
	`ˇè°r›hic_Áûuª
(
__FILE__
, 
__LINE__
, 
	`_
("seriously crashing: goodbye cruel world"));

110 
ídp
 = 
s‚
->
f_cooked
; ídp->
√xt
)Éndp =Éndp->next;

111 
ídp
->
√xt
 = 
‚ode
;

113 
‚ode
 = 
	`do_⁄e_•ec
(
åaûî
,
NULL
);

114 if(!
‚ode
)
	`ˇè°r›hic_Áûuª
(
__FILE__
, 
__LINE__
, 
	`_
("seriously crashing: goodbye cruel world"));

115 
ídp
 = 
‚ode
; ídp->
√xt
)Éndp =Éndp->next;

116 
ídp
->
√xt
 = 
s‚
->
f_cooked
;

117 
s‚
->
f_cooked
 = 
‚ode
;

118 
	}
}

124 c⁄° *
	$aix_f‹m©_∑r£
(
sf_node
 *
s‚
){

125 *
buf
;

126 *
wÆk
;

127 
ôems
;

130 
ôems
 = 0;

131 
wÆk
 = 
s‚
->
sf
;

133 
c
;

134 
öôül
:

135 
c
 = *
wÆk
++;

136 if(
c
=='%'Ë
gë_desc
;

137 if(!
c
Ë
looks_ok
;

139 
ôems
++;

140 
gë_m‹e_ãxt
:

141 
c
 = *
wÆk
++;

142 if(
c
=='%'Ë
gë_desc
;

143 if(
c
Ë
gë_m‹e_ãxt
;

144 
looks_ok
;

145 
gë_desc
:

146 
ôems
++;

147 
c
 = *
wÆk
++;

148 if(
c
Ë
öôül
;

149  
	`_
("improper AIX field descriptor");

150 
looks_ok
:

155 
buf
 = 
	`°rdup
(
s‚
->
sf
);

156 
wÆk
 = 
s‚
->
sf
;

158 
ôems
--){

159 
f‹m©_node
 *
‚ode
;

160 
f‹m©_node
 *
ídp
;

162 if(*
wÆk
 == '%'){

163 c⁄° 
aix_°ru˘
 *
aix
;

164 
wÆk
++;

165 if(*
wÆk
 ='%'Ë
doubÀ_≥r˚¡
;

166 
aix
 = 
	`£¨ch_aix_¨øy
(*
wÆk
);

167 
wÆk
++;

168 if(!
aix
){

169 
	`‰ì
(
buf
);

170  
	`_
("unknown AIX field descriptor");

172 
‚ode
 = 
	`do_⁄e_•ec
(
aix
->
•ec
,áix->
hód
);

173 if(!
‚ode
){

174 
	`‰ì
(
buf
);

175  
	`_
("AIX field descriptorÖrocessing bug");

178 
Àn
;

179 
Àn
 = 
	`°rc•n
(
wÆk
, "%");

180 
	`mem˝y
(
buf
,
wÆk
,
Àn
);

182 
doubÀ_≥r˚¡
:

183 
Àn
 = 1;

184 
buf
[0] = '%';

186 
buf
[
Àn
] = '\0';

187 
wÆk
 +
Àn
;

188 
‚ode
 = 
	`mÆloc
((
f‹m©_node
));

189 
‚ode
->
width
 = 
Àn
;

190 
‚ode
->
«me
 = 
	`°rdup
(
buf
);

191 
‚ode
->
¥
 = 
NULL
;

192 
‚ode
->
√ed
 = 0;

193 
‚ode
->
víd‹
 = 
AIX
;

194 
‚ode
->
Êags
 = 
CF_PRINT_EVERY_TIME
;

195 
‚ode
->
√xt
 = 
NULL
;

198 
ídp
 = 
‚ode
; ídp->
√xt
)Éndp =Éndp->next;

199 
ídp
->
√xt
 = 
s‚
->
f_cooked
;

200 
s‚
->
f_cooked
 = 
‚ode
;

202 
	`‰ì
(
buf
);

203 
Æªady_∑r£d_f‹m©
 = 1;

204  
NULL
;

205 
	}
}

212 c⁄° *
	$f‹m©_∑r£
(
sf_node
 *
s‚
){

213 *
buf
;

214 *
£p_loc
;

215 *
wÆk
;

216 c⁄° *
îr
;

217 
f‹m©_node
 *
‚ode
;

218 
ôems
;

219 
√ed_ôem
;

220 
îrbuf
[80];

223 
buf
 = 
	`°rdup
(
s‚
->
sf
);

226 
√ed_ôem
 = 1;

227 
ôems
 = 0;

228 
wÆk
 = 
buf
;

230 *
wÆk
){

233 if(
√ed_ôem
){

234 
	`‰ì
(
buf
);

235 
im¥›î
;

237 
√ed_ôem
=1;

240 if(
√ed_ôem
Ë
ôems
++;

241 
√ed_ôem
=0;

243 } *++
wÆk
);

245 if(!
ôems
){

246 
	`‰ì
(
buf
);

247 
em±y
;

249 #ifde‡
STRICT_LIST


250 if(
√ed_ôem
){

251 
	`‰ì
(
buf
);

252 
im¥›î
;

255 if(
√ed_ôem
){

256 *--
wÆk
='\0';

260 
wÆk
 = 
buf
;

261 
ôems
--){

262 
f‹m©_node
 *
ídp
;

263 *
equÆ_loc
;

264 *
cﬁ⁄_loc
;

265 
£p_loc
 = 
	`°Ωbrk
(
wÆk
," ,\t\n");

267 if(
ôems
 && 
£p_loc
) *sep_loc = '\0';

268 
equÆ_loc
 = 
	`°Ωbrk
(
wÆk
,"=");

269 if(
equÆ_loc
){

270 *
equÆ_loc
 = '\0';

271 
equÆ_loc
++;

273 
cﬁ⁄_loc
 = 
	`°Ωbrk
(
wÆk
,":");

274 if(
cﬁ⁄_loc
){

275 *
cﬁ⁄_loc
 = '\0';

276 
cﬁ⁄_loc
++;

277 if(
	`°r•n
(
cﬁ⁄_loc
,"0123456789"Ë!
	`°æí
(colon_loc) || *colon_loc=='0' || !*colon_loc){

278 
	`‰ì
(
buf
);

279 
badwidth
;

282 
‚ode
 = 
	`do_⁄e_•ec
(
wÆk
,
equÆ_loc
);

283 if(!
‚ode
){

284 if(!*
îrbuf
){

285 
	`¢¥ötf
(

286 
îrbuf
,

287 (
îrbuf
),

288 
	`_
("unknown user-defined format specifier \"%s\""),

289 
wÆk


292 
	`‰ì
(
buf
);

293 
unknown
;

295 if(
cﬁ⁄_loc
){

296 if(
‚ode
->
√xt
){

297 
	`‰ì
(
buf
);

298 
nŸma¸o
;

301 
‚ode
->
width
 = 
	`©oi
(
cﬁ⁄_loc
);

303 
ídp
 = 
‚ode
; ídp->
√xt
)Éndp =Éndp->next;

304 
ídp
->
√xt
 = 
s‚
->
f_cooked
;

305 
s‚
->
f_cooked
 = 
‚ode
;

306 
wÆk
 = 
£p_loc
 + 1;

308 
	`‰ì
(
buf
);

309 
Æªady_∑r£d_f‹m©
 = 1;

310  
NULL
;

313 if(0Ë
unknown
: 
îr
=
îrbuf
;

314 if(0Ë
em±y
: 
îr
=
	`_
("empty formatÜist");

315 if(0Ë
im¥›î
: 
îr
=
	`_
("improper formatÜist");

316 if(0Ë
badwidth
: 
îr
=
	`_
("column widths must be unsigned decimalÇumbers");

317 if(0Ë
nŸma¸o
: 
îr
=
	`_
("canÇot set width forá macro (multi-column) format specifier");

318 if(
	`°rchr
(
s‚
->
sf
,'%')Ë
îr
 = 
	`aix_f‹m©_∑r£
(sfn);

319  
îr
;

320 
	}
}

323 
s‹t_node
 *
	$do_⁄e_s‹t_•ec
(c⁄° *
•ec
){

324 c⁄° 
f‹m©_°ru˘
 *
fs
;

325 
ªvî£
 = 0;

326 if(*
•ec
 == '-'){

327 
ªvî£
 = 1;

328 
•ec
++;

329 } if(*
•ec
 == '+'){

330 
•ec
++;

332 
fs
 = 
	`£¨ch_f‹m©_¨øy
(
•ec
);

333 if(
fs
){

334 
s‹t_node
 *
thi¢ode
;

335 
thi¢ode
 = 
	`mÆloc
((
s‹t_node
));

336 
thi¢ode
->
§
 = 
fs
->sr;

337 
thi¢ode
->
√ed
 = 
fs
->need;

338 
thi¢ode
->
ªvî£
 =Ñeverse;

339 
thi¢ode
->
√xt
 = 
NULL
;

340  
thi¢ode
;

342  
NULL
;

343 
	}
}

350 c⁄° *
	$l⁄g_s‹t_∑r£
(
sf_node
 *
s‚
){

351 *
buf
;

352 *
£p_loc
;

353 *
wÆk
;

354 
s‹t_node
 *
¢ode
;

355 
ôems
;

356 
√ed_ôem
;

359 
buf
 = 
	`°rdup
(
s‚
->
sf
);

362 
√ed_ôem
 = 1;

363 
ôems
 = 0;

364 
wÆk
 = 
buf
;

366 *
wÆk
){

368 if(
√ed_ôem
){

369 
	`‰ì
(
buf
);

370  
	`_
("improper sortÜist");

372 
√ed_ôem
=1;

375 if(
√ed_ôem
Ë
ôems
++;

376 
√ed_ôem
=0;

378 } *++
wÆk
);

379 if(!
ôems
){

380 
	`‰ì
(
buf
);

381  
	`_
("empty sortÜist");

383 #ifde‡
STRICT_LIST


384 if(
√ed_ôem
){

385 
	`‰ì
(
buf
);

386  
	`_
("improper sortÜist");

389 if(
√ed_ôem
){

390 *--
wÆk
='\0';

394 
wÆk
 = 
buf
;

395 
ôems
--){

396 
s‹t_node
 *
ídp
;

397 
£p_loc
 = 
	`°Ωbrk
(
wÆk
," ,\t\n");

398 if(
£p_loc
) *sep_loc = '\0';

399 
¢ode
 = 
	`do_⁄e_s‹t_•ec
(
wÆk
);

400 if(!
¢ode
){

401 
	`‰ì
(
buf
);

402  
	`_
("unknown sort specifier");

404 
ídp
 = 
¢ode
; ídp->
√xt
)Éndp =Éndp->next;

405 
ídp
->
√xt
 = 
s‚
->
s_cooked
;

406 
s‚
->
s_cooked
 = 
¢ode
;

407 
wÆk
 = 
£p_loc
 + 1;

409 
	`‰ì
(
buf
);

410 
Æªady_∑r£d_s‹t
 = 1;

411  
NULL
;

412 
	}
}

423 c⁄° *
	$vîify_sh‹t_s‹t
(c⁄° *
¨g
){

424 c⁄° 
Æl
[] = "CGJKMNPRSTUcfgjkmnoprstuvy+-";

425 
checkoff
[256];

426 
i
;

427 c⁄° *
wÆk
;

428 
tmp
;

429 if(
	`°r•n
(
¨g
,
Æl
Ë!
	`°æí
◊rg)Ë 
	`_
("bad sorting code");

430 
i
=256; i--;Ë
checkoff
[i] = 0;

431 
wÆk
 = 
¨g
;

433 
tmp
 = *
wÆk
;

434 
tmp
){

436  
NULL
;

439 
tmp
 = *(
wÆk
+1);

440 if(!
tmp
 ||Åmp=='+' ||Åmp=='-'Ë 
	`_
("bad sorting code");

443 if(
f‹e°_ty≥
Ë 
	`_
("PPID sortánd forest output conflict");

446 if(
checkoff
[
tmp
]Ë 
	`_
("bad sorting code");

448 
checkoff
[
tmp
] = 1;

451 
wÆk
++;

453 
	}
}

458 c⁄° *
	$sh‹t_s‹t_∑r£
(
sf_node
 *
s‚
){

459 
dúe˘i⁄
 = 0;

460 c⁄° *
wÆk
;

461 
tmp
;

462 
s‹t_node
 *
¢ode
;

463 
s‹t_node
 *
ídp
;

464 c⁄° 
sh‹ts‹t_°ru˘
 *
ss
;

465 
wÆk
 = 
s‚
->
sf
;

467 
tmp
 = *
wÆk
;

468 
tmp
){

470 
Æªady_∑r£d_s‹t
 = 1;

471  
NULL
;

473 
dúe˘i⁄
 = 0;

476 
dúe˘i⁄
 = 1;

479 
ss
 = 
	`£¨ch_sh‹ts‹t_¨øy
(
tmp
);

480 if(!
ss
Ë 
	`_
("unknown sort specifier");

481 
¢ode
 = 
	`do_⁄e_s‹t_•ec
(
ss
->
•ec
);

482 if(!
¢ode
Ë 
	`_
("unknown sort specifier");

483 
¢ode
->
ªvî£
 = 
dúe˘i⁄
;

484 
ídp
 = 
¢ode
; ídp->
√xt
)Éndp =Éndp->next;

485 
ídp
->
√xt
 = 
s‚
->
s_cooked
;

486 
s‚
->
s_cooked
 = 
¢ode
;

487 
dúe˘i⁄
 = 0;

490 
wÆk
++;

492 
	}
}

502 c⁄° *
	$∑r£_O_›ti⁄
(
sf_node
 *
s‚
){

503 c⁄° *
îr
;

505 if(
s‚
->
√xt
){

506 
îr
 = 
	`∑r£_O_›ti⁄
(
s‚
->
√xt
);

507 if(
îr
) Érr;

510 
s‚
->
sf_code
){

511 
SF_B_o
: 
SF_G_f‹m©
: 
SF_U_o
:

512 
îr
 = 
	`f‹m©_∑r£
(
s‚
);

513 if(!
îr
Ë
Æªady_∑r£d_f‹m©
 = 1;

515 
SF_U_O
:

517 if(
Æªady_∑r£d_f‹m©
Ë 
	`_
("option -O canÇot follow other format options");

518 
îr
 = 
	`f‹m©_∑r£
(
s‚
);

519 if(
îr
) Érr;

520 
Æªady_∑r£d_f‹m©
 = 1;

521 
	`O_wøp
(
s‚
,'u');

523 
SF_B_O
:

524 if(
have_gnu_s‹t
 || 
Æªady_∑r£d_s‹t
Ë
îr
 = 
	`_
("multiple sort options");

525 
îr
 = 
	`vîify_sh‹t_s‹t
(
s‚
->
sf
);

526 if(!
îr
){

527 
	`sh‹t_s‹t_∑r£
(
s‚
);

528 
Æªady_∑r£d_s‹t
 = 1;

529  
NULL
;

531 if(
Æªady_∑r£d_f‹m©
){

532 
îr
 = 
	`_
("option O isÇeither first formatÇor sort order");

535 if(!
	`f‹m©_∑r£
(
s‚
)){

536 
Æªady_∑r£d_f‹m©
 = 1;

537 
	`O_wøp
(
s‚
,'b');

538  
NULL
;

541 
SF_G_s‹t
: 
SF_B_m
:

542 if(
Æªady_∑r£d_s‹t
Ë
îr
 = 
	`_
("multiple sort options");

543 
îr
 = 
	`l⁄g_s‹t_∑r£
(
s‚
);

544 
Æªady_∑r£d_s‹t
 = 1;

547 
	`ˇè°r›hic_Áûuª
(
__FILE__
, 
__LINE__
, 
	`_
("pleaseÑeportÅhis bug"));

549  
îr
;

550 
	}
}

555 
	$de„r_sf_›ti⁄
(c⁄° *
¨g
, 
sour˚
){

556 
sf_node
 *
s‚
;

557 
buf
[16];

558 
di°
;

559 c⁄° 
f‹m©_°ru˘
 *
fs
;

560 
√ed_ôem
 = 1;

562 
s‚
 = 
	`mÆloc
((
sf_node
));

563 
s‚
->
sf
 = 
	`°rdup
(
¨g
);

564 
s‚
->
sf_code
 = 
sour˚
;

565 
s‚
->
s_cooked
 = 
NULL
;

566 
s‚
->
f_cooked
 = 
NULL
;

567 
s‚
->
√xt
 = 
sf_li°
;

568 
sf_li°
 = 
s‚
;

570 if(
sour˚
 =
SF_G_s‹t
Ë
have_gnu_s‹t
 = 1;

573 if(
sour˚
 !
SF_U_o
)  1;

575 *
¨g
){

577 if(
√ed_ôem
)  1;

578 
√ed_ôem
=1;

581 if(
√ed_ôem
)  1;

584 if(!
√ed_ôem
) ;

585 
√ed_ôem
=0;

586 
di°
 = 
	`°rc•n
(
¨g
,", =");

587 if(
di°
>15)  1;

588 
	`°∫˝y
(
buf
,
¨g
,
di°
);

589 
buf
[
di°
] = '\0';

590 
fs
 = 
	`£¨ch_f‹m©_¨øy
(
buf
);

591 if(!
fs
)  1;

592 if(
fs
->
víd‹
)  1;

594 } *++
¨g
);

597 
	}
}

600 
	$ª£t_s‹tf‹m©
(){

601 
sf_li°
 = 
NULL
;

602 
f‹m©_li°
 = 
NULL
;

603 
s‹t_li°
 = 
NULL
;

604 
have_gnu_s‹t
 = 0;

605 
Æªady_∑r£d_s‹t
 = 0;

606 
Æªady_∑r£d_f‹m©
 = 0;

607 
	}
}

611 
	$fmt_add_a·î
(c⁄° *
födme
, 
f‹m©_node
 *
putme
){

612 
f‹m©_node
 *
wÆk
;

613 if(!
	`°rcmp
(
f‹m©_li°
->
«me
, 
födme
)){

614 
putme
->
√xt
 = 
f‹m©_li°
->next;

615 
f‹m©_li°
->
√xt
 = 
putme
;

618 
wÆk
 = 
f‹m©_li°
;

619 
wÆk
->
√xt
){

620 if(!
	`°rcmp
(
wÆk
->
√xt
->
«me
, 
födme
)){

621 
putme
->
√xt
 = 
wÆk
->next->next;

622 
wÆk
->
√xt
->√xà
putme
;

625 
wÆk
 = wÆk->
√xt
;

628 
	}
}

631 
	$fmt_dñëe
(c⁄° *
födme
){

632 
f‹m©_node
 *
wÆk
;

633 
f‹m©_node
 *
ﬁd
;

634 if(!
	`°rcmp
(
f‹m©_li°
->
«me
, 
födme
)){

635 
ﬁd
 = 
f‹m©_li°
;

636 
f‹m©_li°
 = f‹m©_li°->
√xt
;

637 
	`‰ì
(
ﬁd
);

640 
wÆk
 = 
f‹m©_li°
;

641 
wÆk
->
√xt
){

642 if(!
	`°rcmp
(
wÆk
->
√xt
->
«me
, 
födme
)){

643 
ﬁd
 = 
wÆk
->
√xt
;

644 
wÆk
->
√xt
 = walk->next->next;

645 
	`‰ì
(
ﬁd
);

648 
wÆk
 = wÆk->
√xt
;

651 
	}
}

655 
	#PUSH
(
foo
Ë(
‚
=
	`do_⁄e_•ec
(foo, 
NULL
), fn->
√xt
=
f‹m©_li°
, f‹m©_li°=‚)

	)

656 c⁄° *
	$gíî©e_sysv_li°
(){

657 
f‹m©_node
 *
‚
;

660 if(
f‹m©_Êags
 & 
FF_Uf
){

661 
	`PUSH
("run_p");

662 
	`PUSH
("sibling");

663 
	`PUSH
("switches");

664 
	`PUSH
("s");

665 
	`PUSH
("realcpu");

666 
	`PUSH
("nice");

667 
	`PUSH
("my_prio");

671 if((
f‹m©_modifõrs
 & 
FM_y
Ë&& !(
f‹m©_Êags
 & 
FF_Ul
))

672  
	`_
("modifier -y without format -l makesÇo sense");

673 if(
¥e„r_bsd_deÁu…s
){

674 if(
f‹m©_Êags
Ë
	`PUSH
("cmd");

675 
	`PUSH
("args");

676 
	`PUSH
("bsdtime");

677 if(!(
f‹m©_Êags
 & 
FF_Ul
)Ë
	`PUSH
("stat");

679 if(
f‹m©_Êags
 & 
FF_Uf
Ë
	`PUSH
("cmd");

680 
	`PUSH
("ucmd");

681 
	`PUSH
("time");

683 
	`PUSH
("tname");

684 if(
f‹m©_Êags
 & 
FF_Uf
Ë
	`PUSH
("stime");

686 if(
f‹m©_modifõrs
 & 
FM_F
){

688 if(!(
f‹m©_modifõrs
 & 
FM_P
)Ë
	`PUSH
("psr");

690 if(!–(
f‹m©_Êags
 & 
FF_Ul
Ë&& (
f‹m©_modifõrs
 & 
FM_y
Ë)Ë
	`PUSH
("rss");

692 if(
f‹m©_Êags
 & 
FF_Ul
){

693 
	`PUSH
("wchan");

697 if–(
f‹m©_Êags
 & 
FF_Ul
Ë&& !(
f‹m©_modifõrs
 & 
FM_y
) ){

698 if(
≥rs⁄Æôy
 & 
PER_IRIX_l
){

699 
	`PUSH
("sgi_rss");

700 
‚
 = 
	`mÆloc
((
f‹m©_node
));

701 
‚
->
width
 = 1;

702 
‚
->
«me
 = 
	`°rdup
(":");

703 
‚
->
¥
 = 
NULL
;

704 
‚
->
√ed
 = 0;

705 
‚
->
víd‹
 = 
AIX
;

706 
‚
->
Êags
 = 
CF_PRINT_EVERY_TIME
;

707 
‚
->
√xt
 = 
f‹m©_li°
;

708 
f‹m©_li°
=
‚
;

711 if((
f‹m©_modifõrs
 & 
FM_F
Ë|| (
f‹m©_Êags
 & 
FF_Ul
)){

712 
	`PUSH
("sz");

714 if(
f‹m©_Êags
 & 
FF_Ul
){

715 if(
f‹m©_modifõrs
 & 
FM_y
Ë
	`PUSH
("rss");

716 if(
≥rs⁄Æôy
 & (
PER_ZAP_ADDR
|
PER_IRIX_l
)Ë
	`PUSH
("sgi_p");

717 
	`PUSH
("addr_1");

719 if(
f‹m©_modifõrs
 & 
FM_c
){

720 
	`PUSH
("pri"); PUSH("class");

721 }if(
f‹m©_Êags
 & 
FF_Ul
){

722 
	`PUSH
("ni");

723 if(
≥rs⁄Æôy
 & 
PER_IRIX_l
Ë
	`PUSH
("priority");

724 
	`PUSH
("opri");

730 if((
thªad_Êags
 & 
TF_U_L
Ë&& (
f‹m©_Êags
 & 
FF_Uf
)Ë
	`PUSH
("nlwp");

731 if–(
f‹m©_Êags
 & (
FF_Uf
|
FF_Ul
)Ë&& !(
f‹m©_modifõrs
 & 
FM_c
ËË
	`PUSH
("c");

733 if(
f‹m©_modifõrs
 & 
FM_P
Ë
	`PUSH
("psr");

734 if(
thªad_Êags
 & 
TF_U_L
Ë
	`PUSH
("lwp");

735 if(
f‹m©_modifõrs
 & 
FM_j
){

736 
	`PUSH
("sid");

737 
	`PUSH
("pgid");

739 if(
f‹m©_Êags
 & (
FF_Uf
|
FF_Ul
)Ë
	`PUSH
("ppid");

740 if(
thªad_Êags
 & 
TF_U_T
Ë
	`PUSH
("spid");

741 
	`PUSH
("pid");

742 if(
f‹m©_Êags
 & 
FF_Uf
){

743 if(
≥rs⁄Æôy
 & 
PER_SANE_USER
Ë
	`PUSH
("user");

744 
	`PUSH
("uid_hack");

745 }if(
f‹m©_Êags
 & 
FF_Ul
){

746 
	`PUSH
("uid");

748 if(
f‹m©_Êags
 & 
FF_Ul
){

749 
	`PUSH
("s");

750 if(!(
f‹m©_modifõrs
 & 
FM_y
)Ë
	`PUSH
("f");

752 if(
f‹m©_modifõrs
 & 
FM_M
){

753 
	`PUSH
("label");

755  
NULL
;

756 
	}
}

764 c⁄° *
	$¥o˚ss_sf_›ti⁄s
(){

765 
sf_node
 *
sf_wÆk
;

767 if(
sf_li°
){

768 c⁄° *
îr
;

769 
îr
 = 
	`∑r£_O_›ti⁄
(
sf_li°
);

770 if(
îr
) Érr;

773 if(
f‹m©_li°
Ë
	`ˇè°r›hic_Áûuª
(
__FILE__
, 
__LINE__
, 
	`_
("bug: mustÑesetÅheÜist first"));

777 
sf_wÆk
 = 
sf_li°
;

778 
sf_wÆk
){

779 
f‹m©_node
 *
fmt_wÆk
;

780 
fmt_wÆk
 = 
sf_wÆk
->
f_cooked
;

781 
sf_wÆk
->
f_cooked
 = 
NULL
;

782 
fmt_wÆk
){

783 
f‹m©_node
 *
åavÀr
;

784 
åavÀr
 = 
fmt_wÆk
;

785 
fmt_wÆk
 = fmt_wÆk->
√xt
;

786 
åavÀr
->
√xt
 = 
f‹m©_li°
;

787 
f‹m©_li°
 = 
åavÀr
;

789 
sf_wÆk
 = sf_wÆk->
√xt
;

793 
sf_wÆk
 = 
sf_li°
;

794 
sf_wÆk
){

795 
s‹t_node
 *
§t_wÆk
;

796 
§t_wÆk
 = 
sf_wÆk
->
s_cooked
;

797 
sf_wÆk
->
s_cooked
 = 
NULL
;

798 
§t_wÆk
){

799 
s‹t_node
 *
åavÀr
;

800 
åavÀr
 = 
§t_wÆk
;

801 
§t_wÆk
 = sπ_wÆk->
√xt
;

802 
åavÀr
->
√xt
 = 
s‹t_li°
;

803 
s‹t_li°
 = 
åavÀr
;

805 
sf_wÆk
 = sf_wÆk->
√xt
;

811 if(
s‹t_li°
 && (
thªad_Êags
&
TF_no_s‹t
)){

812  
	`_
("tell <procps@freelists.org> what youÉxpected");

816 if(!
f‹m©_Êags
 && !
f‹m©_modifõrs
 && !
f‹m©_li°
){

817 *
tmp
;

818 
tmp
 = 
	`gëív
("PS_FORMAT");

819 if(
tmp
 && *tmp){

820 c⁄° *
îr
;

821 
sf_node
 
s‚
;

822 if(
thªad_Êags
&
TF_mu°_u£
Ë 
	`_
("tell <procps@freelists.org> what you want (-L/-T, -m/m/H,ánd $PS_FORMAT)");

823 
s‚
.
sf
 = 
tmp
;

824 
s‚
.
f_cooked
 = 
NULL
;

825 
îr
 = 
	`f‹m©_∑r£
(&
s‚
);

826 if(!
îr
){

827 
f‹m©_node
 *
fmt_wÆk
;

828 
fmt_wÆk
 = 
s‚
.
f_cooked
;

829 
fmt_wÆk
){

830 
f‹m©_node
 *
åavÀr
;

831 
åavÀr
 = 
fmt_wÆk
;

832 
fmt_wÆk
 = fmt_wÆk->
√xt
;

833 
åavÀr
->
√xt
 = 
f‹m©_li°
;

834 
f‹m©_li°
 = 
åavÀr
;

836  
NULL
;

839 
	`Ârötf
(
°dîr
, 
	`_
("w¨nög: $PS_FORMAT ign‹ed. (%s)\n"), 
îr
);

843 if(
f‹m©_li°
){

844 if(
f‹m©_Êags
Ë 
	`_
("conflicting format options");

845 if(
f‹m©_modifõrs
Ë 
	`_
("canÇot use output modifiers with user-defined output");

846 if(
thªad_Êags
&
TF_mu°_u£
Ë 
	`_
("-L/-T with H/m/-mánd -o/-O/o/O isÇonsense");

847  
NULL
;

851 c⁄° *
•ec
;

852 
f‹m©_Êags
){

854 :  
	`_
("conflicting format options");

857 0: 
•ec
=
NULL
; ;

858 
FF_Uf
 | 
FF_Ul
: 
•ec
=
sysv_Ê_f‹m©
; ;

859 
FF_Uf
: 
•ec
=
sysv_f_f‹m©
; ;

860 
FF_Ul
: 
•ec
=
sysv_l_f‹m©
; ;

863 
FF_Uj
: 
•ec
=
sysv_j_f‹m©
; ;

864 
FF_Uj
 | 
FF_Ul
: 
•ec
="RD_lj"; ;

865 
FF_Uj
 | 
FF_Uf
: 
•ec
="RD_fj"; ;

868 
FF_Bj
: 
•ec
=
bsd_j_f‹m©
; ;

869 
FF_Bl
: 
•ec
=
bsd_l_f‹m©
; ;

870 
FF_Bs
: 
•ec
=
bsd_s_f‹m©
; ;

871 
FF_Bu
: 
•ec
=
bsd_u_f‹m©
; ;

872 
FF_Bv
: 
•ec
=
bsd_v_f‹m©
; ;

875 
FF_LX
: 
•ec
="OL_X"; ;

876 
FF_Lm
: 
•ec
="OL_m"; ;

879 
FF_Fc
: 
•ec
="FLASK_context"; ;

884 if(!
•ec
Ë 
	`gíî©e_sysv_li°
();

887 
f‹m©_node
 *
fmt_wÆk
;

888 
fmt_wÆk
 = 
	`do_⁄e_•ec
(
•ec
, 
NULL
);

889 
fmt_wÆk
){

890 
f‹m©_node
 *
åavÀr
;

891 
åavÀr
 = 
fmt_wÆk
;

892 
fmt_wÆk
 = fmt_wÆk->
√xt
;

893 
åavÀr
->
√xt
 = 
f‹m©_li°
;

894 
f‹m©_li°
 = 
åavÀr
;

900 
f‹m©_node
 *
‚
;

901 if(
f‹m©_modifõrs
 & 
FM_j
){

902 
‚
 = 
	`do_⁄e_•ec
("pgid", 
NULL
);

903 if(!
	`fmt_add_a·î
("PPID", 
‚
)) if(!fmt_add_after("PID", fn))

904 
	`ˇè°r›hic_Áûuª
(
__FILE__
, 
__LINE__
, 
	`_
("internalÉrror:Ço PID or PPID for -j option"));

905 
‚
 = 
	`do_⁄e_•ec
("sid", 
NULL
);

906 if(!
	`fmt_add_a·î
("PGID", 
‚
)Ë 
	`_
("lost my PGID");

908 if(
f‹m©_modifõrs
 & 
FM_y
){

910 
	`fmt_dñëe
("F");

911 
‚
 = 
	`do_⁄e_•ec
("rss", 
NULL
);

912 if(
	`fmt_add_a·î
("ADDR", 
‚
)Ë
	`fmt_dñëe
("ADDR");

914 if(
f‹m©_modifõrs
 & 
FM_c
){

915 
	`fmt_dñëe
("%CPU"); fmt_delete("CPU"); fmt_delete("CP"); fmt_delete("C");

916 
	`fmt_dñëe
("NI");

917 
‚
 = 
	`do_⁄e_•ec
("˛ass", 
NULL
);

918 if(!
	`fmt_add_a·î
("PRI", 
‚
))

919 
	`ˇè°r›hic_Áûuª
(
__FILE__
, 
__LINE__
, 
	`_
("internalÉrror:Ço PRI for -c option"));

920 
	`fmt_dñëe
("PRI");

921 
‚
 = 
	`do_⁄e_•ec
("¥i", 
NULL
);

922 if(!
	`fmt_add_a·î
("CLS", 
‚
)Ë 
	`_
("lost my CLS");

924 if(
thªad_Êags
 & 
TF_U_T
){

925 
‚
 = 
	`do_⁄e_•ec
("•id", 
NULL
);

926 if(!
	`fmt_add_a·î
("PID", 
‚
Ë&& (
thªad_Êags
&
TF_mu°_u£
))

927  
	`_
("-T with H/-m/m butÇo PID for SPIDÅo follow");

929 if(
thªad_Êags
 & 
TF_U_L
){

930 
‚
 = 
	`do_⁄e_•ec
("lwp", 
NULL
);

931 if(
	`fmt_add_a·î
("SID", 
‚
)Ë
did_lwp
;

932 if(
	`fmt_add_a·î
("SESS", 
‚
)Ë
did_lwp
;

933 if(
	`fmt_add_a·î
("PGID", 
‚
)Ë
did_lwp
;

934 if(
	`fmt_add_a·î
("PGRP", 
‚
)Ë
did_lwp
;

935 if(
	`fmt_add_a·î
("PPID", 
‚
)Ë
did_lwp
;

936 if(
	`fmt_add_a·î
("PID", 
‚
)Ë
did_lwp
;

937 if(
thªad_Êags
&
TF_mu°_u£
)

938  
	`_
("-L with H/-m/m butÇo PID/PGID/SID/SESS for NLWPÅo follow");

939 
did_lwp
:

940 
‚
 = 
	`do_⁄e_•ec
("∆wp", 
NULL
);

941 
	`fmt_add_a·î
("%CPU", 
‚
);

943 if(
f‹m©_modifõrs
 & 
FM_M
){

944 
‚
 = 
	`do_⁄e_•ec
("œbñ", 
NULL
);

945 
‚
->
√xt
=
f‹m©_li°
;

946 
f‹m©_li°
=
‚
;

952 if((
≥rs⁄Æôy
 & 
PER_ZAP_ADDR
Ë&& (
f‹m©_Êags
 & 
FF_Ul
)){

953 
‚
 = 
	`do_⁄e_•ec
("sgi_p", 
NULL
);

954 if(
	`fmt_add_a·î
("ADDR", 
‚
)Ë
	`fmt_dñëe
("ADDR");

956 if((
≥rs⁄Æôy
 & 
PER_SANE_USER
Ë&& (
f‹m©_Êags
 & 
FF_Uf
)){

957 
‚
 = 
	`do_⁄e_•ec
("u£r", 
NULL
);

958 if(
	`fmt_add_a·î
("UID", 
‚
)Ë
	`fmt_dñëe
("UID");

962  
NULL
;

963 
	}
}

	@ps/stacktrace.c

23 
	~<î∫o.h
>

24 
	~<sig«l.h
>

25 
	~<°dio.h
>

26 
	~<°dlib.h
>

27 
	~<uni°d.h
>

29 
	~<sys/time.h
>

30 
	~<sys/ty≥s.h
>

31 
	~<sys/waô.h
>

33 
	~"comm⁄.h
"

35 
	#INTERACTIVE
 0

	)

36 
	#STACK_TRACE
 1

	)

38 *
	g°‹ed_¥og_«me
 = "you forgotÅo set \"program\"";

39 
	g°ack_åa˚_d⁄e
;

42 
	$debug_°›
(**
¨gs
){

43 
	`execvp
 (
¨gs
[0],árgs);

44 
	`≥º‹
 ("exec failed");

45 
	`_exô
 (0);

46 
	}
}

49 
	$°ack_åa˚_sigchld
(
signum
){

50 ()
signum
;

51 
°ack_åa˚_d⁄e
 = 1;

52 
	}
}

55 
	$°ack_åa˚
(**
¨gs
){

56 
pid_t
 
pid
;

57 
ö_fd
[2];

58 
out_fd
[2];

59 
fd_£t
 
fd£t
;

60 
fd_£t
 
ªad£t
;

61 
timevÆ
 
tv
;

62 
£l
, 
ödex
, 
°©e
;

63 
buf„r
[256];

64 
c
;

66 
°ack_åa˚_d⁄e
 = 0;

67 
	`sig«l
(
SIGCHLD
, 
°ack_åa˚_sigchld
);

69 if((
	`pùe
 (
ö_fd
Ë=-1Ë|| (pùê(
out_fd
) == -1)){

70 
	`≥º‹
 ("could openÖipe");

71 
	`_exô
 (0);

74 
pid
 = 
	`f‹k
 ();

75 i‡(
pid
 == 0){

76 
	`˛o£
 (0); 
	`dup
 (
ö_fd
[0]);

77 
	`˛o£
 (1); 
	`dup
 (
out_fd
[1]);

78 
	`˛o£
 (2); 
	`dup
 (
out_fd
[1]);

79 
	`execvp
 (
¨gs
[0],árgs);

80 
	`≥º‹
 ("exec failed");

81 
	`_exô
 (0);

83 if(
pid
 =(
pid_t
) -1){

84 
	`≥º‹
 ("couldÇot fork");

85 
	`_exô
 (0);

89 
	`FD_ZERO
 (&
fd£t
);

90 
	`FD_SET
 (
out_fd
[0], &
fd£t
);

92 
	`wrôe
 (
ö_fd
[1], "backtrace\n", 10);

93 
	`wrôe
 (
ö_fd
[1], "p x = 0\n", 8);

94 
	`wrôe
 (
ö_fd
[1], "quit\n", 5);

96 
ödex
 = 0;

97 
°©e
 = 0;

100 
ªad£t
 = 
fd£t
;

101 
tv
.
tv_£c
 = 1;

102 
tv
.
tv_u£c
 = 0;

104 
£l
 = 
	`£À˘
 (
FD_SETSIZE
, &
ªad£t
, 
NULL
, NULL, &
tv
);

105 i‡(
£l
 == -1) ;

107 if((
£l
 > 0Ë&& (
	`FD_ISSET
 (
out_fd
[0], &
ªad£t
))){

108 if(
	`ªad
 (
out_fd
[0], &
c
, 1)){

109 
°©e
){

111 if(
c
 == '#'){

112 
°©e
 = 1;

113 
ödex
 = 0;

114 
buf„r
[
ödex
++] = 
c
;

118 
buf„r
[
ödex
++] = 
c
;

119 if((
c
 == '\n') || (c == '\r')){

120 
buf„r
[
ödex
] = 0;

121 
	`Ârötf
 (
°dîr
, "%s", 
buf„r
);

122 
°©e
 = 0;

123 
ödex
 = 0;

131 if(
°ack_åa˚_d⁄e
) ;

134 
	`˛o£
 (
ö_fd
[0]);

135 
	`˛o£
 (
ö_fd
[1]);

136 
	`˛o£
 (
out_fd
[0]);

137 
	`˛o£
 (
out_fd
[1]);

138 
	`_exô
 (0);

139 
	}
}

142 
	$debug
(
mëhod
, *
¥og_«me
){

143 
pid_t
 
pid
;

144 
buf
[16];

145 *
¨gs
[4] = { "gdb", 
NULL
, NULL, NULL };

146 
x
;

148 
	`¢¥ötf
 (
buf
, (buf), "%d", 
	`gëpid
 ());

150 
¨gs
[1] = 
¥og_«me
;

151 
¨gs
[2] = 
buf
;

153 
pid
 = 
	`f‹k
 ();

154 if(
pid
 == 0){

155 
mëhod
){

156 
INTERACTIVE
:

157 
	`Ârötf
 (
°dîr
, "debug_stop\n");

158 
	`debug_°›
(
¨gs
);

160 
STACK_TRACE
:

161 
	`Ârötf
 (
°dîr
, "stack_trace\n");

162 
	`°ack_åa˚
(
¨gs
);

165 
	`_exô
(0);

166 } if(
pid
 =(
pid_t
) -1){

167 
	`≥º‹
 ("couldÇot fork");

171 
x
 = 1;

172 
x
);

173 
	}
}

177 
	$°ack_åa˚_sig£gv
(
signum
){

178 ()
signum
;

179 
	`debug
(
STACK_TRACE
, 
°‹ed_¥og_«me
);

180 
	}
}

184 #ifde‡
DEBUG


185 
	$öô_°ack_åa˚
(*
¥og_«me
){

186 
°‹ed_¥og_«me
 = 
¥og_«me
;

187 
	`sig«l
(
SIGSEGV
, 
°ack_åa˚_sig£gv
);

188 
	}
}

	@pwdx.c

20 
	~<î∫o.h
>

21 
	~<gë›t.h
>

22 
	~<limôs.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<uni°d.h
>

29 
	~"c.h
"

30 
	~"∆s.h
"

31 
	~"xÆloc.h
"

32 
	~"fûeutûs.h
"

34 
__©åibuã__
 ((
__n‹ëu∫__
)Ë
	$ußge
(
FILE
 * 
out
)

36 
	`Âuts
(
USAGE_HEADER
, 
out
);

37 
	`Ârötf
(
out
, 
	`_
(" %†[›ti⁄s]Öid...\n"), 
¥ogøm_övoˇti⁄_sh‹t_«me
);

38 
	`Âuts
(
USAGE_OPTIONS
, 
out
);

39 
	`Âuts
(
USAGE_HELP
, 
out
);

40 
	`Âuts
(
USAGE_VERSION
, 
out
);

41 
	`Ârötf
(
out
, 
	`USAGE_MAN_TAIL
("pwdx(1)"));

43 
	`exô
(
out
 =
°dîr
 ? 
EXIT_FAILURE
 : 
EXIT_SUCCESS
);

44 
	}
}

46 
	$check_pid_¨gumít
(*
öput
)

48 
skù
 = 0;

49 
pid
;

50 *
íd
 = 
NULL
;

52 i‡(!
	`°∫cmp
("/¥oc/", 
öput
, 6))

53 
skù
 = 6;

54 
î∫o
 = 0;

55 
pid
 = 
	`°πﬁ
(
öput
 + 
skù
, &
íd
, 10);

57 i‡(
î∫o
 || 
öput
 + 
skù
 =
íd
 || (end && *end))

59 i‡(
pid
 < 1)

62 
	}
}

64 
	$maö
(
¨gc
, *
¨gv
[])

66 
ch
;

67 
ªtvÆ
 = 0, 
i
;

68 
ssize_t
 
Ælo˛í
 = 128;

69 *
∑thbuf
;

71 c⁄° 
›ti⁄
 
l⁄g›ts
[] = {

72 {"vîsi⁄", 
no_¨gumít
, 0, 'V'},

73 {"hñp", 
no_¨gumít
, 0, 'h'},

74 {
NULL
, 0, 0, 0}

77 #ifde‡
HAVE_PROGRAM_INVOCATION_NAME


78 
¥ogøm_övoˇti⁄_«me
 = 
¥ogøm_övoˇti⁄_sh‹t_«me
;

80 
	`£éoˇÀ
 (
LC_ALL
, "");

81 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

82 
	`ãxtdomaö
(
PACKAGE
);

83 
	`©exô
(
˛o£_°dout
);

85 (
ch
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "Vh", 
l⁄g›ts
, 
NULL
)) != -1)

86 
ch
) {

88 
	`¥ötf
(
PROCPS_NG_VERSION
);

89  
EXIT_SUCCESS
;

91 
	`ußge
(
°dout
);

93 
	`ußge
(
°dîr
);

96 
¨gc
 -
›töd
;

97 
¨gv
 +
›töd
;

99 i‡(
¨gc
 == 0)

100 
	`ußge
(
°dîr
);

102 
∑thbuf
 = 
	`xmÆloc
(
Ælo˛í
);

104 
i
 = 0; i < 
¨gc
; i++) {

105 *
s
;

106 
ssize_t
 
Àn
, 
buÊí
;

108 *
buf
;

109 
buÊí
 = 10 + 
	`°æí
(
¨gv
[
i
]) + 1;

110 
buf
 = 
	`xmÆloc
(
buÊí
);

112 i‡(
	`check_pid_¨gumít
(
¨gv
[
i
]))

113 
	`xîrx
(
EXIT_FAILURE
, 
	`_
("invalidÖrocess id: %s"),

114 
¨gv
[
i
]);

120 i‡(
¨gv
[
i
][0] != '/')

121 
	`¢¥ötf
(
buf
, 
buÊí
, "/¥oc/%s/cwd", 
¨gv
[
i
]);

123 
	`¢¥ötf
(
buf
, 
buÊí
, "%s/cwd", 
¨gv
[
i
]);

129 (
Àn
 = 
	`ªadlök
(
buf
, 
∑thbuf
, 
Ælo˛í
)) ==álloclen) {

130 
Ælo˛í
 *= 2;

131 
∑thbuf
 = 
	`xªÆloc
’©hbuf, 
Ælo˛í
);

133 
	`‰ì
(
buf
);

135 i‡(
Àn
 < 0) {

136 
s
 = 
	`°ªº‹
(
î∫o
 =
ENOENT
 ? 
ESRCH
 :Érrno);

137 
ªtvÆ
 = 
EXIT_FAILURE
;

138 
	`Ârötf
(
°dîr
, "%s: %s\n", 
¨gv
[
i
], 
s
);

141 
∑thbuf
[
Àn
] = 0;

142 
s
 = 
∑thbuf
;

145 
	`¥ötf
("%s: %s\n", 
¨gv
[
i
], 
s
);

147 
	`‰ì
(
∑thbuf
);

148  
ªtvÆ
;

149 
	}
}

	@skill.c

20 
	~<˘y≥.h
>

21 
	~<dúít.h
>

22 
	~<î∫o.h
>

23 
	~<f˙é.h
>

24 
	~<gë›t.h
>

25 
	~<limôs.h
>

26 
	~<pwd.h
>

27 
	~<sig«l.h
>

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

31 
	~<sys/ªsour˚.h
>

32 
	~<sys/°©.h
>

33 
	~<sys/time.h
>

34 
	~<sys/ty≥s.h
>

35 
	~<uni°d.h
>

37 
	~"c.h
"

38 
	~"fûeutûs.h
"

39 
	~"nsutûs.h
"

40 
	~"°rutûs.h
"

41 
	~"∆s.h
"

42 
	~"xÆloc.h
"

43 
	~"¥oc/pwˇche.h
"

44 
	~"¥oc/sig.h
"

45 
	~"¥oc/dev«me.h
"

46 
	~"¥oc/¥o˝s.h
"

47 
	~"¥oc/ªad¥oc.h
"

48 
	~"¥oc/vîsi⁄.h
"

49 
	~"Ωm©ch.h
"

51 
	#DEFAULT_NICE
 4

	)

53 
	srun_time_c⁄f_t
 {

54 
	mÁ°
;

55 
	möãø˘ive
;

56 
	mvîbo£
;

57 
	mw¨nögs
;

58 
	mnﬂ˘i⁄
;

59 
	mdebuggög
;

61 
	gây_cou¡
, 
	guid_cou¡
, 
	gcmd_cou¡
, 
	gpid_cou¡
, 
	g«me•a˚_cou¡
;

62 *
	gâys
;

63 
uid_t
 *
	guids
;

64 c⁄° **
	gcmds
;

65 *
	gpids
;

66 **
	g«me•a˚s
;

67 
	gns_pid
;

68 
¥oc_t
 
	gns_èsk
;

70 
	#ENLIST
(
thög
,
addme
) do{ \

71 if(!
thög
##
s
Ëthög##†
	`xmÆloc
((*thög##s)*
ßved_¨gc
); \

72 
thög
##
s
[thög##
_cou¡
++] = 
addme
; \

73 }0)

	)

75 
	gmy_pid
;

76 
	gßved_¨gc
;

78 
	gsig_‹_¥i
;

81 
	mPROG_UNKNOWN
,

82 
	mPROG_KILL
,

83 
	mPROG_SKILL
,

84 
	mPROG_SNICE


86 
	g¥ogøm
 = 
PROG_UNKNOWN
;

88 
	$di•œy_kûl_vîsi⁄
()

90 
	`Ârötf
(
°dout
, 
PROCPS_NG_VERSION
);

91 
	}
}

93 
	gns_Êags
 = 0x3f;

94 
	$∑r£_«me•a˚s
(*
›èrg
)

96 *
±r
 = 
›èrg
, *
tmp
;

97 
Àn
, 
id
;

99 
ns_Êags
 = 0;

101 i‡(
	`°rchr
(
±r
, ','Ë=
NULL
) {

102 
Àn
 = -1;

103 
tmp
 = 
	`°rdup
(
±r
);

105 
Àn
 = 
	`°rchr
(
±r
, ',') -Ötr;

106 
tmp
 = 
	`°∫dup
(
±r
, 
Àn
);

109 
id
 = 
	`gë_ns_id
(
tmp
);

110 i‡(
id
 == -1) {

111 
	`Ârötf
(
°dîr
, "%†i†nŸá vÆidÇame•a˚\n", 
tmp
);

112 
	`‰ì
(
tmp
);

115 
ns_Êags
 |(1 << 
id
);

116 
	`ENLIST
(
«me•a˚
, 
tmp
);

118 i‡(
Àn
 == -1)

121 
±r
+
Àn
 + 1;

124 
	}
}

127 
	$huπ_¥oc
(
ây
, 
uid
, 
pid
, c⁄° *
ª°ri˘
 c⁄° 
cmd
,

128 
run_time_c⁄f_t
 *
run_time
)

130 
Áûed
;

131 
dn_buf
[1000];

132 
	`dev_to_ây
(
dn_buf
, 999, 
ây
, 
pid
, 
ABBREV_DEV
);

133 i‡(
run_time
->
öãø˘ive
) {

134 *
buf
;

135 
size_t
 
Àn
 = 0;

136 
	`Ârötf
(
°dîr
, "%-8s %-8s %5d %-16.16s ? ",

137 (*)
dn_buf
, 
	`pwˇche_gë_u£r
(
uid
), 
pid
, 
cmd
);

138 
	`fÊush
 (
°dout
);

139 i‡(
	`gëlöe
(&
buf
, &
Àn
, 
°dö
) == -1)

141 i‡(
	`Ωm©ch
(
buf
) < 1) {

142 
	`‰ì
(
buf
);

145 
	`‰ì
(
buf
);

148 
î∫o
 = 0;

149 i‡(
¥ogøm
 =
PROG_SKILL
)

150 
Áûed
 = 
	`kûl
(
pid
, 
sig_‹_¥i
);

152 
Áûed
 = 
	`£çri‹ôy
(
PRIO_PROCESS
, 
pid
, 
sig_‹_¥i
);

153 i‡((
run_time
->
w¨nögs
 && 
Áûed
Ë||Ñun_time->
debuggög
 ||Ñun_time->
vîbo£
) {

154 
	`Ârötf
(
°dîr
, "%-8s %-8s %5d %-16.16s ",

155 (*)
dn_buf
, 
	`pwˇche_gë_u£r
(
uid
), 
pid
, 
cmd
);

156 
	`≥º‹
("");

159 i‡(
run_time
->
öãø˘ive
)

161 i‡(
run_time
->
nﬂ˘i⁄
) {

162 
	`¥ötf
("%d\n", 
pid
);

165 
	}
}

168 
	$check_¥oc
(
pid
, 
run_time_c⁄f_t
 *
run_time
)

170 
buf
[128];

171 
°©
 
°©buf
;

172 
¥oc_t
 
èsk
;

173 *
tmp
;

174 
ây
;

175 
fd
;

176 
i
;

177 i‡(
pid
 =
my_pid
 ||Öid == 0)

180 
	`•rötf
(
buf
, "/¥oc/%d/°©", 
pid
);

181 
fd
 = 
	`›í
(
buf
, 
O_RDONLY
);

182 i‡(
fd
 == -1) {

184 i‡(
run_time
->
w¨nögs
)

185 
	`xw¨n
(
	`_
("ˇ¬Ÿ o≥¿fûê%s"), 
buf
);

188 
	`f°©
(
fd
, &
°©buf
);

189 i‡(
uids
) {

191 
i
 = 
uid_cou¡
;

192 
i
--)

193 i‡(
uids
[
i
] =
°©buf
.
°_uid
)

195 i‡(
i
 == -1)

196 
˛osuª
;

198 i‡(
	`ªad
(
fd
, 
buf
, 128) <= 0)

199 
˛osuª
;

200 
buf
[127] = '\0';

201 
tmp
 = 
	`°ºchr
(
buf
, ')');

202 *
tmp
++ = '\0';

203 
i
 = 5;

204 
i
--)

205 *
tmp
++ != ' ')

207 
ây
 = 
	`©oi
(
tmp
);

208 i‡(
âys
) {

209 
i
 = 
ây_cou¡
;

210 
i
--)

211 i‡(
âys
[
i
] =
ây
)

213 i‡(
i
 == -1)

214 
˛osuª
;

216 
tmp
 = 
	`°rchr
(
buf
, '(') + 1;

217 i‡(
cmds
) {

218 
i
 = 
cmd_cou¡
;

220 
i
--)

221 i‡(
cmds
[
i
][0] =*
tmp
 && !
	`°rcmp
(cmds[i],Åmp))

223 i‡(
i
 == -1)

224 
˛osuª
;

226 i‡(
ns_pid
) {

227 i‡(
	`ns_ªad
(
pid
, &
èsk
))

228 
˛osuª
;

229 
i
 = 0; i < 
NUM_NS
; i++) {

230 i‡(
ns_Êags
 & (1 << 
i
)) {

231 i‡(
èsk
.
ns
[
i
] !
ns_èsk
.ns[i])

232 
˛osuª
;

241 
	`huπ_¥oc
(
ây
, 
°©buf
.
°_uid
, 
pid
, 
tmp
, 
run_time
);

242 
˛osuª
:

244 
	`˛o£
(
fd
);

245 
	}
}

248 
	$show_li°s
()

250 
i
;

252 
	`Ârötf
(
°dîr
, "sig«l: %d\n", 
sig_‹_¥i
);

254 
	`Ârötf
(
°dîr
, "%d TTY: ", 
ây_cou¡
);

255 i‡(
âys
) {

256 
i
 = 
ây_cou¡
;

257 
i
--) {

258 
	`Ârötf
(
°dîr
, "%d,%d%c", (
âys
[
i
] >> 8) & 0xff,

259 
âys
[
i
] & 0xff, i ? ' ' : '\n');

262 
	`Ârötf
(
°dîr
, "\n");

264 
	`Ârötf
(
°dîr
, "%d UID: ", 
uid_cou¡
);

265 i‡(
uids
) {

266 
i
 = 
uid_cou¡
;

267 
i
--)

268 
	`Ârötf
(
°dîr
, "%d%c", 
uids
[
i
], i ? ' ' : '\n');

270 
	`Ârötf
(
°dîr
, "\n");

272 
	`Ârötf
(
°dîr
, "%d PID: ", 
pid_cou¡
);

273 i‡(
pids
) {

274 
i
 = 
pid_cou¡
;

275 
i
--)

276 
	`Ârötf
(
°dîr
, "%d%c", 
pids
[
i
], i ? ' ' : '\n');

278 
	`Ârötf
(
°dîr
, "\n");

280 
	`Ârötf
(
°dîr
, "%d CMD: ", 
cmd_cou¡
);

281 i‡(
cmds
) {

282 
i
 = 
cmd_cou¡
;

283 
i
--)

284 
	`Ârötf
(
°dîr
, "%s%c", 
cmds
[
i
], i ? ' ' : '\n');

286 
	`Ârötf
(
°dîr
, "\n");

287 
	}
}

290 
	$ôî©e
(
run_time_c⁄f_t
 *
run_time
)

292 
pid
;

293 
DIR
 *
d
;

294 
dúít
 *
de
;

295 i‡(
pids
) {

296 
pid
 = 
pid_cou¡
;

297 
pid
--)

298 
	`check_¥oc
(
pids
[
pid
], 
run_time
);

303 i‡(!
âys
 && !
cmds
 && !
pids
 && !
run_time
->
öãø˘ive
) {

306 
d
 = 
	`›ídú
("/proc");

307 i‡(!
d
)

308 
	`xîr
(
EXIT_FAILURE
, "/proc");

309 (
de
 = 
	`ªaddú
(
d
))) {

310 i‡(
de
->
d_«me
[0] > '9')

312 i‡(
de
->
d_«me
[0] < '1')

314 
pid
 = 
	`©oi
(
de
->
d_«me
);

315 i‡(
pid
)

316 
	`check_¥oc
(
pid
, 
run_time
);

318 
	`˛o£dú
(
d
);

319 
	}
}

322 
__©åibuã__
 ((
__n‹ëu∫__
)Ë
	$kûl_ußge
(
FILE
 * 
out
)

324 
	`Âuts
(
USAGE_HEADER
, 
out
);

325 
	`Ârötf
(
out
,

326 
	`_
(" %†[›ti⁄s] <pid> [...]\n"), 
¥ogøm_övoˇti⁄_sh‹t_«me
);

327 
	`Âuts
(
USAGE_OPTIONS
, 
out
);

328 
	`Âuts
(
	`_
(" <pid> [...] síd sig«»tÿevîy <pid>Üi°ed\n"), 
out
);

329 
	`Âuts
(
	`_
(" -<signal>, -s, --signal <signal>\n"

330 " s≥cifyÅhê<sig«l>Åÿbê£¡\n"), 
out
);

331 
	`Âuts
(
	`_
(" -l, --li°=[<sig«l>]Üi°áŒ sig«»«mes, o∏c⁄vîà⁄êtÿ®«me\n"), 
out
);

332 
	`Âuts
(
	`_
(" -L, --èbÀÜi°áŒ sig«»«me†öáÇi˚ÅabÀ\n"), 
out
);

333 
	`Âuts
(
USAGE_SEPARATOR
, 
out
);

334 
	`Âuts
(
USAGE_HELP
, 
out
);

335 
	`Âuts
(
USAGE_VERSION
, 
out
);

336 
	`Ârötf
(
out
, 
	`USAGE_MAN_TAIL
("kill(1)"));

337 
	`exô
(
out
 =
°dîr
 ? 
EXIT_FAILURE
 : 
EXIT_SUCCESS
);

338 
	}
}

341 
__©åibuã__
 ((
__n‹ëu∫__
)Ë
	$skûl¢i˚_ußge
(
FILE
 * 
out
)

343 
	`Âuts
(
USAGE_HEADER
, 
out
);

345 i‡(
¥ogøm
 =
PROG_SKILL
) {

346 
	`Ârötf
(
out
,

347 
	`_
(" %s [signal] [options] <expression>\n"),

348 
¥ogøm_övoˇti⁄_sh‹t_«me
);

350 
	`Ârötf
(
out
,

351 
	`_
(" %s [newÖriority] [options] <expression>\n"),

352 
¥ogøm_övoˇti⁄_sh‹t_«me
);

354 
	`Âuts
(
USAGE_OPTIONS
, 
out
);

355 
	`Âuts
(
	`_
(" -f, --Á° fa° modê“Ÿ im∂emíãd)\n"), 
out
);

356 
	`Âuts
(
	`_
(" -i, --öãø˘ivê i¡îa˘ive\n"), 
out
);

357 
	`Âuts
(
	`_
(" -l, --li°Üi°áŒ sig«»«mes\n"), 
out
);

358 
	`Âuts
(
	`_
(" -L, --èbÀÜi°áŒ sig«»«me†öáÇi˚ÅabÀ\n"), 
out
);

359 
	`Âuts
(
	`_
(" -n, --no-a˘i⁄ dÿnŸá˘uÆly kû»¥o˚s£s; ju°Öröàwh© would h≠≥n\n"), 
out
);

360 
	`Âuts
(
	`_
(" -v, --vîbo£Éx∂aö wh© i†beög d⁄e\n"), 
out
);

361 
	`Âuts
(
	`_
(" -w, --w¨nög†É«bÀ w¨nög†“Ÿ im∂emíãd)\n"), 
out
);

362 
	`Âuts
(
USAGE_SEPARATOR
, 
out
);

363 
	`Âuts
(
	`_
("Expression can be:Åerminal, user,Öid, command.\n"

364 "Thê›ti⁄†bñow may bêu£dÅÿísuª c‹ª˘ i¡î¥ë©i⁄.\n"), 
out
);

365 
	`Âuts
(
	`_
(" -c, --comm™d <comm™d>Éx¥essi⁄ i†®comm™dÇame\n"), 
out
);

366 
	`Âuts
(
	`_
(" -p, --pid <pid>Éx¥essi⁄ i†®¥o˚s†idÇumbî\n"), 
out
);

367 
	`Âuts
(
	`_
(" -t, --ây <ây>Éx¥essi⁄ i†®ãrmöÆ\n"), 
out
);

368 
	`Âuts
(
	`_
(" -u, --u£∏<u£∫ame>Éx¥essi⁄ i†®u£∫ame\n"), 
out
);

369 
	`Âuts
(
USAGE_SEPARATOR
, 
out
);

370 
	`Âuts
(
	`_
("A…î«tivñy,Éx¥essi⁄ c™ be:\n"), 
out
);

371 
	`Âuts
(
	`_
(" --ns <pid> matchÅheÖrocessesÅhat belongÅoÅhe same\n"

372 "Çame•a˚á†<pid>\n"), 
out
);

373 
	`Âuts
(
	`_
(" --nslist <ns,...>Üist whichÇamespaces will be considered for\n"

375 " ipc, m¡,Çë,Öid, u£r, uts\n"), 
out
);

377 
	`Âuts
(
USAGE_SEPARATOR
, 
out
);

378 
	`Âuts
(
USAGE_SEPARATOR
, 
out
);

379 
	`Âuts
(
USAGE_HELP
, 
out
);

380 
	`Âuts
(
USAGE_VERSION
, 
out
);

381 i‡(
¥ogøm
 =
PROG_SKILL
) {

382 
	`Ârötf
(
out
,

383 
	`_
("\n"

387 
	`Ârötf
(
out
, 
	`USAGE_MAN_TAIL
("skill(1)"));

389 
	`Ârötf
(
out
,

390 
	`_
("\n"

394 
	`Ârötf
(
out
, 
	`USAGE_MAN_TAIL
("snice(1)"));

396 
	`exô
(
out
 =
°dîr
 ? 
EXIT_FAILURE
 : 
EXIT_SUCCESS
);

397 
	}
}

399 
	$skûl_sig_›ti⁄
(*
¨gc
, **
¨gv
)

401 
i
;

402 
signo
 = -1;

403 
i
 = 1; i < *
¨gc
; i++) {

404 i‡(
¨gv
[
i
][0] == '-') {

405 
signo
 = 
	`sig«l_«me_to_numbî
(
¨gv
[
i
] + 1);

406 i‡(-1 < 
signo
) {

407 
	`memmove
(
¨gv
 + 
i
,árgv + i + 1,

408 (*Ë* (*
¨gc
 - 
i
));

409 (*
¨gc
)--;

410  
signo
;

414  
signo
;

415 
	}
}

418 
__©åibuã__
 ((
__n‹ëu∫__
))

419 
	$kûl_maö
(
¨gc
, **
¨gv
)

421 
signo
, 
i
;

422 
lo›
 = 1;

423 
pid
;

424 
exôvÆue
 = 
EXIT_SUCCESS
;

425 *
sig_›ti⁄
;

427 c⁄° 
›ti⁄
 
l⁄g›ts
[] = {

428 {"li°", 
›ti⁄Æ_¨gumít
, 
NULL
, 'l'},

429 {"èbÀ", 
no_¨gumít
, 
NULL
, 'L'},

430 {"sig«l", 
ªquúed_¨gumít
, 
NULL
, 's'},

431 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

432 {"vîsi⁄", 
no_¨gumít
, 
NULL
, 'V'},

433 {
NULL
, 0, NULL, 0}

436 
	`£éoˇÀ
 (
LC_ALL
, "");

437 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

438 
	`ãxtdomaö
(
PACKAGE
);

439 
	`©exô
(
˛o£_°dout
);

441 i‡(
¨gc
 < 2)

442 
	`kûl_ußge
(
°dîr
);

444 
signo
 = 
	`skûl_sig_›ti⁄
(&
¨gc
, 
¨gv
);

445 i‡(
signo
 < 0)

446 
signo
 = 
SIGTERM
;

448 
›ãº
=0;

449 
lo›
 =1 && (
i
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "l::Ls:hV", 
l⁄g›ts
, 
NULL
)) != -1)

450 
i
) {

452 
sig_›ti⁄
 = 
NULL
;

453 i‡(
›èrg
) {

454 
sig_›ti⁄
 = 
›èrg
;

455 } i‡(
¨gv
[
›töd
] !
NULL
 &&árgv[optind][0] != '-') {

456 
sig_›ti⁄
 = 
¨gv
[
›töd
];

458 i‡(
sig_›ti⁄
) {

459 *
s
;

460 
s
 = 
	`°πosig
(
sig_›ti⁄
);

461 i‡(
s
)

462 
	`¥ötf
("%s\n", 
s
);

464 
	`xw¨nx
(
	`_
("unknown signalÇame %s"),

465 
sig_›ti⁄
);

466 
	`‰ì
(
s
);

468 
	`unix_¥öt_sig«ls
();

470 
	`exô
(
EXIT_SUCCESS
);

472 
	`¥ëty_¥öt_sig«ls
();

473 
	`exô
(
EXIT_SUCCESS
);

475 
signo
 = 
	`sig«l_«me_to_numbî
(
›èrg
);

478 
	`kûl_ußge
(
°dout
);

480 
	`di•œy_kûl_vîsi⁄
();

481 
	`exô
(
EXIT_SUCCESS
);

483 i‡(!
	`isdigô
(
›t›t
)) {

484 
	`xw¨nx
(
	`_
("övÆidárgumíà%c"), 
›t›t
);

485 
	`kûl_ußge
(
°dîr
);

489 
pid
 = 
	`©oi
(
¨gv
[
›töd
]);

490 i‡(
	`kûl
((
pid_t
)
pid
, 
signo
) != 0)

491 
exôvÆue
 = 
EXIT_FAILURE
;

492 
	`exô
(
exôvÆue
);

494 
lo›
=0;

497 
	`kûl_ußge
(
°dîr
);

500 
¨gc
 -
›töd
;

501 
¨gv
 +
›töd
;

503 i‡(
¨gc
 < 1)

504 
	`kûl_ußge
(
°dîr
);

506 
i
 = 0; i < 
¨gc
; i++) {

507 
pid
 = 
	`°πﬁ_‹_îr
(
¨gv
[
i
], 
	`_
("failedÅoÖarseárgument"));

508 i‡(!
	`kûl
((
pid_t
Ë
pid
, 
signo
))

510 
	`îr‹
(0, 
î∫o
, "(%ld)", 
pid
);

511 
exôvÆue
 = 
EXIT_FAILURE
;

515 
	`exô
(
exôvÆue
);

516 
	}
}

519 
	$_skûl¢i˚_ußge
(
löe
)

521 
	`Ârötf
(
°dîr
, 
	`_
("somëhögáàlöê%d\n"), 
löe
);

522 
	`skûl¢i˚_ußge
(
°dîr
);

523 
	}
}

525 
	#skûl¢i˚_ußge
(Ë
	`_skûl¢i˚_ußge
(
__LINE__
)

	)

528 
	#NEXTARG
 (
¨gc
?–¨gc--, ((
¨g±r
=*++
¨gv
)Ë):
NULL
)

	)

532 
	$¢i˚_¥io_›ti⁄
(*
¨gc
, **
¨gv
)

534 
i
 = 1, 
«rgs
 = *
¨gc
;

535 
¥io
 = 
DEFAULT_NICE
;

537 
i
 < 
«rgs
) {

538 i‡((
¨gv
[
i
][0] == '-' ||árgv[i][0] == '+')

539 && 
	`isdigô
(
¨gv
[
i
][1])) {

540 
¥io
 = 
	`°πﬁ_‹_îr
(
¨gv
[
i
],

541 
	`_
("failedÅoÖarseárgument"));

542 i‡(
¥io
 < 
INT_MIN
 || 
INT_MAX
 <Örio)

543 
	`xîrx
(
EXIT_FAILURE
,

544 
	`_
("¥i‹ôy %lu ouào‡ønge"), 
¥io
);

545 
«rgs
--;

546 i‡(
«rgs
 - 
i
)

547 
	`memmove
(
¨gv
 + 
i
,árgv + i + 1,

548 (*Ë* (
«rgs
 - 
i
));

550 
i
++;

552 *
¨gc
 = 
«rgs
;

553  ()
¥io
;

554 
	}
}

556 
	$skûl¢i˚_∑r£
(
¨gc
,

557 **
¨gv
, 
run_time_c⁄f_t
 *
run_time
)

559 
signo
 = -1;

560 
¥öo
 = 
DEFAULT_NICE
;

561 
ch
, 
i
;

564 
NS_OPTION
 = 
CHAR_MAX
 + 1,

565 
NSLIST_OPTION
,

568 c⁄° 
›ti⁄
 
l⁄g›ts
[] = {

569 {"comm™d", 
ªquúed_¨gumít
, 
NULL
, 'c'},

570 {"debug", 
no_¨gumít
, 
NULL
, 'd'},

571 {"Á°", 
no_¨gumít
, 
NULL
, 'f'},

572 {"öãø˘ive", 
no_¨gumít
, 
NULL
, 'i'},

573 {"li°", 
no_¨gumít
, 
NULL
, 'l'},

574 {"no-a˘i⁄", 
no_¨gumít
, 
NULL
, 'n'},

575 {"pid", 
ªquúed_¨gumít
, 
NULL
, 'p'},

576 {"èbÀ", 
no_¨gumít
, 
NULL
, 'L'},

577 {"ây", 
ªquúed_¨gumít
, 
NULL
, 't'},

578 {"u£r", 
ªquúed_¨gumít
, 
NULL
, 'u'},

579 {"ns", 
ªquúed_¨gumít
, 
NULL
, 
NS_OPTION
},

580 {"n¶i°", 
ªquúed_¨gumít
, 
NULL
, 
NSLIST_OPTION
},

581 {"vîbo£", 
no_¨gumít
, 
NULL
, 'v'},

582 {"w¨nögs", 
no_¨gumít
, 
NULL
, 'w'},

583 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

584 {"vîsi⁄", 
no_¨gumít
, 
NULL
, 'V'},

585 {
NULL
, 0, NULL, 0}

588 i‡(
¨gc
 < 2)

589 
	`skûl¢i˚_ußge
(
°dîr
);

591 
sig_‹_¥i
 = -1;

593 i‡(
¥ogøm
 =
PROG_SNICE
)

594 
¥öo
 = 
	`¢i˚_¥io_›ti⁄
(&
¨gc
, 
¨gv
);

595 i‡(
¥ogøm
 =
PROG_SKILL
) {

596 
signo
 = 
	`skûl_sig_›ti⁄
(&
¨gc
, 
¨gv
);

597 i‡(-1 < 
signo
)

598 
sig_‹_¥i
 = 
signo
;

601 
pid_cou¡
 = 0;

603 (
ch
 =

604 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "c:dfû≈:Lt:u:vwhV", 
l⁄g›ts
,

605 
NULL
)) != -1)

606 
ch
) {

608 
	`ENLIST
(
cmd
, 
›èrg
);

611 
run_time
->
debuggög
 = 1;

614 
run_time
->
Á°
 = 1;

617 
run_time
->
öãø˘ive
 = 1;

620 
	`unix_¥öt_sig«ls
();

621 
	`exô
(
EXIT_SUCCESS
);

623 
run_time
->
nﬂ˘i⁄
 = 1;

626 
	`ENLIST
(
pid
,

627 
	`°πﬁ_‹_îr
(
›èrg
,

628 
	`_
("failedÅoÖarseárgument")));

629 
pid_cou¡
++;

632 
	`¥ëty_¥öt_sig«ls
();

633 
	`exô
(
EXIT_SUCCESS
);

636 
°©
 
sbuf
;

637 
∑th
[32];

638 
	`¢¥ötf
(
∑th
, 32, "/dev/%s", 
›èrg
);

639 i‡(
	`°©
(
∑th
, &
sbuf
) >= 0

640 && 
	`S_ISCHR
(
sbuf
.
°_mode
)) {

641 
	`ENLIST
(
ây
, 
sbuf
.
°_rdev
);

647 
∑sswd
 *
∑sswd_d©a
;

648 
∑sswd_d©a
 = 
	`gëpw«m
(
›èrg
);

649 i‡(
∑sswd_d©a
) {

650 
	`ENLIST
(
uid
, 
∑sswd_d©a
->
pw_uid
);

654 
NS_OPTION
:

655 
ns_pid
 = 
	`©oi
(
›èrg
);

656 i‡(
ns_pid
 == 0) {

657 
	`xw¨nx
(
	`_
("övÆidÖidÇumbî %s"), 
›èrg
);

658 
	`kûl_ußge
(
°dîr
);

660 i‡(
	`ns_ªad
(
ns_pid
, &
ns_èsk
)) {

661 
	`xw¨nx
(
	`_
("errorÑeadingÑeferenceÇamespace "

663 
	`kûl_ußge
(
°dîr
);

667 
NSLIST_OPTION
:

668 i‡(
	`∑r£_«me•a˚s
(
›èrg
)) {

669 
	`xw¨nx
(
	`_
("invalidÇamespaceÜist"));

670 
	`kûl_ußge
(
°dîr
);

674 
run_time
->
vîbo£
 = 1;

677 
run_time
->
w¨nögs
 = 1;

680 
	`skûl¢i˚_ußge
(
°dout
);

682 
	`di•œy_kûl_vîsi⁄
();

683 
	`exô
(
EXIT_SUCCESS
);

685 
	`skûl¢i˚_ußge
(
°dîr
);

688 
¨gc
 -
›töd
;

689 
¨gv
 +
›töd
;

691 
i
 = 0; i < 
¨gc
; i++) {

692 
num
;

693 *
íd
 = 
NULL
;

694 
î∫o
 = 0;

695 
num
 = 
	`°πﬁ
(
¨gv
[0], &
íd
, 10);

696 i‡(
î∫o
 =0 && 
¨gv
[0] !
íd
 &&Énd !
NULL
 && *end == '\0') {

697 
	`ENLIST
(
pid
, 
num
);

698 
pid_cou¡
++;

700 
	`ENLIST
(
cmd
, 
¨gv
[0]);

702 
¨gv
++;

706 i‡(!
ây_cou¡
 && !
uid_cou¡
 && !
cmd_cou¡
 && !
pid_cou¡
 && !
ns_pid
)

707 
	`xîrx
(
EXIT_FAILURE
, 
	`_
("noÖrocess selection criteria"));

708 i‡((
run_time
->
Á°
 |Ñun_time->
öãø˘ive
 |Ñun_time->

709 
vîbo£
 | 
run_time
->
w¨nögs
 |Ñun_time->
nﬂ˘i⁄
) & ~1)

710 
	`xîrx
(
EXIT_FAILURE
, 
	`_
("general flags mayÇot beÑepeated"));

711 i‡(
run_time
->
öãø˘ive


712 && (
run_time
->
vîbo£
 |Ñun_time->
Á°
 |Ñun_time->
nﬂ˘i⁄
))

713 
	`xîrx
(
EXIT_FAILURE
, 
	`_
("-i makesÇo sense with -v, -f,ánd -n"));

714 i‡(
run_time
->
vîbo£
 && (run_time->
öãø˘ive
 |Ñun_time->
Á°
))

715 
	`xîrx
(
EXIT_FAILURE
, 
	`_
("-v makesÇo sense with -iánd -f"));

716 i‡(
run_time
->
nﬂ˘i⁄
) {

717 
¥ogøm
 = 
PROG_SKILL
;

719 
sig_‹_¥i
 = 0;

721 i‡(
¥ogøm
 =
PROG_SNICE
)

722 
sig_‹_¥i
 = 
¥öo
;

723 i‡(
sig_‹_¥i
 < 0)

724 
sig_‹_¥i
 = 
SIGTERM
;

725 
	}
}

728 
	$maö
(
¨gc
, ** 
¨gv
)

730 #ifde‡
HAVE_PROGRAM_INVOCATION_NAME


731 
¥ogøm_övoˇti⁄_«me
 = 
¥ogøm_övoˇti⁄_sh‹t_«me
;

733 
run_time_c⁄f_t
 
run_time
;

734 
	`mem£t
(&
run_time
, 0, (
run_time_c⁄f_t
));

735 
my_pid
 = 
	`gëpid
();

737 i‡(
	`°rcmp
(
¥ogøm_övoˇti⁄_sh‹t_«me
, "kill") == 0 ||

738 
	`°rcmp
(
¥ogøm_övoˇti⁄_sh‹t_«me
, "lt-kill") == 0)

739 
¥ogøm
 = 
PROG_KILL
;

740 i‡(
	`°rcmp
(
¥ogøm_övoˇti⁄_sh‹t_«me
, "skill") == 0 ||

741 
	`°rcmp
(
¥ogøm_övoˇti⁄_sh‹t_«me
, "lt-skill") == 0)

742 
¥ogøm
 = 
PROG_SKILL
;

743 i‡(
	`°rcmp
(
¥ogøm_övoˇti⁄_sh‹t_«me
, "snice") == 0 ||

744 
	`°rcmp
(
¥ogøm_övoˇti⁄_sh‹t_«me
, "lt-snice") == 0)

745 
¥ogøm
 = 
PROG_SNICE
;

746 #ifde‡
__CYGWIN__


747 i‡(
	`°rcmp
(
¥ogøm_övoˇti⁄_sh‹t_«me
, "prockill") == 0 ||

748 
	`°rcmp
(
¥ogøm_övoˇti⁄_sh‹t_«me
, "lt-prockill") == 0)

749 
¥ogøm
 = 
PROG_KILL
;

752 
¥ogøm
) {

753 
PROG_SNICE
:

754 
PROG_SKILL
:

755 
	`£çri‹ôy
(
PRIO_PROCESS
, 
my_pid
, -20);

756 
	`skûl¢i˚_∑r£
(
¨gc
, 
¨gv
, &
run_time
);

757 i‡(
run_time
.
debuggög
)

758 
	`show_li°s
();

759 
	`ôî©e
(&
run_time
);

761 
PROG_KILL
:

762 
	`kûl_maö
(
¨gc
, 
¨gv
);

765 
	`Ârötf
(
°dîr
, 
	`_
("skill: \"%s\" isÇot supported\n"),

766 
¥ogøm_övoˇti⁄_sh‹t_«me
);

767 
	`Ârötf
(
°dîr
, 
	`USAGE_MAN_TAIL
("skill(1)"));

768  
EXIT_FAILURE
;

770  
EXIT_SUCCESS
;

771 
	}
}

	@slabtop.c

24 
	~<loˇÀ.h
>

25 
	~<°dlib.h
>

26 
	~<°dio.h
>

27 
	~<°rög.h
>

28 
	~<î∫o.h
>

29 
	~<sig«l.h
>

30 
	~<ncur£s.h
>

31 
	~<ãrmios.h
>

32 
	~<gë›t.h
>

33 
	~<˘y≥.h
>

34 
	~<sys/io˘l.h
>

36 
	~<sys/£À˘.h
>

37 
	~<sys/time.h
>

38 
	~<sys/ty≥s.h
>

39 
	~<uni°d.h
>

41 
	~"c.h
"

42 
	~"fûeutûs.h
"

43 
	~"∆s.h
"

44 
	~"°rutûs.h
"

45 
	~"¥oc/¶ab.h
"

46 
	~"¥oc/vîsi⁄.h
"

48 
	#DEF_SORT_FUNC
 
s‹t_ƒ_objs


	)

50 
	gcﬁs
, 
	grows
;

51 
ãrmios
 
	gßved_ây
;

52 
	gdñay
 = 3;

53 (*
s‹t_func
)(c⁄° 
¶ab_öfo
 *, const slab_info *);

55 
¶ab_öfo
 *
	$mîge_objs
(
¶ab_öfo
 *
a
, ¶ab_öfÿ*
b
)

57 
¶ab_öfo
 
s‹ãd_li°
;

58 
¶ab_öfo
 *
cuº
 = &
s‹ãd_li°
;

60 (
a
 !
NULL
Ë&& (
b
 != NULL)) {

61 i‡(
	`s‹t_func
(
a
, 
b
)) {

62 
cuº
->
√xt
 = 
a
;

63 
cuº
 = 
a
;

64 
a
 =á->
√xt
;

66 
cuº
->
√xt
 = 
b
;

67 
cuº
 = 
b
;

68 
b
 = b->
√xt
;

72 
cuº
->
√xt
 = (
a
 =
NULL
Ë? 
b
 :á;

73  
s‹ãd_li°
.
√xt
;

74 
	}
}

79 
¶ab_öfo
 *
	$¶abs‹t
(
¶ab_öfo
 *
li°
)

81 
¶ab_öfo
 *
a
, *
b
;

83 i‡((
li°
 =
NULL
Ë|| (li°->
√xt
 == NULL))

84  
li°
;

86 
a
 = 
li°
;

87 
b
 = 
li°
->
√xt
;

89 (
b
 !
NULL
Ë&& (b->
√xt
 != NULL)) {

90 
li°
 =Üi°->
√xt
;

91 
b
 = b->
√xt
->next;

94 
b
 = 
li°
->
√xt
;

95 
li°
->
√xt
 = 
NULL
;

97  
	`mîge_objs
(
	`¶abs‹t
(
a
), sœbs‹t(
b
));

98 
	}
}

110 
	$s‹t_«me
(c⁄° 
¶ab_öfo
 *
a
, c⁄° ¶ab_öfÿ*
b
)

112  (
	`°rcmp
(
a
->
«me
, 
b
->name) < 0) ? 1 : 0;

113 
	}
}

115 
	$s‹t_ƒ_objs
(c⁄° 
¶ab_öfo
 *
a
, c⁄° ¶ab_öfÿ*
b
)

117  (
a
->
ƒ_objs
 > 
b
->nr_objs);

118 
	}
}

120 
	$s‹t_ƒ_a˘ive_objs
(c⁄° 
¶ab_öfo
 *
a
,

121 c⁄° 
¶ab_öfo
 *
b
)

123  (
a
->
ƒ_a˘ive_objs
 > 
b
->nr_active_objs);

124 
	}
}

126 
	$s‹t_obj_size
(c⁄° 
¶ab_öfo
 *
a
, c⁄° ¶ab_öfÿ*
b
)

128  (
a
->
obj_size
 > 
b
->obj_size);

129 
	}
}

131 
	$s‹t_objs_≥r_¶ab
(c⁄° 
¶ab_öfo
 *
a
,

132 c⁄° 
¶ab_öfo
 *
b
)

134  (
a
->
objs_≥r_¶ab
 > 
b
->objs_per_slab);

135 
	}
}

137 
	$s‹t_∑ges_≥r_¶ab
(c⁄° 
¶ab_öfo
 *
a
,

138 c⁄° 
¶ab_öfo
 *
b
)

140  (
a
->
∑ges_≥r_¶ab
 > 
b
->pages_per_slab);

141 
	}
}

143 
	$s‹t_ƒ_¶abs
(c⁄° 
¶ab_öfo
 *
a
, c⁄° ¶ab_öfÿ*
b
)

145  (
a
->
ƒ_¶abs
 > 
b
->nr_slabs);

146 
	}
}

148 
	$s‹t_ƒ_a˘ive_¶abs
(c⁄° 
¶ab_öfo
 *
a
,

149 c⁄° 
¶ab_öfo
 *
b
)

151  (
a
->
ƒ_a˘ive_¶abs
 > 
b
->nr_active_slabs);

152 
	}
}

155 
	$s‹t_u£
(c⁄° 
¶ab_öfo
 *
a
, c⁄° ¶ab_öfÿ*
b
)

157  (
a
->
u£
 > 
b
->use);

158 
	}
}

160 
	$s‹t_ˇche_size
(c⁄° 
¶ab_öfo
 *
a
, c⁄° ¶ab_öfÿ*
b
)

162  (
a
->
ˇche_size
 > 
b
->cache_size);

163 
	}
}

168 
ãrm_size
(
unusu£d
 
__©åibuã__
 ((
__unu£d__
)))

170 
wösize
 
	gws
;

172 i‡((
io˘l
(
STDOUT_FILENO
, 
TIOCGWINSZ
, &
ws
Ë!-1Ë&& ws.
ws_row
 > 10) {

173 
cﬁs
 = 
ws
.
ws_cﬁ
;

174 
	grows
 = 
ws
.
ws_row
;

176 
	gcﬁs
 = 80;

177 
	grows
 = 24;

181 
sigöt_h™dÀr
(
unu£d
 
__©åibuã__
 ((
__unu£d__
)))

183 
	gdñay
 = 0;

186 
__©åibuã__
((
__n‹ëu∫__
)Ë
	$ußge
(
FILE
 *
out
)

188 
	`Âuts
(
USAGE_HEADER
, 
out
);

189 
	`Ârötf
(
out
, 
	`_
(" %†[›ti⁄s]\n"), 
¥ogøm_övoˇti⁄_sh‹t_«me
);

190 
	`Âuts
(
USAGE_OPTIONS
, 
out
);

191 
	`Âuts
(
	`_
(" -d, --dñay <£cs> dñay upd©es\n"), 
out
);

192 
	`Âuts
(
	`_
(" -o, --⁄˚ o∆y di•œy on˚,ÅhíÉxô\n"), 
out
);

193 
	`Âuts
(
	`_
(" -s, --s‹à<ch¨> s≥cify s‹à¸ôîü by ch¨a˘î (£êbñow)\n"), 
out
);

194 
	`Âuts
(
USAGE_SEPARATOR
, 
out
);

195 
	`Âuts
(
USAGE_HELP
, 
out
);

196 
	`Âuts
(
USAGE_VERSION
, 
out
);

198 
	`Âuts
(
	`_
("\nThêfﬁlowögáª vÆid s‹à¸ôîü:\n"), 
out
);

199 
	`Âuts
(
	`_
("á: s‹àbyÇumbî o‡a˘ivêobje˘s\n"), 
out
);

200 
	`Âuts
(
	`_
(" b: s‹àby obje˘†≥∏¶ab\n"), 
out
);

201 
	`Âuts
(
	`_
(" c: s‹àby cachêsize\n"), 
out
);

202 
	`Âuts
(
	`_
("Ü: s‹àbyÇumbî o‡¶abs\n"), 
out
);

203 
	`Âuts
(
	`_
(" v: s‹àbyÇumbî o‡a˘ivê¶abs\n"), 
out
);

204 
	`Âuts
(
	`_
("Ç: s‹àbyÇame\n"), 
out
);

205 
	`Âuts
(
	`_
(" o: s‹àbyÇumbî o‡obje˘†—hêdeÁu…)\n"), 
out
);

206 
	`Âuts
(
	`_
("Ö: s‹àbyÖage†≥∏¶ab\n"), 
out
);

207 
	`Âuts
(
	`_
(" s: s‹àby obje˘ size\n"), 
out
);

208 
	`Âuts
(
	`_
(" u: s‹àby cachêutûiz©i⁄\n"), 
out
);

209 
	`Ârötf
(
out
, 
	`USAGE_MAN_TAIL
("slabtop(1)"));

211 
	`exô
(
out
 =
°dîr
 ? 
EXIT_FAILURE
 : 
EXIT_SUCCESS
);

212 
	}
}

218 * 
	$£t_s‹t_func
(
key
)

220 
key
) {

222  (*Ë
s‹t_«me
;

224  (*Ë
s‹t_ƒ_objs
;

226  (*Ë
s‹t_ƒ_a˘ive_objs
;

228  (*Ë
s‹t_obj_size
;

230  (*Ë
s‹t_objs_≥r_¶ab
;

232  (*Ë
s‹t_∑ges_≥r_¶ab
;

234  (*Ë
s‹t_ƒ_¶abs
;

236  (*Ë
s‹t_ƒ_a˘ive_¶abs
;

238  (*Ë
s‹t_ˇche_size
;

240  (*Ë
s‹t_u£
;

242  (*Ë
DEF_SORT_FUNC
;

244 
	}
}

246 
	$∑r£_öput
(
c
)

248 
c
 = 
	`touµî
(c);

249 
c
) {

251 
s‹t_func
 = 
s‹t_ƒ_a˘ive_objs
;

254 
s‹t_func
 = 
s‹t_objs_≥r_¶ab
;

257 
s‹t_func
 = 
s‹t_ˇche_size
;

260 
s‹t_func
 = 
s‹t_ƒ_¶abs
;

263 
s‹t_func
 = 
s‹t_ƒ_a˘ive_¶abs
;

266 
s‹t_func
 = 
s‹t_«me
;

269 
s‹t_func
 = 
s‹t_ƒ_objs
;

272 
s‹t_func
 = 
s‹t_∑ges_≥r_¶ab
;

275 
s‹t_func
 = 
s‹t_obj_size
;

278 
s‹t_func
 = 
s‹t_u£
;

281 
dñay
 = 0;

284 
	}
}

286 
	#¥öt_löe
(
fmt
, ...Ëi‡(
run_⁄˚
Ë
	`¥ötf
(fmt, 
__VA_ARGS__
); 
	`¥ötw
(fmt, __VA_ARGS__)

	)

287 
	$maö
(
¨gc
, *
¨gv
[])

289 
is_ây
, 
o
;

290 
ﬁd_rows
;

291 
¶ab_öfo
 *
¶ab_li°
 = 
NULL
;

292 
run_⁄˚
 = 0, 
ªtvÆ
 = 
EXIT_SUCCESS
;

294 c⁄° 
›ti⁄
 
l⁄g›ts
[] = {

295 { "dñay", 
ªquúed_¨gumít
, 
NULL
, 'd' },

296 { "s‹t", 
ªquúed_¨gumít
, 
NULL
, 's' },

297 { "⁄˚", 
no_¨gumít
, 
NULL
, 'o' },

298 { "hñp", 
no_¨gumít
, 
NULL
, 'h' },

299 { "vîsi⁄", 
no_¨gumít
, 
NULL
, 'V' },

300 { 
NULL
, 0, NULL, 0 }

303 #ifde‡
HAVE_PROGRAM_INVOCATION_NAME


304 
¥ogøm_övoˇti⁄_«me
 = 
¥ogøm_övoˇti⁄_sh‹t_«me
;

306 
	`£éoˇÀ
 (
LC_ALL
, "");

307 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

308 
	`ãxtdomaö
(
PACKAGE
);

309 
	`©exô
(
˛o£_°dout
);

311 
s‹t_func
 = 
DEF_SORT_FUNC
;

313 (
o
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "d:s:ohV", 
l⁄g›ts
, 
NULL
)) != -1) {

314 
o
) {

316 
î∫o
 = 0;

317 
dñay
 = 
	`°πﬁ_‹_îr
(
›èrg
, 
	`_
("illegal delay"));

318 i‡(
dñay
 < 1)

319 
	`xîrx
(
EXIT_FAILURE
,

320 
	`_
("delay must beÖositive integer"));

323 
s‹t_func
 = ((*)(c⁄° 
¶ab_öfo
*,

324 c⁄° 
¶ab_öfo
 *)Ë
	`£t_s‹t_func
(
›èrg
[0]);

327 
run_⁄˚
=1;

328 
dñay
 = 0;

331 
	`¥ötf
(
PROCPS_NG_VERSION
);

332  
EXIT_SUCCESS
;

334 
	`ußge
(
°dout
);

336 
	`ußge
(
°dîr
);

340 
is_ây
 = 
	`ißây
(
STDIN_FILENO
);

341 i‡(
is_ây
 && 
	`tcgë©å
(
STDIN_FILENO
, &
ßved_ây
) == -1)

342 
	`xw¨n
(
	`_
("terminal settingÑetrieval"));

344 
ﬁd_rows
 = 
rows
;

345 
	`ãrm_size
(0);

346 i‡(!
run_⁄˚
) {

347 
	`öôs¸
();

348 
	`ªsizëîm
(
rows
, 
cﬁs
);

349 
	`sig«l
(
SIGWINCH
, 
ãrm_size
);

351 
	`sig«l
(
SIGINT
, 
sigöt_h™dÀr
);

354 
¶ab_öfo
 *
cuº
;

355 
¶ab_°©
 
°©s
;

356 
timevÆ
 
tv
;

357 
fd_£t
 
ªadfds
;

358 
c
;

359 
i
;

360 
	`mem£t
(&
°©s
, 0, (
¶ab_°©
));

362 i‡(
	`gë_¶aböfo
(&
¶ab_li°
, &
°©s
)) {

363 
ªtvÆ
 = 
EXIT_FAILURE
;

367 i‡(!
run_⁄˚
 && 
ﬁd_rows
 !
rows
) {

368 
	`ªsizëîm
(
rows
, 
cﬁs
);

369 
ﬁd_rows
 = 
rows
;

372 
	`move
(0, 0);

373 
	`¥öt_löe
(" %-35s: %d / %d (%.1f%%)\n"

381 
	`_
("Active / Total Objects (% used)"),

382 
°©s
.
ƒ_a˘ive_objs
, sèts.
ƒ_objs
,

383 100.0 * 
°©s
.
ƒ_a˘ive_objs
 / sèts.
ƒ_objs
,

385 
	`_
("Active / Total Slabs (% used)"),

386 
°©s
.
ƒ_a˘ive_¶abs
, sèts.
ƒ_¶abs
,

387 100.0 * 
°©s
.
ƒ_a˘ive_¶abs
 / sèts.
ƒ_¶abs
,

389 
	`_
("Active / Total Caches (% used)"),

390 
°©s
.
ƒ_a˘ive_ˇches
, sèts.
ƒ_ˇches
,

391 100.0 * 
°©s
.
ƒ_a˘ive_ˇches
 / sèts.
ƒ_ˇches
,

393 
	`_
("Active / Total Size (% used)"),

394 
°©s
.
a˘ive_size
 / 1024.0, sèts.
tŸÆ_size
 / 1024.0,

395 100.0 * 
°©s
.
a˘ive_size
 / sèts.
tŸÆ_size
,

396 
	`_
("Minimum / Average / Maximum Object"),

397 
°©s
.
mö_obj_size
 / 1024.0, sèts.
avg_obj_size
 / 1024.0,

398 
°©s
.
max_obj_size
 / 1024.0);

400 
¶ab_li°
 = 
	`¶abs‹t
(slab_list);

402 
	`©å⁄
(
A_REVERSE
);

405 
	`¥öt_löe
("%-78s\n", 
	`_
(" OBJS ACTIVE USE OBJ SIZE SLABS OBJ/SLAB CACHE SIZE NAME"));

406 
	`©åoff
(
A_REVERSE
);

408 
cuº
 = 
¶ab_li°
;

409 
i
 = 0; i < 
rows
 - 8 && 
cuº
->
√xt
; i++) {

410 
	`¥öt_löe
("%6u %6u %3u%% %7.2fK %6u %8u %9uK %-23s\n",

411 
cuº
->
ƒ_objs
, cuº->
ƒ_a˘ive_objs
, cuº->
u£
,

412 
cuº
->
obj_size
 / 1024.0, cuº->
ƒ_¶abs
,

413 
cuº
->
objs_≥r_¶ab
, ()(cuº->
ˇche_size
 / 1024),

414 
cuº
->
«me
);

415 
cuº
 = cuº->
√xt
;

418 
	`put_¶aböfo
(
¶ab_li°
);

419 i‡(!
run_⁄˚
) {

420 
	`ª‰esh
();

421 
	`FD_ZERO
(&
ªadfds
);

422 
	`FD_SET
(
STDIN_FILENO
, &
ªadfds
);

423 
tv
.
tv_£c
 = 
dñay
;

424 
tv
.
tv_u£c
 = 0;

425 i‡(
	`£À˘
(
STDOUT_FILENO
, &
ªadfds
, 
NULL
, NULL, &
tv
) > 0) {

426 i‡(
	`ªad
(
STDIN_FILENO
, &
c
, 1) != 1)

428 
	`∑r£_öput
(
c
);

431 } 
dñay
);

433 i‡(
is_ây
)

434 
	`tc£èâr
(
STDIN_FILENO
, 
TCSAFLUSH
, &
ßved_ây
);

435 
	`‰ì_¶aböfo
(
¶ab_li°
);

436 i‡(!
run_⁄˚
)

437 
	`ídwö
();

438  
ªtvÆ
;

439 
	}
}

	@sysctl.c

29 
	~<dúít.h
>

30 
	~<î∫o.h
>

31 
	~<gë›t.h
>

32 
	~<glob.h
>

33 
	~<libgí.h
>

34 
	~<limôs.h
>

35 
	~<ªgex.h
>

36 
	~<°dboﬁ.h
>

37 
	~<°dio.h
>

38 
	~<°dlib.h
>

39 
	~<°rög.h
>

40 
	~<sys/°©.h
>

41 
	~<sys/ty≥s.h
>

42 
	~<uni°d.h
>

44 
	~"c.h
"

45 
	~"fûeutûs.h
"

46 
	~"∆s.h
"

47 
	~"xÆloc.h
"

48 
	~"¥oc/¥o˝s.h
"

49 
	~"¥oc/vîsi⁄.h
"

54 c⁄° 
	gPROC_PATH
[] = "/proc/sys/";

55 c⁄° 
	gDEFAULT_PRELOAD
[] = "/etc/sysctl.conf";

56 c⁄° *
	gDEPRECATED
[] = {

61 
boﬁ
 
	gIgn‹eDïªˇãd
;

62 
boﬁ
 
	gNameO∆y
;

63 
boﬁ
 
	gPrötName
;

64 
boﬁ
 
	gPrötNewlöe
;

65 
boﬁ
 
	gIgn‹eEº‹
;

66 
boﬁ
 
	gQuõt
;

67 *
	g∑âîn
;

70 
∑âîn_m©ch
(c⁄° *
°rög
, c⁄° *
∑t
);

71 
Di•œyAŒ
(c⁄° *
ª°ri˘
 c⁄° 
∑th
);

73 
	$¶ashdŸ
(*
ª°ri˘
 
p
, 
ﬁd
, 
√w
)

75 
w¨√d
 = 1;

76 
p
 = 
	`°Ωbrk
(p, "/.");

77 i‡(!
p
)

80 i‡(*
p
 =
√w
)

83 
p
) {

84 
c
 = *
p
;

85 i‡((*(
p
 + 1Ë='/' || *’ + 1Ë='.'Ë&& 
w¨√d
) {

86 
	`xw¨nx
(
	`_
("£∑øt‹†shouldÇŸ bêª≥©ed: %s"), 
p
);

87 
w¨√d
 = 0;

89 i‡(
c
 =
ﬁd
)

90 *
p
 = 
√w
;

91 i‡(
c
 =
√w
)

92 *
p
 = 
ﬁd
;

93 
p
 = 
	`°Ωbrk
(p + 1, "/.");

95 
	}
}

100 
__©åibuã__
 ((
__n‹ëu∫__
))

101 
	$Ußge
(
FILE
 * 
out
)

103 
	`Âuts
(
USAGE_HEADER
, 
out
);

104 
	`Ârötf
(
out
,

105 
	`_
(" %s [options] [variable[=value] ...]\n"),

106 
¥ogøm_övoˇti⁄_sh‹t_«me
);

107 
	`Âuts
(
USAGE_OPTIONS
, 
out
);

108 
	`Âuts
(
	`_
(" -a, --Æ» di•œyáŒ v¨übÀs\n"), 
out
);

109 
	`Âuts
(
	`_
(" -Aálü†o‡-a\n"), 
out
);

110 
	`Âuts
(
	`_
(" -Xálü†o‡-a\n"), 
out
);

111 
	`Âuts
(
	`_
(" --dïªˇãd in˛udêdïªˇãdÖ¨amëî†tÿli°ög\n"), 
out
);

112 
	`Âuts
(
	`_
(" -b, --bö¨yÖröàvÆuêwôhouà√wÜöe\n"), 
out
);

113 
	`Âuts
(
	`_
(" -e, --ign‹ê ign‹êunknow¿v¨übÀ†îr‹s\n"), 
out
);

114 
	`Âuts
(
	`_
(" -N, --«me†Öröàv¨übÀÇame†wôhouàvÆues\n"), 
out
);

115 
	`Âuts
(
	`_
(" -n, --vÆue†Öröà⁄ly vÆue†o‡®v¨übÀs\n"), 
out
);

116 
	`Âuts
(
	`_
(" -p, --lﬂd[=<fûe>]Ñód vÆue†‰om fûe\n"), 
out
);

117 
	`Âuts
(
	`_
(" -‡álü†o‡-p\n"), 
out
);

118 
	`Âuts
(
	`_
(" --sy°emÑód vÆue†‰omáŒ sy°em dúe˘‹õs\n"), 
out
);

119 
	`Âuts
(
	`_
(" -r, --pattern <expression>\n"

120 " sñe˘ sëtögÅh© m©chÉx¥essi⁄\n"), 
out
);

121 
	`Âuts
(
	`_
(" -q, --quõà dÿnŸÉchÿv¨übÀ së\n"), 
out
);

122 
	`Âuts
(
	`_
(" -w, --wrôêÉ«bÀ wrôögá vÆuêtÿv¨übÀ\n"), 
out
);

123 
	`Âuts
(
	`_
(" -ÿ d€†nŸhög\n"), 
out
);

124 
	`Âuts
(
	`_
(" -x d€†nŸhög\n"), 
out
);

125 
	`Âuts
(
	`_
(" -dálü†o‡-h\n"), 
out
);

126 
	`Âuts
(
USAGE_SEPARATOR
, 
out
);

127 
	`Âuts
(
USAGE_HELP
, 
out
);

128 
	`Âuts
(
USAGE_VERSION
, 
out
);

129 
	`Ârötf
(
out
, 
	`USAGE_MAN_TAIL
("sysctl(8)"));

131 
	`exô
(
out
 =
°dîr
 ? 
EXIT_FAILURE
 : 
EXIT_SUCCESS
);

132 
	}
}

137 *
	$SåùLódögAndTøûögS∑˚s
(*
⁄ñöe
)

139 *
t
;

141 i‡(!
⁄ñöe
 || !*oneline)

142  
⁄ñöe
;

144 
t
 = 
⁄ñöe
;

145 
t
 +
	`°æí
(
⁄ñöe
) - 1;

147 (*
t
 =' ' || *à='\t' || *à='\n' || *à='\r'Ë&&Å !
⁄ñöe
)

148 *
t
-- = 0;

150 
t
 = 
⁄ñöe
;

152 (*
t
 == ' ' || *t == '\t') && *t != 0)

153 
t
++;

155  
t
;

156 
	}
}

161 
	#IOBUFSIZ
 (128<<10)

	)

162 *
	giobuf
;

163 
	$RódSëtög
(c⁄° *
ª°ri˘
 c⁄° 
«me
)

165 
rc
 = 0;

166 *
ª°ri˘
 
tm≤ame
;

167 *
ª°ri˘
 
ouäame
;

168 
öbuf
[1025];

169 
FILE
 *
ª°ri˘
 
Â
;

170 
°©
 
ts
;

172 i‡(!
«me
 || !*name) {

173 
	`xw¨nx
(
	`_
("\"%s\" i†™ unknow¿key"), 
«me
);

178 
ouäame
 = 
	`x°rdup
(
«me
);

180 
	`¶ashdŸ
(
ouäame
, '/', '.');

183 
tm≤ame
 = 
	`xmÆloc
(
	`°æí
(
«me
Ë+ såÀn(
PROC_PATH
) + 2);

184 
	`°r˝y
(
tm≤ame
, 
PROC_PATH
);

185 
	`°rˇt
(
tm≤ame
, 
«me
);

187 
	`¶ashdŸ
(
tm≤ame
 + 
	`°æí
(
PROC_PATH
), '.', '/');

190 
ouäame
 = 
	`x°rdup
(
«me
);

192 
	`¶ashdŸ
(
ouäame
, '/', '.');

194 i‡(
	`°©
(
tm≤ame
, &
ts
) < 0) {

195 i‡(!
Ign‹eEº‹
) {

196 
	`xw¨n
(
	`_
("ˇ¬Ÿ sèà%s"), 
tm≤ame
);

197 
rc
 = -1;

199 
out
;

201 i‡((
ts
.
°_mode
 & 
S_IRUSR
) == 0)

202 
out
;

204 i‡(
	`S_ISDIR
(
ts
.
°_mode
)) {

205 
size_t
 
Àn
;

206 
Àn
 = 
	`°æí
(
tm≤ame
);

207 
tm≤ame
[
Àn
] = '/';

208 
tm≤ame
[
Àn
 + 1] = '\0';

209 
rc
 = 
	`Di•œyAŒ
(
tm≤ame
);

210 
out
;

213 i‡(
∑âîn
 && !
	`∑âîn_m©ch
(
ouäame
,Öattern)) {

214 
rc
 = 0;

215 
out
;

218 i‡(
NameO∆y
) {

219 
	`Ârötf
(
°dout
, "%s\n", 
ouäame
);

220 
out
;

223 
Â
 = 
	`f›í
(
tm≤ame
, "r");

225 i‡(
iobuf
)

226 
	`£tvbuf
(
Â
, 
iobuf
, 
_IOFBF
, 
IOBUFSIZ
);

228 i‡(!
Â
) {

229 
î∫o
) {

230 
ENOENT
:

231 i‡(!
Ign‹eEº‹
) {

232 
	`xw¨nx
(
	`_
("\"%s\" i†™ unknow¿key"), 
ouäame
);

233 
rc
 = -1;

236 
EACCES
:

237 
	`xw¨nx
(
	`_
("≥rmissi⁄ díõd o¿key '%s'"), 
ouäame
);

238 
rc
 = -1;

240 
EIO
:

241 
rc
 = -1;

244 
	`xw¨n
(
	`_
("ªadög key \"%s\""), 
ouäame
);

245 
rc
 = -1;

249 
î∫o
 = 0;

250 i‡(
	`fgës
(
öbuf
,  inbu‡- 1, 
Â
)) {

255 *
∆±r
;

256 i‡(
PrötName
) {

257 
	`Ârötf
(
°dout
, "%†", 
ouäame
);

259 
	`Ârötf
(
°dout
, "%s", 
öbuf
);

260 
∆±r
 = &
öbuf
[
	`°æí
(inbuf) - 1];

262 i‡(*
∆±r
 == '\n')

264 } 
	`fgës
(
öbuf
,  inbu‡- 1, 
Â
));

265 i‡(*
∆±r
 != '\n')

266 
	`putch¨
('\n');

268 i‡(!
PrötNewlöe
) {

269 
∆±r
 = 
	`°rchr
(
öbuf
, '\n');

270 i‡(
∆±r
)

271 *
∆±r
 = '\0';

273 
	`Ârötf
(
°dout
, "%s", 
öbuf
);

275 } 
	`fgës
(
öbuf
,  inbu‡- 1, 
Â
));

277 
î∫o
) {

278 
EACCES
:

279 
	`xw¨nx
(
	`_
("permission denied on key '%s'"),

280 
ouäame
);

281 
rc
 = -1;

283 
EISDIR
: {

284 
size_t
 
Àn
;

285 
Àn
 = 
	`°æí
(
tm≤ame
);

286 
tm≤ame
[
Àn
] = '/';

287 
tm≤ame
[
Àn
 + 1] = '\0';

288 
	`f˛o£
(
Â
);

289 
rc
 = 
	`Di•œyAŒ
(
tm≤ame
);

290 
out
;

292 
EIO
:

293 
rc
 = -1;

296 
	`xw¨nx
(
	`_
("ªadög key \"%s\""), 
ouäame
);

297 
rc
 = -1;

302 
	`f˛o£
(
Â
);

304 
out
:

305 
	`‰ì
(
tm≤ame
);

306 
	`‰ì
(
ouäame
);

307  
rc
;

308 
	}
}

310 
	$is_dïªˇãd
(*
fûíame
)

312 
i
;

313 
i
 = 0; 
	`°æí
(
DEPRECATED
[i]); i++) {

314 i‡(
	`°rcmp
(
DEPRECATED
[
i
], 
fûíame
) == 0)

318 
	}
}

323 
	$Di•œyAŒ
(c⁄° *
ª°ri˘
 c⁄° 
∑th
)

325 
rc
 = 0;

326 
rc2
;

327 
DIR
 *
ª°ri˘
 
dp
;

328 
dúít
 *
ª°ri˘
 
de
;

329 
°©
 
ts
;

331 
dp
 = 
	`›ídú
(
∑th
);

333 i‡(!
dp
) {

334 
	`xw¨nx
(
	`_
("u«bÀÅÿ›í dúe˘‹y \"%s\""), 
∑th
);

335 
rc
 = -1;

337 
	`ªaddú
(
dp
);

338 
	`ªaddú
(
dp
);

339 (
de
 = 
	`ªaddú
(
dp
))) {

340 *
ª°ri˘
 
tmpdú
;

341 i‡(
Ign‹eDïªˇãd
 && 
	`is_dïªˇãd
(
de
->
d_«me
))

343 
tmpdú
 =

344 (*
ª°ri˘
Ë
	`xmÆloc
(
	`°æí
(
∑th
) +

345 
	`°æí
(
de
->
d_«me
) +

347 
	`•rötf
(
tmpdú
, "%s%s", 
∑th
, 
de
->
d_«me
);

348 
rc2
 = 
	`°©
(
tmpdú
, &
ts
);

349 i‡(
rc2
 != 0) {

350 
	`xw¨n
(
	`_
("ˇ¬Ÿ sèà%s"), 
tmpdú
);

352 i‡(
	`S_ISDIR
(
ts
.
°_mode
)) {

353 
	`°rˇt
(
tmpdú
, "/");

354 
	`Di•œyAŒ
(
tmpdú
);

356 
rc
 |=

357 
	`RódSëtög
(
tmpdú
 +

358 
	`°æí
(
PROC_PATH
));

361 
	`‰ì
(
tmpdú
);

363 
	`˛o£dú
(
dp
);

365  
rc
;

366 
	}
}

371 
	$WrôeSëtög
(c⁄° *
£âög
)

373 
rc
 = 0;

374 c⁄° *
«me
 = 
£âög
;

375 c⁄° *
vÆue
;

376 c⁄° *
equÆs
;

377 *
tm≤ame
;

378 *
ouäame
;

379 *
œ°_dŸ
;

381 
FILE
 *
Â
;

382 
°©
 
ts
;

384 i‡(!
«me
)

388 
equÆs
 = 
	`°rchr
(
£âög
, '=');

390 i‡(!
equÆs
) {

391 
	`xw¨nx
(
	`_
("\"%s\" must be ofÅhe formÇame=value"),

392 
£âög
);

397 
vÆue
 = 
equÆs
 + 1;

399 i‡(!*
«me
 || !*
vÆue
 ||Çamê=
equÆs
) {

400 
	`xw¨nx
(
	`_
("mÆf‹med sëtög \"%s\""), 
£âög
);

405 
tm≤ame
 = 
	`xmÆloc
(
equÆs
 - 
«me
 + 1 + 
	`°æí
(
PROC_PATH
));

406 
	`°r˝y
(
tm≤ame
, 
PROC_PATH
);

407 
	`°∫ˇt
(
tm≤ame
, 
«me
, (Ë(
equÆs
 -Çame));

408 
tm≤ame
[
equÆs
 - 
«me
 + 
	`°æí
(
PROC_PATH
)] = 0;

410 
	`¶ashdŸ
(
tm≤ame
 + 
	`°æí
(
PROC_PATH
), '.', '/');

413 
ouäame
 = 
	`xmÆloc
(
equÆs
 - 
«me
 + 1);

414 
	`°∫˝y
(
ouäame
, 
«me
, (Ë(
equÆs
 -Çame));

415 
ouäame
[
equÆs
 - 
«me
] = 0;

417 
	`¶ashdŸ
(
ouäame
, '/', '.');

418 
œ°_dŸ
 = 
	`°ºchr
(
ouäame
, '.');

419 i‡(
œ°_dŸ
 !
NULL
 && 
	`is_dïªˇãd
(last_dot + 1)) {

420 
	`xw¨nx
(
	`_
("%†i†dïªˇãd, vÆuênŸ së"), 
ouäame
);

421 
out
;

424 i‡(
	`°©
(
tm≤ame
, &
ts
) < 0) {

425 i‡(!
Ign‹eEº‹
) {

426 
	`xw¨n
(
	`_
("ˇ¬Ÿ sèà%s"), 
tm≤ame
);

427 
rc
 = -1;

429 
out
;

432 i‡((
ts
.
°_mode
 & 
S_IWUSR
) == 0) {

433 
	`xw¨n
(
	`_
("£âög key \"%s\""), 
ouäame
);

434 
out
;

437 i‡(
	`S_ISDIR
(
ts
.
°_mode
)) {

438 
	`xw¨n
(
	`_
("£âög key \"%s\""), 
ouäame
);

439 
out
;

442 
Â
 = 
	`f›í
(
tm≤ame
, "w");

444 i‡(
iobuf
)

445 
	`£tvbuf
(
Â
, 
iobuf
, 
_IOFBF
, 
IOBUFSIZ
);

447 i‡(!
Â
) {

448 
î∫o
) {

449 
ENOENT
:

450 i‡(!
Ign‹eEº‹
) {

451 
	`xw¨nx
(
	`_
("\"%s\" i†™ unknow¿key"), 
ouäame
);

452 
rc
 = -1;

455 
EACCES
:

456 
	`xw¨nx
(
	`_
("≥rmissi⁄ díõd o¿key '%s'"), 
ouäame
);

457 
rc
 = -1;

460 
	`xw¨n
(
	`_
("£âög key \"%s\""), 
ouäame
);

461 
rc
 = -1;

465 
rc
 = 
	`Ârötf
(
Â
, "%s\n", 
vÆue
);

466 i‡(0 < 
rc
)

467 
rc
 = 0;

468 i‡(
	`˛o£_°ªam
(
Â
) != 0)

469 
	`xw¨n
(
	`_
("£âög key \"%s\""), 
ouäame
);

470 i‡(
rc
 =0 && !
Quõt
) {

471 i‡(
NameO∆y
) {

472 
	`Ârötf
(
°dout
, "%s\n", 
ouäame
);

474 i‡(
PrötName
) {

475 
	`Ârötf
(
°dout
, "%s = %s\n",

476 
ouäame
, 
vÆue
);

478 i‡(
PrötNewlöe
)

479 
	`Ârötf
(
°dout
, "%s\n", 
vÆue
);

481 
	`Ârötf
(
°dout
, "%s", 
vÆue
);

486 
out
:

487 
	`‰ì
(
tm≤ame
);

488 
	`‰ì
(
ouäame
);

489  
rc
;

490 
	}
}

492 
	$∑âîn_m©ch
(c⁄° *
°rög
, c⁄° *
∑t
)

494 
°©us
;

495 
ªgex_t
 
ª
;

497 i‡(
	`ªgcomp
(&
ª
, 
∑t
, 
REG_EXTENDED
 | 
REG_NOSUB
) != 0)

499 
°©us
 = 
	`ªgexec
(&
ª
, 
°rög
, (
size_t
Ë0, 
NULL
, 0);

500 
	`ªg‰ì
(&
ª
);

501 i‡(
°©us
 != 0)

504 
	}
}

506 
	#LINELEN
 4096

	)

512 
	$Pªlﬂd
(c⁄° *
ª°ri˘
 c⁄° 
fûíame
)

514 
⁄ñöe
[
LINELEN
];

515 
buf„r
[
LINELEN
];

516 
FILE
 *
Â
;

517 *
t
;

518 
n
 = 0;

519 
rc
 = 0;

520 *
«me
, *
vÆue
;

521 
glob_t
 
globbuf
;

522 
globîr
;

523 
globÊg
;

524 
j
;

526 
globÊg
 = 
GLOB_NOCHECK
;

527 #ifde‡
GLOB_BRACE


528 
globÊg
 |
GLOB_BRACE
;

530 #ifde‡
GLOB_TILDE


531 
globÊg
 |
GLOB_TILDE
;

533 i‡(
fûíame
[0] == '~')

534 
	`xw¨nx
(
	`_
("GLOB_TILDE isÇot supported on yourÖlatform, "

535 "thêtûdêö \"%s\" w⁄'àbêex∑nded."), 
fûíame
);

537 
globîr
 = 
	`glob
(
fûíame
, 
globÊg
, 
NULL
, &
globbuf
);

539 i‡(
globîr
 !0 && globî∏!
GLOB_NOMATCH
)

540 
	`xîr
(
EXIT_FAILURE
, 
	`_
("glob failed"));

542 
j
 = 0; j < 
globbuf
.
gl_∑thc
; j++) {

543 
Â
 = (
globbuf
.
gl_∑thv
[
j
][0] == '-' && !globbuf.gl_pathv[j][1])

544 ? 
°dö
 : 
	`f›í
(
globbuf
.
gl_∑thv
[
j
], "r");

545 i‡(!
Â
) {

546 
	`xw¨n
(
	`_
("ˇ¬Ÿ o≥¿\"%s\""), 
globbuf
.
gl_∑thv
[
j
]);

550 
	`fgës
(
⁄ñöe
,  o√löe, 
Â
)) {

551 
n
++;

552 
t
 = 
	`SåùLódögAndTøûögS∑˚s
(
⁄ñöe
);

554 i‡(
	`°æí
(
t
) < 2)

557 i‡(*
t
 == '#' || *t == ';')

560 
«me
 = 
	`°πok
(
t
, "=");

561 i‡(!
«me
 || !*name) {

562 
	`xw¨nx
(
	`_
("%s(%d): invalid syntax, continuing..."),

563 
globbuf
.
gl_∑thv
[
j
], 
n
);

567 
	`SåùLódögAndTøûögS∑˚s
(
«me
);

569 i‡(
∑âîn
 && !
	`∑âîn_m©ch
(
«me
,Öattern))

572 
vÆue
 = 
	`°πok
(
NULL
, "\n\r");

573 i‡(!
vÆue
 || !*value) {

574 
	`xw¨nx
(
	`_
("%s(%d): invalid syntax, continuing..."),

575 
globbuf
.
gl_∑thv
[
j
], 
n
);

579 (*
vÆue
 == ' ' || *value == '\t') && *value != 0)

580 
vÆue
++;

583 
	`•rötf
(
buf„r
, "%s=%s", 
«me
, 
vÆue
);

584 
rc
 |
	`WrôeSëtög
(
buf„r
);

587 
	`f˛o£
(
Â
);

589  
rc
;

590 
	}
}

592 
	s∑ú
 {

593 *
	m«me
;

594 *
	mvÆue
;

597 
	$s‹çaús
(c⁄° *
A
, c⁄° *
B
)

599 c⁄° 
∑ú
 *
a
 = *(∑ú * c⁄° *Ë
A
;

600 c⁄° 
∑ú
 *
b
 = *(∑ú * c⁄° *Ë
B
;

601  
	`°rcmp
(
a
->
«me
, 
b
->name);

602 
	}
}

604 
	$PªlﬂdSy°em
()

606 
di
, 
i
;

607 c⁄° *
dús
[] = {

614 
∑ú
 **
cfgs
 = 
NULL
;

615 
ncfgs
 = 0;

616 
rc
 = 0;

617 
°©
 
ts
;

618 íum { 
≈ªÆloc
 = 16 };

620 
di
 = 0; dò< (
dús
) / (dirs[0]); ++di) {

621 
dúít
 *
de
;

622 
DIR
 *
dp
 = 
	`›ídú
(
dús
[
di
]);

623 i‡(!
dp
)

626 (
de
 = 
	`ªaddú
(
dp
))) {

627 i‡(!
	`°rcmp
(
de
->
d_«me
, ".")

628 || !
	`°rcmp
(
de
->
d_«me
, ".."))

630 i‡(
	`°æí
(
de
->
d_«me
) < 5

631 || 
	`°rcmp
(
de
->
d_«me
 + 
	`°æí
(de->d_name) - 5, ".conf"))

634 
i
 = 0; i < 
ncfgs
; ++i) {

635 i‡(
cfgs
 && !
	`°rcmp
(cfgs[
i
]->
«me
, 
de
->
d_«me
))

638 i‡(
i
 < 
ncfgs
)

642 i‡(
ncfgs
 % 
≈ªÆloc
 == 0)

643 
cfgs
 =

644 
	`xªÆloc
(
cfgs
,

645 (
∑ú
 *Ë* (
ncfgs
 +

646 
≈ªÆloc
));

648 i‡(
cfgs
) {

649 
cfgs
[
ncfgs
] =

650 
	`xmÆloc
((
∑ú
) +

651 
	`°æí
(
de
->
d_«me
) * 2 + 2 +

652 
	`°æí
(
dús
[
di
]) + 1);

653 
cfgs
[
ncfgs
]->
«me
 =

654 (*)
cfgs
[
ncfgs
] + (
∑ú
);

655 
	`°r˝y
(
cfgs
[
ncfgs
]->
«me
, 
de
->
d_«me
);

656 
cfgs
[
ncfgs
]->
vÆue
 =

657 (*)
cfgs
[
ncfgs
] + (
∑ú
) +

658 
	`°æí
(
cfgs
[
ncfgs
]->
«me
) + 1;

659 
	`•rötf
(
cfgs
[
ncfgs
]->
vÆue
, "%s/%s", 
dús
[
di
],

660 
de
->
d_«me
);

661 
ncfgs
++;

663 
	`xîrx
(
EXIT_FAILURE
, 
	`_
("internalÉrror"));

667 
	`˛o£dú
(
dp
);

669 
	`qs‹t
(
cfgs
, 
ncfgs
, (
cfg
 *), 
s‹çaús
);

671 
i
 = 0; i < 
ncfgs
; ++i) {

672 i‡(!
Quõt
)

673 
	`¥ötf
(
	`_
("* Aµlyög %†...\n"), 
cfgs
[
i
]->
vÆue
);

674 
rc
 |
	`Pªlﬂd
(
cfgs
[
i
]->
vÆue
);

678 i‡(
	`°©
(
DEFAULT_PRELOAD
, &
ts
Ë=0 && 
	`S_ISREG
—s.
°_mode
)) {

679 i‡(!
Quõt
)

680 
	`¥ötf
(
	`_
("* Aµlyög %†...\n"), 
DEFAULT_PRELOAD
);

681 
rc
 |
	`Pªlﬂd
(
DEFAULT_PRELOAD
);

685 
i
 = 0; i < 
ncfgs
; ++i) {

686 
	`‰ì
(
cfgs
[
i
]);

688 i‡(
cfgs
Ë
	`‰ì
(cfgs);

690  
rc
;

691 
	}
}

696 
	$maö
(
¨gc
, *
¨gv
[])

698 
boﬁ
 
WrôeMode
 = 
Ál£
;

699 
boﬁ
 
Di•œyAŒO±
 = 
Ál£
;

700 
boﬁ
 
¥ñﬂdfûeO±
 = 
Ál£
;

701 
Rëu∫Code
 = 0;

702 
c
;

703 c⁄° *
¥ñﬂdfûe
 = 
NULL
;

706 
DEPRECATED_OPTION
 = 
CHAR_MAX
 + 1,

707 
SYSTEM_OPTION


709 c⁄° 
›ti⁄
 
l⁄g›ts
[] = {

710 {"Æl", 
no_¨gumít
, 
NULL
, 'a'},

711 {"dïªˇãd", 
no_¨gumít
, 
NULL
, 
DEPRECATED_OPTION
},

712 {"bö¨y", 
no_¨gumít
, 
NULL
, 'b'},

713 {"ign‹e", 
no_¨gumít
, 
NULL
, 'e'},

714 {"«mes", 
no_¨gumít
, 
NULL
, 'N'},

715 {"vÆues", 
no_¨gumít
, 
NULL
, 'n'},

716 {"lﬂd", 
›ti⁄Æ_¨gumít
, 
NULL
, 'p'},

717 {"quõt", 
no_¨gumít
, 
NULL
, 'q'},

718 {"wrôe", 
no_¨gumít
, 
NULL
, 'w'},

719 {"sy°em", 
no_¨gumít
, 
NULL
, 
SYSTEM_OPTION
},

720 {"∑âîn", 
ªquúed_¨gumít
, 
NULL
, 'r'},

721 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

722 {"vîsi⁄", 
no_¨gumít
, 
NULL
, 'V'},

723 {
NULL
, 0, NULL, 0}

726 #ifde‡
HAVE_PROGRAM_INVOCATION_NAME


727 
¥ogøm_övoˇti⁄_«me
 = 
¥ogøm_övoˇti⁄_sh‹t_«me
;

729 
	`£éoˇÀ
(
LC_ALL
, "");

730 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

731 
	`ãxtdomaö
(
PACKAGE
);

732 
	`©exô
(
˛o£_°dout
);

734 
PrötName
 = 
åue
;

735 
PrötNewlöe
 = 
åue
;

736 
Ign‹eEº‹
 = 
Ál£
;

737 
Quõt
 = 
Ál£
;

738 
Ign‹eDïªˇãd
 = 
åue
;

740 i‡(
¨gc
 < 2)

741 
	`Ußge
(
°dîr
);

743 (
c
 =

744 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "b√NwÂ::qoxaAXr:Vdh", 
l⁄g›ts
,

745 
NULL
)) != -1) {

746 
c
) {

749 
PrötNewlöe
 = 
Ál£
;

752 
PrötName
 = 
Ál£
;

760 
Ign‹eEº‹
 = 
åue
;

763 
NameO∆y
 = 
åue
;

766 
WrôeMode
 = 
åue
;

770 
¥ñﬂdfûeO±
 = 
åue
;

771 i‡(
›èrg
)

772 
¥ñﬂdfûe
 = 
›èrg
;

775 
Quõt
 = 
åue
;

784 
Di•œyAŒO±
 = 
åue
;

786 
DEPRECATED_OPTION
:

787 
Ign‹eDïªˇãd
 = 
Ál£
;

789 
SYSTEM_OPTION
:

790 
Ign‹eEº‹
 = 
åue
;

791  
	`PªlﬂdSy°em
();

793 
∑âîn
 = 
	`x°rdup
(
›èrg
);

796 
	`¥ötf
(
PROCPS_NG_VERSION
);

797  
EXIT_SUCCESS
;

801 
	`Ußge
(
°dout
);

803 
	`Ußge
(
°dîr
);

807 
¨gc
 -
›töd
;

808 
¨gv
 +
›töd
;

810 
iobuf
 = (*)
	`mÆloc
(
IOBUFSIZ
);

812 i‡(
Di•œyAŒO±
)

813  
	`Di•œyAŒ
(
PROC_PATH
);

815 i‡(
¥ñﬂdfûeO±
) {

816 
ªt
 = 
EXIT_SUCCESS
, 
i
;

817 i‡(!
¥ñﬂdfûe
) {

818 i‡(!
¨gc
) {

819 
ªt
 |
	`Pªlﬂd
(
DEFAULT_PRELOAD
);

824 
ªt
 |
	`Pªlﬂd
(
¥ñﬂdfûe
);

826 
i
 = 0; i < 
¨gc
; i++)

827 
ªt
 |
	`Pªlﬂd
(
¨gv
[
i
]);

828  
ªt
;

831 i‡(
¨gc
 < 1)

832 
	`xîrx
(
EXIT_FAILURE
, 
	`_
("no variables specified\n"

834 
¥ogøm_övoˇti⁄_sh‹t_«me
);

835 i‡(
NameO∆y
 && 
Quõt
)

836 
	`xîrx
(
EXIT_FAILURE
, 
	`_
("options -Nánd -q cannot coexist\n"

838 
¥ogøm_övoˇti⁄_sh‹t_«me
);

840  ; *
¨gv
;árgv++) {

841 i‡(
WrôeMode
 || 
	`°rchr
(*
¨gv
, '='))

842 
Rëu∫Code
 +
	`WrôeSëtög
(*
¨gv
);

844 
Rëu∫Code
 +
	`RódSëtög
(*
¨gv
);

846  
Rëu∫Code
;

847 
	}
}

	@testsuite/ps.test/test-schedbatch.c

10 
	#_GNU_SOURCE


	)

11 
	~<°dlib.h
>

12 
	~<°dio.h
>

13 
	~<î∫o.h
>

14 
	~<sched.h
>

15 
	~<sys/time.h
>

16 
	~<sys/ªsour˚.h
>

19 #i‚de‡
SCHED_BATCH


20 
	#SCHED_BATCH
 3

	)

23 
	$maö
(
¨gc
, c⁄° *
¨gv
[])

25 
ni˚
 = 19;

26 
sched_∑øm
 
•
;

27 
msg
[50];

29 i‡(
¨gc
 >= 2) {

30 
ni˚
 = 
	`©oi
(
¨gv
[1]);

32 
•
.
sched_¥i‹ôy
 = 0;

33 #ifde‡
SCHED_BATCH


34 i‡(
	`sched_£tscheduÀr
(0, 
SCHED_BATCH
, &
•
)) {

35 
	`≥º‹
("sched_setscheduler(0,SCHED_BATCH,{.sched_priority=0}");

38 i‡(
	`£çri‹ôy
(
PRIO_PROCESS
, 0, 
ni˚
Ë|| 
î∫o
) {

39 ()
	`¢¥ötf
(
msg
, (msg),

40 "£çri‹ôy(PRIO_PROCESS, 0, %d)", 
ni˚
);

41 
	`≥º‹
(
msg
);

44 
	`gëch¨
();

46 
	}
}

	@tload.c

27 
	~"¥oc/vîsi⁄.h
"

28 
	~"¥oc/sysöfo.h
"

29 
	~"c.h
"

30 
	~"fûeutûs.h
"

31 
	~"∆s.h
"

32 
	~"°rutûs.h
"

33 
	~"xÆloc.h
"

35 
	~<î∫o.h
>

36 
	~<f˙é.h
>

37 
	~<gë›t.h
>

38 
	~<£tjmp.h
>

39 
	~<sig«l.h
>

40 
	~<°dio.h
>

41 
	~<°dlib.h
>

42 
	~<°rög.h
>

43 
	~<sys/io˘l.h
>

44 
	~<ãrmios.h
>

45 
	~<uni°d.h
>

47 *
	gs¸ìn
;

49 
	gƒows
 = 25;

50 
	gncﬁs
 = 80;

51 
	gs¸_size
;

52 
	gfd
 = 1;

53 
	gdly
 = 5;

54 
jmp_buf
 
	gjb
;

56 
Ærm
(
signo
 
__©åibuã__
 ((
__unu£d__
)))

58 
sig«l
(
SIGALRM
, 
Ærm
);

59 
Æ¨m
(
dly
);

62 
	$£tsize
(
i
)

64 
wösize
 
wö
;

66 
	`sig«l
(
SIGWINCH
, 
£tsize
);

67 i‡(
	`io˘l
(
fd
, 
TIOCGWINSZ
, &
wö
) != -1) {

68 i‡(
wö
.
ws_cﬁ
 > 0)

69 
ncﬁs
 = 
wö
.
ws_cﬁ
;

70 i‡(
wö
.
ws_row
 > 0)

71 
ƒows
 = 
wö
.
ws_row
;

73 
s¸_size
 = 
ƒows
 * 
ncﬁs
;

74 i‡(
s¸_size
 < 2)

75 
	`xîr
(
EXIT_FAILURE
, 
	`_
("screenÅoo small"));

76 i‡(
s¸ìn
 =
NULL
)

77 
s¸ìn
 = (*)
	`xmÆloc
(
s¸_size
);

79 
s¸ìn
 = (*)
	`xªÆloc
(s¸ìn, 
s¸_size
);

81 
	`mem£t
(
s¸ìn
, ' ', 
s¸_size
 - 1);

82 *(
s¸ìn
 + 
s¸_size
 - 2) = '\0';

83 i‡(
i
)

84 
	`l⁄gjmp
(
jb
, 0);

85 
	}
}

87 
__©åibuã__
 ((
__n‹ëu∫__
)Ë
	$ußge
(
FILE
 * 
out
)

89 
	`Âuts
(
USAGE_HEADER
, 
out
);

90 
	`Ârötf
(
out
,

91 
	`_
(" %†[›ti⁄s] [ây]\n"), 
¥ogøm_övoˇti⁄_sh‹t_«me
);

92 
	`Âuts
(
USAGE_OPTIONS
, 
out
);

93 
	`Âuts
(
	`_
(" -d, --dñay <£cs> upd©êdñay i¿£c⁄ds\n"), 
out
);

94 
	`Âuts
(
	`_
(" -s, --sˇÀ <num> vîtiˇ»sˇÀ\n"), 
out
);

95 
	`Âuts
(
USAGE_SEPARATOR
, 
out
);

96 
	`Âuts
(
USAGE_HELP
, 
out
);

97 
	`Âuts
(
USAGE_VERSION
, 
out
);

98 
	`Ârötf
(
out
, 
	`USAGE_MAN_TAIL
("tload(1)"));

100 
	`exô
(
out
 =
°dîr
 ? 
EXIT_FAILURE
 : 
EXIT_SUCCESS
);

101 
	}
}

103 
	$maö
(
¨gc
, **
¨gv
)

105 
löes
, 
row
, 
cﬁ
 = 0;

106 
i
, 
›t
;

107 
av
[3];

108 
max_sˇÀ
 = 0, 
sˇÀ_Á˘
;

109 
tmpdly
;

111 c⁄° 
›ti⁄
 
l⁄g›ts
[] = {

112 {"sˇÀ", 
ªquúed_¨gumít
, 
NULL
, 's'},

113 {"dñay", 
ªquúed_¨gumít
, 
NULL
, 'd'},

114 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

115 {"vîsi⁄", 
no_¨gumít
, 
NULL
, 'V'},

116 {
NULL
, 0, NULL, 0}

118 #ifde‡
HAVE_PROGRAM_INVOCATION_NAME


119 
¥ogøm_övoˇti⁄_«me
 = 
¥ogøm_övoˇti⁄_sh‹t_«me
;

121 
	`£éoˇÀ
 (
LC_ALL
, "");

122 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

123 
	`ãxtdomaö
(
PACKAGE
);

124 
	`©exô
(
˛o£_°dout
);

126 (
›t
 =

127 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "s:d:Vh", 
l⁄g›ts
, 
NULL
)) != -1)

128 
›t
) {

130 
max_sˇÀ
 = 
	`°πod_‹_îr
(
›èrg
, 
	`_
("failedÅoÖarseárgument"));

131 i‡(
max_sˇÀ
 < 0)

132 
	`xîrx
(
EXIT_FAILURE
, 
	`_
("scale cannot beÇegative"));

135 
tmpdly
 = 
	`°πﬁ_‹_îr
(
›èrg
, 
	`_
("failedÅoÖarseárgument"));

136 i‡(
tmpdly
 < 1)

137 
	`xîrx
(
EXIT_FAILURE
, 
	`_
("delay must beÖositive integer"));

138 i‡(
UINT_MAX
 < 
tmpdly
)

139 
	`xîrx
(
EXIT_FAILURE
, 
	`_
("tooÜarge delay value"));

140 
dly
 = 
tmpdly
;

143 
	`¥ötf
(
PROCPS_NG_VERSION
);

144  
EXIT_SUCCESS
;

147 
	`ußge
(
°dout
);

149 
	`ußge
(
°dîr
);

152 i‡(
¨gc
 > 
›töd
)

153 i‡((
fd
 = 
	`›í
(
¨gv
[
›töd
], 1)) == -1)

154 
	`xîr
(
EXIT_FAILURE
, 
	`_
("canÇot openÅty"));

156 
	`£tsize
(0);

158 i‡(
max_sˇÀ
 == 0)

159 
max_sˇÀ
 = 
ƒows
;

161 
sˇÀ_Á˘
 = 
max_sˇÀ
;

163 
	`£tjmp
(
jb
);

164 
cﬁ
 = 0;

165 
	`Ærm
(0);

169 i‡(
sˇÀ_Á˘
 < 
max_sˇÀ
)

170 
sˇÀ_Á˘
 *= 2.0;

172 
	`lﬂdavg
(&
av
[0], &av[1], &av[2]);

175 
löes
 = 
av
[0] * 
sˇÀ_Á˘
;

176 
row
 = 
ƒows
 - 1;

178 0 <--
löes
) {

179 *(
s¸ìn
 + 
row
 * 
ncﬁs
 + 
cﬁ
) = '*';

180 i‡(--
row
 < 0) {

181 
sˇÀ_Á˘
 /= 2.0;

185 } 0 <
löes
);

187 
row
 >= 0)

188 *(
s¸ìn
 + 
row
-- * 
ncﬁs
 + 
cﬁ
) = ' ';

190 
i
 = 1;; ++i) {

191 *
p
;

192 
row
 = 
ƒows
 - (
i
 * 
sˇÀ_Á˘
);

193 i‡(
row
 < 0)

195 i‡(*(
p
 = 
s¸ìn
 + 
row
 * 
ncﬁs
 + 
cﬁ
) == ' ')

196 *
p
 = '-';

198 *
p
 = '=';

201 i‡(++
cﬁ
 =
ncﬁs
) {

202 --
cﬁ
;

203 
	`memmove
(
s¸ìn
, s¸ì¿+ 1, 
s¸_size
 - 1);

205 
row
 = 
ƒows
 - 2;Ñow >= 0; --row)

206 *(
s¸ìn
 + 
row
 * 
ncﬁs
 + 
cﬁ
) = ' ';

208 
i
 = 
	`•rötf
(
s¸ìn
, " %.2f, %.2f, %.2f", 
av
[0],áv[1],áv[2]);

209 i‡(
i
 > 0)

210 
s¸ìn
[
i
] = ' ';

212 i‡(
	`wrôe
(
fd
, "\033[H", 3) < 0)

213 
	`xîr
(
EXIT_FAILURE
, 
	`_
("writingÅoÅty failed"));

214 i‡(
	`wrôe
(
fd
, 
s¸ìn
, 
s¸_size
 - 1) < 0)

215 
	`xîr
(
EXIT_FAILURE
, 
	`_
("writingÅoÅty failed"));

216 
	`∑u£
();

218 
	}
}

	@top/top.c

21 
	~<˘y≥.h
>

22 
	~<cur£s.h
>

23 
	~<î∫o.h
>

24 
	~<f˙é.h
>

25 
	~<Êﬂt.h
>

26 
	~<limôs.h
>

27 
	~<pwd.h
>

28 
	~<sig«l.h
>

29 
	~<°d¨g.h
>

30 
	~<°dio.h
>

31 
	~<°dlib.h
>

32 
	~<°rög.h
>

33 
	~<ãrm.h
>

34 #unde‡
èb


35 #unde‡
TTY


36 
	~<ãrmios.h
>

37 
	~<time.h
>

38 
	~<uni°d.h
>

40 
	~<sys/io˘l.h
>

41 
	~<sys/ªsour˚.h
>

42 
	~<sys/£À˘.h
>

43 
	~<sys/°©.h
>

44 
	~<sys/time.h
>

45 
	~<sys/ty≥s.h
>

47 
	~"../ö˛ude/fûeutûs.h
"

48 
	~"../ö˛ude/∆s.h
"

50 
	~"../¥oc/dev«me.h
"

51 
	~"../¥oc/numa.h
"

52 
	~"../¥oc/¥o˝s.h
"

53 
	~"../¥oc/ªad¥oc.h
"

54 
	~"../¥oc/sig.h
"

55 
	~"../¥oc/sysöfo.h
"

56 
	~"../¥oc/vîsi⁄.h
"

57 
	~"../¥oc/wch™.h
"

58 
	~"../¥oc/wh©time.h
"

60 
	~"t›.h
"

61 
	~"t›_∆s.h
"

68 
ãrmios
 
	gTty_‹igöÆ
,

69 #ifde‡
TERMIOS_ONLY


70 
	gTty_twóked
,

72 
	gTty_øw
;

73 
	gTtych™ged
 = 0;

76 c⁄° *
	gCurs‹_°©e
 = "";

79 *
	gMy«me
;

82 
sig£t_t
 
	gSigwöch_£t
;

85 
	gRc_«me
 [
OURPATHSZ
];

86 
RCF_t
 
	gRc
 = 
DEF_RCFILE
;

87 
	gRc_que°i⁄s
;

90 
	gPg2K_sh·
 = 0;

93 
CPU_t
 *
	gCpu_tics
;

94 
	gCpu_Áux_tŸ
;

95 
	gCpu_pmax
;

96 c⁄° *
	gCpu_Sèãs_fmts
;

99 
pid_t
 
	gM⁄pids
 [
MONPIDMAX
] = { 0 };

100 
	gM⁄pidsidx
 = 0;

107 
	gS¸ìn_cﬁs
, 
	gS¸ìn_rows
, 
	gMax_löes
;

112 
	gMsg_row
;

116 
	gS¸ﬁl_fmts
 [
SMLBUFSIZ
];

119 
	gB©ch
 = 0,

120 
	gLo›s
 = -1,

121 
	gSecuª_mode
 = 0,

122 
	gThªad_mode
 = 0,

123 
	gWidth_mode
 = 0;

129 
	gC≠_˛r_eﬁ
 [
CAPBUFSIZ
] = "",

130 
	gC≠_∆_˛ªos
 [
CAPBUFSIZ
] = "",

131 
	gC≠_˛r_s¸
 [
CAPBUFSIZ
] = "",

132 
	gC≠_curs_n‹m
 [
CAPBUFSIZ
] = "",

133 
	gC≠_curs_huge
 [
CAPBUFSIZ
] = "",

134 
	gC≠_curs_hide
 [
CAPBUFSIZ
] = "",

135 
	gC≠_˛r_eos
 [
CAPBUFSIZ
] = "",

136 
	gC≠_home
 [
CAPBUFSIZ
] = "",

137 
	gC≠_n‹m
 [
CAPBUFSIZ
] = "",

138 
	gC≠_ªvî£
 [
CAPBUFSIZ
] = "",

139 
	gC≠s_off
 [
CAPBUFSIZ
] = "",

140 
	gC≠s_ídlöe
 [
CAPBUFSIZ
] = "";

141 #i‚de‡
RMAN_IGNORED


142 
	gC≠_rmam
 [
CAPBUFSIZ
] = "",

143 
	gC≠_smam
 [
CAPBUFSIZ
] = "";

146 
	gC≠_avoid_eﬁ
 = 0;

148 
	gC≠_ˇn_gŸo
 = 0;

155 *
	gP£udo_s¸ìn
;

156 
	gP£udo_row
 = 
PROC_XTRA
;

157 
size_t
 
	gP£udo_size
;

158 #i‚de‡
OFF_STDIOLBF


160 
	gStdout_buf
[2048];

166 
WIN_t
 
	gWö°k
 [
GROUPSMAX
];

167 
WIN_t
 *
	gCurwö
;

174 vﬁ©ûê
	gFømes_sig«l
;

175 
	gFømes_libÊags
;

176 
	gFøme_maxèsk
;

178 
	gFøme_ësˇÀ
;

179 
	gFøme_ru¬ög
,

180 
	gFøme_¶ìpö
,

181 
	gFøme_°›≥d
,

182 
	gFøme_zombõd
;

183 
	gFøme_§tÊg
,

184 
	gFøme_˘imes
,

185 
	gFøme_cmdlö
;

188 
	gHHi°_siz
;

189 
HST_t
 *
	gPHi°_ßv
,

190 *
	gPHi°_√w
;

191 #i‚de‡
OFF_HST_HASH


192 
	#HHASH_SIZ
 1024

	)

193 
	gHHash_⁄e
 [
HHASH_SIZ
],

194 
	gHHash_two
 [
HHASH_SIZ
],

195 
	gHHash_nul
 [
HHASH_SIZ
];

196 *
	gPHash_ßv
 = 
HHash_⁄e
,

197 *
	gPHash_√w
 = 
HHash_two
;

202 
	gAutox_¨øy
 [
EU_MAXPFLGS
],

203 
	gAutox_found
;

204 
	#AUTOX_NO
 
EU_MAXPFLGS


	)

205 
	#AUTOX_COL
(
f
Ëi‡(
EU_MAXPFLGS
 > fË
Autox_¨øy
[f] = 
Autox_found
 = 1

	)

206 
	#AUTOX_MODE
 (0 > 
Rc
.
fixed_wide°
)

	)

209 #ifde‡
CASEUP_SUFIX


210 
	gSˇÀd_sfxèb
[] = { 'K', 'M', 'G', 'T', 'P', 'E', 0 };

212 
	gSˇÀd_sfxèb
[] = { 'k', 'm', 'g', 't', 'p', 'e', 0 };

216 #i‚de‡
OFF_STDERROR


217 
	gStdîr_ßve
 = -1;

219 
	gNuma_node_tŸ
;

220 
	gNuma_node_£l
 = -1;

224 
	#GRAPH_¥efix
 25

225 
	#GRAPH_a˘uÆ
 100

226 
	#GRAPH_suffix
 2

227 
Gøph_adj
;

228 
Gøph_Àn
;

229 c⁄° 
Gøph_blks
[] = " ";

	)

230 c⁄° 
	gGøph_b¨s
[] = "||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||";

240 
	$SCB_STRS
(
CGN
, 
cg«me
)

241 
	$SCB_STRS
(
CGR
, 
cgroup
[0])

242 
	$SCB_STRV
(
CMD
, 
Føme_cmdlö
, 
cmdlöe
, 
cmd
)

243 
	$SCB_NUM1
(
COD
, 
ås
)

244 
	$SCB_NUMx
(
CPN
, 
¥o˚ss‹
)

245 
	$SCB_NUM1
(
CPU
, 
p˝u
)

246 
	$SCB_NUM1
(
DAT
, 
drs
)

247 
	$SCB_NUM1
(
DRT
, 
dt
)

248 
	$SCB_STRS
(
ENV
, 
ívú⁄
[0])

249 
	$SCB_NUM1
(
FL1
, 
maj_Êt
)

250 
	$SCB_NUM1
(
FL2
, 
mö_Êt
)

251 
	$SCB_NUM1
(
FLG
, 
Êags
)

252 
	$SCB_NUM1
(
FV1
, 
maj_dñè
)

253 
	$SCB_NUM1
(
FV2
, 
mö_dñè
)

254 
	$SCB_NUMx
(
GID
, 
egid
)

255 
	$SCB_STRS
(
GRP
, 
egroup
)

256 
	$SCB_STRS
(
LXC
, 
lx˙ame
)

257 
	$SCB_NUMx
(
NCE
, 
ni˚
)

258 
	$SCB_NAME
(
NMA
Ë(c⁄° 
¥oc_t
 **
P
, c⁄°Öroc_à**
Q
) {

261 
p
 = 
	`numa_node_of_˝u
((*
P
)->
¥o˚ss‹
);

262 
q
 = 
	`numa_node_of_˝u
((*
Q
)->
¥o˚ss‹
);

263  
Føme_§tÊg
 * ( 
q
 - 
p
 );

264 
	}
}

265 
	$SCB_NUM1
(
NS1
, 
ns
[
IPCNS
])

266 
	$SCB_NUM1
(
NS2
, 
ns
[
MNTNS
])

267 
	$SCB_NUM1
(
NS3
, 
ns
[
NETNS
])

268 
	$SCB_NUM1
(
NS4
, 
ns
[
PIDNS
])

269 
	$SCB_NUM1
(
NS5
, 
ns
[
USERNS
])

270 
	$SCB_NUM1
(
NS6
, 
ns
[
UTSNS
])

271 
	$SCB_NUM1
(
OOA
, 
oom_adj
)

272 
	$SCB_NUM1
(
OOM
, 
oom_sc‹e
)

273 
	$SCB_NUMx
(
PGD
, 
pgΩ
)

274 
	$SCB_NUMx
(
PID
, 
tid
)

275 
	$SCB_NUMx
(
PPD
, 
µid
)

276 
	$SCB_NUMx
(
PRI
, 
¥i‹ôy
)

277 
	$SCB_NUM1
(
RES
, 
ªsidít
)

278 
	$SCB_NUM1
(
RZA
, 
vm_rss_™⁄
)

279 
	$SCB_NUM1
(
RZF
, 
vm_rss_fûe
)

280 
	$SCB_NUM1
(
RZL
, 
vm_lock
)

281 
	$SCB_NUM1
(
RZS
, 
vm_rss_sh¨ed
)

282 
	$SCB_STRX
(
SGD
, 
supgid
)

283 
	$SCB_STRS
(
SGN
, 
supgΩ
)

284 
	$SCB_NUM1
(
SHR
, 
sh¨e
)

285 
	$SCB_NUM1
(
SID
, 
£ssi⁄
)

286 
	$SCB_NUMx
(
STA
, 
°©e
)

287 
	$SCB_NUM1
(
SWP
, 
vm_sw≠
)

288 
	$SCB_NUMx
(
TGD
, 
tgid
)

289 
	$SCB_NUMx
(
THD
, 
∆wp
)

291 
	$SCB_NAME
(
TME
Ë(c⁄° 
¥oc_t
 **
P
, c⁄°Öroc_à**
Q
) {

292 i‡(
Føme_˘imes
) {

293 i‡(((*
P
)->
cutime
 + (*P)->
c°ime
 + (*P)->
utime
 + (*P)->
°ime
)

294 < ((*
Q
)->
cutime
 + (*Q)->
c°ime
 + (*Q)->
utime
 + (*Q)->
°ime
))

295  
SORT_…
;

296 i‡(((*
P
)->
cutime
 + (*P)->
c°ime
 + (*P)->
utime
 + (*P)->
°ime
)

297 > ((*
Q
)->
cutime
 + (*Q)->
c°ime
 + (*Q)->
utime
 + (*Q)->
°ime
))

298  
SORT_gt
;

300 i‡(((*
P
)->
utime
 + (*P)->
°ime
Ë< ((*
Q
)->utime + (*Q)->stime))

301  
SORT_…
;

302 i‡(((*
P
)->
utime
 + (*P)->
°ime
Ë> ((*
Q
)->utime + (*Q)->stime))

303  
SORT_gt
;

305  
SORT_eq
;

306 
	}
}

307 
	$SCB_NUM1
(
TPG
, 
çgid
)

308 
	$SCB_NUMx
(
TTY
, 
ây
)

309 
	$SCB_NUMx
(
UED
, 
euid
)

310 
	$SCB_STRS
(
UEN
, 
eu£r
)

311 
	$SCB_NUMx
(
URD
, 
ruid
)

312 
	$SCB_STRS
(
URN
, 
ru£r
)

313 
	$SCB_NUMx
(
USD
, 
suid
)

314 
	$SCB_NUM2
(
USE
, 
vm_rss
, 
vm_sw≠
)

315 
	$SCB_STRS
(
USN
, 
su£r
)

316 
	$SCB_NUM1
(
VRT
, 
size
)

317 
	$SCB_NUM1
(
WCH
, 
wch™
)

319 #ifde‡
OFF_HST_HASH


321 
	$s‹t_HST_t
 (c⁄° 
HST_t
 *
P
, c⁄° HST_à*
Q
) {

322  
P
->
pid
 - 
Q
->pid;

323 
	}
}

331 c⁄° *
	$fmtmk
 (c⁄° *
fmts
, ...Ë
	`__©åibuã__
((
	`f‹m©
(
¥ötf
,1,2)));

332 c⁄° *
	$fmtmk
 (c⁄° *
fmts
, ...) {

333 
buf
[
BIGBUFSIZ
];

334 
va_li°
 
va
;

336 
	`va_°¨t
(
va
, 
fmts
);

337 
	`v¢¥ötf
(
buf
, (buf), 
fmts
, 
va
);

338 
	`va_íd
(
va
);

339  (c⁄° *)
buf
;

340 
	}
}

346 
ölöe
 *
	$sˇt
 (*
d°
, c⁄° *
§c
) {

347 *
d°
) dst++;

348 (*(
d°
++Ë*(
§c
++)));

349  --
d°
;

350 
	}
}

357 c⁄° *
	$tg2
 (
x
, 
y
) {

359  
C≠_ˇn_gŸo
 ? 
	`tgŸo
(
curs‹_addªss
, 
x
, 
y
) : "";

360 
	}
}

366 
	$©_eoj
 () {

367 i‡(
Ttych™ged
) {

368 
	`tc£èâr
(
STDIN_FILENO
, 
TCSAFLUSH
, &
Tty_‹igöÆ
);

369 i‡(
key∑d_loˇl
Ë
	`puç
(keypad_local);

370 
	`puç
(
	`tg2
(0, 
S¸ìn_rows
));

371 
	`puç
("\n");

372 #ifde‡
OFF_SCROLLBK


373 i‡(
exô_ˇ_mode
) {

376 
	`puç
(
exô_ˇ_mode
);

379 
	`puç
(
C≠_curs_n‹m
);

380 
	`puç
(
C≠_˛r_eﬁ
);

381 #i‚de‡
RMAN_IGNORED


382 
	`puç
(
C≠_smam
);

385 
	`fÊush
(
°dout
);

386 #i‚de‡
OFF_STDERROR


389 i‡(-1 < 
Stdîr_ßve
) {

390 
	`dup2
(
Stdîr_ßve
, 
	`fûío
(
°dîr
));

391 
	`˛o£
(
Stdîr_ßve
);

392 
Stdîr_ßve
 = -1;

395 
	}
}

400 
	$bye_bye
 (c⁄° *
°r
Ë
NORETURN
;

401 
	$bye_bye
 (c⁄° *
°r
) {

402 
	`©_eoj
();

403 #ifde‡
ATEOJ_RPTSTD


404 { 
¥oc_t
 *
p
;

405 i‡(!
°r
 && !
Fømes_sig«l
 && 
Ttych™ged
Ë{ 
	`Ârötf
(
°dîr
,

422 #i‚de‡
OFF_STDIOLBF


428 #ifde‡
CASEUP_HEXES


437 , 
__func__


438 , 
PACKAGE_STRING


439 , ()
Hîtz
, ()(Hertz), ()(Hertz) * 8

440 , ()
∑ge_byãs
, 
Cpu_Áux_tŸ
, ()
smp_num_˝us
, ()(
CPU_t
)

441 , ()(
HST_t
), (()
∑ge_byãs
 / ()(HST_t)), 
HHi°_siz


442 , ()(
¥oc_t
), ()(
p
->
cmd
), ()(proc_t*)

443 , ()
Fømes_libÊags


444 , ()
SCREENMAX
, ()
ROWMINSIZ
, ()
ROWMAXSIZ


445 , 
PACKAGE
, 
LOCALEDIR


446 #ifde‡
PRETENDNOCAP


449 , 
	`ãrm«me
()

451 , 
	`ây«me
(
STDOUT_FILENO
), 
NCURSES_VERSION


452 , 
max_cﬁ‹s
, 
max_∑ús


453 , 
C≠_ˇn_gŸo
 ? "yes" : "No!"

454 , 
S¸ìn_cﬁs
, 
S¸ìn_rows


455 , 
Max_löes
, ()
P£udo_size


456 #i‚de‡
OFF_STDIOLBF


457 , ()(
Stdout_buf
), ()
BUFSIZ


459 , ()(
WIN_t
), 
GROUPSMAX


460 , 
Curwö
->
rc
.
wö«me
, Curwö->
gΩ«me


461 , 
Curwö
->
rc
.
wöÊags
, Curwö->
maxpÊgs


462 , 
Curwö
->
rc
.
s‹tödx
, Curwö->rc.
fõldscur


463 , 
Curwö
->
rc
.
maxèsks
, Curwö->
v¨cﬁsz
, Curwö->
wölöes


464 , ()
	`°æí
(
Curwö
->
cﬁumnhdr
)

470 #i‚de‡
OFF_HST_HASH


471 #ifde‡
ATEOJ_RPTHSH


472 i‡(!
°r
 && !
Fømes_sig«l
 && 
Ttych™ged
) {

473 
i
, 
j
, 
p›
, 
tŸÆ_occupõd
, 
maxdïth
, 
maxdïth_ßv
, 
numdïth


474 , 
¸oss_foŸ
, 
sz
 = 
HHASH_SIZ
 * ()();

475 
dïths
[
HHASH_SIZ
];

477 
i
 = 0, 
tŸÆ_occupõd
 = 0, 
maxdïth
 = 0; i < 
HHASH_SIZ
; i++) {

478 
V
 = 
PHash_√w
[
i
];

479 
j
 = 0;

480 i‡(-1 < 
V
) {

481 ++
tŸÆ_occupõd
;

482 -1 < 
V
) {

483 
V
 = 
PHi°_√w
[V].
 k
;

484 i‡(-1 < 
V
Ë
j
++;

487 
dïths
[
i
] = 
j
;

488 i‡(
maxdïth
 < 
j
) maxdepth = j;

490 
maxdïth_ßv
 = 
maxdïth
;

492 
	`Ârötf
(
°dîr
,

502 , 
__func__


503 , 
HHASH_SIZ
, 
sz
 / 1024, sz, sz * 3

504 , 
Føme_maxèsk


505 , 
tŸÆ_occupõd
, (tŸÆ_occupõd * 100Ë/ 
HHASH_SIZ


506 , 
maxdïth
 + 1);

508 i‡(
tŸÆ_occupõd
) {

509 
p›
 = 
tŸÆ_occupõd
, 
¸oss_foŸ
 = 0; 
maxdïth
; maxdepth--) {

510 
i
 = 0, 
numdïth
 = 0; i < 
HHASH_SIZ
; i++)

511 i‡(
dïths
[
i
] =
maxdïth
Ë++
numdïth
;

512 
	`Ârötf
(
°dîr
,

514 , 
numdïth
, (numdïth * 100Ë/ 
tŸÆ_occupõd
, 
maxdïth
 + 1);

515 
p›
 -
numdïth
;

516 
¸oss_foŸ
 +
numdïth
;

517 i‡(0 =
p›
 && 
¸oss_foŸ
 =
tŸÆ_occupõd
) ;

519 i‡(
p›
) {

520 
	`Ârötf
(
°dîr
, "\t %5d (%3d%%) unchained hashÅableÉntries\n"

521 , 
p›
, (p› * 100Ë/ 
tŸÆ_occupõd
);

522 
¸oss_foŸ
 +
p›
;

524 
	`Ârötf
(
°dîr
,

526 "\à%5dÅŸÆÉ¡rõ†occupõd\n", 
¸oss_foŸ
);

528 i‡(
maxdïth_ßv
 > 1) {

529 
	`Ârötf
(
°dîr
, "\nPIDsát max depth: ");

530 
i
 = 0; i < 
HHASH_SIZ
; i++)

531 i‡(
dïths
[
i
] =
maxdïth_ßv
) {

532 
j
 = 
PHash_√w
[
i
];

533 
	`Ârötf
(
°dîr
, "\n\ço†%4d: %05d", 
i
, 
PHi°_√w
[
j
].
pid
);

534 -1 < 
j
) {

535 
j
 = 
PHi°_√w
[j].
 k
;

536 i‡(-1 < 
j
Ë
	`Ârötf
(
°dîr
, ", %05d", 
PHi°_√w
[j].
pid
);

539 
	`Ârötf
(
°dîr
, "\n");

546 
	`numa_unöô
();

547 i‡(
°r
) {

548 
	`Âuts
(
°r
, 
°dîr
);

549 
	`exô
(
EXIT_FAILURE
);

551 i‡(
B©ch
Ë
	`Âuts
("\n", 
°dout
);

552 
	`exô
(
EXIT_SUCCESS
);

553 
	}
}

558 
	$îr‹_exô
 (c⁄° *
°r
Ë
NORETURN
;

559 
	$îr‹_exô
 (c⁄° *
°r
) {

560 
buf
[
MEDBUFSIZ
];

565 
	`¢¥ötf
(
buf
, (buf), "%s: %s\n", 
My«me
, 
°r
);

566 
	`bye_bye
(
buf
);

567 
	}
}

572 
	$sig_abexô
 (
sig
) {

573 
sig£t_t
 
ss
;

576 
	`sigfûl£t
(&
ss
);

577 
	`sig¥ocmask
(
SIG_BLOCK
, &
ss
, 
NULL
);

578 
	`©_eoj
();

579 
	`Ârötf
(
°dîr
, 
	`N_fmt
(
EXIT_sig«ls_fmt
)

580 , 
sig
, 
	`sig«l_numbî_to_«me
(sig), 
My«me
);

581 
	`sig«l
(
sig
, 
SIG_DFL
);

582 
	`øi£
(
sig
);

583 
	}
}

590 
	$sig_ídpgm
 (
d⁄t_ˇª_sig
Ë
NORETURN
;

591 
	$sig_ídpgm
 (
d⁄t_ˇª_sig
) {

592 
sig£t_t
 
ss
;

595 
	`sigfûl£t
(&
ss
);

596 
	`sig¥ocmask
(
SIG_BLOCK
, &
ss
, 
NULL
);

597 
Fømes_sig«l
 = 
BREAK_sig
;

598 
	`bye_bye
(
NULL
);

599 ()
d⁄t_ˇª_sig
;

600 
	}
}

606 
	$sig_∑u£d
 (
d⁄t_ˇª_sig
) {

608 i‡(-1 =
	`tc£èâr
(
STDIN_FILENO
, 
TCSAFLUSH
, &
Tty_‹igöÆ
))

609 
	`îr‹_exô
(
	`fmtmk
(
	`N_fmt
(
FAIL_ây_£t_fmt
), 
	`°ªº‹
(
î∫o
)));

610 i‡(
key∑d_loˇl
Ë
	`puç
(keypad_local);

611 
	`puç
(
	`tg2
(0, 
S¸ìn_rows
));

612 
	`puç
(
C≠_curs_n‹m
);

613 #i‚de‡
RMAN_IGNORED


614 
	`puç
(
C≠_smam
);

619 
	`fÊush
(
°dout
);

620 
	`øi£
(
SIGSTOP
);

622 i‡(-1 =
	`tc£èâr
(
STDIN_FILENO
, 
TCSAFLUSH
, &
Tty_øw
))

623 
	`îr‹_exô
(
	`fmtmk
(
	`N_fmt
(
FAIL_ây_£t_fmt
), 
	`°ªº‹
(
î∫o
)));

624 #i‚de‡
RMAN_IGNORED


625 
	`puç
(
C≠_rmam
);

627 i‡(
key∑d_xmô
Ë
	`puç
(keypad_xmit);

628 
	`puç
(
Curs‹_°©e
);

629 
Fømes_sig«l
 = 
BREAK_sig
;

630 ()
d⁄t_ˇª_sig
;

631 
	}
}

637 
	$sig_ªsize
 (
d⁄t_ˇª_sig
) {

639 
	`tcdøö
(
STDOUT_FILENO
);

640 
Fømes_sig«l
 = 
BREAK_sig
;

641 ()
d⁄t_ˇª_sig
;

642 
	}
}

650 
	$ˇpsmk
 (
WIN_t
 *
q
) {

653 
	#tIF
(
s
Ë†? s : ""

	)

656 
	#tPM
(
a
,
b
Ë
	`ç¨m
◊, b, 0, 0, 0, 0, 0, 0, 0, 0)

	)

657 
ˇpsd⁄e
 = 0;

660 i‡(
B©ch
) ;

663 i‡(!
ˇpsd⁄e
) {

664 
	`STRLCPY
(
C≠_˛r_eﬁ
, 
	`tIF
(
˛r_eﬁ
))

665 
	`STRLCPY
(
C≠_˛r_eos
, 
	`tIF
(
˛r_eos
))

666 
	`STRLCPY
(
C≠_˛r_s¸
, 
	`tIF
(
˛ór_s¸ìn
))

668 
	`¢¥ötf
(
C≠_∆_˛ªos
, (C≠_∆_˛ªos), "\n%s", 
	`tIF
(
˛r_eos
));

669 
	`STRLCPY
(
C≠_curs_huge
, 
	`tIF
(
curs‹_visibÀ
))

670 
	`STRLCPY
(
C≠_curs_n‹m
, 
	`tIF
(
curs‹_n‹mÆ
))

671 
	`STRLCPY
(
C≠_curs_hide
, 
	`tIF
(
curs‹_övisibÀ
))

672 
	`STRLCPY
(
C≠_home
, 
	`tIF
(
curs‹_home
))

673 
	`STRLCPY
(
C≠_n‹m
, 
	`tIF
(
exô_©åibuã_mode
))

674 
	`STRLCPY
(
C≠_ªvî£
, 
	`tIF
(
íãr_ªvî£_mode
))

675 #i‚de‡
RMAN_IGNORED


676 i‡(!
ót_√wlöe_glôch
) {

677 
	`STRLCPY
(
C≠_rmam
, 
	`tIF
(
exô_am_mode
))

678 
	`STRLCPY
(
C≠_smam
, 
	`tIF
(
íãr_am_mode
))

679 i‡(!*
C≠_rmam
 || !*
C≠_smam
) {

680 *
C≠_rmam
 = '\0';

681 *
C≠_smam
 = '\0';

682 i‡(
auto_right_m¨gö
)

683 
C≠_avoid_eﬁ
 = 1;

685 
	`puç
(
C≠_rmam
);

688 
	`¢¥ötf
(
C≠s_off
, (C≠s_off), "%s%s", 
C≠_n‹m
, 
	`tIF
(
‹ig_∑ú
));

689 
	`¢¥ötf
(
C≠s_ídlöe
, (C≠s_ídlöe), "%s%s", 
C≠s_off
, 
C≠_˛r_eﬁ
);

690 i‡(
	`tgŸo
(
curs‹_addªss
, 1, 1)Ë
C≠_ˇn_gŸo
 = 1;

691 
ˇpsd⁄e
 = 1;

697 
	`STRLCPY
(
q
->
ˇp_bﬁd
, 
	`CHKw
(q, 
Võw_NOBOLD
Ë? 
C≠_n‹m
 : 
	`tIF
(
íãr_bﬁd_mode
))

698 i‡(
	`CHKw
(
q
, 
Show_COLORS
Ë&& 
max_cﬁ‹s
 > 0) {

699 
	`STRLCPY
(
q
->
ˇp˛r_sum
, 
	`tPM
(
£t_a_f‹eground
, q->
rc
.
summ˛r
))

700 
	`¢¥ötf
(
q
->
ˇp˛r_msg
, (q->capclr_msg), "%s%s"

701 , 
	`tPM
(
£t_a_f‹eground
, 
q
->
rc
.
msgs˛r
), 
C≠_ªvî£
);

702 
	`¢¥ötf
(
q
->
ˇp˛r_pmt
, (q->capclr_pmt), "%s%s"

703 , 
	`tPM
(
£t_a_f‹eground
, 
q
->
rc
.
msgs˛r
), q->
ˇp_bﬁd
);

704 
	`¢¥ötf
(
q
->
ˇp˛r_hdr
, (q->capclr_hdr), "%s%s"

705 , 
	`tPM
(
£t_a_f‹eground
, 
q
->
rc
.
hód˛r
), 
C≠_ªvî£
);

706 
	`¢¥ötf
(
q
->
ˇp˛r_rown‹m
, (q->capclr_rownorm), "%s%s"

707 , 
C≠s_off
, 
	`tPM
(
£t_a_f‹eground
, 
q
->
rc
.
èsk˛r
));

709 
q
->
ˇp˛r_sum
[0] = '\0';

710 #ifde‡
USE_X_COLHDR


711 
	`¢¥ötf
(
q
->
ˇp˛r_msg
, (q->
ˇp˛r_pmt
), "%s%s"

712 , 
C≠_ªvî£
, 
q
->
ˇp_bﬁd
);

714 
	`STRLCPY
(
q
->
ˇp˛r_msg
, 
C≠_ªvî£
)

716 
	`STRLCPY
(
q
->
ˇp˛r_pmt
, q->
ˇp_bﬁd
)

717 
	`STRLCPY
(
q
->
ˇp˛r_hdr
, 
C≠_ªvî£
)

718 
	`STRLCPY
(
q
->
ˇp˛r_rown‹m
, 
C≠_n‹m
)

722 
	`¢¥ötf
(
q
->
ˇp˛r_rowhigh
, (q->capclr_rowhigh), "%s%s"

723 , 
q
->
ˇp˛r_rown‹m
, 
	`CHKw
(q, 
Show_HIBOLD
Ë? q->
ˇp_bﬁd
 : 
C≠_ªvî£
);

724 #unde‡
tIF


725 #unde‡
tPM


726 
	}
}

731 
	$show_msg
 (c⁄° *
°r
) {

732 
	`PUTT
("%s%s %.*s %s%s%s"

733 , 
	`tg2
(0, 
Msg_row
)

734 , 
Curwö
->
ˇp˛r_msg


735 , 
S¸ìn_cﬁs
 - 2

736 , 
°r


737 , 
C≠_curs_hide


738 , 
C≠s_off


739 , 
C≠_˛r_eﬁ
);

740 
	`fÊush
(
°dout
);

741 
	`u¶ìp
(
MSG_USLEEP
);

742 
	}
}

747 
	$show_pmt
 (c⁄° *
°r
) {

748 
rc
;

750 #ifde‡
PRETENDNOCAP


751 
	`PUTT
("\n%s%s%.*s %s%s%s"

753 
	`PUTT
("%s%s%.*s %s%s%s"

755 , 
	`tg2
(0, 
Msg_row
)

756 , 
Curwö
->
ˇp˛r_pmt


757 , 
S¸ìn_cﬁs
 - 2

758 , 
°r


759 , 
C≠_curs_huge


760 , 
C≠s_off


761 , 
C≠_˛r_eﬁ
);

762 
	`fÊush
(
°dout
);

764  ((
rc
 = ()
	`°æí
(
°r
)+1Ë< 
S¸ìn_cﬁs
) ?Ñc : Screen_cols-1;

765 
	}
}

795 
	$show_•ecül
 (
öãø˘
, c⁄° *
glob
) {

812 
tmp
[
LRGBUFSIZ
], 
lö
[LRGBUFSIZ], 
row
[
ROWMAXSIZ
];

813 *
Ω
, *
lö_íd
, *
sub_beg
, *
sub_íd
;

814 
room
;

817 (
lö_íd
 = 
	`°rchr
(
glob
, '\n'))) {

818 
	#myMIN
(
a
,
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

819 
size_t
 
Àss‹
 = 
	`myMIN
((size_t)(
lö_íd
 - 
glob
), (
lö
) -1);

822 
	`mem˝y
(
lö
, 
glob
, 
Àss‹
);

824 
lö
[
Àss‹
] = '\0';

825 
room
 = 
S¸ìn_cﬁs
;

826 
sub_beg
 = 
sub_íd
 = 
lö
;

827 *(
Ω
 = 
row
) = '\0';

829 *
sub_beg
) {

830 
ch
 = *
sub_íd
;

831 i‡('~' =
ch
Ëch = *(
sub_íd
 + 1) - '0';

832 
ch
) {

834 *(
sub_íd
 + 1) = '\0';

835 *(
sub_íd
 + 2) = '\0';

838 *
sub_íd
 = '\0';

839 
	`¢¥ötf
(
tmp
, (tmp), "%s%.*s%s"

840 , 
Curwö
->
ˇ±ab
[
ch
], 
room
, 
sub_beg
, 
C≠s_off
);

841 
Ω
 = 
	`sˇt
‘p, 
tmp
);

842 
room
 -(
sub_íd
 - 
sub_beg
);

843 
sub_beg
 = (
sub_íd
 += 2);

846 ++
sub_íd
;

848 i‡(0 >
room
) ;

851 i‡(
öãø˘
Ë
	`PUTT
("%s%s\n", 
row
, 
C≠_˛r_eﬁ
);

852 
	`PUFF
("%s%s\n", 
row
, 
C≠s_ídlöe
);

853 
glob
 = ++
lö_íd
;

855 #unde‡
myMIN


862 i‡(*
glob
Ë
	`PUTT
("%.*s", 
S¸ìn_cﬁs
 -1, glob);

863 
	}
}

869 
	$updt_s¸ﬁl_msg
 () {

870 
tmp1
[
SMLBUFSIZ
], 
tmp2
[SMLBUFSIZ];

871 
tŸpÊgs
 = 
Curwö
->totpflgs;

872 
begpÊgs
 = 
Curwö
->
begpÊg
 + 1;

874 #i‚de‡
USE_X_COLHDR


875 i‡(
	`CHKw
(
Curwö
, 
Show_HICOLS
)) {

876 
tŸpÊgs
 -= 2;

877 i‡(
	`ENUpos
(
Curwö
, Curwö->
rc
.
s‹tödx
Ë< Curwö->
begpÊg
Ë
begpÊgs
 -= 2;

880 i‡(1 > 
tŸpÊgs
)Åotpflgs = 1;

881 i‡(1 > 
begpÊgs
) begpflgs = 1;

882 
	`¢¥ötf
(
tmp1
, (tmp1)

883 , 
	`N_fmt
(
SCROLL_co‹d_fmt
), 
Curwö
->
begèsk
 + 1, 
begpÊgs
, 
tŸpÊgs
);

884 
	`°r˝y
(
tmp2
, 
tmp1
);

885 #i‚de‡
SCROLLVAR_NO


886 i‡(
Curwö
->
v¨cﬁbeg
)

887 
	`¢¥ötf
(
tmp2
, —mp2), "%†+ %d", 
tmp1
, 
Curwö
->
v¨cﬁbeg
);

891 
	`¢¥ötf
(
S¸ﬁl_fmts
, (Scroll_fmts)

892 , "%† %.*s%s", 
C≠s_off
, 
S¸ìn_cﬁs
 - 3, 
tmp2
, 
C≠_˛r_eﬁ
);

893 
	}
}

901 *
	$Æloc_c
 (
size_t
 
num
Ë
MALLOC
;

902 *
	$Æloc_c
 (
size_t
 
num
) {

903 *
pv
;

905 i‡(!
num
) ++num;

906 i‡(!(
pv
 = 
	`ˇŒoc
(1, 
num
)))

907 
	`îr‹_exô
(
	`N_txt
(
FAIL_Æloc_c_txt
));

908  
pv
;

909 
	}
}

912 *
	$Æloc_r
 (*
±r
, 
size_t
 
num
Ë
MALLOC
;

913 *
	$Æloc_r
 (*
±r
, 
size_t
 
num
) {

914 *
pv
;

916 i‡(!
num
) ++num;

917 i‡(!(
pv
 = 
	`ªÆloc
(
±r
, 
num
)))

918 
	`îr‹_exô
(
	`N_txt
(
FAIL_Æloc_r_txt
));

919  
pv
;

920 
	}
}

923 *
	$Æloc_s
 (c⁄° *
°r
Ë
MALLOC
;

924 *
	$Æloc_s
 (c⁄° *
°r
) {

925  
	`°r˝y
(
	`Æloc_c
(
	`°æí
(
°r
) +1), str);

926 
	}
}

934 
ölöe
 
	$iﬂ
 (
time•ec
 *
ts
) {

935 
fd_£t
 
fs
;

936 
rc
;

938 
	`FD_ZERO
(&
fs
);

939 
	`FD_SET
(
STDIN_FILENO
, &
fs
);

941 #ifde‡
SIGNALS_LESS


948 
rc
 = 
	`p£À˘
(
STDIN_FILENO
 + 1, &
fs
, 
NULL
, NULL, 
ts
, &
Sigwöch_£t
);

950 i‡(
rc
 < 0)Ñc = 0;

951  
rc
;

952 
	}
}

958 
	$ioch
 (
ech
, *
buf
, 
˙t
) {

959 
rc
 = -1;

961 #ifde‡
TERMIOS_ONLY


962 i‡(
ech
) {

963 
	`tc£èâr
(
STDIN_FILENO
, 
TCSAFLUSH
, &
Tty_twóked
);

964 
rc
 = 
	`ªad
(
STDIN_FILENO
, 
buf
, 
˙t
);

965 
	`tc£èâr
(
STDIN_FILENO
, 
TCSAFLUSH
, &
Tty_øw
);

967 i‡(
	`iﬂ
(
NULL
))

968 
rc
 = 
	`ªad
(
STDIN_FILENO
, 
buf
, 
˙t
);

971 ()
ech
;

972 i‡(
	`iﬂ
(
NULL
))

973 
rc
 = 
	`ªad
(
STDIN_FILENO
, 
buf
, 
˙t
);

977 i‡(0 =
rc
Ë
	`bye_bye
(
NULL
);

980 
	`tcÊush
(
STDIN_FILENO
, 
TCIFLUSH
);

983  
rc
;

984 
	}
}

992 
	$iokey
 (
a˘i⁄
) {

993 
buf12
[
CAPBUFSIZ
], 
buf13
[CAPBUFSIZ]

994 , 
buf14
[
CAPBUFSIZ
], 
buf15
[CAPBUFSIZ];

996 c⁄° *
°r
;

997 
key
;

998 } 
töfo_èb
[] = {

999 { "\033\n",
kbd_ENTER
 }, { 
NULL
, 
kbd_UP
 }, { NULL, 
kbd_DOWN
 },

1000 { 
NULL
, 
kbd_LEFT
 }, { NULL, 
kbd_RIGHT
 }, { NULL, 
kbd_PGUP
 },

1001 { 
NULL
, 
kbd_PGDN
 }, { NULL, 
kbd_HOME
 }, { NULL, 
kbd_END
 },

1002 { 
NULL
, 
kbd_BKSP
 }, { NULL, 
kbd_INS
 }, { NULL, 
kbd_DEL
 },

1004 { 
buf12
, 
kbd_PGUP
 }, { 
buf13
, 
kbd_PGDN
 },

1005 { 
buf14
, 
kbd_HOME
 }, { 
buf15
, 
kbd_END
 },

1008 { "\033\\", 
kbd_UP
 }, { "\033/", 
kbd_DOWN
 },

1009 { "\033<", 
kbd_LEFT
 }, { "\033>", 
kbd_RIGHT
 },

1010 { "\033k", 
kbd_UP
 }, { "\033j", 
kbd_DOWN
 },

1011 { "\033h", 
kbd_LEFT
 }, { "\033l", 
kbd_RIGHT
 },

1012 { "\033\013", 
kbd_PGUP
 }, { "\033\012", 
kbd_PGDN
 },

1013 { "\033\010", 
kbd_HOME
 }, { "\033\014", 
kbd_END
 }

1015 #ifde‡
TERMIOS_ONLY


1016 
buf
[
SMLBUFSIZ
], *
pb
;

1018 
buf
[
SMLBUFSIZ
];

1019 
pos
, 
Àn
;

1020 *
pb
;

1022 
i
;

1024 i‡(
a˘i⁄
 == 0) {

1025 
	#tOk
(
s
Ë†? s : ""

	)

1026 
töfo_èb
[1].
°r
 = 
	`tOk
(
key_up
);

1027 
töfo_èb
[2].
°r
 = 
	`tOk
(
key_down
);

1028 
töfo_èb
[3].
°r
 = 
	`tOk
(
key_À·
);

1029 
töfo_èb
[4].
°r
 = 
	`tOk
(
key_right
);

1030 
töfo_èb
[5].
°r
 = 
	`tOk
(
key_µage
);

1031 
töfo_èb
[6].
°r
 = 
	`tOk
(
key_≈age
);

1032 
töfo_èb
[7].
°r
 = 
	`tOk
(
key_home
);

1033 
töfo_èb
[8].
°r
 = 
	`tOk
(
key_íd
);

1034 
töfo_èb
[9].
°r
 = 
	`tOk
(
key_back•a˚
);

1035 
töfo_èb
[10].
°r
 = 
	`tOk
(
key_ic
);

1036 
töfo_èb
[11].
°r
 = 
	`tOk
(
key_dc
);

1037 
	`STRLCPY
(
buf12
, 
	`fmtmk
("\033%s", 
	`tOk
(
key_up
)));

1038 
	`STRLCPY
(
buf13
, 
	`fmtmk
("\033%s", 
	`tOk
(
key_down
)));

1039 
	`STRLCPY
(
buf14
, 
	`fmtmk
("\033%s", 
	`tOk
(
key_À·
)));

1040 
	`STRLCPY
(
buf15
, 
	`fmtmk
("\033%s", 
	`tOk
(
key_right
)));

1042 
	`puç
(
	`tOk
(
key∑d_xmô
));

1045 #unde‡
tOk


1048 i‡(
a˘i⁄
 == 1) {

1049 
	`mem£t
(
buf
, '\0', (buf));

1050 i‡(1 > 
	`ioch
(0, 
buf
, (buf)-1))  0;

1053 #i‚de‡
TERMIOS_ONLY


1054 i‡(
a˘i⁄
 == 2) {

1055 i‡(
pos
 < 
Àn
)

1056  
buf
[
pos
++];

1057 
pos
 = 
Àn
 = 0;

1058 
	`mem£t
(
buf
, '\0', (buf));

1059 i‡(1 > 
	`ioch
(0, 
buf
, (buf)-1))  0;

1060 i‡(
	`i•röt
(
buf
[0])) {

1061 
Àn
 = 
	`°æí
(
buf
);

1062 
pos
 = 1;

1063  
buf
[0];

1071 i‡(!(
pb
 = 
	`°ºchr
(
buf
, '\033')))Öb = buf;

1072 i‡(
pb
 > 
buf
 && '\033' == *(pb - 1)) --pb;

1074 
i
 = 0; i < 
	`MAXTBL
(
töfo_èb
); i++)

1075 i‡(!
	`°rcmp
(
töfo_èb
[
i
].
°r
, 
pb
))

1076  
töfo_èb
[
i
].
key
;

1079 i‡(
buf
[0] == '\033' && buf[1])  0;

1080  
buf
[0];

1081 
	}
}

1084 #ifde‡
TERMIOS_ONLY


1088 *
	$iﬁöe
 (c⁄° *
¥om±
) {

1089 c⁄° 
ws
[] = "\b\f\n\r\t\v\x1b\x9b";

1090 
buf
[
MEDBUFSIZ
];

1091 *
p
;

1093 
	`show_pmt
(
¥om±
);

1094 
	`mem£t
(
buf
, '\0', (buf));

1095 
	`ioch
(1, 
buf
, (buf)-1);

1097 i‡((
p
 = 
	`°Ωbrk
(
buf
, 
ws
))) *p = '\0';

1099  
buf
;

1100 
	}
}

1109 *
	$iﬁöe
 (c⁄° *
¥om±
) {

1110 
	#ßvMAX
 50

	)

1112 
	#sqzSTR
 { 
	`memmove
(&
buf
[
pos
], &buf[pos+1], 
bufMAX
-pos); \

1113 
buf
[(buf)-1] = '\0'; }

	)

1114 
	#expSTR
 i‡(
Àn
+1 < 
bufMAX
 &&Üí+
beg
+1 < 
S¸ìn_cﬁs
) { \

1115 
	`memmove
(&
buf
[
pos
+1], &buf[pos], 
bufMAX
-pos); buf[pos] = ' '; }

	)

1116 
	#logCOL
 (
pos
+1)

	)

1117 
	#phyCOL
 (
beg
+
pos
+1)

	)

1118 
	#bufMAX
 (()(
buf
)-2)

1119 
buf
[
MEDBUFSIZ
+1];

1120 
ovt
;

	)

1121 
beg
, 
pos
, 
Àn
, 
key
, 
i
;

1122 
	slö_s
 {

1123 
lö_s
 *
bkw
;

1124 
lö_s
 *
fwd
;

1125 *
°r
;

1127 
lö_s
 *
™ch‹
, *
∂ö
;

1129 i‡(!
™ch‹
) {

1130 
™ch‹
 = 
	`Æloc_c
((
lö_s
));

1131 
™ch‹
->
°r
 = 
	`Æloc_s
("");

1133 
∂ö
 = 
™ch‹
;

1134 
pos
 = 0;

1135 
beg
 = 
	`show_pmt
(
¥om±
);

1136 
	`mem£t
(
buf
, '\0', (buf));

1137 
	`puç
(
ovt
 ? 
C≠_curs_huge
 : 
C≠_curs_n‹m
);

1140 
	`fÊush
(
°dout
);

1141 
Àn
 = 
	`°æí
(
buf
);

1142 
key
 = 
	`iokey
(2);

1143 
key
) {

1145 
buf
[0] = '\0';

1146  
buf
;

1147 
kbd_ESC
:

1148 
buf
[0] = 
kbd_ESC
;

1149  
buf
;

1150 
kbd_ENTER
:

1152 
kbd_INS
:

1153 
ovt
 = !ovt;

1154 
	`puç
(
ovt
 ? 
C≠_curs_huge
 : 
C≠_curs_n‹m
);

1156 
kbd_DEL
:

1157 
sqzSTR


1159 
kbd_BKSP
 :

1160 i‡(0 < 
pos
Ë{ --pos; 
sqzSTR
 }

1162 
kbd_LEFT
:

1163 i‡(0 < 
pos
) --pos;

1165 
kbd_RIGHT
:

1166 i‡(
pos
 < 
Àn
) ++pos;

1168 
kbd_HOME
:

1169 
pos
 = 0;

1171 
kbd_END
:

1172 
pos
 = 
Àn
;

1174 
kbd_UP
:

1175 i‡(
∂ö
->
bkw
) {

1176 
∂ö
 =Ölö->
bkw
;

1177 
	`mem£t
(
buf
, '\0', (buf));

1178 
pos
 = 
	`¢¥ötf
(
buf
, (buf), "%.*s", 
S¸ìn_cﬁs
 - 
beg
 - 1, 
∂ö
->
°r
);

1181 
kbd_DOWN
:

1182 
	`mem£t
(
buf
, '\0', (buf));

1183 i‡(
∂ö
->
fwd
)Ölin =Ölin->fwd;

1184 
pos
 = 
	`¢¥ötf
(
buf
, (buf), "%.*s", 
S¸ìn_cﬁs
 - 
beg
 - 1, 
∂ö
->
°r
);

1187 i‡(
	`i•röt
(
key
Ë&& 
logCOL
 < 
bufMAX
 && 
phyCOL
 < 
S¸ìn_cﬁs
) {

1188 i‡(!
ovt
Ë
expSTR


1189 
buf
[
pos
++] = 
key
;

1193 
	`puç
(
	`fmtmk
("%s%s%s", 
	`tg2
(
beg
, 
Msg_row
), 
C≠_˛r_eﬁ
, 
buf
));

1194 
	`puç
(
	`tg2
(
beg
+
pos
, 
Msg_row
));

1195 } 
key
 !
kbd_ENTER
);

1198 
i
 = 0, 
∂ö
 = 
™ch‹
; ; i++) {

1199 #ifde‡
RECALL_FIXED


1200 i‡(!
	`STRCMP
(
∂ö
->
°r
, 
buf
))

1201  
buf
;

1203 i‡(!
	`STRCMP
(
∂ö
->
°r
, 
buf
)) {

1204 i‡(
i
 > 1) {

1205 i‡(
∂ö
->
bkw
)

1206 
∂ö
->
bkw
->
fwd
 =Ölin->fwd;

1207 
∂ö
->
fwd
->
bkw
 =Ölin->bkw;

1208 
™ch‹
->
bkw
->
fwd
 = 
∂ö
;

1209 
∂ö
->
bkw
 = 
™ch‹
->bkw;

1210 
∂ö
->
fwd
 = 
™ch‹
;

1211 
™ch‹
->
bkw
 = 
∂ö
;

1213  
buf
;

1216 i‡(!
∂ö
->
bkw
) ;

1217 
∂ö
 =Ölö->
bkw
;

1219 i‡(
i
 < 
ßvMAX
)

1220 
∂ö
 = 
	`Æloc_c
((
lö_s
));

1222 
∂ö
->
fwd
->
bkw
 = 
NULL
;

1223 
	`‰ì
(
∂ö
->
°r
);

1225 
∂ö
->
°r
 = 
	`Æloc_s
(
buf
);

1226 
∂ö
->
bkw
 = 
™ch‹
->bkw;

1227 i‡(
∂ö
->
bkw
)

1228 
∂ö
->
bkw
->
fwd
 =Ölin;

1229 
∂ö
->
fwd
 = 
™ch‹
;

1230 
™ch‹
->
bkw
 = 
∂ö
;

1232  
buf
;

1233 #unde‡
ßvMAX


1234 #unde‡
sqzSTR


1235 #unde‡
expSTR


1236 #unde‡
logCOL


1237 #unde‡
phyCOL


1238 #unde‡
bufMAX


1239 
	}
}

1245 
	$mkÊﬂt
 (c⁄° *
°r
, *
num
, 
whﬁe
) {

1246 
tmp
[
SMLBUFSIZ
], *
ï
;

1248 i‡(
whﬁe
) {

1249 *
num
 = ()
	`°πﬁ
(
°r
, &
ï
, 0);

1250 i‡(
ï
 !
°r
 && *ï ='\0' && *
num
 < 
INT_MAX
)

1254 
	`¢¥ötf
(
tmp
, —mp), "%s", 
°r
);

1255 *
num
 = 
	`°πof
(
tmp
, &
ï
);

1256 i‡(*
ï
 != '\0') {

1258 i‡(*
ï
 == '.') *ep = ',';

1259 i‡(*
ï
 == ',') *ep = '.';

1260 *
num
 = 
	`°πof
(
tmp
, &
ï
);

1262 i‡(
ï
 !
tmp
 && *ï ='\0' && *
num
 < 
INT_MAX
)

1265 
	}
}

1276 
	$ªadfûe
 (
FILE
 *
Â
, **
baddr
, 
size_t
 *
bsize
, size_à*
bªad
) {

1277 
chunk
[4096*16];

1278 
size_t
 
num
;

1280 *
bªad
 = 0;

1281 *
bsize
 = 
READMINSZ
;

1282 *
baddr
 = 
	`Æloc_c
(
READMINSZ
);

1283 i‡(
Â
) {

1284 0 < (
num
 = 
	`‰ód
(
chunk
, 1, (chunk), 
Â
))) {

1285 *
baddr
 = 
	`Æloc_r
(*baddr, 
num
 + *
bsize
);

1286 
	`mem˝y
(*
baddr
 + *
bªad
, 
chunk
, 
num
);

1287 *
bªad
 +
num
;

1288 *
bsize
 +
num
;

1290 *(*
baddr
 + *
bªad
) = '\0';

1291  
	`„º‹
(
Â
);

1293  
ENOENT
;

1294 
	}
}

1298 
	#GET_NUM_BAD
 
INT_MIN


	)

1299 
	#GET_NUM_ESC
 (
INT_MIN
 + 1)

	)

1300 
	#GET_NUM_NOT
 (
INT_MIN
 + 2)

	)

1304 
	$gë_Êﬂt
 (c⁄° *
¥om±
) {

1305 *
löe
;

1306 
f
;

1308 
löe
 = 
	`iﬁöe
(
¥om±
);

1309 i‡(
löe
[0] =
kbd_ESC
 || 
Fømes_sig«l
Ë 
GET_NUM_ESC
;

1310 i‡(!
löe
[0]Ë 
GET_NUM_NOT
;

1312 i‡(!
	`mkÊﬂt
(
löe
, &
f
, 0) || f < 0) {

1313 
	`show_msg
(
	`N_txt
(
BAD_numÊﬂt_txt
));

1314  
GET_NUM_BAD
;

1316  
f
;

1317 
	}
}

1322 
	$gë_öt
 (c⁄° *
¥om±
) {

1323 *
löe
;

1324 
f
;

1326 
löe
 = 
	`iﬁöe
(
¥om±
);

1327 i‡(
löe
[0] =
kbd_ESC
 || 
Fømes_sig«l
Ë 
GET_NUM_ESC
;

1328 i‡(!
löe
[0]Ë 
GET_NUM_NOT
;

1330 i‡(!
	`mkÊﬂt
(
löe
, &
f
, 1)) {

1331 
	`show_msg
(
	`N_txt
(
BAD_öãgîs_txt
));

1332  
GET_NUM_BAD
;

1334  ()
f
;

1335 
	}
}

1340 
ölöe
 c⁄° *
	$hex_make
 (
KLONG
 
num
, 
noz
) {

1341 
buf
[
SMLBUFSIZ
];

1342 
i
;

1344 #ifde‡
CASEUP_HEXES


1345 
	`¢¥ötf
(
buf
, (buf), "%08" 
KLF
 "X", 
num
);

1347 
	`¢¥ötf
(
buf
, (buf), "%08" 
KLF
 "x", 
num
);

1349 i‡(
noz
)

1350 
i
 = 0; 
buf
[i]; i++)

1351 i‡('0' =
buf
[
i
])

1352 
buf
[
i
] = '.';

1353  
buf
;

1354 
	}
}

1359 
	so£l_s
 {

1360 
o£l_s
 *
	mnxt
;

1361 (*
	mªl
)(const *, const *);

1362 *(*
	m£l
)(const *, const *);

1363 *
	møw
;

1364 *
	mvÆ
;

1365 
	m›s
;

1366 
	möc
;

1367 
	míu
;

1373 
	$o£l_˛ór
 (
WIN_t
 *
q
) {

1374 
o£l_s
 *
o£l
 = 
q
->
o£l_1°
;

1376 
o£l
) {

1377 
o£l_s
 *
nxt
 = 
o£l
->nxt;

1378 
	`‰ì
(
o£l
->
vÆ
);

1379 
	`‰ì
(
o£l
->
øw
);

1380 
	`‰ì
(
o£l
);

1381 
o£l
 = 
nxt
;

1383 
q
->
o£l_tŸ
 = 0;

1384 
q
->
o£l_1°
 = 
NULL
;

1385 
	`‰ì
 (
q
->
o£l_¥t
);

1386 
q
->
o£l_¥t
 = 
NULL
;

1387 #i‚de‡
USE_X_COLHDR


1388 
	`OFFw
(
Curwö
, 
NOHISEL_xxx
);

1390 
	}
}

1397 
ölöe
 
	$o£l_m©ched
 (c⁄° 
WIN_t
 *
q
, 
FLG_t
 
íu
, c⁄° *
°r
) {

1398 
o£l_s
 *
o£l
 = 
q
->
o£l_1°
;

1400 
o£l
) {

1401 i‡(
o£l
->
íu
 ==Énu) {

1402 
r
;

1403 
o£l
->
›s
) {

1405 
r
 = 
o£l
->
	`ªl
(
°r
, o£l->
vÆ
);

1406 i‡((
r
 >0 && 
o£l
->
öc
) || (r < 0 && !osel->inc))  0;

1409 
r
 = 
o£l
->
	`ªl
(
°r
, o£l->
vÆ
);

1410 i‡((
r
 <0 && 
o£l
->
öc
) || (r > 0 && !osel->inc))  0;

1413 { *
p
 = 
o£l
->
	`£l
(
°r
, o£l->
vÆ
);

1414 i‡((!
p
 && 
o£l
->
öc
) || (p && !osel->inc))  0;

1419 
o£l
 = o£l->
nxt
;

1422 
	}
}

1428 c⁄° *
	$u£r_˚πify
 (
WIN_t
 *
q
, c⁄° *
°r
, 
typ
) {

1429 
∑sswd
 *
pwd
;

1430 *
ídp
;

1431 
uid_t
 
num
;

1433 
q
->
u§£…yp
 = 0;

1434 
q
->
u§£lÊg
 = 1;

1435 
M⁄pidsidx
 = 0;

1436 i‡(*
°r
) {

1437 i‡('!' =*
°r
Ë{ ++°r; 
q
->
u§£lÊg
 = 0; }

1438 
num
 = (
uid_t
)
	`°πoul
(
°r
, &
ídp
, 0);

1439 i‡('\0' =*
ídp
) {

1440 
pwd
 = 
	`gëpwuid
(
num
);

1441 i‡(!
pwd
) {

1444 
q
->
u§£luid
 = 
num
;

1445 
q
->
u§£…yp
 = 
typ
;

1446  
NULL
;

1449 
pwd
 = 
	`gëpw«m
(
°r
);

1450 i‡(!
pwd
Ë 
	`N_txt
(
BAD_u£∫ame_txt
);

1451 
q
->
u§£luid
 = 
pwd
->
pw_uid
;

1452 
q
->
u§£…yp
 = 
typ
;

1454  
NULL
;

1455 
	}
}

1462 
ölöe
 
	$u£r_m©ched
 (c⁄° 
WIN_t
 *
q
, c⁄° 
¥oc_t
 *
p
) {

1463 
q
->
u§£…yp
) {

1467 i‡(
p
->
ruid
 =
q
->
u§£luid
Ë q->
u§£lÊg
;

1468 i‡(
p
->
suid
 =
q
->
u§£luid
Ë q->
u§£lÊg
;

1469 i‡(
p
->
fuid
 =
q
->
u§£luid
Ë q->
u§£lÊg
;

1472 i‡(
p
->
euid
 =
q
->
u§£luid
Ë q->
u§£lÊg
;

1477  !
q
->
u§£lÊg
;

1478 
	}
}

1484 
ölöe
 c⁄° *
	$ju°ify_∑d
 (c⁄° *
°r
, 
width
, 
ju°r
) {

1485 
l_fmt
[] = "%-*.*s%s", 
r_fmt
[] = "%*.*s%s";

1486 
buf
[
SCREENMAX
];

1488 
	`¢¥ötf
(
buf
, (buf), 
ju°r
 ? 
r_fmt
 : 
l_fmt
, 
width
, width, 
°r
, 
COLPADSTR
);

1489  
buf
;

1490 
	}
}

1495 
ölöe
 c⁄° *
	$make_chr
 (c⁄° 
ch
, 
width
, 
ju°r
) {

1496 
buf
[
SMLBUFSIZ
];

1498 
	`¢¥ötf
(
buf
, (buf), "%c", 
ch
);

1499  
	`ju°ify_∑d
(
buf
, 
width
, 
ju°r
);

1500 
	}
}

1506 
ölöe
 c⁄° *
	$make_num
 (
num
, 
width
, 
ju°r
, 
cﬁ
, 
noz
) {

1507 
buf
[
SMLBUFSIZ
];

1509 
buf
[0] = '\0';

1510 i‡(
noz
 && 
Rc
.
zîo_suµªss
 && 0 =
num
)

1511 
íd_ju°ifõs
;

1513 i‡(
width
 < 
	`¢¥ötf
(
buf
, (buf), "%ld", 
num
)) {

1514 
buf
[
width
-1] = 
COLPLUSCH
;

1515 
	`AUTOX_COL
(
cﬁ
);

1517 
íd_ju°ifõs
:

1518  
	`ju°ify_∑d
(
buf
, 
width
, 
ju°r
);

1519 
	}
}

1525 
ölöe
 c⁄° *
	$make_°r
 (c⁄° *
°r
, 
width
, 
ju°r
, 
cﬁ
) {

1526 
buf
[
SCREENMAX
];

1528 i‡(
width
 < 
	`¢¥ötf
(
buf
, (buf), "%s", 
°r
)) {

1529 
buf
[
width
-1] = 
COLPLUSCH
;

1530 
	`AUTOX_COL
(
cﬁ
);

1532  
	`ju°ify_∑d
(
buf
, 
width
, 
ju°r
);

1533 
	}
}

1540 c⁄° *
	$sˇÀ_mem
 (
èrgë
, 
num
, 
width
, 
ju°r
) {

1542 #ifde‡
BOOST_MEMORY


1543 c⁄° *
fmâab
[] = { "%.0f", "%#.1f%c", "%#.3f%c", "%#.3f%c", "%#.3f%c", 
NULL
 };

1545 c⁄° *
fmâab
[] = { "%.0f", "%.1f%c", "%.1f%c", "%.1f%c", "%.1f%c", 
NULL
 };

1547 
buf
[
SMLBUFSIZ
];

1548 
sˇÀd_num
;

1549 *
psfx
;

1550 
i
;

1552 
buf
[0] = '\0';

1553 i‡(
Rc
.
zîo_suµªss
 && 0 >
num
)

1554 
íd_ju°ifõs
;

1556 
sˇÀd_num
 = 
num
;

1557 
i
 = 
SK_Kb
, 
psfx
 = 
SˇÀd_sfxèb
; i < 
SK_Eb
;Ösfx++, i++) {

1558 i‡(
i
 >
èrgë


1559 && (
width
 >
	`¢¥ötf
(
buf
, (buf), 
fmâab
[
i
], 
sˇÀd_num
, *
psfx
)))

1560 
íd_ju°ifõs
;

1561 
sˇÀd_num
 /= 1024.0;

1565 
	`¢¥ötf
(
buf
, (buf), "?");

1566 
íd_ju°ifõs
:

1567  
	`ju°ify_∑d
(
buf
, 
width
, 
ju°r
);

1568 
	}
}

1573 c⁄° *
	$sˇÀ_num
 (
num
, 
width
, 
ju°r
) {

1574 
buf
[
SMLBUFSIZ
];

1575 
sˇÀd_num
;

1576 *
psfx
;

1578 
buf
[0] = '\0';

1579 i‡(
Rc
.
zîo_suµªss
 && 0 >
num
)

1580 
íd_ju°ifõs
;

1581 i‡(
width
 >
	`¢¥ötf
(
buf
, (buf), "%lu", 
num
))

1582 
íd_ju°ifõs
;

1584 
sˇÀd_num
 = 
num
;

1585 
psfx
 = 
SˇÀd_sfxèb
; 0 < *psfx;Ösfx++) {

1586 
sˇÀd_num
 /= 1024.0;

1587 i‡(
width
 >
	`¢¥ötf
(
buf
, (buf), "%.1f%c", 
sˇÀd_num
, *
psfx
))

1588 
íd_ju°ifõs
;

1589 i‡(
width
 >
	`¢¥ötf
(
buf
, (buf), "%.0f%c", 
sˇÀd_num
, *
psfx
))

1590 
íd_ju°ifõs
;

1594 
	`¢¥ötf
(
buf
, (buf), "?");

1595 
íd_ju°ifõs
:

1596  
	`ju°ify_∑d
(
buf
, 
width
, 
ju°r
);

1597 
	}
}

1602 c⁄° *
	$sˇÀ_p˙t
 (
num
, 
width
, 
ju°r
) {

1603 
buf
[
SMLBUFSIZ
];

1605 
buf
[0] = '\0';

1606 i‡(
Rc
.
zîo_suµªss
 && 0 >
num
)

1607 
íd_ju°ifõs
;

1608 #ifde‡
BOOST_PERCNT


1609 i‡(
width
 >
	`¢¥ötf
(
buf
, (buf), "%#.3f", 
num
))

1610 
íd_ju°ifõs
;

1611 i‡(
width
 >
	`¢¥ötf
(
buf
, (buf), "%#.2f", 
num
))

1612 
íd_ju°ifõs
;

1614 i‡(
width
 >
	`¢¥ötf
(
buf
, (buf), "%#.1f", 
num
))

1615 
íd_ju°ifõs
;

1616 i‡(
width
 >
	`¢¥ötf
(
buf
, (buf), "%*.0f", width, 
num
))

1617 
íd_ju°ifõs
;

1620 
	`¢¥ötf
(
buf
, (buf), "?");

1621 
íd_ju°ifõs
:

1622  
	`ju°ify_∑d
(
buf
, 
width
, 
ju°r
);

1623 
	}
}

1629 c⁄° *
	$sˇÀ_tics
 (
TIC_t
 
tics
, 
width
, 
ju°r
) {

1630 #ifde‡
CASEUP_SUFIX


1631 
	#HH
 "%uH"

1632 
	#DD
 "%uD"

	)

1633 
	#WW
 "%uW"

	)

1635 
	#HH
 "%uh"

1636 
	#DD
 "%ud"

	)

1637 
	#WW
 "%uw"

	)

1639 
buf
[
SMLBUFSIZ
];

1640 
¡
;

1641 
cc
;

1642 
¬
;

1644 
buf
[0] = '\0';

1645 
¡
 = (
tics
 * 100uŒË/ 
Hîtz
;

1646 i‡(
Rc
.
zîo_suµªss
 && 0 >
¡
)

1647 
íd_ju°ifõs
;

1648 
cc
 = 
¡
 % 100;

1649 
¡
 /= 100;

1650 
¬
 = 
¡
 % 60;

1651 
¡
 /= 60;

1652 i‡(
width
 >
	`¢¥ötf
(
buf
, (buf), "%lu:%02u.%02u", 
¡
, 
¬
, 
cc
))

1653 
íd_ju°ifõs
;

1654 i‡(
width
 >
	`¢¥ötf
(
buf
, (buf), "%lu:%02u", 
¡
, 
¬
))

1655 
íd_ju°ifõs
;

1656 
¬
 = 
¡
 % 60;

1657 
¡
 /= 60;

1658 i‡(
width
 >
	`¢¥ötf
(
buf
, (buf), "%lu,%02u", 
¡
, 
¬
))

1659 
íd_ju°ifõs
;

1660 
¬
 = 
¡
;

1661 i‡(
width
 >
	`¢¥ötf
(
buf
, (buf), 
HH
, 
¬
))

1662 
íd_ju°ifõs
;

1663 
¬
 /= 24;

1664 i‡(
width
 >
	`¢¥ötf
(
buf
, (buf), 
DD
, 
¬
))

1665 
íd_ju°ifõs
;

1666 
¬
 /= 7;

1667 i‡(
width
 >
	`¢¥ötf
(
buf
, (buf), 
WW
, 
¬
))

1668 
íd_ju°ifõs
;

1671 
	`¢¥ötf
(
buf
, (buf), "?");

1672 
íd_ju°ifõs
:

1673  
	`ju°ify_∑d
(
buf
, 
width
, 
ju°r
);

1674 #unde‡
HH


1675 #unde‡
DD


1676 #unde‡
WW


1677 
	}
}

1683 
	#L_°©
 
PROC_FILLSTAT


	)

1684 
	#L_°©m
 
PROC_FILLMEM


	)

1685 
	#L_°©us
 
PROC_FILLSTATUS


	)

1686 
	#L_CGROUP
 
PROC_EDITCGRPCVT
 | 
PROC_FILLCGROUP


	)

1687 
	#L_CMDLINE
 
PROC_EDITCMDLCVT
 | 
PROC_FILLARG


	)

1688 
	#L_ENVIRON
 
PROC_EDITENVRCVT
 | 
PROC_FILLENV


	)

1689 
	#L_EUSER
 
PROC_FILLUSR


	)

1690 
	#L_OUSER
 
PROC_FILLSTATUS
 | 
PROC_FILLUSR


	)

1691 
	#L_EGROUP
 
PROC_FILLSTATUS
 | 
PROC_FILLGRP


	)

1692 
	#L_SUPGRP
 
PROC_FILLSTATUS
 | 
PROC_FILLSUPGRP


	)

1693 
	#L_NS
 
PROC_FILLNS


	)

1694 
	#L_LXC
 
PROC_FILL_LXC


	)

1695 
	#L_OOM
 
PROC_FILLOOM


	)

1697 
	#L_NONE
 
PROC_SPARE_1


	)

1699 
	#L_EITHER
 
PROC_SPARE_2


	)

1701 
	#L_DEFAULT
 
PROC_FILLSTAT


	)

1705 
FLD_t
 
	gFõld°ab
[] = {

1707 
	#SF
(
f
Ë(
QFP_t
)
	`SCB_NAME
(f)

	)

1710 
	#A_right
 
Show_JRNUMS


	)

1711 
	#A_À·
 
Show_JRSTRS


	)

1724 { 0, -1, 
A_right
, 
SF
(
PID
), 
L_NONE
 },

1725 { 0, -1, 
A_right
, 
SF
(
PPD
), 
L_EITHER
 },

1726 { 5, -1, 
A_right
, 
SF
(
UED
), 
L_NONE
 },

1727 { 8, -1, 
A_À·
, 
SF
(
UEN
), 
L_EUSER
 },

1728 { 5, -1, 
A_right
, 
SF
(
URD
), 
L_°©us
 },

1729 { 8, -1, 
A_À·
, 
SF
(
URN
), 
L_OUSER
 },

1730 { 5, -1, 
A_right
, 
SF
(
USD
), 
L_°©us
 },

1731 { 8, -1, 
A_À·
, 
SF
(
USN
), 
L_OUSER
 },

1732 { 5, -1, 
A_right
, 
SF
(
GID
), 
L_NONE
 },

1733 { 8, -1, 
A_À·
, 
SF
(
GRP
), 
L_EGROUP
 },

1734 { 0, -1, 
A_right
, 
SF
(
PGD
), 
L_°©
 },

1735 { 8, -1, 
A_À·
, 
SF
(
TTY
), 
L_°©
 },

1736 { 0, -1, 
A_right
, 
SF
(
TPG
), 
L_°©
 },

1737 { 0, -1, 
A_right
, 
SF
(
SID
), 
L_°©
 },

1738 { 3, -1, 
A_right
, 
SF
(
PRI
), 
L_°©
 },

1739 { 3, -1, 
A_right
, 
SF
(
NCE
), 
L_°©
 },

1740 { 3, -1, 
A_right
, 
SF
(
THD
), 
L_EITHER
 },

1741 { 0, -1, 
A_right
, 
SF
(
CPN
), 
L_°©
 },

1742 { 0, -1, 
A_right
, 
SF
(
CPU
), 
L_°©
 },

1743 { 6, -1, 
A_right
, 
SF
(
TME
), 
L_°©
 },

1744 { 9, -1, 
A_right
, 
SF
(
TME
), 
L_°©
 },

1745 #ifde‡
BOOST_PERCNT


1746 { 5, -1, 
A_right
, 
SF
(
RES
), 
L_°©m
 },

1748 { 4, -1, 
A_right
, 
SF
(
RES
), 
L_°©m
 },

1750 { 7, 
SK_Kb
, 
A_right
, 
SF
(
VRT
), 
L_°©m
 },

1751 { 6, 
SK_Kb
, 
A_right
, 
SF
(
SWP
), 
L_°©us
 },

1752 { 6, 
SK_Kb
, 
A_right
, 
SF
(
RES
), 
L_°©m
 },

1753 { 6, 
SK_Kb
, 
A_right
, 
SF
(
COD
), 
L_°©m
 },

1754 { 7, 
SK_Kb
, 
A_right
, 
SF
(
DAT
), 
L_°©m
 },

1755 { 6, 
SK_Kb
, 
A_right
, 
SF
(
SHR
), 
L_°©m
 },

1756 { 4, -1, 
A_right
, 
SF
(
FL1
), 
L_°©
 },

1757 { 4, -1, 
A_right
, 
SF
(
FL2
), 
L_°©
 },

1758 { 4, -1, 
A_right
, 
SF
(
DRT
), 
L_°©m
 },

1759 { 1, -1, 
A_right
, 
SF
(
STA
), 
L_EITHER
 },

1760 { -1, -1, 
A_À·
, 
SF
(
CMD
), 
L_EITHER
 },

1761 { 10, -1, 
A_À·
, 
SF
(
WCH
), 
L_°©
 },

1762 { 8, -1, 
A_À·
, 
SF
(
FLG
), 
L_°©
 },

1763 { -1, -1, 
A_À·
, 
SF
(
CGR
), 
L_CGROUP
 },

1764 { -1, -1, 
A_À·
, 
SF
(
SGD
), 
L_°©us
 },

1765 { -1, -1, 
A_À·
, 
SF
(
SGN
), 
L_SUPGRP
 },

1766 { 0, -1, 
A_right
, 
SF
(
TGD
), 
L_NONE
 },

1767 { 5, -1, 
A_right
, 
SF
(
OOA
), 
L_OOM
 },

1768 { 4, -1, 
A_right
, 
SF
(
OOM
), 
L_OOM
 },

1769 { -1, -1, 
A_À·
, 
SF
(
ENV
), 
L_ENVIRON
 },

1770 { 3, -1, 
A_right
, 
SF
(
FV1
), 
L_°©
 },

1771 { 3, -1, 
A_right
, 
SF
(
FV2
), 
L_°©
 },

1772 { 6, 
SK_Kb
, 
A_right
, 
SF
(
USE
), 
L_°©us
 },

1773 { 10, -1, 
A_right
, 
SF
(
NS1
), 
L_NS
 },

1774 { 10, -1, 
A_right
, 
SF
(
NS2
), 
L_NS
 },

1775 { 10, -1, 
A_right
, 
SF
(
NS3
), 
L_NS
 },

1776 { 10, -1, 
A_right
, 
SF
(
NS4
), 
L_NS
 },

1777 { 10, -1, 
A_right
, 
SF
(
NS5
), 
L_NS
 },

1778 { 10, -1, 
A_right
, 
SF
(
NS6
), 
L_NS
 },

1779 { 8, -1, 
A_À·
, 
SF
(
LXC
), 
L_LXC
 },

1780 { 6, 
SK_Kb
, 
A_right
, 
SF
(
RZA
), 
L_°©us
 },

1781 { 6, 
SK_Kb
, 
A_right
, 
SF
(
RZF
), 
L_°©us
 },

1782 { 6, 
SK_Kb
, 
A_right
, 
SF
(
RZL
), 
L_°©us
 },

1783 { 6, 
SK_Kb
, 
A_right
, 
SF
(
RZS
), 
L_°©us
 },

1784 { -1, -1, 
A_À·
, 
SF
(
CGN
), 
L_CGROUP
 },

1785 { 0, -1, 
A_right
, 
SF
(
NMA
), 
L_°©
 },

1786 #unde‡
SF


1787 #unde‡
A_À·


1788 #unde‡
A_right


1795 
	$adj_geomëry
 () {

1796 
size_t
 
p£udo_max
 = 0;

1797 
w_£t
 = 0, 
w_cﬁs
 = 0, 
w_rows
 = 0;

1798 
wösize
 
wz
;

1800 
S¸ìn_cﬁs
 = 
cﬁumns
;

1801 
S¸ìn_rows
 = 
löes
;

1803 i‡(-1 !
	`io˘l
(
STDOUT_FILENO
, 
TIOCGWINSZ
, &
wz
)

1804 && 0 < 
wz
.
ws_cﬁ
 && 0 < wz.
ws_row
) {

1805 
S¸ìn_cﬁs
 = 
wz
.
ws_cﬁ
;

1806 
S¸ìn_rows
 = 
wz
.
ws_row
;

1809 #i‚de‡
RMAN_IGNORED


1811 i‡(
C≠_avoid_eﬁ
Ë
S¸ìn_cﬁs
--;

1815 i‡(
SCREENMAX
 < 
S¸ìn_cﬁs
) Screen_cols = SCREENMAX;

1817 i‡(!
w_£t
) {

1818 i‡(
Width_mode
 > 0)

1819 
w_cﬁs
 = 
Width_mode
;

1821 i‡(
Width_mode
 < 0) {

1822 *
ív_cﬁumns
 = 
	`gëív
("COLUMNS"),

1823 *
ív_löes
 = 
	`gëív
("LINES"),

1824 *
ï
;

1825 i‡(
ív_cﬁumns
 && *env_columns) {

1826 
t
, 
tc
 = 0;

1827 
t
 = 
	`°πﬁ
(
ív_cﬁumns
, &
ï
, 0);

1828 i‡(!*
ï
 && (
t
 > 0Ë&& (à<0x7fffffffL)Ë
tc
 =Å;

1829 i‡(0 < 
tc
Ë
w_cﬁs
 = ()tc;

1831 i‡(
ív_löes
 && *env_lines) {

1832 
t
, 
å
 = 0;

1833 
t
 = 
	`°πﬁ
(
ív_löes
, &
ï
, 0);

1834 i‡(!*
ï
 && (
t
 > 0Ë&& (à<0x7fffffffL)Ë
å
 =Å;

1835 i‡(0 < 
å
Ë
w_rows
 = ()tr;

1837 i‡(!
w_cﬁs
Ëw_cﬁ†
SCREENMAX
;

1838 i‡(
w_cﬁs
 && w_cﬁ†< 
W_MIN_COL
) w_cols = W_MIN_COL;

1839 i‡(
w_rows
 && w_row†< 
W_MIN_ROW
) w_rows = W_MIN_ROW;

1841 i‡(
w_cﬁs
 > 
SCREENMAX
) w_cols = SCREENMAX;

1842 
w_£t
 = 1;

1850 i‡(
B©ch
) {

1851 i‡(
w_cﬁs
Ë
S¸ìn_cﬁs
 = w_cols;

1852 
S¸ìn_rows
 = 
w_rows
 ? w_row†: 
INT_MAX
;

1853 
P£udo_size
 = ((*
P£udo_s¸ìn
Ë* 
ROWMAXSIZ
);

1855 i‡(
w_cﬁs
 && w_cﬁ†< 
S¸ìn_cﬁs
) Screen_cols = w_cols;

1856 i‡(
w_rows
 && w_row†< 
S¸ìn_rows
) Screen_rows = w_rows;

1857 
P£udo_size
 = ((*
P£udo_s¸ìn
Ë* 
ROWMAXSIZ
Ë* 
S¸ìn_rows
;

1860 i‡(
p£udo_max
 < 
P£udo_size
) {

1861 
p£udo_max
 = 
P£udo_size
;

1862 
P£udo_s¸ìn
 = 
	`Æloc_r
(P£udo_s¸ìn, 
p£udo_max
);

1865 
	`PSU_CLREOS
(0);

1868 
Gøph_Àn
 = 
S¸ìn_cﬁs
 - 
GRAPH_¥efix
 - 
GRAPH_a˘uÆ
 - 
GRAPH_suffix
;

1869 i‡(
Gøph_Àn
 >0ËGøph_À¿
GRAPH_a˘uÆ
;

1870 i‡(
S¸ìn_cﬁs
 > 80Ë
Gøph_Àn
 = S¸ìn_cﬁ†- 
GRAPH_¥efix
 - 
GRAPH_suffix
;

1871 
Gøph_Àn
 = 80 - 
GRAPH_¥efix
 - 
GRAPH_suffix
;

1872 
Gøph_adj
 = ()
Gøph_Àn
 / 100.0;

1874 
	`fÊush
(
°dout
);

1875 
Fømes_sig«l
 = 
BREAK_off
;

1876 
	}
}

1882 
	$buûd_hódîs
 () {

1883 
FLG_t
 
f
;

1884 *
s
;

1885 
WIN_t
 *
w
 = 
Curwö
;

1886 #ifde‡
EQUCOLHDRYES


1887 
x
, 
hdrmax
 = 0;

1889 
i
;

1891 
Fømes_libÊags
 = 0;

1894 i‡(
	`VIZISw
(
w
)) {

1895 
	`mem£t
((
s
 = 
w
->
cﬁumnhdr
), 0, (w->columnhdr));

1896 i‡(
Rc
.
mode_Æts¸
Ë
s
 = 
	`sˇt
(s, 
	`fmtmk
("%d", 
w
->
wönum
));

1897 
i
 = 0; i < 
w
->
maxpÊgs
; i++) {

1898 
f
 = 
w
->
¥ocÊgs
[
i
];

1899 #ifde‡
USE_X_COLHDR


1900 i‡(
	`CHKw
(
w
, 
Show_HICOLS
Ë&& 
f
 =w->
rc
.
s‹tödx
) {

1901 
s
 = 
	`sˇt
(s, 
	`fmtmk
("%s%s", 
C≠s_off
, 
w
->
ˇp˛r_msg
));

1902 
w
->
hdrˇ∂í
 +
	`°æí
(
C≠s_off
Ë+ såÀn(w->
ˇp˛r_msg
);

1905 i‡(
EU_MAXPFLGS
 <
f
) ;

1907 i‡(
EU_CMD
 =
f
 && 
	`CHKw
(
w
, 
Show_CMDLIN
)Ë
Fømes_libÊags
 |
L_CMDLINE
;

1908 
Fømes_libÊags
 |
Fõld°ab
[
f
].
lÊg
;

1909 
s
 = 
	`sˇt
(s, 
	`ju°ify_∑d
(
	`N_cﬁ
(
f
)

1910 , 
	`VARcﬁ
(
f
Ë? 
w
->
v¨cﬁsz
 : 
Fõld°ab
[f].
width


1911 , 
	`CHKw
(
w
, 
Fõld°ab
[
f
].
Æign
)));

1912 #ifde‡
USE_X_COLHDR


1913 i‡(
	`CHKw
(
w
, 
Show_HICOLS
Ë&& 
f
 =w->
rc
.
s‹tödx
) {

1914 
s
 = 
	`sˇt
(s, 
	`fmtmk
("%s%s", 
C≠s_off
, 
w
->
ˇp˛r_hdr
));

1915 
w
->
hdrˇ∂í
 +
	`°æí
(
C≠s_off
Ë+ såÀn(w->
ˇp˛r_hdr
);

1919 #ifde‡
EQUCOLHDRYES


1921 i‡(
hdrmax
 + 
w
->
hdrˇ∂í
 < (
x
 = 
	`°æí
(w->
cﬁumnhdr
))) hdrmax = x - w->hdrcaplen;

1924 i‡(
	`CHKw
(
w
, 
Show_FOREST
)Ë
Fømes_libÊags
 |
L_°©
;

1926 i‡(!
	`CHKw
(
w
, 
Show_IDLEPS
)Ë
Fømes_libÊags
 |
L_°©
;

1928 
f
 = 
w
->
rc
.
s‹tödx
;

1929 
Fømes_libÊags
 |
Fõld°ab
[
f
].
lÊg
;

1930 i‡(
EU_CMD
 =
f
 && 
	`CHKw
(
w
, 
Show_CMDLIN
)Ë
Fømes_libÊags
 |
L_CMDLINE
;

1932 i‡(
w
->
u§£…yp
 ='U'Ë
Fømes_libÊags
 |
L_°©us
;

1935 i‡(
Rc
.
mode_Æts¸
Ë
w
 = w->
√xt
;

1936 } 
w
 !
Curwö
);

1938 #ifde‡
EQUCOLHDRYES


1941 i‡(
Rc
.
mode_Æts¸
 && 
SCREENMAX
 > 
S¸ìn_cﬁs
)

1942 
i
 = 0; i < 
GROUPSMAX
; i++) {

1943 
w
 = &
Wö°k
[
i
];

1944 i‡(
	`CHKw
(
w
, 
Show_TASKON
))

1945 i‡(
hdrmax
 + 
w
->
hdrˇ∂í
 > (
x
 = 
	`°æí
(w->
cﬁumnhdr
)))

1946 
	`mem£t
(&
w
->
cﬁumnhdr
[
x
], ' ', 
hdrmax
 + w->
hdrˇ∂í
 - x);

1951 i‡(
Fømes_libÊags
 & 
L_EITHER
) {

1952 i‡(!(
Fømes_libÊags
 & (
L_°©
 | 
L_°©us
)))

1953 
Fømes_libÊags
 |
L_°©
;

1955 i‡(!
Fømes_libÊags
ËFømes_libÊag†
L_DEFAULT
;

1956 i‡(
M⁄pidsidx
Ë
Fømes_libÊags
 |
PROC_PID
;

1957 
	}
}

1964 
	$ˇlibøã_fõlds
 () {

1965 
FLG_t
 
f
;

1966 *
s
;

1967 c⁄° *
h
;

1968 
WIN_t
 *
w
 = 
Curwö
;

1969 
i
, 
v¨cﬁ˙t
, 
Àn
;

1971 
	`adj_geomëry
();

1974 i‡(
	`VIZISw
(
w
)) {

1975 
w
->
hdrˇ∂í
 = 0;

1977 
i
 = 0, 
w
->
tŸpÊgs
 = 0; i < 
EU_MAXPFLGS
; i++) {

1978 i‡(
	`FLDviz
(
w
, 
i
)) {

1979 
f
 = 
	`FLDgë
(
w
, 
i
);

1980 #ifde‡
USE_X_COLHDR


1981 
w
->
pÊgßŒ
[w->
tŸpÊgs
++] = 
f
;

1983 i‡(
	`CHKw
(
w
, 
Show_HICOLS
Ë&& 
f
 =w->
rc
.
s‹tödx
) {

1984 
w
->
pÊgßŒ
[w->
tŸpÊgs
++] = 
EU_XON
;

1985 
w
->
pÊgßŒ
[w->
tŸpÊgs
++] = 
f
;

1986 
w
->
pÊgßŒ
[w->
tŸpÊgs
++] = 
EU_XOF
;

1988 
w
->
pÊgßŒ
[w->
tŸpÊgs
++] = 
f
;

1992 i‡(!
w
->
tŸpÊgs
Ëw->
pÊgßŒ
[w->tŸpÊgs++] = 
EU_PID
;

1996 
w
->
v¨cﬁsz
 = 
v¨cﬁ˙t
 = 0;

1997 *(
s
 = 
w
->
cﬁumnhdr
) = '\0';

1998 i‡(
Rc
.
mode_Æts¸
Ë
s
 = 
	`sˇt
(s, " ");

1999 
i
 = 0; i + 
w
->
begpÊg
 < w->
tŸpÊgs
; i++) {

2000 
f
 = 
w
->
pÊgßŒ
[
i
 + w->
begpÊg
];

2001 
w
->
¥ocÊgs
[
i
] = 
f
;

2002 #i‚de‡
USE_X_COLHDR


2003 i‡(
EU_MAXPFLGS
 <
f
) ;

2005 
h
 = 
	`N_cﬁ
(
f
);

2006 
Àn
 = (
	`VARcﬁ
(
f
Ë? ()
	`°æí
(
h
Ë: 
Fõld°ab
[f].
width
Ë+ 
COLPADSIZ
;

2008 i‡(
S¸ìn_cﬁs
 < (()(
s
 - 
w
->
cﬁumnhdr
Ë+ 
Àn
)) ;

2009 i‡(
	`VARcﬁ
(
f
)Ë{ ++
v¨cﬁ˙t
; 
w
->
v¨cﬁsz
 +
	`°æí
(
h
); }

2010 
s
 = 
	`sˇt
(s, 
	`fmtmk
("%*.*s", 
Àn
,Üí, 
h
));

2012 #i‚de‡
USE_X_COLHDR


2013 i‡(
EU_XON
 =
w
->
¥ocÊgs
[
i
 - 1]) --i;

2019 
w
->
maxpÊgs
 = 
i
;

2020 
w
->
v¨cﬁsz
 +
S¸ìn_cﬁs
 - 
	`°æí
(w->
cﬁumnhdr
);

2021 i‡(
v¨cﬁ˙t
Ë
w
->
v¨cﬁsz
 /= varcolcnt;

2025 *(
s
 = 
w
->
cﬁumnhdr
) = '\0';

2026 i‡(
Rc
.
mode_Æts¸
Ë
s
 = 
	`sˇt
(s, " ");

2027 
i
 = 
w
->
tŸpÊgs
 - 1; -1 < i; i--) {

2028 
f
 = 
w
->
pÊgßŒ
[
i
];

2029 #i‚de‡
USE_X_COLHDR


2030 i‡(
EU_MAXPFLGS
 <
f
Ë{ 
w
->
ídpÊg
 = 
i
; ; }

2032 
h
 = 
	`N_cﬁ
(
f
);

2033 
Àn
 = (
	`VARcﬁ
(
f
Ë? ()
	`°æí
(
h
Ë: 
Fõld°ab
[f].
width
Ë+ 
COLPADSIZ
;

2034 i‡(
S¸ìn_cﬁs
 < (()(
s
 - 
w
->
cﬁumnhdr
Ë+ 
Àn
)) ;

2035 
s
 = 
	`sˇt
(s, 
	`fmtmk
("%*.*s", 
Àn
,Üí, 
h
));

2036 
w
->
ídpÊg
 = 
i
;

2038 #i‚de‡
USE_X_COLHDR


2039 i‡(
EU_XOF
 =
w
->
pÊgßŒ
[w->
ídpÊg
]) ++w->endpflg;

2043 i‡(
Rc
.
mode_Æts¸
Ë
w
 = w->
√xt
;

2044 } 
w
 !
Curwö
);

2046 
	`buûd_hódîs
();

2047 i‡(
	`CHKw
(
Curwö
, 
Võw_SCROLL
))

2048 
	`updt_s¸ﬁl_msg
();

2049 
	}
}

2081 
	$di•œy_fõlds
 (
focus
, 
exãnd
) {

2082 
	#mkERR
 { 
	`puç
("\n");Öuç(
	`N_txt
(
XTRA_wösize_txt
)); ; }

	)

2083 
	#mxCOL
 ( (
S¸ìn_cﬁs
 / 11Ë> 0 ? (S¸ìn_cﬁ†/ 11Ë: 1 )

	)

2084 
	#yRSVD
 4

	)

2085 
	#xSUFX
 22

	)

2086 
	#xPRFX
 (10 + 
xadd
)

	)

2087 
	#xTOTL
 (
xPRFX
 + 
xSUFX
)

	)

2088 
WIN_t
 *
w
 = 
Curwö
;

2089 
i
;

2090 
smax
;

2091 
xadd
 = 0;

2092 
cmax
 = 
S¸ìn_cﬁs
;

2093 
rmax
 = 
S¸ìn_rows
 - 
yRSVD
;

2094 
cﬁ_ßv
, 
row_ßv
;

2096 
i
 = (
EU_MAXPFLGS
 % 
mxCOL
) ? 1 : 0;

2097 i‡(
rmax
 < 
i
 + (
EU_MAXPFLGS
 / 
mxCOL
)Ë
mkERR
;

2098 
i
 = 
EU_MAXPFLGS
 / 
rmax
;

2099 i‡(
EU_MAXPFLGS
 % 
rmax
Ë++
i
;

2100 i‡(
i
 > 1Ë{ 
cmax
 /i; 
xadd
 = 1; }

2101 i‡(
cmax
 > 
xTOTL
) cmax = xTOTL;

2102 
smax
 = 
cmax
 - 
xPRFX
;

2103 i‡(
smax
 < 0Ë
mkERR
;

2107 i‡(
cﬁ_ßv
 !
S¸ìn_cﬁs
 || 
row_ßv
 !
S¸ìn_rows
) {

2108 
cﬁ_ßv
 = 
S¸ìn_cﬁs
;

2109 
row_ßv
 = 
S¸ìn_rows
;

2110 
	`puç
(
C≠_˛r_eos
);

2112 
	`fÊush
(
°dout
);

2114 
i
 = 0; i < 
EU_MAXPFLGS
; ++i) {

2115 
b
 = 
	`FLDviz
(
w
, 
i
), 
x
 = (ò/ 
rmax
Ë* 
cmax
, 
y
 = (ò%ÑmaxË+ 
yRSVD
;

2116 c⁄° *
e
 = (
i
 =
focus
 && 
exãnd
Ë? 
w
->
ˇp˛r_hdr
 : "";

2117 
FLG_t
 
f
 = 
	`FLDgë
(
w
, 
i
);

2118 
sbuf
[
xSUFX
+1];

2121 
	`¢¥ötf
(
sbuf
, (sbuf), "%s", 
	`N_Êd
(
f
));

2123 
	`PUTT
("%s%c%s%s %s%-7.7s%s%s%s %-*.*s%s"

2124 , 
	`tg2
(
x
, 
y
)

2125 , 
b
 ? '*' : ' '

2126 , 
b
 ? 
w
->
ˇp_bﬁd
 : 
C≠_n‹m


2127 , 
e


2128 , 
i
 =
focus
 ? 
w
->
ˇp˛r_hdr
 : ""

2129 , 
	`N_cﬁ
(
f
)

2130 , 
C≠_n‹m


2131 , 
b
 ? 
w
->
ˇp_bﬁd
 : ""

2132 , 
e


2133 , 
smax
, smax

2134 , 
sbuf


2135 , 
C≠_n‹m
);

2138 
	`puç
(
C≠s_off
);

2139 #unde‡
mkERR


2140 #unde‡
mxCOL


2141 #unde‡
yRSVD


2142 #unde‡
xSUFX


2143 #unde‡
xPRFX


2144 #unde‡
xTOTL


2145 
	}
}

2150 
	$fõlds_utûôy
 () {

2151 #i‚de‡
SCROLLVAR_NO


2152 
	#unSCRL
 { 
w
->
begpÊg
 = w->
v¨cﬁbeg
 = 0; 
	`OFFw
(w, 
Show_HICOLS
); }

	)

2154 
	#unSCRL
 { 
w
->
begpÊg
 = 0; 
	`OFFw
(w, 
Show_HICOLS
); }

	)

2156 
	#sw≠EM
 { 
c
; 
unSCRL
; c = 
w
->
rc
.
fõldscur
[
i
]; \

2157 
w
->
rc
.
fõldscur
[
i
] = *
p
; *∞
c
;Ö = &w->rc.fõldscur[i]; }

	)

2158 
	#•ewFI
 { *
t
; 
f
 = 
w
->
rc
.
s‹tödx
;Å = 
	`°rchr
(w->rc.
fõldscur
, f + 
FLD_OFFSET
); \

2159 i‡(!
t
Ëà
	`°rchr
(
w
->
rc
.
fõldscur
, (
f
 + 
FLD_OFFSET
) | 0x80); \

2160 
i
 = (
t
Ë? ()— - 
w
->
rc
.
fõldscur
Ë: 0; }

	)

2161 
WIN_t
 *
w
 = 
Curwö
;

2162 c⁄° *
h
 = 
NULL
;

2163 *
p
 = 
NULL
;

2164 
i
, 
key
;

2165 
FLG_t
 
f
;

2167 
•ewFI


2168 
signify_th©
:

2169 
	`puç
(
C≠_˛r_s¸
);

2170 
	`adj_geomëry
();

2173 i‡(!
h
Ëh = 
	`N_cﬁ
(
f
);

2174 
	`puç
(
C≠_home
);

2175 
	`show_•ecül
(1, 
	`fmtmk
(
	`N_unq
(
FIELD_hódî_fmt
)

2176 , 
w
->
gΩ«me
, 
	`CHKw
(w, 
Show_FOREST
Ë? 
	`N_txt
(
FOREST_võws_txt
Ë: 
h
));

2177 
	`di•œy_fõlds
(
i
, (
p
 !
NULL
));

2178 
	`fÊush
(
°dout
);

2180 i‡(
Fømes_sig«l
Ë
signify_th©
;

2181 
key
 = 
	`iokey
(1);

2182 i‡(
key
 < 1Ë
signify_th©
;

2184 
key
) {

2185 
kbd_UP
:

2186 i‡(
i
 > 0Ë{ --i; i‡(
p
Ë
sw≠EM
 }

2188 
kbd_DOWN
:

2189 i‡(
i
 + 1 < 
EU_MAXPFLGS
Ë{ ++i; i‡(
p
Ë
sw≠EM
 }

2191 
kbd_LEFT
:

2192 
kbd_ENTER
:

2193 
p
 = 
NULL
;

2195 
kbd_RIGHT
:

2196 
p
 = &
w
->
rc
.
fõldscur
[
i
];

2198 
kbd_HOME
:

2199 
kbd_PGUP
:

2200 i‡(!
p
Ë
i
 = 0;

2202 
kbd_END
:

2203 
kbd_PGDN
:

2204 i‡(!
p
Ë
i
 = 
EU_MAXPFLGS
 - 1;

2206 
kbd_SPACE
:

2208 i‡(!
p
Ë{ 
	`FLDtog
(
w
, 
i
); 
unSCRL
 }

2211 #ifde‡
TREE_NORESET


2212 i‡(!
p
 && !
	`CHKw
(
w
, 
Show_FOREST
)Ë{ w->
rc
.
s‹tödx
 = 
f
 = 
	`FLDgë
(w, 
i
); 
h
 = 
NULL
; 
unSCRL
 }

2214 i‡(!
p
Ë{ 
w
->
rc
.
s‹tödx
 = 
f
 = 
	`FLDgë
(w, 
i
); 
h
 = 
NULL
; 
unSCRL
; 
	`OFFw
(w, 
Show_FOREST
); }

2219 
Curwö
 = 
w
 = ('a' =
key
Ë? w->
√xt
 : w->
¥ev
;

2220 
•ewFI


2221 
h
 = 
p
 = 
NULL
;

2226 } 
key
 !'q' && key !
kbd_ESC
);

2227 #unde‡
unSCRL


2228 #unde‡
sw≠EM


2229 #unde‡
•ewFI


2230 
	}
}

2237 
ölöe
 
	$widths_ªsize
 () {

2238 
i
;

2241 
Autox_found
 = 0;

2242 
i
 = 0; i < 
EU_MAXPFLGS
; i++) {

2243 i‡(
Autox_¨øy
[
i
]) {

2244 
Fõld°ab
[
i
].
width
++;

2245 
Autox_¨øy
[
i
] = 0;

2246 
Autox_found
 = 1;

2249 i‡(
Autox_found
Ë
	`ˇlibøã_fõlds
();

2250 
	}
}

2256 
	$z≠_fõld°ab
 () {

2257 
⁄˚
;

2258 
digôs
;

2259 
buf
[8];

2261 i‡(!
⁄˚
) {

2262 
Fõld°ab
[
EU_PID
].
width
 = Fõld°ab[
EU_PPD
].width

2263 
Fõld°ab
[
EU_PGD
].
width
 = Fõld°ab[
EU_SID
].width

2264 
Fõld°ab
[
EU_TGD
].
width
 = Fõld°ab[
EU_TPG
].width = 5;

2265 i‡(5 < (
digôs
 = 
	`gë_pid_digôs
())) {

2266 i‡(10 < 
digôs
Ë
	`îr‹_exô
(
	`N_txt
(
FAIL_widïid_txt
));

2267 
Fõld°ab
[
EU_PID
].
width
 = Fõld°ab[
EU_PPD
].width

2268 
Fõld°ab
[
EU_PGD
].
width
 = Fõld°ab[
EU_SID
].width

2269 
Fõld°ab
[
EU_TGD
].
width
 = Fõld°ab[
EU_TPG
].width = 
digôs
;

2271 
⁄˚
 = 1;

2276 
Fõld°ab
[
EU_CPN
].
width
 = 1;

2277 i‡(1 < (
digôs
 = ()
	`¢¥ötf
(
buf
, (buf), "%u", ()
smp_num_˝us
))) {

2278 i‡(5 < 
digôs
Ë
	`îr‹_exô
(
	`N_txt
(
FAIL_wide˝u_txt
));

2279 
Fõld°ab
[
EU_CPN
].
width
 = 
digôs
;

2281 
Fõld°ab
[
EU_NMA
].
width
 = 2;

2282 i‡(2 < (
digôs
 = ()
	`¢¥ötf
(
buf
, (buf), "%u", ()
Numa_node_tŸ
))) {

2283 
Fõld°ab
[
EU_NMA
].
width
 = 
digôs
;

2286 #ifde‡
BOOST_PERCNT


2287 
Cpu_pmax
 = 99.9;

2288 
Fõld°ab
[
EU_CPU
].
width
 = 5;

2289 i‡(
Rc
.
mode_úixps
 && 
smp_num_˝us
 > 1 && !
Thªad_mode
) {

2290 
Cpu_pmax
 = 100.0 * 
smp_num_˝us
;

2291 i‡(
smp_num_˝us
 > 10) {

2292 i‡(
Cpu_pmax
 > 99999.0) Cpu_pmax = 99999.0;

2294 i‡(
Cpu_pmax
 > 999.9) Cpu_pmax = 999.9;

2298 
Cpu_pmax
 = 99.9;

2299 
Fõld°ab
[
EU_CPU
].
width
 = 4;

2300 i‡(
Rc
.
mode_úixps
 && 
smp_num_˝us
 > 1 && !
Thªad_mode
) {

2301 
Cpu_pmax
 = 100.0 * 
smp_num_˝us
;

2302 i‡(
smp_num_˝us
 > 10) {

2303 i‡(
Cpu_pmax
 > 99999.0) Cpu_pmax = 99999.0;

2305 i‡(
Cpu_pmax
 > 999.9) Cpu_pmax = 999.9;

2307 
Fõld°ab
[
EU_CPU
].
width
 = 5;

2312 i‡(!
AUTOX_MODE
) {

2313 
i
;

2314 
Fõld°ab
[
EU_UED
].
width
 = Fõld°ab[
EU_URD
].width

2315 
Fõld°ab
[
EU_USD
].
width
 = Fõld°ab[
EU_GID
].width

2316 
Rc
.
fixed_wide°
 ? 5 + Rc.fixed_widest : 5;

2317 
Fõld°ab
[
EU_UEN
].
width
 = Fõld°ab[
EU_URN
].width

2318 
Fõld°ab
[
EU_USN
].
width
 = Fõld°ab[
EU_GRP
].width

2319 
Rc
.
fixed_wide°
 ? 8 + Rc.fixed_widest : 8;

2320 
Fõld°ab
[
EU_TTY
].
width
 = Fõld°ab[
EU_LXC
].width

2321 
Rc
.
fixed_wide°
 ? 8 + Rc.fixed_widest : 8;

2322 
Fõld°ab
[
EU_WCH
].
width


2323 
Rc
.
fixed_wide°
 ? 10 + Rc.fixed_widest : 10;

2324 
i
 = 
EU_NS1
; i < EU_NS1 + 
NUM_NS
; i++)

2325 
Fõld°ab
[
i
].
width


2326 
Rc
.
fixed_wide°
 ? 10 + Rc.fixed_widest : 10;

2330 
Fõld°ab
[
EU_VRT
].
sˇÀ
 = Fõld°ab[
EU_SWP
].scale

2331 
Fõld°ab
[
EU_RES
].
sˇÀ
 = Fõld°ab[
EU_COD
].scale

2332 
Fõld°ab
[
EU_DAT
].
sˇÀ
 = Fõld°ab[
EU_SHR
].scale

2333 
Fõld°ab
[
EU_USE
].
sˇÀ
 = Fõld°ab[
EU_RZA
].scale

2334 
Fõld°ab
[
EU_RZF
].
sˇÀ
 = Fõld°ab[
EU_RZL
].scale

2335 
Fõld°ab
[
EU_RZS
].
sˇÀ
 = 
Rc
.
èsk_msˇÀ
;

2338 
	`ˇlibøã_fõlds
();

2339 
	}
}

2350 
	$˝us_ª‰esh
 () {

2351 
	#sumSLOT
 ( 
smp_num_˝us
 )

	)

2352 
	#tŸSLOT
 ( 1 + 
smp_num_˝us
 + 
Numa_node_tŸ
)

	)

2353 
FILE
 *
Â
 = 
NULL
;

2354 
siz
, 
ßv_¶Ÿ
 = -1;

2355 *
buf
;

2356 
CPU_t
 *
sum_±r
;

2357 
i
, 
num
, 
tŸ_ªad
;

2358 
node
;

2359 *
bp
;

2362 i‡(
ßv_¶Ÿ
 !
sumSLOT
) {

2363 
ßv_¶Ÿ
 = 
sumSLOT
;

2364 
	`z≠_fõld°ab
();

2365 i‡(
Â
Ë{ 
	`f˛o£
(Â); f∞
NULL
; }

2366 i‡(
Cpu_tics
Ë
	`‰ì
(Cpu_tics);

2371 i‡(!
Â
) {

2372 i‡(!(
Â
 = 
	`f›í
("/proc/stat", "r")))

2373 
	`îr‹_exô
(
	`fmtmk
(
	`N_fmt
(
FAIL_°©›n_fmt
), 
	`°ªº‹
(
î∫o
)));

2376 
Cpu_tics
 = 
	`Æloc_c
(
tŸSLOT
 * (
CPU_t
));

2378 
	`ªwöd
(
Â
);

2379 
	`fÊush
(
Â
);

2381 
	#buffGRW
 1024

	)

2386 
tŸ_ªad
 = 0;

2387 i‡(
buf
) buf[0] = '\0';

2388 
buf
 = 
	`Æloc_c
((
siz
 = 
buffGRW
));

2389 0 < (
num
 = 
	`‰ód
(
buf
 + 
tŸ_ªad
, 1, (
siz
 -ÅŸ_ªad), 
Â
))) {

2390 
tŸ_ªad
 +
num
;

2391 i‡(
tŸ_ªad
 < 
siz
) ;

2392 
buf
 = 
	`Æloc_r
(buf, (
siz
 +
buffGRW
));

2394 
buf
[
tŸ_ªad
] = '\0';

2395 
bp
 = 
buf
;

2396 #unde‡
buffGRW


2399 
sum_±r
 = &
Cpu_tics
[
sumSLOT
];

2400 
	`mem˝y
(&
sum_±r
->
ßv
, &sum_±r->
cur
, (
CT_t
));

2402 i‡(4 > 
	`ssˇnf
(
bp
, "cpu %llu %llu %llu %llu %llu %llu %llu %llu"

2403 , &
sum_±r
->
cur
.
u
, &sum_±r->cur.
n
, &sum_±r->cur.
s


2404 , &
sum_±r
->
cur
.
i
, &sum_±r->cur.
w
, &sum_±r->cur.
x


2405 , &
sum_±r
->
cur
.
y
, &sum_±r->cur.
z
))

2406 
	`îr‹_exô
(
	`N_txt
(
FAIL_°©gë_txt
));

2407 #i‚de‡
CPU_ZEROTICS


2408 
sum_±r
->
cur
.
tŸ
 = sum_±r->cur.
u
 + sum_±r->cur.
s


2409 + 
sum_±r
->
cur
.
n
 + sum_±r->cur.
i
 + sum_±r->cur.
w


2410 + 
sum_±r
->
cur
.
x
 + sum_±r->cur.
y
 + sum_±r->cur.
z
;

2414 
sum_±r
->
edge
 =

2415 ((
sum_±r
->
cur
.
tŸ
 - sum_±r->
ßv
.tŸË/ 
smp_num_˝us
Ë/ (100 / 
TICS_EDGE
);

2419 i‡(
	`CHKw
(
Curwö
, 
Võw_CPUNOD
Ë&& 
Numa_node_tŸ
)

2420 
	`mem£t
(
sum_±r
 + 1, 0, 
Numa_node_tŸ
 * (
CPU_t
));

2423 
i
 = 0; i < 
sumSLOT
; i++) {

2424 
CPU_t
 *
˝u_±r
 = &
Cpu_tics
[
i
];

2425 #ifde‡
PRETEND8CPUS


2426 
bp
 = 
buf
;

2428 
bp
 = 1 + 
	`°rchr
(bp, '\n');

2430 
	`mem˝y
(&
˝u_±r
->
ßv
, &˝u_±r->
cur
, (
CT_t
));

2431 i‡(4 > 
	`ssˇnf
(
bp
, "˝u%d %Œu %Œu %Œu %Œu %Œu %Œu %Œu %Œu", &
˝u_±r
->
id


2432 , &
˝u_±r
->
cur
.
u
, &˝u_±r->cur.
n
, &˝u_±r->cur.
s


2433 , &
˝u_±r
->
cur
.
i
, &˝u_±r->cur.
w
, &˝u_±r->cur.
x


2434 , &
˝u_±r
->
cur
.
y
, &˝u_±r->cur.
z
)) {

2438 #i‚de‡
CPU_ZEROTICS


2439 
˝u_±r
->
edge
 = 
sum_±r
->edge;

2441 #ifde‡
PRETEND8CPUS


2442 
˝u_±r
->
id
 = 
i
;

2446 i‡(
	`CHKw
(
Curwö
, 
Võw_CPUNOD
)

2447 && 
Numa_node_tŸ


2448 && -1 < (
node
 = 
	`numa_node_of_˝u
(
˝u_±r
->
id
))) {

2450 
CPU_t
 *
nod_±r
 = 
sum_±r
 + 1 + 
node
;

2451 
nod_±r
->
cur
.
u
 +
˝u_±r
->cur.u;Çod_±r->
ßv
.u += cpu_ptr->sav.u;

2452 
nod_±r
->
cur
.
n
 +
˝u_±r
->cur.n;Çod_±r->
ßv
.n += cpu_ptr->sav.n;

2453 
nod_±r
->
cur
.
s
 +
˝u_±r
->cur.s;Çod_±r->
ßv
.s += cpu_ptr->sav.s;

2454 
nod_±r
->
cur
.
i
 +
˝u_±r
->cur.i;Çod_±r->
ßv
.i += cpu_ptr->sav.i;

2455 
nod_±r
->
cur
.
w
 +
˝u_±r
->cur.w;Çod_±r->
ßv
.w += cpu_ptr->sav.w;

2456 
nod_±r
->
cur
.
x
 +
˝u_±r
->cur.x;Çod_±r->
ßv
.x += cpu_ptr->sav.x;

2457 
nod_±r
->
cur
.
y
 +
˝u_±r
->cur.y;Çod_±r->
ßv
.y += cpu_ptr->sav.y;

2458 
nod_±r
->
cur
.
z
 +
˝u_±r
->cur.z;Çod_±r->
ßv
.z += cpu_ptr->sav.z;

2459 #i‚de‡
CPU_ZEROTICS


2462 
nod_±r
->
edge
 = 
sum_±r
->edge;

2464 
˝u_±r
->
node
 =Çode;

2465 #i‚de‡
OFF_NUMASKIP


2466 
nod_±r
->
id
 = -1;

2471 
Cpu_Áux_tŸ
 = 
i
;

2472 #unde‡
sumSLOT


2473 #unde‡
tŸSLOT


2474 
	}
}

2477 #ifde‡
OFF_HST_HASH


2481 
ölöe
 
HST_t
 *
	$h°b§ch
 (
HST_t
 *
h°
, 
max
, 
pid
) {

2482 
mid
, 
mö
 = 0;

2484 
mö
 <
max
) {

2485 
mid
 = (
mö
 + 
max
) / 2;

2486 i‡(
pid
 < 
h°
[
mid
].pidË
max
 = mid - 1;

2487 i‡(
pid
 > 
h°
[
mid
].pidË
mö
 = mid + 1;

2488  &
h°
[
mid
];

2490  
NULL
;

2491 
	}
}

2498 
	#_HASH_
(
K
Ë(K & (
HHASH_SIZ
 - 1))

	)

2500 
ölöe
 
HST_t
 *
	$h°gë
 (
pid
) {

2501 
V
 = 
PHash_ßv
[
	`_HASH_
(
pid
)];

2503 -1 < 
V
) {

2504 i‡(
PHi°_ßv
[
V
].
pid
 ==Öid)  &PHist_sav[V];

2505 
V
 = 
PHi°_ßv
[V].
 k
; }

2506  
NULL
;

2507 
	}
}

2510 
ölöe
 
	$h°put
 (
idx
) {

2511 
V
 = 
	`_HASH_
(
PHi°_√w
[
idx
].
pid
);

2513 
PHi°_√w
[
idx
].
 k
 = 
PHash_√w
[
V
];

2514 
PHash_√w
[
V
] = 
idx
;

2515 
	}
}

2517 #unde‡
_HASH_


2527 
	$¥ocs_hÕ
 (
¥oc_t
 *
this
) {

2528 #ifde‡
OFF_HST_HASH


2529 
maxt_ßv
 = 0;

2531 
TIC_t
 
tics
;

2532 
HST_t
 *
h
;

2534 i‡(!
this
) {

2535 
u±ime_ßv
;

2536 
u±ime_cur
;

2537 
ë
;

2538 *
v
;

2540 
	`u±ime
(&
u±ime_cur
, 
NULL
);

2541 
ë
 = 
u±ime_cur
 - 
u±ime_ßv
;

2542 i‡(
ë
 < 0.01)Ét = 0.005;

2543 
u±ime_ßv
 = 
u±ime_cur
;

2546 
Føme_ësˇÀ
 = 100.0‡/ (()
Hîtz
 * ()
ë
 * (
Rc
.
mode_úixps
 ? 1 : 
smp_num_˝us
));

2547 #ifde‡
OFF_HST_HASH


2548 
maxt_ßv
 = 
Føme_maxèsk
;

2550 
Føme_maxèsk
 = 
Føme_ru¬ög
 = 
Føme_¶ìpö
 = 
Føme_°›≥d
 = 
Føme_zombõd
 = 0;

2553 
v
 = 
PHi°_ßv
;

2554 
PHi°_ßv
 = 
PHi°_√w
;

2555 
PHi°_√w
 = 
v
;

2556 #ifde‡
OFF_HST_HASH


2558 
	`qs‹t
(
PHi°_ßv
, 
maxt_ßv
, (
HST_t
), (
QFP_t
)
s‹t_HST_t
);

2560 
v
 = 
PHash_ßv
;

2561 
PHash_ßv
 = 
PHash_√w
;

2562 
PHash_√w
 = 
v
;

2563 
	`mem˝y
(
PHash_√w
, 
HHash_nul
, (HHash_nul));

2568 
this
->
°©e
) {

2570 
Føme_ru¬ög
++;

2574 
Føme_¶ìpö
++;

2577 
Føme_°›≥d
++;

2580 
Føme_zombõd
++;

2586 i‡(
Føme_maxèsk
+1 >
HHi°_siz
) {

2587 
HHi°_siz
 = HHist_siz * 5 / 4 + 100;

2588 
PHi°_ßv
 = 
	`Æloc_r
(PHi°_ßv, (
HST_t
Ë* 
HHi°_siz
);

2589 
PHi°_√w
 = 
	`Æloc_r
(PHi°_√w, (
HST_t
Ë* 
HHi°_siz
);

2595 
PHi°_√w
[
Føme_maxèsk
].
pid
 = 
this
->
tid
;

2596 
PHi°_√w
[
Føme_maxèsk
].
tics
 =Åic†(
this
->
utime
 +Åhis->
°ime
);

2598 
PHi°_√w
[
Føme_maxèsk
].
maj
 = 
this
->
maj_Êt
;

2599 
PHi°_√w
[
Føme_maxèsk
].
mö
 = 
this
->
mö_Êt
;

2601 #ifde‡
OFF_HST_HASH


2603 i‡((
h
 = 
	`h°b§ch
(
PHi°_ßv
, 
maxt_ßv
 - 1, 
this
->
tid
))) {

2604 
tics
 -
h
->tics;

2605 
this
->
maj_dñè
 =Åhis->
maj_Êt
 - 
h
->
maj
;

2606 
this
->
mö_dñè
 =Åhis->
mö_Êt
 - 
h
->
mö
;

2610 
	`h°put
(
Føme_maxèsk
);

2612 i‡((
h
 = 
	`h°gë
(
this
->
tid
))) {

2613 
tics
 -
h
->tics;

2614 
this
->
maj_dñè
 =Åhis->
maj_Êt
 - 
h
->
maj
;

2615 
this
->
mö_dñè
 =Åhis->
mö_Êt
 - 
h
->
mö
;

2621 
this
->
p˝u
 = 
tics
;

2624 
Føme_maxèsk
++;

2625 
	}
}

2632 
	$¥ocs_ª‰esh
 () {

2633 
	#n_u£d
 
Føme_maxèsk


2634 
¥oc_t
 **
¥iv©e_µt
;

2635 
n_Æloc
 = 0;

2636 
n_ßved
 = 0;

2637 
¥oc_t
 *
±ask
;

	)

2638 
PROCTAB
* 
PT
;

2639 
i
;

2640 
¥oc_t
*(*
ªad_somëhög
)(
PROCTAB
*,Öroc_t*);

2642 
	`¥ocs_hÕ
(
NULL
);

2643 i‡(
NULL
 =(
PT
 = 
	`›í¥oc
(
Fømes_libÊags
, 
M⁄pids
)))

2644 
	`îr‹_exô
(
	`fmtmk
(
	`N_fmt
(
FAIL_›ílib_fmt
), 
	`°ªº‹
(
î∫o
)));

2645 
ªad_somëhög
 = 
Thªad_mode
 ? 
ªadeôhî
 : 
ªad¥oc
;

2648 i‡(
n_u£d
 =
n_Æloc
) {

2649 
n_Æloc
 = 10 + ((n_alloc * 5) / 4);

2650 
¥iv©e_µt
 = 
	`Æloc_r
’riv©e_µt, (
¥oc_t
*Ë* 
n_Æloc
);

2652 
	`mem£t
(
¥iv©e_µt
 + 
n_u£d
, 0, (
¥oc_t
*Ë* (
n_Æloc
 -Ç_used));

2656 i‡(!(
±ask
 = 
	`ªad_somëhög
(
PT
, 
¥iv©e_µt
[
n_u£d
]))) ;

2657 
	`¥ocs_hÕ
((
¥iv©e_µt
[
n_u£d
] = 
±ask
));

2660 
	`˛o£¥oc
(
PT
);

2663 i‡(
n_ßved
 =
n_Æloc
)

2664 
i
 = 0; i < 
GROUPSMAX
; i++)

2665 
	`mem˝y
(
Wö°k
[
i
].
µt
, 
¥iv©e_µt
, (
¥oc_t
*Ë* 
n_u£d
);

2667 
n_ßved
 = 
n_Æloc
;

2668 
i
 = 0; i < 
GROUPSMAX
; i++) {

2669 
Wö°k
[
i
].
µt
 = 
	`Æloc_r
(Wö°k[i].µt, (
¥oc_t
*Ë* 
n_Æloc
);

2670 
	`mem˝y
(
Wö°k
[
i
].
µt
, 
¥iv©e_µt
, (
¥oc_t
*Ë* 
n_u£d
);

2673 #unde‡
n_u£d


2674 
	}
}

2681 
	$sysöfo_ª‰esh
 (
f‹˚d
) {

2682 
time_t
 
ßv_£cs
;

2683 
time_t
 
cur_£cs
;

2685 i‡(
f‹˚d
)

2686 
ßv_£cs
 = 0;

2687 
cur_£cs
 = 
	`time
(
NULL
);

2690 i‡(3 <
cur_£cs
 - 
ßv_£cs
) {

2691 
	`memöfo
();

2692 #i‚de‡
PRETEND8CPUS


2693 
	`˝uöfo
();

2694 
Cpu_Áux_tŸ
 = 
smp_num_˝us
;

2696 
Numa_node_tŸ
 = 
	`numa_max_node
() + 1;

2697 
ßv_£cs
 = 
cur_£cs
;

2699 
	}
}

2751 
	sI_ít
 {

2752 (*
	mfunc
)(*, );

2753 *
	mty≥
;

2754 *
	m«me
;

2755 *
	mfmts
;

2756 
	mÁrg
;

2757 c⁄° *
	mˇps
;

2758 *
	mf°r
;

2759 
	mÊí
;

2761 
	sI_°ruc
 {

2762 
	mdemo
;

2763 
	mtŸÆ
;

2764 *
	møw
;

2765 
I_ít
 *
	mèb
;

2767 
I_°ruc
 
	gIn•e˘
;

2769 **
	gIn•_p
;

2770 
	gIn•_∆
;

2771 *
	gIn•_buf
;

2772 
size_t
 
	gIn•_bufsz
;

2773 
size_t
 
	gIn•_bu‰d
;

2774 
I_ít
 *
	gIn•_£l
;

2777 
	#INSP_MKSL
(
big
,
txt
Ë{ 
_sz
 = big ? 
S¸ìn_cﬁs
 : 80; \

2778 
	`puç
(
	`tg2
(0, (
Msg_row
 = 3))); \

2779 
	`PUTT
("%s%.*s", 
Curwö
->
ˇp˛r_hdr
, 
S¸ìn_cﬁs
 -1 \

2780 , 
	`fmtmk
("%-*.*s%s", 
_sz
, _sz, 
txt
, 
C≠_˛r_eﬁ
)); \

2781 
	`puç
(
C≠s_off
); 
	`fÊush
(
°dout
); }

	)

2784 
	#INSP_RLEN
(
idx
Ë()(
In•_p
[idx +1] - In•_p[idx] -1)

	)

2787 
	#INSP_BUSY
 { 
	`INSP_MKSL
(0, 
	`N_txt
(
YINSP_w‹kö_txt
)); }

	)

2796 
	$ö•_˙t_∆
 () {

2797 *
beg
 = 
In•_buf
;

2798 *
cur
 = 
In•_buf
;

2799 *
íd
 = 
In•_buf
 + 
In•_bu‰d
 + 1;

2801 #ifde‡
INSP_SAVEBUF


2803 
n
 = 1;

2804 
‚
[
SMLBUFSIZ
];

2805 
FILE
 *
fd
;

2806 
	`¢¥ötf
(
‚
, (‚), "%s.In•_buf.%02d.txt", 
My«me
, 
n
++);

2807 
fd
 = 
	`f›í
(
‚
, "w");

2808 i‡(
fd
) {

2809 
	`fwrôe
(
In•_buf
, 1, 
In•_bu‰d
, 
fd
);

2810 
	`f˛o£
(
fd
);

2814 
In•_p
 = 
	`Æloc_c
((*) * 2);

2816 
In•_∆
 = 0; 
beg
 < 
íd
; beg++) {

2817 i‡(*
beg
 == '\n') {

2818 
In•_p
[
In•_∆
++] = 
cur
;

2820 
In•_p
 = 
	`Æloc_r
(In•_p, ((*Ë* (
In•_∆
 +3)));

2821 
cur
 = 
beg
 +1;

2824 
In•_p
[0] = 
In•_buf
;

2825 
In•_p
[
In•_∆
++] = 
cur
;

2826 
In•_p
[
In•_∆
] = 
íd
;

2827 i‡((
íd
 - 
cur
) == 1)

2828 --
In•_∆
;

2829 
	}
}

2832 #i‚de‡
INSP_OFFDEMO


2835 
	$ö•_do_demo
 (*
fmts
, 
pid
) {

2836 ()
fmts
; ()
pid
;

2839 
In•_bufsz
 = 
READMINSZ
 + 
	`°æí
(
	`N_txt
(
YINSP_d°‹y_txt
));

2840 
In•_buf
 = 
	`Æloc_c
(
In•_bufsz
);

2841 
In•_bu‰d
 = 
	`¢¥ötf
(
In•_buf
, 
In•_bufsz
, "%s", 
	`N_txt
(
YINSP_d°‹y_txt
));

2842 
	`ö•_˙t_∆
();

2843 
	}
}

2849 
	$ö•_do_fûe
 (*
fmts
, 
pid
) {

2850 
buf
[
LRGBUFSIZ
];

2851 
FILE
 *
Â
;

2852 
rc
;

2854 
	`¢¥ötf
(
buf
, (buf), 
fmts
, 
pid
);

2855 
Â
 = 
	`f›í
(
buf
, "r");

2856 
rc
 = 
	`ªadfûe
(
Â
, &
In•_buf
, &
In•_bufsz
, &
In•_bu‰d
);

2857 i‡(
Â
Ë
	`f˛o£
(fp);

2858 i‡(
rc
Ë
In•_bu‰d
 = 
	`¢¥ötf
(
In•_buf
, 
In•_bufsz
, "%s"

2859 , 
	`fmtmk
(
	`N_fmt
(
YINSP_Áûed_fmt
), 
	`°ªº‹
(
î∫o
)));

2860 
	`ö•_˙t_∆
();

2861 
	}
}

2866 
	$ö•_do_pùe
 (*
fmts
, 
pid
) {

2867 
buf
[
LRGBUFSIZ
];

2868 
FILE
 *
Â
;

2869 
rc
;

2871 
	`¢¥ötf
(
buf
, (buf), 
fmts
, 
pid
);

2872 
Â
 = 
	`p›í
(
buf
, "r");

2873 
rc
 = 
	`ªadfûe
(
Â
, &
In•_buf
, &
In•_bufsz
, &
In•_bu‰d
);

2874 i‡(
Â
Ë
	`p˛o£
(fp);

2875 i‡(
rc
Ë
In•_bu‰d
 = 
	`¢¥ötf
(
In•_buf
, 
In•_bufsz
, "%s"

2876 , 
	`fmtmk
(
	`N_fmt
(
YINSP_Áûed_fmt
), 
	`°ªº‹
(
î∫o
)));

2877 
	`ö•_˙t_∆
();

2878 
	}
}

2888 
ölöe
 
	$ö•_föd_ofs
 (
cﬁ
, 
row
) {

2889 
	#begFS
 ()(
‚d
 - 
In•_p
[
row
])

	)

2890 *
p
, *
‚d
 = 
NULL
;

2892 i‡(
In•_£l
->
f°r
[0]) {

2894 i‡(
	`memchr
(
In•_p
[
row
], 
In•_£l
->
f°r
[0], 
	`INSP_RLEN
(row))) {

2895  ; 
cﬁ
 < 
	`INSP_RLEN
(
row
); col++) {

2896 i‡(!*(
p
 = 
In•_p
[
row
] + 
cﬁ
))

2898 
‚d
 = 
	`STRSTR
(
p
, 
In•_£l
->
f°r
);

2899 i‡(
‚d
)

2901 
cﬁ
 +
	`°æí
(
p
);

2903 i‡(
‚d
 && fnd < 
In•_p
[
row
 + 1])

2904  
begFS
;

2907  
INT_MAX
;

2908 #unde‡
begFS


2909 
	}
}

2917 
	$ö•_föd_°r
 (
ch
, *
cﬁ
, *
row
) {

2918 
	#ªDUX
 (
found
Ë? 
	`N_txt
(
WORD_™Ÿhî_txt
Ë: ""

	)

2919 
found
;

2921 i‡((
ch
 ='&' || ch ='n'Ë&& !
In•_£l
->
f°r
[0]) {

2922 
	`show_msg
(
	`N_txt
(
FIND_no_√xt_txt
));

2925 i‡(
ch
 == 'L' || ch == '/') {

2926 *
°r
 = 
	`iﬁöe
(
	`N_txt
(
GET_föd_°r_txt
));

2927 i‡(*
°r
 =
kbd_ESC
) ;

2928 
	`¢¥ötf
(
In•_£l
->
f°r
, 
FNDBUFSIZ
, "%s", 
°r
);

2929 
In•_£l
->
Êí
 = 
	`°æí
(In•_£l->
f°r
);

2930 
found
 = 0;

2932 i‡(
In•_£l
->
f°r
[0]) {

2933 
xx
, 
yy
;

2935 
INSP_BUSY
;

2936 
xx
 = *
cﬁ
, 
yy
 = *
row
; yy < 
In•_∆
; ) {

2937 
xx
 = 
	`ö•_föd_ofs
(xx, 
yy
);

2938 i‡(
xx
 < 
	`INSP_RLEN
(
yy
)) {

2939 
found
 = 1;

2940 i‡(
xx
 =*
cﬁ
 && 
yy
 =*
row
) {

2941 ++
xx
;

2944 *
cﬁ
 = 
xx
;

2945 *
row
 = 
yy
;

2948 
xx
 = 0;

2949 ++
yy
;

2951 
	`show_msg
(
	`fmtmk
(
	`N_fmt
(
FIND_no_föd_fmt
), 
ªDUX
, 
In•_£l
->
f°r
));

2953 #unde‡
ªDUX


2954 
	}
}

2967 
ölöe
 
	$ö•_make_row
 (
cﬁ
, 
row
) {

2968 
	#maxSZ
 ( 
S¸ìn_cﬁs
 - (
to
 + 1Ë)

	)

2969 
	#ˇpNO
 { i‡(
hiˇp
Ë{ 
	`puç
(
C≠s_off
); hiˇ∞0; } }

	)

2970 
	#mkFND
 { 
	`PUTT
("%s%.*s%s", 
Curwö
->
ˇp˛r_hdr
, 
maxSZ
, 
In•_£l
->
f°r
, 
C≠s_off
); \

2971 
‰
 +
In•_£l
->
Êí
 -1; 
to
 +In•_£l->Êí; 
hiˇp
 = 0; }

	)

2972 #i‚de‡
INSP_JUSTNOT


2973 
	#mkCTL
 { 
x
 = 
maxSZ
; c⁄° *
p
 = 
	`fmtmk
("^%c", 
uch
 + '@'); \

2974 
	`PUTT
("%s%.*s", (!
hiˇp
Ë? 
Curwö
->
ˇp˛r_msg
 : "", 
x
, 
p
); 
to
 +2; hiˇ∞1; }

	)

2975 
	#mkUNP
 { 
x
 = 
maxSZ
; c⁄° *
p
 = 
	`fmtmk
("<%02X>", 
uch
); \

2976 
	`PUTT
("%s%.*s", (!
hiˇp
Ë? 
Curwö
->
ˇp˛r_msg
 : "", 
x
, 
p
); 
to
 +4; hiˇ∞1; }

	)

2978 
	#mkCTL
 { i‡((
to
 +2Ë<
S¸ìn_cﬁs
) \

2979 
	`PUTT
("%s^%c", (!
hiˇp
Ë? 
Curwö
->
ˇp˛r_msg
 : "", 
uch
 + '@'); hiˇ∞1; }

	)

2980 
	#mkUNP
 { i‡((
to
 +4Ë<
S¸ìn_cﬁs
) \

2981 
	`PUTT
("%s<%02X>", (!
hiˇp
Ë? 
Curwö
->
ˇp˛r_msg
 : "", 
uch
); hiˇ∞1; }

	)

2983 
	#mkSTD
 { 
ˇpNO
; i‡(++
to
 <
S¸ìn_cﬁs
Ë{ 
_°r
[2]; \

2984 
_°r
[0] = 
uch
; 
	`puç
(_°r); } }

	)

2985 
éöe
[
SCREENMAX
];

2986 
‰
, 
to
, 
ofs
;

2987 
hiˇp
 = 0;

2989 i‡(
cﬁ
 < 
	`INSP_RLEN
(
row
))

2990 
	`mem˝y
(
éöe
, 
In•_p
[
row
] + 
cﬁ
, (tline));

2991 
éöe
[0] = '\n';

2993 
‰
 = 0, 
to
 = 0, 
ofs
 = 0;Åÿ< 
S¸ìn_cﬁs
 -1; fr++) {

2994 i‡(!
ofs
)

2995 
ofs
 = 
	`ö•_föd_ofs
(
cﬁ
 + 
‰
, 
row
);

2996 i‡(
cﬁ
 + 
‰
 < 
ofs
) {

2997 
uch
 = 
éöe
[
‰
];

2998 i‡(
uch
 == '\n') ;

2999 i‡(
uch
 > 126Ë
mkUNP


3000 i‡(
uch
 < 32Ë
mkCTL


3001 
mkSTD


3002 } { 
mkFND


3003 
ofs
 = 0;

3005 i‡(
cﬁ
 + 
‰
 >
	`INSP_RLEN
(
row
)) ;

3007 
ˇpNO
;

3008 
	`puç
(
C≠_˛r_eﬁ
);

3010 #unde‡
maxSZ


3011 #unde‡
ˇpNO


3012 #unde‡
mkFND


3013 #unde‡
mkCTL


3014 #unde‡
mkUNP


3015 #unde‡
mkSTD


3016 
	}
}

3025 
ölöe
 
	$ö•_show_pgs
 (
cﬁ
, 
row
, 
max
) {

3026 
buf
[
SMLBUFSIZ
];

3027 
r
 = 
	`¢¥ötf
(
buf
, (buf), "%d", 
In•_∆
);

3028 
c
 = 
	`¢¥ötf
(
buf
, (buf), "%d", 
cﬁ
 +
S¸ìn_cﬁs
);

3029 
l
 = 
row
 +1, 
ls
 = 
In•_∆
;;

3031 i‡(!
In•_bu‰d
)

3032 
l
 = 
ls
 = 0;

3033 
	`¢¥ötf
(
buf
, (buf), 
	`N_fmt
(
YINSP_°©us_fmt
)

3034 , 
In•_£l
->
«me


3035 , 
r
, 
l
,Ñ, 
ls


3036 , 
c
, 
cﬁ
 + 1, c, cﬁ + 
S¸ìn_cﬁs


3037 , ()
In•_bu‰d
);

3038 
	`INSP_MKSL
(0, 
buf
);

3040  ; 
max
 && 
row
 < 
In•_∆
;Ñow++) {

3041 
	`puç
("\n");

3042 
	`ö•_make_row
(
cﬁ
, 
row
);

3043 --
max
;

3046 i‡(
max
)

3047 
	`puç
(
C≠_∆_˛ªos
);

3048 
	}
}

3054 
	$ö•_võw_choi˚
 (
¥oc_t
 *
obj
) {

3055 #ifde‡
INSP_SLIDE_1


3056 
	#hzAMT
 1

	)

3058 
	#hzAMT
 8

	)

3060 
	#maxLN
 (
S¸ìn_rows
 - (
Msg_row
 +1))

	)

3061 
	#makHD
(
b1
,
b2
) { \

3062 
	`¢¥ötf
(
b1
, (b1), "%d", 
obj
->
tid
); \

3063 
	`¢¥ötf
(
b2
, (b2), "%s", 
obj
->
cmd
); }

	)

3064 
	#makFS
(
d°
Ë{ i‡(
In•_£l
->
Êí
 < 22) \

3065 
	`¢¥ötf
(
d°
, (d°), "%s", 
In•_£l
->
f°r
); \

3066 
	`¢¥ötf
(
d°
, (d°), "%.19s...", 
In•_£l
->
f°r
); }

	)

3067 
buf
[
SMLBUFSIZ
];

3068 
key
, 
cuæö
 = 0, 
curcﬁ
 = 0;

3070 
signify_th©
:

3071 
	`puç
(
C≠_˛r_s¸
);

3072 
	`adj_geomëry
();

3075 
pid
[6], 
cmd
[16];

3077 i‡(
curcﬁ
 < 0) curcol = 0;

3078 i‡(
cuæö
 >
In•_∆
) curlin = Insp_nl -1;

3079 i‡(
cuæö
 < 0) curlin = 0;

3081 
	`makFS
(
buf
)

3082 
	`makHD
(
pid
,
cmd
)

3083 
	`puç
(
C≠_home
);

3084 
	`show_•ecül
(1, 
	`fmtmk
(
	`N_unq
(
YINSP_hdvõw_fmt
)

3085 , 
pid
, 
cmd
, (
In•_£l
->
f°r
[0]Ë? 
buf
 : " N/A "));

3086 
	`ö•_show_pgs
(
curcﬁ
, 
cuæö
, 
maxLN
);

3087 
	`fÊush
(
°dout
);

3090 
	`tcÊush
(
STDIN_FILENO
, 
TCIFLUSH
);

3092 i‡(
Fømes_sig«l
Ë
signify_th©
;

3093 
key
 = 
	`iokey
(1);

3094 i‡(
key
 < 1Ë
signify_th©
;

3096 
key
) {

3097 
kbd_ENTER
:

3098 
key
 = 
INT_MAX
;

3099 
kbd_ESC
:

3101 
	`puç
(
C≠_˛r_s¸
);

3102  
key
;

3103 
kbd_LEFT
:

3104 
curcﬁ
 -
hzAMT
;

3106 
kbd_RIGHT
:

3107 
curcﬁ
 +
hzAMT
;

3109 
kbd_UP
:

3110 --
cuæö
;

3112 
kbd_DOWN
:

3113 ++
cuæö
;

3115 
kbd_PGUP
:

3117 
cuæö
 -
maxLN
 -1;

3119 
kbd_PGDN
:

3120 
kbd_SPACE
:

3121 
cuæö
 +
maxLN
 -1;

3123 
kbd_HOME
:

3125 
curcﬁ
 = 
cuæö
 = 0;

3127 
kbd_END
:

3129 
curcﬁ
 = 0;

3130 
cuæö
 = 
In•_∆
 - 
maxLN
;

3136 
	`ö•_föd_°r
(
key
, &
curcﬁ
, &
cuæö
);

3138 
	`puç
((
Curs‹_°©e
 = 
C≠_curs_hide
));

3141 
	`¢¥ötf
(
buf
, (buf), "%s: %s", 
In•_£l
->
ty≥
, In•_£l->
fmts
);

3142 
	`INSP_MKSL
(1, 
buf
);

3143 i‡(
	`iokey
(1) < 1)

3144 
signify_th©
;

3150 #unde‡
hzAMT


3151 #unde‡
maxLN


3152 #unde‡
makHD


3153 #unde‡
makFS


3154 
	}
}

3164 
	$ö•e˘i⁄_utûôy
 (
pid
) {

3165 
	#mkSEL
(
d°
Ë{ 
i
 = 0; i < 
In•e˘
.
tŸÆ
; i++ËIn•e˘.
èb
[i].
ˇps
 = "~1"; \

3166 
In•e˘
.
èb
[
£l
].
ˇps
 = "~4"; 
d°
[0] = '\0'; \

3167 
i
 = 0; i < 
In•e˘
.
tŸÆ
; i++Ë{ 
_s
[
SMLBUFSIZ
]; \

3168 
	`¢¥ötf
(
_s
, (_s), " %†%s", 
In•e˘
.
èb
[
i
].
«me
, In•e˘.èb[i].
ˇps
); \

3169 
	`°rˇt
(
d°
, 
_s
); } }

	)

3170 
£ls
[
MEDBUFSIZ
];

3171 
£l
;

3172 
i
, 
key
;

3173 
¥oc_t
 *
p
;

3175 
i
 = 0, 
p
 = 
NULL
; i < 
Føme_maxèsk
; i++)

3176 i‡(
pid
 =
Curwö
->
µt
[
i
]->
tid
) {

3177 
p
 = 
Curwö
->
µt
[
i
];

3180 i‡(!
p
) {

3181 
	`show_msg
(
	`fmtmk
(
	`N_fmt
(
YINSP_pidbad_fmt
), 
pid
));

3185 
	`puç
((
Curs‹_°©e
 = 
C≠_curs_hide
));

3186 
signify_th©
:

3187 
	`puç
(
C≠_˛r_s¸
);

3188 
	`adj_geomëry
();

3190 
key
 = 
INT_MAX
;

3192 
	`mkSEL
(
£ls
);

3193 
	`puç
(
C≠_home
);

3194 
	`show_•ecül
(1, 
	`fmtmk
(
	`N_unq
(
YINSP_hd£ls_fmt
)

3195 , 
pid
, 
p
->
cmd
, 
£ls
));

3196 
	`INSP_MKSL
(0, " ");

3198 i‡(
Fømes_sig«l
Ë
signify_th©
;

3199 i‡(
key
 =
INT_MAX
Ëkey = 
	`iokey
(1);

3200 i‡(
key
 < 1Ë
signify_th©
;

3202 
key
) {

3204 
kbd_ESC
:

3206 
kbd_END
:

3207 
£l
 = 0;

3208 
kbd_LEFT
:

3209 i‡(--
£l
 < 0Ë£»
In•e˘
.
tŸÆ
 -1;

3210 
key
 = 
INT_MAX
;

3212 
kbd_HOME
:

3213 
£l
 = 
In•e˘
.
tŸÆ
;

3214 
kbd_RIGHT
:

3215 i‡(++
£l
 >
In•e˘
.
tŸÆ
) sel = 0;

3216 
key
 = 
INT_MAX
;

3218 
kbd_ENTER
:

3219 
INSP_BUSY
;

3220 
In•_£l
 = &
In•e˘
.
èb
[
£l
];

3221 
In•e˘
.
èb
[
£l
].
	`func
(In•e˘.èb[£l].
fmts
, 
pid
);

3222 
key
 = 
	`ö•_võw_choi˚
(
p
);

3223 
	`‰ì
(
In•_buf
);

3224 
	`‰ì
(
In•_p
);

3227 
signify_th©
;

3229 } 
key
 !'q' && key !
kbd_ESC
);

3231 #unde‡
mkSEL


3232 
	}
}

3233 #unde‡
INSP_MKSL


3234 #unde‡
INSP_RLEN


3235 #unde‡
INSP_BUSY


3242 
	$bef‹e
 (*
me
) {

3243 
siga˘i⁄
 
ß
;

3244 
¥oc_t
 
p
;

3245 
i
;

3246 
löux_vîsi⁄_code
 = 
	`¥o˝s_löux_vîsi⁄
();

3248 
	`©exô
(
˛o£_°dout
);

3251 
	`look_up_our_£lf
(&
p
);

3254 
My«me
 = 
	`°ºchr
(
me
, '/');

3255 i‡(
My«me
Ë++My«me; My«mê
me
;

3258 
	`öôülize_∆s
();

3261 #ifde‡
PRETEND8CPUS


3262 
smp_num_˝us
 = 8;

3264 
Cpu_Áux_tŸ
 = 
smp_num_˝us
;

3265 
Cpu_Sèãs_fmts
 = 
	`N_unq
(
STATE_lö2x4_fmt
);

3266 i‡(
löux_vîsi⁄_code
 > 
	`LINUX_VERSION
(2, 5, 41))

3267 
Cpu_Sèãs_fmts
 = 
	`N_unq
(
STATE_lö2x5_fmt
);

3268 i‡(
löux_vîsi⁄_code
 >
	`LINUX_VERSION
(2, 6, 0))

3269 
Cpu_Sèãs_fmts
 = 
	`N_unq
(
STATE_lö2x6_fmt
);

3270 i‡(
löux_vîsi⁄_code
 >
	`LINUX_VERSION
(2, 6, 11))

3271 
Cpu_Sèãs_fmts
 = 
	`N_unq
(
STATE_lö2x7_fmt
);

3274 
i
 = 
∑ge_byãs
;

3275 
i
 > 1024Ë{ i >>1; 
Pg2K_sh·
++; }

3277 #i‚de‡
OFF_HST_HASH


3279 
i
 = 0; i < 
HHASH_SIZ
; i++Ë
HHash_nul
[i] = -1;

3280 
	`mem˝y
(
HHash_⁄e
, 
HHash_nul
, (HHash_nul));

3281 
	`mem˝y
(
HHash_two
, 
HHash_nul
, (HHash_nul));

3284 
	`numa_öô
();

3285 
Numa_node_tŸ
 = 
	`numa_max_node
() + 1;

3287 #i‚de‡
SIGRTMAX


3288 
	#SIGRTMAX
 32

	)

3291 
	`sigem±y£t
(&
ß
.
ß_mask
);

3293 
ß
.
ß_Êags
 = 0;

3294 
i
 = 
SIGRTMAX
; i; i--) {

3295 
i
) {

3296 
SIGALRM
: 
SIGHUP
: 
SIGINT
:

3297 
SIGPIPE
: 
SIGQUIT
: 
SIGTERM
:

3298 
SIGUSR1
: 
SIGUSR2
:

3299 
ß
.
ß_h™dÀr
 = 
sig_ídpgm
;

3301 
SIGTSTP
: 
SIGTTIN
: 
SIGTTOU
:

3302 
ß
.
ß_h™dÀr
 = 
sig_∑u£d
;

3304 
SIGCONT
: 
SIGWINCH
:

3305 
ß
.
ß_h™dÀr
 = 
sig_ªsize
;

3308 
ß
.
ß_h™dÀr
 = 
sig_abexô
;

3310 
SIGKILL
: 
SIGSTOP
:

3312 
SIGCHLD
:

3315 
	`siga˘i⁄
(
i
, &
ß
, 
NULL
);

3317 
	}
}

3323 
	$c⁄fig_cvt
 (
WIN_t
 *
q
) {

3325 
ﬁd
, 
√w
;

3326 } 
Êags_èb
[] = {

3327 
	#ﬁd_Võw_NOBOLD
 0x000001

	)

3328 
	#ﬁd_VISIBLE_tsk
 0x000008

	)

3329 
	#ﬁd_Q§t_NORMAL
 0x000010

	)

3330 
	#ﬁd_Show_HICOLS
 0x000200

	)

3331 
	#ﬁd_Show_THREAD
 0x010000

	)

3332 { 
ﬁd_Võw_NOBOLD
, 
Võw_NOBOLD
 },

3333 { 
ﬁd_VISIBLE_tsk
, 
Show_TASKON
 },

3334 { 
ﬁd_Q§t_NORMAL
, 
Q§t_NORMAL
 },

3335 { 
ﬁd_Show_HICOLS
, 
Show_HICOLS
 },

3336 { 
ﬁd_Show_THREAD
, 0 }

3337 #unde‡
ﬁd_Võw_NOBOLD


3338 #unde‡
ﬁd_VISIBLE_tsk


3339 #unde‡
ﬁd_Q§t_NORMAL


3340 #unde‡
ﬁd_Show_HICOLS


3341 #unde‡
ﬁd_Show_THREAD


3343 c⁄° 
fõlds_§c
[] = 
CVT_FIELDS
;

3344 
fõlds_d°
[
PFLAGSSIZ
], *
p1
, *
p2
;

3345 
i
, 
j
, 
x
;

3348 
x
 = 
q
->
rc
.
wöÊags
;

3349 
q
->
rc
.
wöÊags
 = 0;

3350 
i
 = 0; i < 
	`MAXTBL
(
Êags_èb
); i++) {

3351 i‡(
x
 & 
Êags_èb
[
i
].
ﬁd
) {

3352 
x
 &~
Êags_èb
[
i
].
ﬁd
;

3353 
q
->
rc
.
wöÊags
 |
Êags_èb
[
i
].
√w
;

3356 
q
->
rc
.
wöÊags
 |
x
;

3359 
j
 = 
	`°æí
(
q
->
rc
.
fõldscur
);

3360 i‡(
j
 > 
CVT_FLDMAX
)

3362 
	`°r˝y
(
fõlds_d°
, 
fõlds_§c
);

3367 i‡((
p1
 = 
	`°rchr
(
q
->
rc
.
fõldscur
, '['))) *p1 = '{';

3368 i‡((
p2
 = 
	`°rchr
(
q
->
rc
.
fõldscur
, '\\'))) *p2 = '|';

3369 
i
 = 0; i < 
j
; i++) {

3370 
c
 = 
q
->
rc
.
fõldscur
[
i
];

3371 
x
 = 
	`tﬁowî
(
c
) - 'a';

3372 i‡(
x
 < 0 || x >
CVT_FLDMAX
)

3374 
fõlds_d°
[
i
] = 
fõlds_§c
[
x
];

3375 i‡(
	`isuµî
(
c
))

3376 
	`FLD⁄
(
fõlds_d°
[
i
]);

3379 i‡(
p1
Ë
	`FLD⁄
(
fõlds_d°
[p1 - 
q
->
rc
.
fõldscur
]);

3380 i‡(
p2
Ë
	`FLD⁄
(
fõlds_d°
[p2 - 
q
->
rc
.
fõldscur
]);

3381 
	`°r˝y
(
q
->
rc
.
fõldscur
, 
fõlds_d°
);

3384 
x
 = 
q
->
rc
.
s‹tödx
;

3385 
q
->
rc
.
s‹tödx
 = 
fõlds_§c
[
x
] - 
FLD_OFFSET
;

3387 
Rc_que°i⁄s
 = 1;

3389 
	}
}

3406 
	$c⁄figs_ªad
 () {

3407 
tmp_dñay
 = 
DEF_DELAY
;

3408 
fbuf
[
LRGBUFSIZ
];

3409 c⁄° *
p
, *
p_home
;

3410 
FILE
 *
Â
;

3411 
i
;

3413 
Â
 = 
	`f›í
(
SYS_RCFILESPEC
, "r");

3414 i‡(
Â
) {

3415 i‡(
	`fgës
(
fbuf
, (fbuf), 
Â
)) {

3416 
Secuª_mode
 = 1;

3417 i‡(
	`fgës
(
fbuf
, (fbuf), 
Â
))

3418 
	`ssˇnf
(
fbuf
, "%f", &
Rc
.
dñay_time
);

3420 
	`f˛o£
(
Â
);

3425 
p_home
 = 
	`gëív
("HOME");

3426 i‡(!
p_home
 ||Ö_home[0] == '\0')

3427 
p_home
 = ".";

3428 
	`¢¥ötf
(
Rc_«me
, (Rc_«me), "%s/.%§c", 
p_home
, 
My«me
);

3430 i‡(
	`ac˚ss
(
Rc_«me
, 
F_OK
)) {

3431 
p
 = 
	`gëív
("XDG_CONFIG_HOME");

3433 i‡(!
p
 ||Ö[0] != '/') {

3434 
p
 = 
	`fmtmk
("%s/.c⁄fig", 
p_home
);

3435 ()
	`mkdú
(
p
, 0700);

3437 
	`¢¥ötf
(
Rc_«me
, (Rc_«me), "%s/¥o˝s", 
p
);

3438 ()
	`mkdú
(
Rc_«me
, 0700);

3439 
	`¢¥ötf
(
Rc_«me
, (Rc_«me), "%s/¥o˝s/%§c", 
p
, 
My«me
);

3442 
Â
 = 
	`f›í
(
Rc_«me
, "r");

3443 i‡(
Â
) {

3444 
tmp_whﬁe
, 
tmp_‰a˘
;

3445 i‡(
	`fgës
(
fbuf
, (fbuf), 
Â
))

3447 i‡(6 !
	`fsˇnf
(
Â


3449 , &
Rc
.
id
, &Rc.
mode_Æts¸
, &Rc.
mode_úixps
, &
tmp_whﬁe
, &
tmp_‰a˘
, &
i
)) {

3450 
p
 = 
	`fmtmk
(
	`N_fmt
(
RC_bad_fûes_fmt
), 
Rc_«me
);

3451 
Rc_que°i⁄s
 = -1;

3452 
åy_ö•e˘_íåõs
;

3455 
Curwö
 = &
Wö°k
[
i
];

3457 
tmp_dñay
 = ()
tmp_whﬁe
 + ()
tmp_‰a˘
 / 1000;

3459 
i
 = 0 ; i < 
GROUPSMAX
; i++) {

3460 
x
;

3461 
WIN_t
 *
w
 = &
Wö°k
[
i
];

3462 
p
 = 
	`fmtmk
(
	`N_fmt
(
RC_bad_íåy_fmt
), 
i
+1, 
Rc_«me
);

3465 i‡(2 !
	`fsˇnf
(
Â
, "%3s\tfieldscur=%99s\n"

3466 , 
w
->
rc
.
wö«me
, w->rc.
fõldscur
))

3467 
deÁu…_‹_îr‹
;

3468 #i‡
PFLAGSSIZ
 != 100

3470 #îr‹ 
Hey
, 
fix
 
the
 
above
 
fsˇnf
 'PFLAGSSIZ' 
dïídícy
 !

3473 i‡(3 > 
	`fsˇnf
(
Â
, "\twinflags=%d, sortindx=%d, maxtasks=%d, graph_cpus=%d, graph_mems=%d\n"

3474 , &
w
->
rc
.
wöÊags
, &w->rc.
s‹tödx
, &w->rc.
maxèsks
, &w->rc.
gøph_˝us
, &w->rc.
gøph_mems
))

3475 
deÁu…_‹_îr‹
;

3476 i‡(4 !
	`fsˇnf
(
Â
, "\tsummclr=%d, msgsclr=%d, headclr=%d,Åaskclr=%d\n"

3477 , &
w
->
rc
.
summ˛r
, &w->rc.
msgs˛r


3478 , &
w
->
rc
.
hód˛r
, &w->rc.
èsk˛r
))

3479 
deÁu…_‹_îr‹
;

3481 
Rc
.
id
) {

3483 i‡(
	`c⁄fig_cvt
(
w
))

3484 
deÁu…_‹_îr‹
;

3486 
	`SETw
(
w
, 
Show_JRNUMS
);

3488 
	`sˇt
(
w
->
rc
.
fõldscur
, 
RCF_PLUS_H
);

3490 
w
->
rc
.
gøph_˝us
 = w->rc.
gøph_mems
 = 0;

3492 
Rc
.
summ_msˇÀ
 = Rc.
èsk_msˇÀ
 = 
SK_Kb
;

3494 
	`sˇt
(
w
->
rc
.
fõldscur
, 
RCF_PLUS_J
);

3497 i‡(
	`°æí
(
w
->
rc
.
fõldscur
Ë!(
DEF_FIELDS
) - 1)

3498 
deÁu…_‹_îr‹
;

3499 
x
 = 0; x < 
EU_MAXPFLGS
; ++x)

3500 i‡(
EU_MAXPFLGS
 <
	`FLDgë
(
w
, 
x
))

3501 
deÁu…_‹_îr‹
;

3504 #i‚de‡
USE_X_COLHDR


3505 
	`OFFw
(
w
, 
NOHIFND_xxx
 | 
NOHISEL_xxx
);

3510 i‡(
	`fsˇnf
(
Â
, "Fixed_widest=%d, Summ_mscale=%d, Task_mscale=%d, Zero_suppress=%d\n"

3511 , &
Rc
.
fixed_wide°
, &Rc.
summ_msˇÀ
, &Rc.
èsk_msˇÀ
, &Rc.
zîo_suµªss
))

3514 
åy_ö•e˘_íåõs
:

3517 
i
 = 0, 
In•e˘
.
øw
 = 
	`Æloc_s
("\n");;) {

3518 
	#iT
(
ñemít
Ë
In•e˘
.
èb
[
i
].
	)
element

3519 
size_t
 
Ãaw
 = 
	`°æí
(
In•e˘
.
øw
) +1;

3520 *
s
;

3522 i‡(!
	`fgës
(
fbuf
, (fbuf), 
Â
)) ;

3523 
Ãaw
 +
	`°æí
(
fbuf
) +1;

3524 
In•e˘
.
øw
 = 
	`Æloc_r
(In•e˘.øw, 
Ãaw
);

3525 
	`°rˇt
(
In•e˘
.
øw
, 
fbuf
);

3527 i‡(
fbuf
[0] == '#' || fbuf[0] == '\n') ;

3528 
In•e˘
.
èb
 = 
	`Æloc_r
(In•e˘.èb, (
I_ít
Ë* (
i
 + 1));

3530 i‡(!(
s
 = 
	`°πok
(
fbuf
, "\t\n"))Ë{ 
Rc_que°i⁄s
 = 1; ; }

3531 
	`iT
(
ty≥
Ë
	`Æloc_s
(
s
);

3532 i‡(!(
s
 = 
	`°πok
(
NULL
, "\t\n"))Ë{ 
Rc_que°i⁄s
 = 1; ; }

3533 
	`iT
(
«me
Ë
	`Æloc_s
(
s
);

3534 i‡(!(
s
 = 
	`°πok
(
NULL
, "\t\n"))Ë{ 
Rc_que°i⁄s
 = 1; ; }

3535 
	`iT
(
fmts
Ë
	`Æloc_s
(
s
);

3537 
	`touµî
(
fbuf
[0])) {

3539 
	`iT
(
func
Ë
ö•_do_fûe
;

3542 
	`iT
(
func
Ë
ö•_do_pùe
;

3545 
Rc_que°i⁄s
 = 1;

3549 
	`iT
(
Árg
Ë(
	`°r°r
(iT(
fmts
), "%d")) ? 1 : 0;

3550 
	`iT
(
f°r
Ë
	`Æloc_c
(
FNDBUFSIZ
);

3551 
	`iT
(
Êí
) = 0;

3553 i‡(
Rc_que°i⁄s
 < 0) Rc_questions = 1;

3554 ++
i
;

3555 #unde‡
iT


3558 
In•e˘
.
tŸÆ
 = 
i
;

3559 #i‚de‡
INSP_OFFDEMO


3560 i‡(!
In•e˘
.
tŸÆ
) {

3561 
	#mkS
(
n
Ë
	`N_txt
(
YINSP_demo
 ##Ç ## 
_txt
)

	)

3562 c⁄° *
£ls
[] = { 
	`mkS
(01), mkS(02), mkS(03) };

3563 
In•e˘
.
tŸÆ
 = In•e˘.
demo
 = 
	`MAXTBL
(
£ls
);

3564 
In•e˘
.
èb
 = 
	`Æloc_c
((
I_ít
Ë* In•e˘.
tŸÆ
);

3565 
i
 = 0; i < 
In•e˘
.
tŸÆ
; i++) {

3566 
In•e˘
.
èb
[
i
].
ty≥
 = 
	`Æloc_s
(
	`N_txt
(
YINSP_deqtyp_txt
));

3567 
In•e˘
.
èb
[
i
].
«me
 = 
	`Æloc_s
(
£ls
[i]);

3568 
In•e˘
.
èb
[
i
].
func
 = 
ö•_do_demo
;

3569 
In•e˘
.
èb
[
i
].
fmts
 = 
	`Æloc_s
(
	`N_txt
(
YINSP_deqfmt_txt
));

3570 
In•e˘
.
èb
[
i
].
f°r
 = 
	`Æloc_c
(
FNDBUFSIZ
);

3572 #unde‡
mkS


3575 i‡(
Rc_que°i⁄s
 < 0) {

3576 
p
 = 
	`fmtmk
(
	`N_fmt
(
RC_bad_fûes_fmt
), 
Rc_«me
);

3577 
deÁu…_‹_îr‹
;

3579 
	`f˛o£
(
Â
);

3583 i‡(!
	`gëuid
()Ë
Secuª_mode
 = 0;

3584 i‡(!
Secuª_mode
Ë
Rc
.
dñay_time
 = 
tmp_dñay
;

3587 
deÁu…_‹_îr‹
:

3588 #ifde‡
RCFILE_NOERR


3589 { 
RCF_t
 
rcdef
 = 
DEF_RCFILE
;

3590 
	`f˛o£
(
Â
);

3591 
Rc
 = 
rcdef
;

3592 
i
 = 0 ; i < 
GROUPSMAX
; i++)

3593 
Wö°k
[
i
].
rc
 = 
Rc
.
wö
[i];

3594 
Rc_que°i⁄s
 = 1;

3597 
	`îr‹_exô
(
p
);

3599 
	}
}

3608 
	$∑r£_¨gs
 (**
¨gs
) {

3619 c⁄° 
numbs_°r
[] = "+,-.0123456789";

3620 
tmp_dñay
 = 
FLT_MAX
;

3621 
i
;

3623 *
¨gs
) {

3624 c⁄° *
˝
 = *(
¨gs
++);

3626 *
˝
) {

3627 
ch
;

3628 
tmp
;

3630 (
ch
 = *
˝
)) {

3634 i‡(
˝
[1]) ++cp;

3635 i‡(*
¨gs
Ë
˝
 = *args++;

3636 i‡(
	`°r•n
(
˝
, "+,-."))

3637 
	`îr‹_exô
(
	`fmtmk
(
	`N_fmt
(
WRONG_swôch_fmt
)

3638 , 
˝
, 
My«me
, 
	`N_txt
(
USAGE_abbªv_txt
)));

3641 i‡(
	`CHKw
(
Curwö
, 
Võw_CPUNOD
)Ë
	`OFFw
(Curwö, 
Võw_CPUSUM
);

3642 
	`TOGw
(
Curwö
, 
Võw_CPUSUM
);

3643 
	`OFFw
(
Curwö
, 
Võw_CPUNOD
);

3644 
	`SETw
(
Curwö
, 
Võw_STATES
);

3645 
bump_˝
;

3647 
B©ch
 = 1;

3648 
bump_˝
;

3650 
	`TOGw
(
Curwö
, 
Show_CMDLIN
);

3651 
bump_˝
;

3653 i‡(
˝
[1]) ++cp;

3654 i‡(*
¨gs
Ë
˝
 = *args++;

3655 
	`îr‹_exô
(
	`fmtmk
(
	`N_fmt
(
MISSING_¨gs_fmt
), 
ch
));

3656 i‡(!
	`mkÊﬂt
(
˝
, &
tmp_dñay
, 0))

3657 
	`îr‹_exô
(
	`fmtmk
(
	`N_fmt
(
BAD_dñayöt_fmt
), 
˝
));

3658 i‡(0 > 
tmp_dñay
)

3659 
	`îr‹_exô
(
	`N_txt
(
DELAY_bad¨g_txt
));

3662 { c⁄° *
gë
 = "kmgçe", *
gŸ
;

3663 i‡(
˝
[1]) cp++;

3664 i‡(*
¨gs
Ë
˝
 = *args++;

3665 
	`îr‹_exô
(
	`fmtmk
(
	`N_fmt
(
MISSING_¨gs_fmt
), 
ch
));

3666 i‡(!(
gŸ
 = 
	`°rchr
(
gë
, 
	`tﬁowî
(*
˝
))))

3667 
	`îr‹_exô
(
	`fmtmk
(
	`N_fmt
(
BAD_memsˇÀ_fmt
), *
˝
));

3668 
Rc
.
summ_msˇÀ
 = ()(
gŸ
 - 
gë
);

3669 } 
bump_˝
;

3671 
Thªad_mode
 = 1;

3672 
bump_˝
;

3675 
	`puts
(
	`fmtmk
(
	`N_fmt
(
HELP_cmdlöe_fmt
)

3676 , 
PACKAGE_STRING
, 
My«me
, 
	`N_txt
(
USAGE_abbªv_txt
)));

3677 
	`bye_bye
(
NULL
);

3679 
	`TOGw
(
Curwö
, 
Show_IDLEPS
);

3680 
Curwö
->
rc
.
maxèsks
 = 0;

3681 
bump_˝
;

3683 i‡(
˝
[1]) cp++;

3684 i‡(*
¨gs
Ë
˝
 = *args++;

3685 
	`îr‹_exô
(
	`fmtmk
(
	`N_fmt
(
MISSING_¨gs_fmt
), 
ch
));

3686 i‡(!
	`mkÊﬂt
(
˝
, &
tmp
, 1) || 1.0 >Åmp)

3687 
	`îr‹_exô
(
	`fmtmk
(
	`N_fmt
(
BAD_nôî©e_fmt
), 
˝
));

3688 
Lo›s
 = ()
tmp
;

3691 i‡(
˝
[1]) cp++;

3692 i‡(*
¨gs
Ë
˝
 = *args++;

3693 
	`îr‹_exô
(
	`fmtmk
(
	`N_fmt
(
MISSING_¨gs_fmt
), 
ch
));

3694 i‡(*
˝
 ='+'Ë{ 
	`SETw
(
Curwö
, 
Q§t_NORMAL
); ++cp; }

3695 i‡(*
˝
 ='-'Ë{ 
	`OFFw
(
Curwö
, 
Q§t_NORMAL
); ++cp; }

3696 
i
 = 0; i < 
EU_MAXPFLGS
; i++)

3697 i‡(!
	`STRCMP
(
˝
, 
	`N_cﬁ
(
i
))) ;

3698 i‡(
i
 =
EU_MAXPFLGS
)

3699 
	`îr‹_exô
(
	`fmtmk
(
	`N_fmt
(
XTRA_badÊds_fmt
), 
˝
));

3700 
	`OFFw
(
Curwö
, 
Show_FOREST
);

3701 
Curwö
->
rc
.
s‹tödx
 = 
i
;

3702 
˝
 +
	`°æí
(cp);

3705 
i
 = 0; i < 
EU_MAXPFLGS
; i++)

3706 
	`puts
(
	`N_cﬁ
(
i
));

3707 
	`bye_bye
(
NULL
);

3709 { 
pid
; *
p
;

3710 i‡(
Curwö
->
u§£…yp
Ë
	`îr‹_exô
(
	`N_txt
(
SELECT_˛ash_txt
));

3712 i‡(
˝
[1]) cp++;

3713 i‡(*
¨gs
Ë
˝
 = *args++;

3714 
	`îr‹_exô
(
	`fmtmk
(
	`N_fmt
(
MISSING_¨gs_fmt
), 
ch
));

3715 i‡(
M⁄pidsidx
 >
MONPIDMAX
)

3716 
	`îr‹_exô
(
	`fmtmk
(
	`N_fmt
(
LIMIT_ex˚ed_fmt
), 
MONPIDMAX
));

3717 i‡(1 !
	`ssˇnf
(
˝
, "%d", &
pid
)

3718 || 
	`°Ωbrk
(
˝
, "+-."))

3719 
	`îr‹_exô
(
	`fmtmk
(
	`N_fmt
(
BAD_m⁄_pids_fmt
), 
˝
));

3720 i‡(!
pid
Ëpid = 
	`gëpid
();

3721 
i
 = 0; i < 
M⁄pidsidx
; i++)

3722 i‡(
M⁄pids
[
i
] =
pid
Ë
√xt_pid
;

3723 
M⁄pids
[
M⁄pidsidx
++] = 
pid
;

3724 
√xt_pid
:

3725 i‡(!(
p
 = 
	`°rchr
(
˝
, ','))) ;

3726 
˝
 = 
p
;

3727 } *
˝
);

3730 
Secuª_mode
 = 1;

3731 
bump_˝
;

3733 
	`TOGw
(
Curwö
, 
Show_CTIMES
);

3734 
bump_˝
;

3737 { c⁄° *
îrmsg
;

3738 i‡(
M⁄pidsidx
 || 
Curwö
->
u§£…yp
Ë
	`îr‹_exô
(
	`N_txt
(
SELECT_˛ash_txt
));

3739 i‡(
˝
[1]) cp++;

3740 i‡(*
¨gs
Ë
˝
 = *args++;

3741 
	`îr‹_exô
(
	`fmtmk
(
	`N_fmt
(
MISSING_¨gs_fmt
), 
ch
));

3742 i‡((
îrmsg
 = 
	`u£r_˚πify
(
Curwö
, 
˝
, 
ch
))Ë
	`îr‹_exô
(errmsg);

3743 
˝
 +
	`°æí
(cp);

3746 { c⁄° *
≤
 = 
NULL
;

3747 
ai
 = 0, 
ci
 = 0;

3748 
tmp
 = -1;

3749 i‡(
˝
[1]Ë
≤
 = &cp[1];

3750 i‡(*
¨gs
Ë{ 
≤
 = *¨gs; 
ai
 = 1; }

3751 i‡(
≤
 && !(
ci
 = 
	`°r•n
’n, 
numbs_°r
))Ë{ 
ai
 = 0;Ö¿
NULL
; }

3752 i‡(
≤
 && (!
	`mkÊﬂt
’n, &
tmp
, 1Ë||Åm∞< 
W_MIN_COL
))

3753 
	`îr‹_exô
(
	`fmtmk
(
	`N_fmt
(
BAD_width¨g_fmt
), 
≤
));

3754 
Width_mode
 = ()
tmp
;

3755 
˝
++;

3756 
¨gs
 +
ai
;

3757 i‡(
≤
Ë
˝
 =Ö¿+ 
ci
;

3760 
	`îr‹_exô
(
	`fmtmk
(
	`N_fmt
(
UNKNOWN_›ts_fmt
)

3761 , *
˝
, 
My«me
, 
	`N_txt
(
USAGE_abbªv_txt
)));

3765 i‡(*
˝
Ë˝ +
	`°r•n
(&˝[1], 
numbs_°r
);

3766 
bump_˝
:

3767 i‡(*
˝
) ++cp;

3772 i‡(
FLT_MAX
 > 
tmp_dñay
) {

3773 i‡(
Secuª_mode
)

3774 
	`îr‹_exô
(
	`N_txt
(
DELAY_£cuª_txt
));

3775 
Rc
.
dñay_time
 = 
tmp_dñay
;

3777 
	}
}

3782 
	$whack_ãrmöÆ
 () {

3783 
dummy
[] = "dumb";

3784 
ãrmios
 
tm±ty
;

3787 i‡(
B©ch
) {

3788 
	`£tu±îm
(
dummy
, 
STDOUT_FILENO
, 
NULL
);

3791 #ifde‡
PRETENDNOCAP


3792 
	`£tu±îm
(
dummy
, 
STDOUT_FILENO
, 
NULL
);

3794 
	`£tu±îm
(
NULL
, 
STDOUT_FILENO
, NULL);

3797 i‡(-1 =
	`tcgë©å
(
STDIN_FILENO
, &
Tty_‹igöÆ
))

3798 
	`îr‹_exô
(
	`N_txt
(
FAIL_ây_gë_txt
));

3800 
Ttych™ged
 = 1;

3803 
tm±ty
 = 
Tty_‹igöÆ
;

3804 
tm±ty
.
c_lÊag
 |(
ECHO
 | 
ECHOCTL
 | 
ECHOE
 | 
ICANON
 | 
ISIG
);

3805 
tm±ty
.
c_lÊag
 &~
NOFLSH
;

3806 
tm±ty
.
c_oÊag
 &~
TAB3
;

3807 
tm±ty
.
c_iÊag
 |
BRKINT
;

3808 
tm±ty
.
c_iÊag
 &~
IGNBRK
;

3809 i‡(
key_back•a˚
 && 1 =
	`°æí
(key_backspace))

3810 
tm±ty
.
c_cc
[
VERASE
] = *
key_back•a˚
;

3811 #ifde‡
TERMIOS_ONLY


3812 i‡(-1 =
	`tc£èâr
(
STDIN_FILENO
, 
TCSAFLUSH
, &
tm±ty
))

3813 
	`îr‹_exô
(
	`fmtmk
(
	`N_fmt
(
FAIL_ây_£t_fmt
), 
	`°ªº‹
(
î∫o
)));

3814 
	`tcgë©å
(
STDIN_FILENO
, &
Tty_twóked
);

3817 
tm±ty
.
c_lÊag
 &~(
ECHO
 | 
ECHOCTL
 | 
ECHOE
 | 
ICANON
);

3818 
tm±ty
.
c_cc
[
VMIN
] = 1;

3819 
tm±ty
.
c_cc
[
VTIME
] = 0;

3820 i‡(-1 =
	`tc£èâr
(
STDIN_FILENO
, 
TCSAFLUSH
, &
tm±ty
))

3821 
	`îr‹_exô
(
	`fmtmk
(
	`N_fmt
(
FAIL_ây_£t_fmt
), 
	`°ªº‹
(
î∫o
)));

3822 
	`tcgë©å
(
STDIN_FILENO
, &
Tty_øw
);

3824 #i‚de‡
OFF_STDIOLBF


3826 
	`£tbuf„r
(
°dout
, 
Stdout_buf
, (Stdout_buf));

3828 #ifde‡
OFF_SCROLLBK


3830 i‡(
íãr_ˇ_mode
Ë
	`puç
(enter_ca_mode);

3833 
	`iokey
(0);

3834 
	}
}

3840 
	$wö_«mes
 (
WIN_t
 *
q
, c⁄° *
«me
) {

3843 i‡(
q
->
rc
.
wö«me
 !
«me
)

3844 
	`¢¥ötf
(
q
->
rc
.
wö«me
, (q->rc.wö«me), "%s", 
«me
);

3845 
	`¢¥ötf
(
q
->
gΩ«me
, (q->gΩ«me), "%d:%s", q->
wönum
, 
«me
);

3846 
	}
}

3852 
	$wö_ª£t
 (
WIN_t
 *
q
) {

3853 
	`SETw
(
q
, 
Show_IDLEPS
 | 
Show_TASKON
);

3854 #i‚de‡
SCROLLVAR_NO


3855 
q
->
rc
.
maxèsks
 = q->
u§£…yp
 = q->
begpÊg
 = q->
begèsk
 = q->
v¨cﬁbeg
 = 0;

3857 
q
->
rc
.
maxèsks
 = q->
u§£…yp
 = q->
begpÊg
 = q->
begèsk
 = 0;

3859 
M⁄pidsidx
 = 0;

3860 
	`o£l_˛ór
(
q
);

3861 
q
->
föd°r
[0] = '\0';

3862 #i‚de‡
USE_X_COLHDR


3864 
	`OFFw
(
q
, 
NOHIFND_xxx
 | 
NOHISEL_xxx
);

3866 
	}
}

3871 
WIN_t
 *
	$wö_£À˘
 (
ch
) {

3872 
WIN_t
 *
w
 = 
Curwö
;

3876 i‡(!
ch
) {

3877 
	`show_pmt
(
	`N_txt
(
CHOOSE_group_txt
));

3878 i‡(1 > (
ch
 = 
	`iokey
(1))Ë 
w
;

3880 
ch
) {

3882 
w
 = w->
√xt
;

3885 
w
 = w->
¥ev
;

3888 
w
 = &
Wö°k
[
ch
 - '1'];

3893  
Curwö
 = 
w
;

3894 
	}
}

3899 
	$wö_w¨n
 (
wh©
) {

3900 
wh©
) {

3901 
W¨n_ALT
:

3902 
	`show_msg
(
	`N_txt
(
DISABLED_cmd_txt
));

3904 
W¨n_VIZ
:

3905 
	`show_msg
(
	`fmtmk
(
	`N_fmt
(
DISABLED_wö_fmt
), 
Curwö
->
gΩ«me
));

3913 
	}
}

3919 
	$wös_˛rhÕ
 (
WIN_t
 *
q
, 
ßve
) {

3920 
Êgsßv
, 
summßv
, 
msgsßv
, 
hódßv
, 
èskßv
;

3922 i‡(
ßve
) {

3923 
Êgsßv
 = 
q
->
rc
.
wöÊags
; 
summßv
 = q->rc.
summ˛r
;

3924 
msgsßv
 = 
q
->
rc
.
msgs˛r
; 
hódßv
 = q->rc.
hód˛r
; 
èskßv
 = q->rc.
èsk˛r
;

3925 
	`SETw
(
q
, 
Show_COLORS
);

3927 
q
->
rc
.
wöÊags
 = 
Êgsßv
; q->rc.
summ˛r
 = 
summßv
;

3928 
q
->
rc
.
msgs˛r
 = 
msgsßv
; q->rc.
hód˛r
 = 
hódßv
; q->rc.
èsk˛r
 = 
èskßv
;

3930 
	`ˇpsmk
(
q
);

3931 
	}
}

3936 
	$wös_cﬁ‹s
 () {

3937 
	#kbdABORT
 'q'

	)

3938 
	#kbdAPPLY
 
kbd_ENTER


	)

3939 
WIN_t
 *
w
 = 
Curwö
;

3940 
˛r
 = 
w
->
rc
.
èsk˛r
, *
p˛r
 = &w->rc.taskclr;

3941 
tgt
 = 'T';

3942 
key
;

3944 i‡(0 >
max_cﬁ‹s
) {

3945 
	`show_msg
(
	`N_txt
(
COLORS_nom≠_txt
));

3948 
	`wös_˛rhÕ
(
w
, 1);

3949 
	`puç
((
Curs‹_°©e
 = 
C≠_curs_huge
));

3950 
signify_th©
:

3951 
	`puç
(
C≠_˛r_s¸
);

3952 
	`adj_geomëry
();

3955 
	`puç
(
C≠_home
);

3957 
	`show_•ecül
(1, 
	`fmtmk
(
	`N_unq
(
COLOR_cu°om_fmt
)

3958 , 
PACKAGE_STRING
, 
w
->
gΩ«me


3959 , 
	`CHKw
(
w
, 
Võw_NOBOLD
Ë? 
	`N_txt
(
ON_w‹d_⁄ly_txt
Ë: N_txt(
OFF_⁄e_w‹d_txt
)

3960 , 
	`CHKw
(
w
, 
Show_COLORS
Ë? 
	`N_txt
(
ON_w‹d_⁄ly_txt
Ë: N_txt(
OFF_⁄e_w‹d_txt
)

3961 , 
	`CHKw
(
w
, 
Show_HIBOLD
Ë? 
	`N_txt
(
ON_w‹d_⁄ly_txt
Ë: N_txt(
OFF_⁄e_w‹d_txt
)

3962 , 
tgt
, 
˛r
, 
w
->
gΩ«me
));

3963 
	`puç
(
C≠_˛r_eos
);

3964 
	`fÊush
(
°dout
);

3966 i‡(
Fømes_sig«l
Ë
signify_th©
;

3967 
key
 = 
	`iokey
(1);

3968 i‡(
key
 < 1Ë
signify_th©
;

3970 
key
) {

3972 
p˛r
 = &
w
->
rc
.
summ˛r
;

3973 
˛r
 = *
p˛r
;

3974 
tgt
 = 
key
;

3977 
p˛r
 = &
w
->
rc
.
msgs˛r
;

3978 
˛r
 = *
p˛r
;

3979 
tgt
 = 
key
;

3982 
p˛r
 = &
w
->
rc
.
hód˛r
;

3983 
˛r
 = *
p˛r
;

3984 
tgt
 = 
key
;

3987 
p˛r
 = &
w
->
rc
.
èsk˛r
;

3988 
˛r
 = *
p˛r
;

3989 
tgt
 = 
key
;

3993 
˛r
 = 
key
 - '0';

3994 *
p˛r
 = 
˛r
;

3997 
	`TOGw
(
w
, 
Võw_NOBOLD
);

4000 
	`TOGw
(
w
, 
Show_HIBOLD
);

4003 
	`TOGw
(
w
, 
Show_COLORS
);

4007 
	`wös_˛rhÕ
((
w
 = 
	`wö_£À˘
(
key
)), 1);

4008 
˛r
 = 
w
->
rc
.
èsk˛r
, 
p˛r
 = &w->rc.taskclr;

4009 
tgt
 = 'T';

4014 
	`ˇpsmk
(
w
);

4015 } 
key
 !
kbdAPPLY
 && key !
kbdABORT
);

4017 i‡(
key
 =
kbdABORT
Ë
	`wös_˛rhÕ
(
w
, 0);

4019 #unde‡
kbdABORT


4020 #unde‡
kbdAPPLY


4021 
	}
}

4026 
	$wös_ªÊag
 (
wh©
, 
Êg
) {

4027 
WIN_t
 *
w
 = 
Curwö
;

4030 
wh©
) {

4031 
Fœgs_TOG
:

4032 
	`TOGw
(
w
, 
Êg
);

4034 
Fœgs_SET
:

4035 
	`SETw
(
w
, 
Êg
);

4037 
Fœgs_OFF
:

4038 
	`OFFw
(
w
, 
Êg
);

4045 i‡(
EQUWINS_xxx
 =
Êg
)

4046 
	`wö_ª£t
(
w
);

4048 
w
 = w->
√xt
;

4049 } 
w
 !
Curwö
);

4050 
	}
}

4058 
	$wös_°age_1
 () {

4059 
WIN_t
 *
w
;

4060 
i
;

4062 
i
 = 0; i < 
GROUPSMAX
; i++) {

4063 
w
 = &
Wö°k
[
i
];

4064 
w
->
wönum
 = 
i
 + 1;

4065 
w
->
rc
 = 
Rc
.
wö
[
i
];

4066 
w
->
ˇ±ab
[0] = 
C≠_n‹m
;

4067 
w
->
ˇ±ab
[1] = 
C≠_n‹m
;

4068 
w
->
ˇ±ab
[2] = w->
ˇp_bﬁd
;

4069 
w
->
ˇ±ab
[3] = w->
ˇp˛r_sum
;

4070 
w
->
ˇ±ab
[4] = w->
ˇp˛r_msg
;

4071 
w
->
ˇ±ab
[5] = w->
ˇp˛r_pmt
;

4072 
w
->
ˇ±ab
[6] = w->
ˇp˛r_hdr
;

4073 
w
->
ˇ±ab
[7] = w->
ˇp˛r_rowhigh
;

4074 
w
->
ˇ±ab
[8] = w->
ˇp˛r_rown‹m
;

4075 
w
->
√xt
 = w + 1;

4076 
w
->
¥ev
 = w - 1;

4080 
Wö°k
[
GROUPSMAX
 - 1].
√xt
 = &Winstk[0];

4081 
Wö°k
[0].
¥ev
 = &Wö°k[
GROUPSMAX
 - 1];

4082 
Curwö
 = 
Wö°k
;

4083 
	}
}

4091 
	$wös_°age_2
 () {

4092 
i
;

4094 
i
 = 0; i < 
GROUPSMAX
; i++) {

4095 
	`wö_«mes
(&
Wö°k
[
i
], Wö°k[i].
rc
.
wö«me
);

4096 
	`ˇpsmk
(&
Wö°k
[
i
]);

4097 
Wö°k
[
i
].
föd°r
 = 
	`Æloc_c
(
FNDBUFSIZ
);

4098 
Wö°k
[
i
].
födÀn
 = 0;

4100 i‡(!
B©ch
)

4101 
	`puç
((
Curs‹_°©e
 = 
C≠_curs_hide
));

4103 
	`OFFw
(
Curwö
, 
Võw_SCROLL
);

4104 
	`sig«l
(
SIGHUP
, 
SIG_IGN
);

4107 
	`z≠_fõld°ab
();

4109 #i‚de‡
OFF_STDERROR


4115 
Stdîr_ßve
 = 
	`dup
(
	`fûío
(
°dîr
));

4116 i‡(-1 < 
Stdîr_ßve
 && 
	`‰e›í
("/dev/nuŒ", "w", 
°dîr
))

4121 
	`sigem±y£t
(&
Sigwöch_£t
);

4122 #ifde‡
SIGNALS_LESS


4123 
	`sigadd£t
(&
Sigwöch_£t
, 
SIGWINCH
);

4125 
	}
}

4140 
ölöe
 
	$föd_ofs
 (c⁄° 
WIN_t
 *
q
, c⁄° *
buf
) {

4141 *
‚d
;

4143 i‡(
q
->
föd°r
[0] && (
‚d
 = 
	`STRSTR
(
buf
, q->findstr)))

4144  ()(
‚d
 - 
buf
);

4146 
	}
}

4153 c⁄° *
èsk_show
 (c⁄° 
WIN_t
 *
q
, c⁄° 
¥oc_t
 *
p
);

4155 
	$föd_°rög
 (
ch
) {

4156 
	#ªDUX
 (
found
Ë? 
	`N_txt
(
WORD_™Ÿhî_txt
Ë: ""

	)

4157 
found
;

4158 
i
;

4160 i‡('&' =
ch
 && !
Curwö
->
föd°r
[0]) {

4161 
	`show_msg
(
	`N_txt
(
FIND_no_√xt_txt
));

4164 i‡('L' =
ch
) {

4165 *
°r
 = 
	`iﬁöe
(
	`N_txt
(
GET_föd_°r_txt
));

4166 i‡(*
°r
 =
kbd_ESC
) ;

4167 
	`¢¥ötf
(
Curwö
->
föd°r
, 
FNDBUFSIZ
, "%s", 
°r
);

4168 
Curwö
->
födÀn
 = 
	`°æí
(Curwö->
föd°r
);

4169 
found
 = 0;

4170 #i‚de‡
USE_X_COLHDR


4171 i‡(
Curwö
->
föd°r
[0]Ë
	`SETw
(Curwö, 
NOHIFND_xxx
);

4172 
	`OFFw
(
Curwö
, 
NOHIFND_xxx
);

4175 i‡(
Curwö
->
föd°r
[0]) {

4176 
	`SETw
(
Curwö
, 
INFINDS_xxx
);

4177 
i
 = 
Curwö
->
begèsk
; i < 
Føme_maxèsk
; i++) {

4178 c⁄° *
row
 = 
	`èsk_show
(
Curwö
, Curwö->
µt
[
i
]);

4179 i‡(*
row
 && -1 < 
	`föd_ofs
(
Curwö
,Ñow)) {

4180 
found
 = 1;

4181 i‡(
i
 =
Curwö
->
begèsk
) ;

4182 
Curwö
->
begèsk
 = 
i
;

4186 
	`show_msg
(
	`fmtmk
(
	`N_fmt
(
FIND_no_föd_fmt
), 
ªDUX
, 
Curwö
->
föd°r
));

4188 #unde‡
ªDUX


4189 
	}
}

4192 
	$hñp_võw
 () {

4193 
WIN_t
 *
w
 = 
Curwö
;

4194 
key
 = 1;

4196 
	`puç
((
Curs‹_°©e
 = 
C≠_curs_huge
));

4197 
signify_th©
:

4198 
	`puç
(
C≠_˛r_s¸
);

4199 
	`adj_geomëry
();

4201 
	`show_•ecül
(1, 
	`fmtmk
(
	`N_unq
(
KEYS_hñpbas_fmt
)

4202 , 
PACKAGE_STRING


4203 , 
w
->
gΩ«me


4204 , 
	`CHKw
(
w
, 
Show_CTIMES
Ë? 
	`N_txt
(
ON_w‹d_⁄ly_txt
Ë: N_txt(
OFF_⁄e_w‹d_txt
)

4205 , 
Rc
.
dñay_time


4206 , 
Secuª_mode
 ? 
	`N_txt
(
ON_w‹d_⁄ly_txt
Ë: N_txt(
OFF_⁄e_w‹d_txt
)

4207 , 
Secuª_mode
 ? "" : 
	`N_unq
(
KEYS_hñ≥xt_fmt
)));

4208 
	`puç
(
C≠_˛r_eos
);

4209 
	`fÊush
(
°dout
);

4211 i‡(
Fømes_sig«l
Ë
signify_th©
;

4212 
key
 = 
	`iokey
(1);

4213 i‡(
key
 < 1Ë
signify_th©
;

4215 
key
) {

4216 
kbd_ESC
: 'q':

4220 
	`puç
(
C≠_home
);

4221 
	`show_•ecül
(1, 
	`fmtmk
(
	`N_unq
(
WINDOWS_hñp_fmt
)

4222 , 
w
->
gΩ«me


4223 , 
Wö°k
[0].
rc
.
wö«me
, Winstk[1].rc.winname

4224 , 
Wö°k
[2].
rc
.
wö«me
, Winstk[3].rc.winname));

4225 
	`puç
(
C≠_˛r_eos
);

4226 
	`fÊush
(
°dout
);

4227 i‡(
Fømes_sig«l
 || (
key
 = 
	`iokey
(1)) < 1) {

4228 
	`adj_geomëry
();

4229 
	`puç
(
C≠_˛r_s¸
);

4230 } 
w
 = 
	`wö_£À˘
(
key
);

4231 } 
key
 !
kbd_ENTER
 && key !
kbd_ESC
);

4234 
signify_th©
;

4236 
	}
}

4239 
	$Ÿhî_£À˘i⁄
 (
ch
) {

4240 (*
ªl
)(const *, const *);

4241 *(*
£l
)(const *, const *);

4242 
øw
[
MEDBUFSIZ
], 
›s
, *
glob
, *
pvÆ
;

4243 
o£l_s
 *
o£l
;

4244 c⁄° *
typ
;

4245 
öc
, 
íu
;

4247 i‡(
ch
 == 'o') {

4248 
typ
 = 
	`N_txt
(
OSEL_ˇ£nŸ_txt
);

4249 
ªl
 = 
°rˇ£cmp
;

4250 
£l
 = 
°rˇ£°r
;

4252 
typ
 = 
	`N_txt
(
OSEL_ˇ£yes_txt
);

4253 
ªl
 = 
°rcmp
;

4254 
£l
 = 
°r°r
;

4256 
glob
 = 
	`iﬁöe
(
	`fmtmk
(
	`N_fmt
(
OSEL_¥om±s_fmt
), 
Curwö
->
o£l_tŸ
 + 1, 
typ
));

4257 i‡(*
glob
 =
kbd_ESC


4258 || !
	`¢¥ötf
(
øw
, ‘aw), "%s", 
glob
))

4260 
o£l
 = 
Curwö
->
o£l_1°
; osel; ) {

4261 i‡(!
	`°rcmp
(
o£l
->
øw
, 
glob
)) {

4262 
	`show_msg
(
	`N_txt
(
OSEL_îrdups_txt
));

4265 
o£l
 = o£l->
nxt
;

4267 i‡(*
glob
 !'!'Ë
öc
 = 1;

4268 { ++
glob
; 
öc
 = 0; }

4269 i‡(!(
pvÆ
 = 
	`°Ωbrk
(
glob
, "<=>"))) {

4270 
	`show_msg
(
	`fmtmk
(
	`N_fmt
(
OSEL_îrdñm_fmt
)

4271 , 
öc
 ? 
	`N_txt
(
WORD_ö˛ude_txt
Ë: N_txt(
WORD_ex˛ude_txt
)));

4274 
›s
 = *(
pvÆ
);

4275 *(
pvÆ
++) = '\0';

4276 
íu
 = 0;Énu < 
EU_MAXPFLGS
;Énu++)

4277 i‡(!
	`STRCMP
(
	`N_cﬁ
(
íu
), 
glob
)) ;

4278 i‡(
íu
 =
EU_MAXPFLGS
) {

4279 
	`show_msg
(
	`fmtmk
(
	`N_fmt
(
XTRA_badÊds_fmt
), 
glob
));

4282 i‡(!(*
pvÆ
)) {

4283 
	`show_msg
(
	`fmtmk
(
	`N_fmt
(
OSEL_îrvÆu_fmt
)

4284 , 
öc
 ? 
	`N_txt
(
WORD_ö˛ude_txt
Ë: N_txt(
WORD_ex˛ude_txt
)));

4287 
o£l
 = 
	`Æloc_c
((
o£l_s
));

4288 
o£l
->
öc
 = inc;

4289 
o£l
->
íu
 =Énu;

4290 
o£l
->
›s
 = ops;

4291 i‡(
›s
 ='='Ë
o£l
->
vÆ
 = 
	`Æloc_s
(
pvÆ
);

4292 
o£l
->
vÆ
 = 
	`Æloc_s
(
	`ju°ify_∑d
(
pvÆ
, 
Fõld°ab
[
íu
].
width
, Fõld°ab[íu].
Æign
));

4293 
o£l
->
ªl
 =Ñel;

4294 
o£l
->
£l
 = sel;

4295 
o£l
->
øw
 = 
	`Æloc_s
(raw);

4296 
o£l
->
nxt
 = 
Curwö
->
o£l_1°
;

4297 
Curwö
->
o£l_1°
 = 
o£l
;

4298 
Curwö
->
o£l_tŸ
 += 1;

4299 i‡(!
Curwö
->
o£l_¥t
ËCurwö->o£l_¥à
	`Æloc_c
(
	`°æí
(
øw
) + 3);

4300 
Curwö
->
o£l_¥t
 = 
	`Æloc_r
(Curwö->o£l_¥t, 
	`°æí
(Curwö->o£l_¥tË+ såÀn(
øw
) + 6);

4301 
	`°rˇt
(
Curwö
->
o£l_¥t
, 
	`fmtmk
("%s'%s'", (Curwö->
o£l_tŸ
 > 1Ë? " + " : "", 
øw
));

4302 #i‚de‡
USE_X_COLHDR


4303 
	`SETw
(
Curwö
, 
NOHISEL_xxx
);

4305 
	}
}

4308 
	$wrôe_rcfûe
 () {

4309 
FILE
 *
Â
;

4310 
i
;

4312 i‡(
Rc_que°i⁄s
) {

4313 
	`show_pmt
(
	`N_txt
(
XTRA_w¨ncfg_txt
));

4314 i‡('y' !
	`tﬁowî
(
	`iokey
(1)))

4316 
Rc_que°i⁄s
 = 0;

4318 i‡(!(
Â
 = 
	`f›í
(
Rc_«me
, "w"))) {

4319 
	`show_msg
(
	`fmtmk
(
	`N_fmt
(
FAIL_rc_›í_fmt
), 
Rc_«me
, 
	`°ªº‹
(
î∫o
)));

4322 
	`Ârötf
(
Â
, "%s'†" 
RCF_EYECATCHER
, 
My«me
);

4323 
	`Ârötf
(
Â
, "Id:%c, Mode_altscr=%d, Mode_irixps=%d, Delay_time=%d.%d, Curwin=%d\n"

4324 , 
RCF_VERSION_ID


4325 , 
Rc
.
mode_Æts¸
, Rc.
mode_úixps


4327 , ()
Rc
.
dñay_time
, ()((Rc.delay_time - ()Rc.delay_time) * 1000)

4328 , ()(
Curwö
 - 
Wö°k
));

4330 
i
 = 0 ; i < 
GROUPSMAX
; i++) {

4331 
	`Ârötf
(
Â
, "%s\tfieldscur=%s\n"

4332 , 
Wö°k
[
i
].
rc
.
wö«me
, Wö°k[i].rc.
fõldscur
);

4333 
	`Ârötf
(
Â
, "\twinflags=%d, sortindx=%d, maxtasks=%d, graph_cpus=%d, graph_mems=%d\n"

4334 , 
Wö°k
[
i
].
rc
.
wöÊags
, Wö°k[i].rc.
s‹tödx
, Wö°k[i].rc.
maxèsks


4335 , 
Wö°k
[
i
].
rc
.
gøph_˝us
, Wö°k[i].rc.
gøph_mems
);

4336 
	`Ârötf
(
Â
, "\tsummclr=%d, msgsclr=%d, headclr=%d,Åaskclr=%d\n"

4337 , 
Wö°k
[
i
].
rc
.
summ˛r
, Wö°k[i].rc.
msgs˛r


4338 , 
Wö°k
[
i
].
rc
.
hód˛r
, Wö°k[i].rc.
èsk˛r
);

4342 
	`Ârötf
(
Â
, "Fixed_widest=%d, Summ_mscale=%d, Task_mscale=%d, Zero_suppress=%d\n"

4343 , 
Rc
.
fixed_wide°
, Rc.
summ_msˇÀ
, Rc.
èsk_msˇÀ
, Rc.
zîo_suµªss
);

4345 i‡(
In•e˘
.
øw
)

4346 
	`Âuts
(
In•e˘
.
øw
, 
Â
);

4348 
	`f˛o£
(
Â
);

4349 
	`show_msg
(
	`fmtmk
(
	`N_fmt
(
WRITE_rcfûe_fmt
), 
Rc_«me
));

4350 
	}
}

4358 
	$keys_globÆ
 (
ch
) {

4359 
WIN_t
 *
w
 = 
Curwö
;

4361 
ch
) {

4364 
	`hñp_võw
();

4367 
	`TOGw
(
w
, 
Võw_NOBOLD
);

4368 
	`ˇpsmk
(
w
);

4372 i‡(
Secuª_mode
)

4373 
	`show_msg
(
	`N_txt
(
NOT_⁄£cuª_txt
));

4375 
tmp
 =

4376 
	`gë_Êﬂt
(
	`fmtmk
(
	`N_fmt
(
DELAY_ch™ge_fmt
), 
Rc
.
dñay_time
));

4377 i‡(
tmp
 > -1Ë
Rc
.
dñay_time
 =Åmp;

4381 i‡(++
Rc
.
summ_msˇÀ
 > 
SK_Eb
ËRc.summ_msˇÀ = 
SK_Kb
;

4384 i‡(++
Rc
.
èsk_msˇÀ
 > 
SK_Pb
ËRc.èsk_msˇÀ = 
SK_Kb
;

4388 
	`fõlds_utûôy
();

4391 
	`wö_£À˘
(0);

4394 
Thªad_mode
 = !Thread_mode;

4395 i‡(!
	`CHKw
(
w
, 
Võw_STATES
))

4396 
	`show_msg
(
	`fmtmk
(
	`N_fmt
(
THREADS_show_fmt
)

4397 , 
Thªad_mode
 ? 
	`N_txt
(
ON_w‹d_⁄ly_txt
Ë: N_txt(
OFF_⁄e_w‹d_txt
)));

4399 
P£udo_row
 = 
PROC_XTRA
;

4402 i‡(
Cpu_Áux_tŸ
 > 1) {

4403 
Rc
.
mode_úixps
 = !Rc.mode_irixps;

4404 
	`show_msg
(
	`fmtmk
(
	`N_fmt
(
IRIX_curmode_fmt
)

4405 , 
Rc
.
mode_úixps
 ? 
	`N_txt
(
ON_w‹d_⁄ly_txt
Ë: N_txt(
OFF_⁄e_w‹d_txt
)));

4407 
	`show_msg
(
	`N_txt
(
NOT_smp_˝us_txt
));

4410 i‡(
Secuª_mode
) {

4411 
	`show_msg
(
	`N_txt
(
NOT_⁄£cuª_txt
));

4413 
sig
 = 
SIGTERM
,

4414 
def
 = 
w
->
µt
[w->
begèsk
]->
tid
,

4415 
pid
 = 
	`gë_öt
(
	`fmtmk
(
	`N_txt
(
GET_pid2kûl_fmt
), 
def
));

4416 i‡(
pid
 > 
GET_NUM_ESC
) {

4417 *
°r
;

4418 i‡(
pid
 =
GET_NUM_NOT
Ëpid = 
def
;

4419 
°r
 = 
	`iﬁöe
(
	`fmtmk
(
	`N_fmt
(
GET_sigs_num_fmt
), 
pid
, 
SIGTERM
));

4420 i‡(*
°r
 !
kbd_ESC
) {

4421 i‡(*
°r
Ë
sig
 = 
	`sig«l_«me_to_numbî
(str);

4422 i‡(
Fømes_sig«l
) ;

4423 i‡(0 < 
sig
 && 
	`kûl
(
pid
, sig))

4424 
	`show_msg
(
	`fmtmk
(
	`N_fmt
(
FAIL_sig«ls_fmt
)

4425 , 
pid
, 
sig
, 
	`°ªº‹
(
î∫o
)));

4426 i‡(0 > 
sig
Ë
	`show_msg
(
	`N_txt
(
BAD_sig«lid_txt
));

4432 i‡(
Secuª_mode
)

4433 
	`show_msg
(
	`N_txt
(
NOT_⁄£cuª_txt
));

4435 
vÆ
,

4436 
def
 = 
w
->
µt
[w->
begèsk
]->
tid
,

4437 
pid
 = 
	`gë_öt
(
	`fmtmk
(
	`N_txt
(
GET_pid2ni˚_fmt
), 
def
));

4438 i‡(
pid
 > 
GET_NUM_ESC
) {

4439 i‡(
pid
 =
GET_NUM_NOT
Ëpid = 
def
;

4440 
vÆ
 = 
	`gë_öt
(
	`fmtmk
(
	`N_fmt
(
GET_ni˚_num_fmt
), 
pid
));

4441 i‡(
vÆ
 > 
GET_NUM_NOT


4442 && 
	`£çri‹ôy
(
PRIO_PROCESS
, ()
pid
, 
vÆ
))

4443 
	`show_msg
(
	`fmtmk
(
	`N_fmt
(
FAIL_ª_ni˚_fmt
)

4444 , 
pid
, 
vÆ
, 
	`°ªº‹
(
î∫o
)));

4449 { 
wide
 = 
	`gë_öt
(
	`fmtmk
(
	`N_fmt
(
XTRA_fixwide_fmt
), 
Rc
.
fixed_wide°
));

4450 i‡(
wide
 > 
GET_NUM_NOT
) {

4451 i‡(
wide
 > -1Ë
Rc
.
fixed_wide°
 = wide;

4452 
Rc
.
fixed_wide°
 = -1;

4457 i‡(!
In•e˘
.
tŸÆ
)

4458 
	`iﬁöe
(
	`N_txt
(
YINSP_n€¡s_txt
));

4460 
def
 = 
w
->
µt
[w->
begèsk
]->
tid
,

4461 
pid
 = 
	`gë_öt
(
	`fmtmk
(
	`N_fmt
(
YINSP_pid£e_fmt
), 
def
));

4462 i‡(
pid
 > 
GET_NUM_ESC
) {

4463 i‡(
pid
 =
GET_NUM_NOT
Ëpid = 
def
;

4464 i‡(
pid
Ë
	`ö•e˘i⁄_utûôy
(pid);

4469 
	`wös_cﬁ‹s
();

4472 
Rc
.
zîo_suµªss
 = !Rc.zero_suppress;

4474 
kbd_ENTER
:

4475 
kbd_SPACE
:

4480 
	}
}

4483 
	$keys_summ¨y
 (
ch
) {

4484 
WIN_t
 *
w
 = 
Curwö
;

4486 
ch
) {

4488 i‡(
	`CHKw
(
w
, 
Võw_CPUNOD
)Ë
	`OFFw
(w, 
Võw_CPUSUM
);

4489 
	`TOGw
(
w
, 
Võw_CPUSUM
);

4490 
	`OFFw
(
w
, 
Võw_CPUNOD
);

4491 
	`SETw
(
w
, 
Võw_STATES
);

4494 i‡(!
Numa_node_tŸ
)

4495 
	`show_msg
(
	`N_txt
(
NUMA_nodíŸ_txt
));

4497 i‡(
Numa_node_£l
 < 0Ë
	`TOGw
(
w
, 
Võw_CPUNOD
);

4498 i‡(!
	`CHKw
(
w
, 
Võw_CPUNOD
)Ë
	`SETw
(w, 
Võw_CPUSUM
);

4499 
	`SETw
(
w
, 
Võw_STATES
);

4500 
Numa_node_£l
 = -1;

4504 i‡(!
Numa_node_tŸ
)

4505 
	`show_msg
(
	`N_txt
(
NUMA_nodíŸ_txt
));

4507 
num
 = 
	`gë_öt
(
	`fmtmk
(
	`N_fmt
(
NUMA_nodegë_fmt
), 
Numa_node_tŸ
 -1));

4508 i‡(
num
 > 
GET_NUM_NOT
) {

4509 i‡(
num
 >0 &&Çum < 
Numa_node_tŸ
) {

4510 
Numa_node_£l
 = 
num
;

4511 
	`SETw
(
w
, 
Võw_CPUNOD
 | 
Võw_STATES
);

4512 
	`OFFw
(
w
, 
Võw_CPUSUM
);

4514 
	`show_msg
(
	`N_txt
(
NUMA_nodebad_txt
));

4519 
	`VIZTOGw
(
w
, 
Võw_SCROLL
);

4522 
	`TOGw
(
w
, 
Võw_LOADAV
);

4525 i‡(!
	`CHKw
(
w
, 
Võw_MEMORY
))

4526 
	`SETw
(
w
, 
Võw_MEMORY
);

4527 i‡(++
w
->
rc
.
gøph_mems
 > 2) {

4528 
w
->
rc
.
gøph_mems
 = 0;;

4529 
	`OFFw
(
w
, 
Võw_MEMORY
);

4533 i‡(!
	`CHKw
(
w
, 
Võw_STATES
))

4534 
	`SETw
(
w
, 
Võw_STATES
);

4535 i‡(++
w
->
rc
.
gøph_˝us
 > 2) {

4536 
w
->
rc
.
gøph_˝us
 = 0;;

4537 
	`OFFw
(
w
, 
Võw_STATES
);

4543 
	}
}

4546 
	$keys_èsk
 (
ch
) {

4547 
WIN_t
 *
w
 = 
Curwö
;

4549 
ch
) {

4552 i‡(
	`VIZCHKw
(
w
)) {

4553 
num
 = 
	`gë_öt
(
	`fmtmk
(
	`N_fmt
(
GET_max_èsk_fmt
), 
w
->
rc
.
maxèsks
));

4554 i‡(
num
 > 
GET_NUM_NOT
) {

4555 i‡(-1 < 
num
 ) 
w
->
rc
.
maxèsks
 =Çum;

4556 
	`show_msg
(
	`N_txt
(
BAD_max_èsk_txt
));

4561 #ifde‡
TREE_NORESET


4562 i‡(
	`CHKw
(
w
, 
Show_FOREST
)) ;

4564 i‡(
	`VIZCHKw
(
w
)) {

4565 
FLG_t
 *
p
 = 
w
->
¥ocÊgs
 + w->
maxpÊgs
 - 1;

4566 
p
 > 
w
->
¥ocÊgs
 && *∞!w->
rc
.
s‹tödx
) --p;

4567 i‡(*
p
 =
w
->
rc
.
s‹tödx
) {

4568 --
p
;

4569 #i‚de‡
USE_X_COLHDR


4570 i‡(
EU_MAXPFLGS
 < *
p
) --p;

4572 i‡(
p
 >
w
->
¥ocÊgs
) {

4573 
w
->
rc
.
s‹tödx
 = *
p
;

4574 #i‚de‡
TREE_NORESET


4575 
	`OFFw
(
w
, 
Show_FOREST
);

4582 #ifde‡
TREE_NORESET


4583 i‡(
	`CHKw
(
w
, 
Show_FOREST
)) ;

4585 i‡(
	`VIZCHKw
(
w
)) {

4586 
FLG_t
 *
p
 = 
w
->
¥ocÊgs
 + w->
maxpÊgs
 - 1;

4587 
p
 > 
w
->
¥ocÊgs
 && *∞!w->
rc
.
s‹tödx
) --p;

4588 i‡(*
p
 =
w
->
rc
.
s‹tödx
) {

4589 ++
p
;

4590 #i‚de‡
USE_X_COLHDR


4591 i‡(
EU_MAXPFLGS
 < *
p
) ++p;

4593 i‡(
p
 < 
w
->
¥ocÊgs
 + w->
maxpÊgs
) {

4594 
w
->
rc
.
s‹tödx
 = *
p
;

4595 #i‚de‡
TREE_NORESET


4596 
	`OFFw
(
w
, 
Show_FOREST
);

4603 
	`TOGw
(
w
, 
Show_HIBOLD
);

4604 
	`ˇpsmk
(
w
);

4607 
	`VIZTOGw
(
w
, 
Show_CMDLIN
);

4610 { 
WIN_t
 *
w_ßv
;

4611 
beg_ßv
;

4612 i‡(
w_ßv
 !
w
Ë{ 
beg_ßv
 = 0; w_sav = w; }

4613 i‡(
	`CHKw
(
w
, 
Show_IDLEPS
)Ë{ 
beg_ßv
 = w->
begèsk
; w->begtask = 0; }

4614 { 
w
->
begèsk
 = 
beg_ßv
; beg_sav = 0; }

4616 
	`VIZTOGw
(
w
, 
Show_IDLEPS
);

4619 
	`VIZTOGw
(
w
, 
Show_JRNUMS
);

4622 
	`VIZTOGw
(
w
, 
Show_JRSTRS
);

4625 #ifde‡
TREE_NORESET


4626 i‡(!
	`CHKw
(
w
, 
Show_FOREST
)Ë
	`VIZTOGw
(w, 
Q§t_NORMAL
);

4628 i‡(
	`VIZCHKw
(
w
)) {

4629 
	`TOGw
(
w
, 
Q§t_NORMAL
);

4630 
	`OFFw
(
w
, 
Show_FOREST
);

4635 i‡(
	`VIZCHKw
(
w
)) {

4636 
	`TOGw
(
w
, 
Show_CTIMES
);

4637 
	`show_msg
(
	`fmtmk
(
	`N_fmt
(
TIME_accumed_fmt
Ë, 
	`CHKw
(
w
, 
Show_CTIMES
)

4638 ? 
	`N_txt
(
ON_w‹d_⁄ly_txt
Ë: N_txt(
OFF_⁄e_w‹d_txt
)));

4643 i‡(
	`VIZCHKw
(
w
)Ë
	`Ÿhî_£À˘i⁄
(
ch
);

4647 i‡(
	`VIZCHKw
(
w
)) {

4648 c⁄° *
îrmsg
, *
°r
 = 
	`iﬁöe
(
	`N_txt
(
GET_u£r_ids_txt
));

4649 i‡(*
°r
 !
kbd_ESC


4650 && (
îrmsg
 = 
	`u£r_˚πify
(
w
, 
°r
, 
ch
)))

4651 
	`show_msg
(
îrmsg
);

4655 i‡(
	`VIZCHKw
(
w
)) {

4656 
	`TOGw
(
w
, 
Show_FOREST
);

4657 i‡(!
	`ENUviz
(
w
, 
EU_CMD
))

4658 
	`show_msg
(
	`fmtmk
(
	`N_fmt
(
FOREST_modes_fmt
Ë, 
	`CHKw
(
w
, 
Show_FOREST
)

4659 ? 
	`N_txt
(
ON_w‹d_⁄ly_txt
Ë: N_txt(
OFF_⁄e_w‹d_txt
)));

4663 i‡(
	`VIZCHKw
(
w
)) {

4664 #ifde‡
USE_X_COLHDR


4665 
	`TOGw
(
w
, 
Show_HICOLS
);

4666 
	`ˇpsmk
(
w
);

4668 i‡(
	`ENUviz
(
w
, w->
rc
.
s‹tödx
)

4669 && !
	`CHKw
(
w
, 
NOHIFND_xxx
 | 
NOHISEL_xxx
)) {

4670 
	`TOGw
(
w
, 
Show_HICOLS
);

4671 i‡(
	`ENUpos
(
w
, w->
rc
.
s‹tödx
Ë< w->
begpÊg
) {

4672 i‡(
	`CHKw
(
w
, 
Show_HICOLS
)Ëw->
begpÊg
 += 2;

4673 
w
->
begpÊg
 -= 2;

4674 i‡(0 > 
w
->
begpÊg
) w->begpflg = 0;

4676 
	`ˇpsmk
(
w
);

4682 i‡(
	`VIZCHKw
(
w
)) {

4683 
	`TOGw
(
w
, 
Show_HIROWS
);

4684 
	`ˇpsmk
(
w
);

4688 i‡(
	`VIZCHKw
(
w
)) {

4689 
	`TOGw
(
w
, 
Show_COLORS
);

4690 
	`ˇpsmk
(
w
);

4693 
kbd_CålO
:

4694 i‡(
	`VIZCHKw
(
w
))

4695 
	`iﬁöe
(
	`fmtmk
(
	`N_fmt
(
OSEL_°©lö_fmt
)

4696 , 
w
->
o£l_¥t
 ? w->o£l_¥à: 
	`N_txt
(
WORD_n⁄e⁄e_txt
)));

4701 
	}
}

4704 
	$keys_wödow
 (
ch
) {

4705 
WIN_t
 *
w
 = 
Curwö
;

4707 
ch
) {

4709 i‡(
ALTCHKw
Ë
	`wös_ªÊag
(
Fœgs_OFF
, 
EQUWINS_xxx
);

4712 i‡(
ALTCHKw
Ë
	`TOGw
(
w
, 
Show_TASKON
);

4715 
	`wö_ª£t
(
w
);

4718 i‡(
ALTCHKw
Ë
	`wös_ªÊag
(
Fœgs_TOG
, 
Show_TASKON
);

4722 i‡(
	`VIZCHKw
(
w
)Ë
	`föd_°rög
(
ch
);

4725 
Rc
.
mode_Æts¸
 = !Rc.mode_altscr;

4729 i‡(
ALTCHKw
Ë
	`wö_£À˘
(
ch
);

4732 i‡(
ALTCHKw
) {

4733 
tmp
[
SMLBUFSIZ
];

4734 
	`STRLCPY
(
tmp
, 
	`iﬁöe
(
	`fmtmk
(
	`N_fmt
(
NAME_wödows_fmt
), 
w
->
rc
.
wö«me
)));

4735 i‡(
tmp
[0] &&Åmp[0] !
kbd_ESC
Ë
	`wö_«mes
(
w
,Åmp);

4738 
kbd_UP
:

4739 i‡(
	`VIZCHKw
(
w
)Ëi‡(
	`CHKw
(w, 
Show_IDLEPS
Ë&& 0 < w->
begèsk
) w->begtask -= 1;

4741 
kbd_DOWN
:

4742 i‡(
	`VIZCHKw
(
w
)Ëi‡(
	`CHKw
(w, 
Show_IDLEPS
Ë&& (w->
begèsk
 < 
Føme_maxèsk
 - 1)) w->begtask += 1;

4744 #ifde‡
USE_X_COLHDR


4745 
kbd_LEFT
:

4746 #i‚de‡
SCROLLVAR_NO


4747 i‡(
	`VIZCHKw
(
w
)) {

4748 i‡(
	`VARÀ·
(
w
))

4749 
w
->
v¨cﬁbeg
 -
SCROLLAMT
;

4750 i‡(0 < 
w
->
begpÊg
)

4751 
w
->
begpÊg
 -= 1;

4754 i‡(
	`VIZCHKw
(
w
)Ëi‡(0 < w->
begpÊg
) w->begpflg -= 1;

4757 
kbd_RIGHT
:

4758 #i‚de‡
SCROLLVAR_NO


4759 i‡(
	`VIZCHKw
(
w
)) {

4760 i‡(
	`VARright
(
w
)) {

4761 
w
->
v¨cﬁbeg
 +
SCROLLAMT
;

4762 i‡(0 > 
w
->
v¨cﬁbeg
) w->varcolbeg = 0;

4763 } i‡(
w
->
begpÊg
 + 1 < w->
tŸpÊgs
)

4764 
w
->
begpÊg
 += 1;

4767 i‡(
	`VIZCHKw
(
w
)Ëi‡(w->
begpÊg
 + 1 < w->
tŸpÊgs
) w->begpflg += 1;

4771 
kbd_LEFT
:

4772 #i‚de‡
SCROLLVAR_NO


4773 i‡(
	`VIZCHKw
(
w
)) {

4774 i‡(
	`VARÀ·
(
w
))

4775 
w
->
v¨cﬁbeg
 -
SCROLLAMT
;

4776 i‡(0 < 
w
->
begpÊg
) {

4777 
w
->
begpÊg
 -= 1;

4778 i‡(
EU_MAXPFLGS
 < 
w
->
pÊgßŒ
[w->
begpÊg
]) w->begpflg -= 2;

4782 i‡(
	`VIZCHKw
(
w
)Ëi‡(0 < w->
begpÊg
) {

4783 
w
->
begpÊg
 -= 1;

4784 i‡(
EU_MAXPFLGS
 < 
w
->
pÊgßŒ
[w->
begpÊg
]) w->begpflg -= 2;

4788 
kbd_RIGHT
:

4789 #i‚de‡
SCROLLVAR_NO


4790 i‡(
	`VIZCHKw
(
w
)) {

4791 i‡(
	`VARright
(
w
)) {

4792 
w
->
v¨cﬁbeg
 +
SCROLLAMT
;

4793 i‡(0 > 
w
->
v¨cﬁbeg
) w->varcolbeg = 0;

4794 } i‡(
w
->
begpÊg
 + 1 < w->
tŸpÊgs
) {

4795 i‡(
EU_MAXPFLGS
 < 
w
->
pÊgßŒ
[w->
begpÊg
])

4796 
w
->
begpÊg
 +(w->begpÊg + 3 < w->
tŸpÊgs
) ? 3 : 0;

4797 
w
->
begpÊg
 += 1;

4801 i‡(
	`VIZCHKw
(
w
)Ëi‡(w->
begpÊg
 + 1 < w->
tŸpÊgs
) {

4802 i‡(
EU_MAXPFLGS
 < 
w
->
pÊgßŒ
[w->
begpÊg
])

4803 
w
->
begpÊg
 +(w->begpÊg + 3 < w->
tŸpÊgs
) ? 3 : 0;

4804 
w
->
begpÊg
 += 1;

4809 
kbd_PGUP
:

4810 i‡(
	`VIZCHKw
(
w
)Ëi‡(0 < w->
begèsk
) {

4811 
w
->
begèsk
 -(w->
wölöes
 - 1);

4812 i‡(0 > 
w
->
begèsk
) w->begtask = 0;

4815 
kbd_PGDN
:

4816 i‡(
	`VIZCHKw
(
w
)Ëi‡(w->
begèsk
 < 
Føme_maxèsk
 - 1) {

4817 
w
->
begèsk
 +(w->
wölöes
 - 1);

4818 i‡(
w
->
begèsk
 > 
Føme_maxèsk
 - 1) w->begtask = Frame_maxtask - 1;

4819 i‡(0 > 
w
->
begèsk
) w->begtask = 0;

4822 
kbd_HOME
:

4823 #i‚de‡
SCROLLVAR_NO


4824 i‡(
	`VIZCHKw
(
w
)Ëw->
begèsk
 = w->
begpÊg
 = w->
v¨cﬁbeg
 = 0;

4826 i‡(
	`VIZCHKw
(
w
)Ëw->
begèsk
 = w->
begpÊg
 = 0;

4829 
kbd_END
:

4830 i‡(
	`VIZCHKw
(
w
)) {

4831 
w
->
begèsk
 = (
Føme_maxèsk
 - w->
wölöes
) + 1;

4832 i‡(0 > 
w
->
begèsk
) w->begtask = 0;

4833 
w
->
begpÊg
 = w->
ídpÊg
;

4834 #i‚de‡
SCROLLVAR_NO


4835 
w
->
v¨cﬁbeg
 = 0;

4842 
	}
}

4845 
	$keys_xåa
 (
ch
) {

4847 
WIN_t
 *
w
 = 
Curwö
;

4849 #ifde‡
TREE_NORESET


4850 i‡(
	`CHKw
(
w
, 
Show_FOREST
)) ;

4852 
	`OFFw
(
w
, 
Show_FOREST
);

4857 
ch
) {

4859 
w
->
rc
.
s‹tödx
 = 
EU_MEM
;

4863 
w
->
rc
.
s‹tödx
 = 
EU_PID
;

4867 
w
->
rc
.
s‹tödx
 = 
EU_CPU
;

4871 
w
->
rc
.
s‹tödx
 = 
EU_TM2
;

4879 
	}
}

4888 
¥oc_t
 **
	gSìd_µt
;

4889 
¥oc_t
 **
	gTªe_µt
;

4890 
	gTªe_idx
;

4896 
	$f‹e°_adds
 (c⁄° 
£lf
, 
Àvñ
) {

4897 
i
;

4899 i‡(
Tªe_idx
 < 
Føme_maxèsk
) {

4900 i‡(
Àvñ
 > 100)Üevel = 101;

4901 
Tªe_µt
[
Tªe_idx
] = 
Sìd_µt
[
£lf
];

4902 
Tªe_µt
[
Tªe_idx
++]->
∑d_3
 = 
Àvñ
;

4903 #ifde‡
TREE_SCANALL


4904 
i
 = 0; i < 
Føme_maxèsk
; i++) {

4905 i‡(
i
 =
£lf
) ;

4907 
i
 = 
£lf
 + 1; i < 
Føme_maxèsk
; i++) {

4909 i‡(
Sìd_µt
[
£lf
]->
tid
 =Sìd_µt[
i
]->
tgid


4910 || (
Sìd_µt
[
£lf
]->
tid
 =Sìd_µt[
i
]->
µid
 && Sìd_µt[i]->tid =Sìd_µt[i]->
tgid
))

4911 
	`f‹e°_adds
(
i
, 
Àvñ
 + 1);

4914 
	}
}

4917 #i‚de‡
TREE_SCANALL


4922 
	$f‹e°_ba£d
 (c⁄° 
¥oc_t
 **
x
, c⁄°Öroc_à**
y
) {

4923 i‡–(*
x
)->
°¨t_time
 > (*
y
)->start_time )  1;

4924 i‡–(*
x
)->
°¨t_time
 < (*
y
)->start_time )  -1;

4926 
	}
}

4935 
	$f‹e°_¸óã
 (
WIN_t
 *
q
) {

4936 
hwmßv
;

4937 
i
;

4939 
Sìd_µt
 = 
q
->
µt
;

4940 i‡(!
Tªe_idx
) {

4941 i‡(
hwmßv
 < 
Føme_maxèsk
) {

4942 
hwmßv
 = 
Føme_maxèsk
;

4943 
Tªe_µt
 = 
	`Æloc_r
(Tªe_µt, (
¥oc_t
*Ë* 
hwmßv
);

4945 #i‚de‡
TREE_SCANALL


4946 
	`qs‹t
(
Sìd_µt
, 
Føme_maxèsk
, (
¥oc_t
*), (
QFP_t
)
f‹e°_ba£d
);

4948 
i
 = 0; i < 
Føme_maxèsk
; i++)

4949 i‡(!
Sìd_µt
[
i
]->
∑d_3
)

4950 
	`f‹e°_adds
(
i
, 0);

4952 
	`mem˝y
(
Sìd_µt
, 
Tªe_µt
, (
¥oc_t
*Ë* 
Føme_maxèsk
);

4953 
	}
}

4959 
ölöe
 c⁄° *
	$f‹e°_di•œy
 (c⁄° 
WIN_t
 *
q
, c⁄° 
¥oc_t
 *
p
) {

4960 #i‚de‡
SCROLLVAR_NO


4961 
buf
[1024*64*2];

4963 
buf
[
ROWMINSIZ
];

4965 c⁄° *
which
 = (
	`CHKw
(
q
, 
Show_CMDLIN
)Ë? *
p
->
cmdlöe
 :Ö->
cmd
;

4967 i‡(!
	`CHKw
(
q
, 
Show_FOREST
Ë|| !
p
->
∑d_3
Ë 
which
;

4968 i‡(
p
->
∑d_3
 > 100Ë
	`¢¥ötf
(
buf
, (buf), "%400s%s", " + ", 
which
);

4969 
	`¢¥ötf
(
buf
, (buf), "%*s%s", (4 * 
p
->
∑d_3
), " `- ", 
which
);

4970  
buf
;

4971 
	}
}

4977 
	$do_key
 (
ch
) {

4979 (*
func
)(
ch
);

4980 
keys
[
SMLBUFSIZ
];

4981 } 
key_èb
[] = {

4982 { 
keys_globÆ
,

4985 , 
kbd_ENTER
, 
kbd_SPACE
, '\0' } },

4986 { 
keys_summ¨y
,

4988 { 
keys_èsk
,

4991 , 
kbd_CålO
, '\0' } },

4992 { 
keys_wödow
,

4994 , 
kbd_UP
, 
kbd_DOWN
, 
kbd_LEFT
, 
kbd_RIGHT
, 
kbd_PGUP
, 
kbd_PGDN


4995 , 
kbd_HOME
, 
kbd_END
, '\0' } },

4996 { 
keys_xåa
,

4999 
i
;

5001 
ch
) {

5003 
kbd_ESC
:

5004 
Æl_d⁄e
;

5006 
	`bye_bye
(
NULL
);

5008 
	`wrôe_rcfûe
();

5009 
Æl_d⁄e
;

5011 
i
 = 0; i < 
	`MAXTBL
(
key_èb
); ++i)

5012 i‡(
	`°rchr
(
key_èb
[
i
].
keys
, 
ch
)) {

5013 
key_èb
[
i
].
	`func
(
ch
);

5014 
Fømes_sig«l
 = 
BREAK_kbd
;

5015 
Æl_d⁄e
;

5040 
	`show_msg
(
	`N_txt
(
UNKNOWN_cmds_txt
));

5041 
Æl_d⁄e
:

5042 
	`sysöfo_ª‰esh
(1);

5043 
	`puç
((
Curs‹_°©e
 = 
C≠_curs_hide
));

5044 
	}
}

5055 
	$summ¨y_hÕ
 (
CPU_t
 *
˝u
, c⁄° *
pfx
) {

5059 
	#TRIMz
(
x
Ë((
tz
 = (
SIC_t
)(x)Ë< 0 ? 0 :Åz)

	)

5061 
SIC_t
 
u_‰me
, 
s_‰me
, 
n_‰me
, 
i_‰me
, 
w_‰me
, 
x_‰me
, 
y_‰me
, 
z_‰me
, 
tŸ_‰me
, 
tz
;

5062 
sˇÀ
;

5064 
u_‰me
 = 
	`TRIMz
(
˝u
->
cur
.
u
 - cpu->
ßv
.u);

5065 
s_‰me
 = 
	`TRIMz
(
˝u
->
cur
.
s
 - cpu->
ßv
.s);

5066 
n_‰me
 = 
	`TRIMz
(
˝u
->
cur
.
n
 - cpu->
ßv
.n);

5067 
i_‰me
 = 
	`TRIMz
(
˝u
->
cur
.
i
 - cpu->
ßv
.i);

5068 
w_‰me
 = 
	`TRIMz
(
˝u
->
cur
.
w
 - cpu->
ßv
.w);

5069 
x_‰me
 = 
	`TRIMz
(
˝u
->
cur
.
x
 - cpu->
ßv
.x);

5070 
y_‰me
 = 
	`TRIMz
(
˝u
->
cur
.
y
 - cpu->
ßv
.y);

5071 
z_‰me
 = 
	`TRIMz
(
˝u
->
cur
.
z
 - cpu->
ßv
.z);

5072 
tŸ_‰me
 = 
u_‰me
 + 
s_‰me
 + 
n_‰me
 + 
i_‰me
 + 
w_‰me
 + 
x_‰me
 + 
y_‰me
 + 
z_‰me
;

5073 #i‚de‡
CPU_ZEROTICS


5074 i‡(
tŸ_‰me
 < 
˝u
->
edge
)

5075 
tŸ_‰me
 = 
u_‰me
 = 
s_‰me
 = 
n_‰me
 = 
i_‰me
 = 
w_‰me
 = 
x_‰me
 = 
y_‰me
 = 
z_‰me
 = 0;

5077 i‡(1 > 
tŸ_‰me
Ë
i_‰me
 =Åot_frme = 1;

5078 
sˇÀ
 = 100.0 / ()
tŸ_‰me
;

5082 i‡(
Curwö
->
rc
.
gøph_˝us
) {

5084 c⁄° *
u£r
, *
sy°
, *
ty≥
;

5085 } 
gèb
[] = {

5086 { "%-.*s~7", "%-.*s~8", 
Gøph_b¨s
 },

5087 { "%-.*s~4", "%-.*s~6", 
Gøph_blks
 }

5089 
u£r
[
SMLBUFSIZ
], 
sy°
[SMLBUFSIZ], 
duÆ
[
MEDBUFSIZ
];

5090 
ix
 = 
Curwö
->
rc
.
gøph_˝us
 - 1;

5091 
p˘_u£r
 = ()(
u_‰me
 + 
n_‰me
Ë* 
sˇÀ
,

5092 
p˘_sy°
 = ()(
s_‰me
 + 
x_‰me
 + 
y_‰me
Ë* 
sˇÀ
;

5093 #i‚de‡
QUICK_GRAPHS


5094 
num_u£r
 = ()((
p˘_u£r
 * 
Gøph_adj
) + .5),

5095 
num_sy°
 = ()((
p˘_sy°
 * 
Gøph_adj
) + .5);

5096 i‡(
num_u£r
 + 
num_sy°
 > 
Gøph_Àn
)Çum_syst = Graph_len -Çum_user;

5097 
	`¢¥ötf
(
u£r
, (u£r), 
gèb
[
ix
].u£r, 
num_u£r
, gèb[ix].
ty≥
);

5098 
	`¢¥ötf
(
sy°
, (sy°), 
gèb
[
ix
].sy°, 
num_sy°
, gèb[ix].
ty≥
);

5100 
	`¢¥ötf
(
u£r
, (u£r), 
gèb
[
ix
].u£r, ()((
p˘_u£r
 * 
Gøph_adj
Ë+ .5), gèb[ix].
ty≥
);

5101 
	`¢¥ötf
(
sy°
, (sy°), 
gèb
[
ix
].sy°, ()((
p˘_sy°
 * 
Gøph_adj
Ë+ .4), gèb[ix].
ty≥
);

5103 
	`¢¥ötf
(
duÆ
, (duÆ), "%s%s", 
u£r
, 
sy°
);

5104 
	`show_•ecül
(0, 
	`fmtmk
("%%%s ~3%#5.1f~2/%-#5.1f~3 %3.0f[~1%-*s]~1\n"

5105 , 
pfx
, 
p˘_u£r
, 
p˘_sy°
,Ö˘_u£∏+Ö˘_sy°, 
Gøph_Àn
 +4, 
duÆ
));

5107 
	`show_•ecül
(0, 
	`fmtmk
(
Cpu_Sèãs_fmts
, 
pfx


5108 , ()
u_‰me
 * 
sˇÀ
, ()
s_‰me
 * scale

5109 , ()
n_‰me
 * 
sˇÀ
, ()
i_‰me
 * scale

5110 , ()
w_‰me
 * 
sˇÀ
, ()
x_‰me
 * scale

5111 , ()
y_‰me
 * 
sˇÀ
, ()
z_‰me
 * scale));

5113 #unde‡
TRIMz


5114 
	}
}

5122 
	$summ¨y_show
 () {

5123 
	#isROOM
(
f
,
n
Ë(
	`CHKw
(
w
, fË&& 
Msg_row
 + (nË< 
S¸ìn_rows
 - 1)

	)

5124 
	#™yFLG
 0xffffff

	)

5125 
WIN_t
 *
w
 = 
Curwö
;

5126 
tmp
[
MEDBUFSIZ
];

5127 
i
;

5130 i‡(
	`isROOM
(
Võw_LOADAV
, 1)) {

5131 i‡(!
Rc
.
mode_Æts¸
)

5132 
	`show_•ecül
(0, 
	`fmtmk
(
LOADAV_löe
, 
My«me
, 
	`•röt_u±ime
(0)));

5134 
	`show_•ecül
(0, 
	`fmtmk
(
	`CHKw
(
w
, 
Show_TASKON
)? 
LOADAV_löe_Æt
 : 
LOADAV_löe


5135 , 
w
->
gΩ«me
, 
	`•röt_u±ime
(0)));

5136 
Msg_row
 += 1;

5140 i‡(
	`isROOM
(
Võw_STATES
, 2)) {

5141 
	`show_•ecül
(0, 
	`fmtmk
(
	`N_unq
(
STATE_löe_1_fmt
)

5142 , 
Thªad_mode
 ? 
	`N_txt
(
WORD_thªads_txt
Ë: N_txt(
WORD_¥o˚ss_txt
)

5143 , 
Føme_maxèsk
, 
Føme_ru¬ög
, 
Føme_¶ìpö


5144 , 
Føme_°›≥d
, 
Føme_zombõd
));

5145 
Msg_row
 += 1;

5147 
	`˝us_ª‰esh
();

5149 i‡(!
Numa_node_tŸ
Ë
numa_n›e
;

5151 i‡(
	`CHKw
(
w
, 
Võw_CPUNOD
)) {

5152 i‡(
Numa_node_£l
 < 0) {

5154 
	`summ¨y_hÕ
(&
Cpu_tics
[
smp_num_˝us
], 
	`N_txt
(
WORD_Æl˝us_txt
));

5155 
Msg_row
 += 1;

5157 
i
 = 0; i < 
Numa_node_tŸ
; i++) {

5158 
CPU_t
 *
nod_±r
 = &
Cpu_tics
[1 + 
smp_num_˝us
 + 
i
];

5159 i‡(!
	`isROOM
(
™yFLG
, 1)) ;

5160 #i‚de‡
OFF_NUMASKIP


5161 i‡(
nod_±r
->
id
) {

5163 
	`¢¥ötf
(
tmp
, —mp), 
	`N_fmt
(
NUMA_nodíam_fmt
), 
i
);

5164 
	`summ¨y_hÕ
(
nod_±r
, 
tmp
);

5165 
Msg_row
 += 1;

5166 #i‚de‡
OFF_NUMASKIP


5172 
	`¢¥ötf
(
tmp
, —mp), 
	`N_fmt
(
NUMA_nodíam_fmt
), 
Numa_node_£l
);

5173 
	`summ¨y_hÕ
(&
Cpu_tics
[1 + 
smp_num_˝us
 + 
Numa_node_£l
], 
tmp
);

5174 
Msg_row
 += 1;

5175 
i
 = 0; i < 
Cpu_Áux_tŸ
; i++) {

5176 i‡(
Numa_node_£l
 =
Cpu_tics
[
i
].
node
) {

5177 i‡(!
	`isROOM
(
™yFLG
, 1)) ;

5178 
	`¢¥ötf
(
tmp
, —mp), 
	`N_fmt
(
WORD_óch˝u_fmt
), 
Cpu_tics
[
i
].
id
);

5179 
	`summ¨y_hÕ
(&
Cpu_tics
[
i
], 
tmp
);

5180 
Msg_row
 += 1;

5185 
numa_n›e
:

5186 i‡(
	`CHKw
(
w
, 
Võw_CPUSUM
)) {

5188 
	`summ¨y_hÕ
(&
Cpu_tics
[
Cpu_Áux_tŸ
], 
	`N_txt
(
WORD_Æl˝us_txt
));

5189 
Msg_row
 += 1;

5193 
i
 = 0; i < 
Cpu_Áux_tŸ
; i++) {

5194 
	`¢¥ötf
(
tmp
, —mp), 
	`N_fmt
(
WORD_óch˝u_fmt
), 
Cpu_tics
[
i
].
id
);

5195 
	`summ¨y_hÕ
(&
Cpu_tics
[
i
], 
tmp
);

5196 
Msg_row
 += 1;

5197 i‡(!
	`isROOM
(
™yFLG
, 1)) ;

5203 i‡(
	`isROOM
(
Võw_MEMORY
, 2)) {

5204 
	#bfT
(
n
Ë
bu·ab
[n].
buf


	)

5205 
	#scT
(
e
Ë
sˇÀèb
[
Rc
.
summ_msˇÀ
]. 
	)
e

5206 
	#mkM
(
x
Ë()
kb_maö_
 ## x / 
	`scT
(
div
)

	)

5207 
	#mkS
(
x
Ë()
kb_sw≠_
 ## x / 
	`scT
(
div
)

	)

5208 
	#¥T
(
b
,
z
Ë{ i‡(9 < 
	`¢¥ötf
(b, 10, 
	`scT
(
fmts
), z)Ëb[8] = '+'; }

	)

5210 
div
;

5211 c⁄° *
fmts
;

5212 c⁄° *
œbñ
;

5213 } 
sˇÀèb
[] = {

5214 { 1, "%.0‡", 
NULL
 },

5215 #ifde‡
BOOST_MEMORY


5216 { 1024.0, "%#.3‡", 
NULL
 },

5217 { 1024.0*1024, "%#.3‡", 
NULL
 },

5218 { 1024.0*1024*1024, "%#.3‡", 
NULL
 },

5219 { 1024.0*1024*1024*1024, "%#.3‡", 
NULL
 },

5220 { 1024.0*1024*1024*1024*1024, "%#.3‡", 
NULL
 }

5222 { 1024.0, "%#.1‡", 
NULL
 },

5223 { 1024.0*1024, "%#.1‡", 
NULL
 },

5224 { 1024.0*1024*1024, "%#.1‡", 
NULL
 },

5225 { 1024.0*1024*1024*1024, "%#.1‡", 
NULL
 },

5226 { 1024.0*1024*1024*1024*1024, "%#.1‡", 
NULL
 }

5232 
buf
[10];

5233 } 
bu·ab
[8];

5235 i‡(!
sˇÀèb
[0].
œbñ
) {

5236 
sˇÀèb
[0].
œbñ
 = 
	`N_txt
(
AMT_kûobyã_txt
);

5237 
sˇÀèb
[1].
œbñ
 = 
	`N_txt
(
AMT_megabyã_txt
);

5238 
sˇÀèb
[2].
œbñ
 = 
	`N_txt
(
AMT_gigabyã_txt
);

5239 
sˇÀèb
[3].
œbñ
 = 
	`N_txt
(
AMT_ãøbyã_txt
);

5240 
sˇÀèb
[4].
œbñ
 = 
	`N_txt
(
AMT_≥èbyã_txt
);

5241 
sˇÀèb
[5].
œbñ
 = 
	`N_txt
(
AMT_exxabyã_txt
);

5244 i‡(
w
->
rc
.
gøph_mems
) {

5246 c⁄° *
u£d
, *
misc
, *
sw≠
, *
ty≥
;

5247 } 
gèb
[] = {

5248 { "%-.*s~7", "%-.*s~8", "%-.*s~8", 
Gøph_b¨s
 },

5249 { "%-.*s~4", "%-.*s~6", "%-.*s~6", 
Gøph_blks
 }

5251 
u£d
[
SMLBUFSIZ
], 
utû
[SMLBUFSIZ], 
duÆ
[
MEDBUFSIZ
];

5252 
p˘_u£d
, 
p˘_misc
, 
p˘_sw≠
;

5253 
ix
, 
num_u£d
, 
num_misc
;

5255 
p˘_u£d
 = ()
kb_maö_u£d
 * (100.0 / ()
kb_maö_tŸÆ
);

5256 #ifde‡
MEMGRAPH_OLD


5257 
p˘_misc
 = ()(
kb_maö_buf„rs
 + 
kb_maö_ˇched
Ë* (100.0 / ()
kb_maö_tŸÆ
);

5259 
p˘_misc
 = ()(
kb_maö_tŸÆ
 - 
kb_maö_avaûabÀ
 - 
kb_maö_u£d
) * (100.0 / ()kb_main_total);

5261 i‡(
p˘_u£d
 + 
p˘_misc
 > 100.0 ||Öct_misc < 0)Öct_misc = 0;

5262 
p˘_sw≠
 = 
kb_sw≠_tŸÆ
 ? ()
kb_sw≠_u£d
 * (100.0 / ()kb_swap_total) : 0;

5263 
ix
 = 
w
->
rc
.
gøph_mems
 - 1;

5264 #i‚de‡
QUICK_GRAPHS


5265 
num_u£d
 = ()((
p˘_u£d
 * 
Gøph_adj
) + .5),

5266 
num_misc
 = ()((
p˘_misc
 * 
Gøph_adj
) + .5);

5267 i‡(
num_u£d
 + 
num_misc
 > 
Gøph_Àn
)Çum_misc = Graph_len -Çum_used;

5268 
	`¢¥ötf
(
u£d
, (u£d), 
gèb
[
ix
].u£d, 
num_u£d
, gèb[ix].
ty≥
);

5269 
	`¢¥ötf
(
utû
, (utû), 
gèb
[
ix
].
misc
, 
num_misc
, gèb[ix].
ty≥
);

5271 ()
num_u£d
; ()
num_misc
;

5272 
	`¢¥ötf
(
u£d
, (u£d), 
gèb
[
ix
].u£d, ()((
p˘_u£d
 * 
Gøph_adj
Ë+ .5), gèb[ix].
ty≥
);

5273 
	`¢¥ötf
(
utû
, (utû), 
gèb
[
ix
].
misc
, ()((
p˘_misc
 * 
Gøph_adj
Ë+ .4), gèb[ix].
ty≥
);

5275 
	`¢¥ötf
(
duÆ
, (duÆ), "%s%s", 
u£d
, 
utû
);

5276 
	`¢¥ötf
(
utû
, (utû), 
gèb
[
ix
].
sw≠
, ()((
p˘_sw≠
 * 
Gøph_adj
Ë+ .5), gèb[ix].
ty≥
);

5277 
	`¥T
(
	`bfT
(0), 
	`mkM
(
tŸÆ
));ÖrT(bfT(1), 
	`mkS
(total));

5278 
	`show_•ecül
(0, 
	`fmtmk
( "%s %s:~3%#5.1f~2/%-9.9s~3[~1%-*s]~1\n%s %s:~3%#5.1f~2/%-9.9s~3[~1%-*s]~1\n"

5279 , 
	`scT
(
œbñ
), 
	`N_txt
(
WORD_abv_mem_txt
), 
p˘_u£d
 + 
p˘_misc
, 
	`bfT
(0), 
Gøph_Àn
 +4, 
duÆ


5280 , 
	`scT
(
œbñ
), 
	`N_txt
(
WORD_abv_swp_txt
), 
p˘_sw≠
, 
	`bfT
(1), 
Gøph_Àn
 +2, 
utû
));

5282 
kb_maö_my_misc
 = 
kb_maö_buf„rs
 + 
kb_maö_ˇched
;

5283 
	`¥T
(
	`bfT
(0), 
	`mkM
(
tŸÆ
));ÖrT(bfT(1), mkM(
‰ì
));

5284 
	`¥T
(
	`bfT
(2), 
	`mkM
(
u£d
));ÖrT(bfT(3), mkM(
my_misc
));

5285 
	`¥T
(
	`bfT
(4), 
	`mkS
(
tŸÆ
));ÖrT(bfT(5), mkS(
‰ì
));

5286 
	`¥T
(
	`bfT
(6), 
	`mkS
(
u£d
));ÖrT(bfT(7), 
	`mkM
(
avaûabÀ
));

5287 
	`show_•ecül
(0, 
	`fmtmk
(
	`N_unq
(
MEMORY_löes_fmt
)

5288 , 
	`scT
(
œbñ
), 
	`N_txt
(
WORD_abv_mem_txt
), 
	`bfT
(0), bfT(1), bfT(2), bfT(3)

5289 , 
	`scT
(
œbñ
), 
	`N_txt
(
WORD_abv_swp_txt
), 
	`bfT
(4), bfT(5), bfT(6), bfT(7)

5290 , 
	`N_txt
(
WORD_abv_mem_txt
)));

5292 
Msg_row
 += 2;

5293 #unde‡
bfT


5294 #unde‡
scT


5295 #unde‡
mkM


5296 #unde‡
mkS


5297 #unde‡
¥T


5300 #unde‡
isROOM


5301 #unde‡
™yFLG


5302 
	}
}

5308 c⁄° *
	$èsk_show
 (c⁄° 
WIN_t
 *
q
, c⁄° 
¥oc_t
 *
p
) {

5309 #i‚de‡
SCROLLVAR_NO


5310 
	#makeVAR
(
v
Ë{ c⁄° *
pv
 = v; \

5311 i‡(!
q
->
v¨cﬁbeg
Ë
˝
 = 
	`make_°r
(
pv
, q->
v¨cﬁsz
, 
Js
, 
AUTOX_NO
); \

5312 
˝
 = 
	`make_°r
(
q
->
v¨cﬁbeg
 < ()
	`°æí
(
pv
Ë?Öv + q->v¨cﬁbeg : "", q->
v¨cﬁsz
, 
Js
, 
AUTOX_NO
); }

	)

5314 
	#makeVAR
(
v
Ë
˝
 = 
	`make_°r
(v, 
q
->
v¨cﬁsz
, 
Js
, 
AUTOX_NO
)

	)

5316 
	#∑ges2K
(
n
Ë()–“Ë<< 
Pg2K_sh·
 )

	)

5317 
rbuf
[
ROWMINSIZ
];

5318 *
Ω
;

5319 
x
;

5322 *(
Ω
 = 
rbuf
) = '\0';

5323 i‡(
Rc
.
mode_Æts¸
Ë
Ω
 = 
	`sˇt
(rp, " ");

5325 
x
 = 0; x < 
q
->
maxpÊgs
; x++) {

5326 c⁄° *
˝
;

5327 
FLG_t
 
i
 = 
q
->
¥ocÊgs
[
x
];

5328 
	#S
 
Fõld°ab
[
i
].
sˇÀ


5329 
	#W
 
Fõld°ab
[
i
].
width


5330 
	#Js
 
	`CHKw
(
q
, 
Show_JRSTRS
)

5331 
	#Jn
 
	`CHKw
(
q
, 
Show_JRNUMS
)

5332 

	)

5333 
i
) {

5334 #i‚de‡
USE_X_COLHDR


5336 
EU_XON
:

5337 
EU_XOF
:

5338 
˝
 = 
NULL
;

5339 i‡(!
	`CHKw
(
q
, 
INFINDS_xxx
 | 
NOHIFND_xxx
 | 
NOHISEL_xxx
)) {

5342 i‡(!('R' =
p
->
°©e
 && 
	`CHKw
(
q
, 
Show_HIROWS
)))

5343 
˝
 = (
EU_XON
 =
i
 ? 
q
->
ˇp˛r_rowhigh
 : q->
ˇp˛r_rown‹m
);

5347 
EU_CGN
:

5348 
	`makeVAR
(
p
->
cg«me
);

5350 
EU_CGR
:

5351 
	`makeVAR
(
p
->
cgroup
[0]);

5353 
EU_CMD
:

5354 
	`makeVAR
(
	`f‹e°_di•œy
(
q
, 
p
));

5356 
EU_COD
:

5357 
˝
 = 
	`sˇÀ_mem
(
S
, 
	`∑ges2K
(
p
->
ås
), 
W
, 
Jn
);

5359 
EU_CPN
:

5360 
˝
 = 
	`make_num
(
p
->
¥o˚ss‹
, 
W
, 
Jn
, 
AUTOX_NO
, 0);

5362 
EU_CPU
:

5363 { 
u
 = ()
p
->
p˝u
 * 
Føme_ësˇÀ
;

5366 i‡(
u
 > 100.0 * 
p
->
∆wp
) u = 100.0 *Ö->nlwp;

5367 i‡(
u
 > 
Cpu_pmax
) u = Cpu_pmax;

5368 
˝
 = 
	`sˇÀ_p˙t
(
u
, 
W
, 
Jn
);

5371 
EU_DAT
:

5372 
˝
 = 
	`sˇÀ_mem
(
S
, 
	`∑ges2K
(
p
->
drs
), 
W
, 
Jn
);

5374 
EU_DRT
:

5375 
˝
 = 
	`sˇÀ_num
(
p
->
dt
, 
W
, 
Jn
);

5377 
EU_ENV
:

5378 
	`makeVAR
(
p
->
ívú⁄
[0]);

5380 
EU_FL1
:

5381 
˝
 = 
	`sˇÀ_num
(
p
->
maj_Êt
, 
W
, 
Jn
);

5383 
EU_FL2
:

5384 
˝
 = 
	`sˇÀ_num
(
p
->
mö_Êt
, 
W
, 
Jn
);

5386 
EU_FLG
:

5387 
˝
 = 
	`make_°r
(
	`hex_make
(
p
->
Êags
, 1), 
W
, 
Js
, 
AUTOX_NO
);

5389 
EU_FV1
:

5390 
˝
 = 
	`sˇÀ_num
(
p
->
maj_dñè
, 
W
, 
Jn
);

5392 
EU_FV2
:

5393 
˝
 = 
	`sˇÀ_num
(
p
->
mö_dñè
, 
W
, 
Jn
);

5395 
EU_GID
:

5396 
˝
 = 
	`make_num
(
p
->
egid
, 
W
, 
Jn
, 
EU_GID
, 0);

5398 
EU_GRP
:

5399 
˝
 = 
	`make_°r
(
p
->
egroup
, 
W
, 
Js
, 
EU_GRP
);

5401 
EU_LXC
:

5402 
˝
 = 
	`make_°r
(
p
->
lx˙ame
, 
W
, 
Js
, 
EU_LXC
);

5404 
EU_MEM
:

5405 
˝
 = 
	`sˇÀ_p˙t
(()
	`∑ges2K
(
p
->
ªsidít
Ë* 100 / 
kb_maö_tŸÆ
, 
W
, 
Jn
);

5407 
EU_NCE
:

5408 
˝
 = 
	`make_num
(
p
->
ni˚
, 
W
, 
Jn
, 
AUTOX_NO
, 1);

5410 
EU_NMA
:

5411 
˝
 = 
	`make_num
(
	`numa_node_of_˝u
(
p
->
¥o˚ss‹
), 
W
, 
Jn
, 
AUTOX_NO
, 0);

5413 
EU_NS1
:

5414 
EU_NS2
:

5415 
EU_NS3
:

5416 
EU_NS4
:

5417 
EU_NS5
:

5418 
EU_NS6
:

5419 { 
öo
 = 
p
->
ns
[
i
 - 
EU_NS1
];

5420 
˝
 = 
	`make_num
(
öo
, 
W
, 
Jn
, 
i
, 1);

5423 
EU_OOA
:

5424 
˝
 = 
	`make_num
(
p
->
oom_adj
, 
W
, 
Jn
, 
AUTOX_NO
, 1);

5426 
EU_OOM
:

5427 
˝
 = 
	`make_num
(
p
->
oom_sc‹e
, 
W
, 
Jn
, 
AUTOX_NO
, 1);

5429 
EU_PGD
:

5430 
˝
 = 
	`make_num
(
p
->
pgΩ
, 
W
, 
Jn
, 
AUTOX_NO
, 0);

5432 
EU_PID
:

5433 
˝
 = 
	`make_num
(
p
->
tid
, 
W
, 
Jn
, 
AUTOX_NO
, 0);

5435 
EU_PPD
:

5436 
˝
 = 
	`make_num
(
p
->
µid
, 
W
, 
Jn
, 
AUTOX_NO
, 0);

5438 
EU_PRI
:

5439 i‡(-99 > 
p
->
¥i‹ôy
 || 999 <Ö->priority) {

5440 
˝
 = 
	`make_°r
("π", 
W
, 
Jn
, 
AUTOX_NO
);

5442 
˝
 = 
	`make_num
(
p
->
¥i‹ôy
, 
W
, 
Jn
, 
AUTOX_NO
, 0);

5444 
EU_RES
:

5445 
˝
 = 
	`sˇÀ_mem
(
S
, 
	`∑ges2K
(
p
->
ªsidít
), 
W
, 
Jn
);

5447 
EU_RZA
:

5448 
˝
 = 
	`sˇÀ_mem
(
S
, 
p
->
vm_rss_™⁄
, 
W
, 
Jn
);

5450 
EU_RZF
:

5451 
˝
 = 
	`sˇÀ_mem
(
S
, 
p
->
vm_rss_fûe
, 
W
, 
Jn
);

5453 
EU_RZL
:

5454 
˝
 = 
	`sˇÀ_mem
(
S
, 
p
->
vm_lock
, 
W
, 
Jn
);

5456 
EU_RZS
:

5457 
˝
 = 
	`sˇÀ_mem
(
S
, 
p
->
vm_rss_sh¨ed
, 
W
, 
Jn
);

5459 
EU_SGD
:

5460 
	`makeVAR
(
p
->
supgid
);

5462 
EU_SGN
:

5463 
	`makeVAR
(
p
->
supgΩ
);

5465 
EU_SHR
:

5466 
˝
 = 
	`sˇÀ_mem
(
S
, 
	`∑ges2K
(
p
->
sh¨e
), 
W
, 
Jn
);

5468 
EU_SID
:

5469 
˝
 = 
	`make_num
(
p
->
£ssi⁄
, 
W
, 
Jn
, 
AUTOX_NO
, 0);

5471 
EU_STA
:

5472 
˝
 = 
	`make_chr
(
p
->
°©e
, 
W
, 
Js
);

5474 
EU_SWP
:

5475 
˝
 = 
	`sˇÀ_mem
(
S
, 
p
->
vm_sw≠
, 
W
, 
Jn
);

5477 
EU_TGD
:

5478 
˝
 = 
	`make_num
(
p
->
tgid
, 
W
, 
Jn
, 
AUTOX_NO
, 0);

5480 
EU_THD
:

5481 
˝
 = 
	`make_num
(
p
->
∆wp
, 
W
, 
Jn
, 
AUTOX_NO
, 0);

5483 
EU_TM2
:

5484 
EU_TME
:

5485 { 
TIC_t
 
t
 = 
p
->
utime
 +Ö->
°ime
;

5486 i‡(
	`CHKw
(
q
, 
Show_CTIMES
)Ë
t
 +(
p
->
cutime
 +Ö->
c°ime
);

5487 
˝
 = 
	`sˇÀ_tics
(
t
, 
W
, 
Jn
);

5490 
EU_TPG
:

5491 
˝
 = 
	`make_num
(
p
->
çgid
, 
W
, 
Jn
, 
AUTOX_NO
, 0);

5493 
EU_TTY
:

5494 { 
tmp
[
SMLBUFSIZ
];

5495 
	`dev_to_ây
(
tmp
, 
W
, 
p
->
ây
,Ö->
tid
, 
ABBREV_DEV
);

5496 
˝
 = 
	`make_°r
(
tmp
, 
W
, 
Js
, 
EU_TTY
);

5499 
EU_UED
:

5500 
˝
 = 
	`make_num
(
p
->
euid
, 
W
, 
Jn
, 
EU_UED
, 0);

5502 
EU_UEN
:

5503 
˝
 = 
	`make_°r
(
p
->
eu£r
, 
W
, 
Js
, 
EU_UEN
);

5505 
EU_URD
:

5506 
˝
 = 
	`make_num
(
p
->
ruid
, 
W
, 
Jn
, 
EU_URD
, 0);

5508 
EU_URN
:

5509 
˝
 = 
	`make_°r
(
p
->
ru£r
, 
W
, 
Js
, 
EU_URN
);

5511 
EU_USD
:

5512 
˝
 = 
	`make_num
(
p
->
suid
, 
W
, 
Jn
, 
EU_USD
, 0);

5514 
EU_USE
:

5515 
˝
 = 
	`sˇÀ_mem
(
S
, (
p
->
vm_sw≠
 +Ö->
vm_rss
), 
W
, 
Jn
);

5517 
EU_USN
:

5518 
˝
 = 
	`make_°r
(
p
->
su£r
, 
W
, 
Js
, 
EU_USN
);

5520 
EU_VRT
:

5521 
˝
 = 
	`sˇÀ_mem
(
S
, 
	`∑ges2K
(
p
->
size
), 
W
, 
Jn
);

5523 
EU_WCH
:

5524 
˝
 = 
	`make_°r
(
	`lookup_wch™
(
p
->
tid
), 
W
, 
Js
, 
EU_WCH
);

5531 i‡(
˝
) {

5532 i‡(
q
->
o£l_tŸ
 && !
	`o£l_m©ched
(q, 
i
, 
˝
))  "";

5533 
Ω
 = 
	`sˇt
‘p, 
˝
);

5535 #unde‡
S


5536 #unde‡
W


5537 #unde‡
Js


5538 #unde‡
Jn


5541 i‡(!
	`CHKw
(
q
, 
INFINDS_xxx
)) {

5542 c⁄° *
ˇp
 = ((
	`CHKw
(
q
, 
Show_HIROWS
Ë&& 'R' =
p
->
°©e
))

5543 ? 
q
->
ˇp˛r_rowhigh
 : q->
ˇp˛r_rown‹m
;

5544 *
row
 = 
rbuf
;

5545 
ofs
;

5551 i‡(-1 < (
ofs
 = 
	`föd_ofs
(
q
, 
row
))) {

5552 
	`POOF
("\n", 
ˇp
);

5554 
row
[
ofs
] = '\0';

5555 
	`PUTT
("%s%s%s%s", 
row
, 
q
->
ˇp˛r_hdr
, q->
föd°r
, 
ˇp
);

5556 
row
 +(
ofs
 + 
q
->
födÀn
);

5557 
ofs
 = 
	`föd_ofs
(
q
, 
row
);

5558 } -1 < 
ofs
);

5559 
	`PUTT
("%s%s", 
row
, 
C≠s_ídlöe
);

5561 
rbuf
[0] = '!';

5563 
	`PUFF
("\n%s%s%s", 
ˇp
, 
row
, 
C≠s_ídlöe
);

5565  
rbuf
;

5566 #unde‡
makeVAR


5567 #unde‡
∑ges2K


5568 
	}
}

5574 
	$wödow_show
 (
WIN_t
 *
q
, 
wmax
) {

5578 
	#isBUSY
(
x
Ë(0 < x->
p˝u
)

	)

5579 
	#wöMIN
(
a
,
b
Ë(◊ < bË?á : b)

	)

5580 
i
, 
lwö
;

5583 
	`PUFF
("\n%s%s%s", 
q
->
ˇp˛r_hdr
, q->
cﬁumnhdr
, 
C≠s_ídlöe
);

5585 i‡(
	`CHKw
(
q
, 
Show_FOREST
))

5586 
	`f‹e°_¸óã
(
q
);

5588 i‡(
	`CHKw
(
q
, 
Q§t_NORMAL
)Ë
Føme_§tÊg
 = 1;

5589 
Føme_§tÊg
 = -1;

5590 
Føme_˘imes
 = 
	`CHKw
(
q
, 
Show_CTIMES
);

5591 
Føme_cmdlö
 = 
	`CHKw
(
q
, 
Show_CMDLIN
);

5592 
	`qs‹t
(
q
->
µt
, 
Føme_maxèsk
, (
¥oc_t
*), 
Fõld°ab
[q->
rc
.
s‹tödx
].
s‹t
);

5595 
i
 = 
q
->
begèsk
;

5596 
lwö
 = 1;

5597 
wmax
 = 
	`wöMIN
(wmax, 
q
->
wölöes
 + 1);

5601 i‡(
	`CHKw
(
q
, 
Show_IDLEPS
Ë&& !q->
u§£…yp
)

5602 
i
 < 
Føme_maxèsk
 && 
lwö
 < 
wmax
) {

5603 i‡(*
	`èsk_show
(
q
, q->
µt
[
i
++]))

5604 ++
lwö
;

5607 
i
 < 
Føme_maxèsk
 && 
lwö
 < 
wmax
) {

5608 i‡((
	`CHKw
(
q
, 
Show_IDLEPS
Ë|| 
	`isBUSY
(q->
µt
[
i
]))

5609 && 
	`u£r_m©ched
(
q
, q->
µt
[
i
])

5610 && *
	`èsk_show
(
q
, q->
µt
[
i
]))

5611 ++
lwö
;

5612 ++
i
;

5615  
lwö
;

5616 #unde‡
wöMIN


5617 #unde‡
isBUSY


5618 
	}
}

5625 
	$‰ame_hÕ
 (
wix
, 
max
) {

5626 
i
, 
size
, 
wös
;

5629 
i
 = 
wix
, 
wös
 = 0; i < 
GROUPSMAX
; i++)

5630 i‡(
	`CHKw
(&
Wö°k
[
i
], 
Show_TASKON
))

5631 ++
wös
;

5633 i‡(!
wös
) wins = 1;

5635 
size
 = (
max
 - 
wös
) / wins;

5640 
Wö°k
[
wix
].
wölöes
 =

5641 
Wö°k
[
wix
].
rc
.
maxèsks
 ? Wö°k[wix].rc.maxèsk†: 
size
;

5642 
	}
}

5661 
	$‰ame_make
 () {

5662 
WIN_t
 *
w
 = 
Curwö
;

5663 
i
, 
s¸lös
;

5666 i‡(
Fømes_sig«l
)

5667 
	`z≠_fõld°ab
();

5670 i‡(
P£udo_row
 =
PROC_XTRA
) {

5671 
	`˝us_ª‰esh
();

5672 
	`¥ocs_ª‰esh
();

5673 
	`u¶ìp
(
LIB_USLEEP
);

5674 
	`puç
(
C≠_˛r_s¸
);

5676 
	`puç
(
B©ch
 ? "\n\n" : 
C≠_home
);

5678 
	`sysöfo_ª‰esh
(0);

5679 
	`¥ocs_ª‰esh
();

5681 
Tªe_idx
 = 
P£udo_row
 = 
Msg_row
 = 
s¸lös
 = 0;

5682 
	`summ¨y_show
();

5683 
Max_löes
 = (
S¸ìn_rows
 - 
Msg_row
) - 1;

5684 
	`OFFw
(
w
, 
INFINDS_xxx
);

5690 i‡(
	`VIZISw
(
w
Ë&& 
	`CHKw
(w, 
Võw_SCROLL
)Ë
	`PUTT
(
S¸ﬁl_fmts
, 
Føme_maxèsk
);

5691 
	`puç
(
C≠_˛r_eﬁ
);

5693 i‡(!
Rc
.
mode_Æts¸
) {

5695 
w
->
wölöes
 = w->
rc
.
maxèsks
 ? w->rc.maxèsk†: 
Max_löes
;

5696 
s¸lös
 = 
	`wödow_show
(
w
, 
Max_löes
);

5699 
i
 = 0 ; i < 
GROUPSMAX
; i++) {

5700 i‡(
	`CHKw
(&
Wö°k
[
i
], 
Show_TASKON
)) {

5701 
	`‰ame_hÕ
(
i
, 
Max_löes
 - 
s¸lös
);

5702 
s¸lös
 +
	`wödow_show
(&
Wö°k
[
i
], 
Max_löes
 - scrlins);

5704 i‡(
Max_löes
 <
s¸lös
) ;

5710 i‡(
s¸lös
 < 
Max_löes
) {

5711 
	`puç
(
C≠_∆_˛ªos
);

5712 
	`PSU_CLREOS
(
P£udo_row
);

5714 
	`fÊush
(
°dout
);

5718 i‡(!
C≠_ˇn_gŸo
Ë
	`PSU_CLREOS
(0);

5721 i‡(
AUTOX_MODE
 && 
Autox_found
)

5722 
	`widths_ªsize
();

5723 
	}
}

5728 
	$maö
 (
d⁄t_ˇª_¨gc
, **
¨gv
) {

5729 ()
d⁄t_ˇª_¨gc
;

5730 
	`bef‹e
(*
¨gv
);

5732 
	`wös_°age_1
();

5733 
	`c⁄figs_ªad
();

5734 
	`∑r£_¨gs
(&
¨gv
[1]);

5735 
	`whack_ãrmöÆ
();

5736 
	`wös_°age_2
();

5740 
time•ec
 
ts
;

5742 
	`‰ame_make
();

5744 i‡(0 < 
Lo›s
) --Loops;

5745 i‡(!
Lo›s
Ë
	`bye_bye
(
NULL
);

5747 
ts
.
tv_£c
 = 
Rc
.
dñay_time
;

5748 
ts
.
tv_n£c
 = (
Rc
.
dñay_time
 - ()Rc.delay_time) * 1000000000;

5750 i‡(
B©ch
)

5751 
	`p£À˘
(0, 
NULL
, NULL, NULL, &
ts
, NULL);

5753 i‡(
	`iﬂ
(&
ts
))

5754 
	`do_key
(
	`iokey
(1));

5768 
	}
}

	@top/top.h

20 #i‚de‡
_It›


21 
	#_It›


	)

23 
	~"../¥oc/ªad¥oc.h
"

89 #ifde‡
PRETEND2_5_X


90 
	#löux_vîsi⁄_code
 
	`LINUX_VERSION
(2,5,43)

	)

94 *
°rˇ£°r
(c⁄° *
hay°ack
, c⁄° *
√edÀ
);

96 #ifde‡
STRINGCASENO


97 
	#STRSTR
 
°rˇ£°r


	)

98 
	#STRCMP
 
°rˇ£cmp


	)

100 
	#STRSTR
 
°r°r


	)

101 
	#STRCMP
 
°rcmp


	)

108 #ifde‡
ORIG_TOPDEFS


109 
	#DEF_DELAY
 3.0

	)

111 
	#DEF_DELAY
 1.5

	)

116 
	#MSG_USLEEP
 1250000

	)

117 
	#LIB_USLEEP
 150000

	)

120 
	#MONPIDMAX
 20

	)

123 
	#W_MIN_COL
 3

	)

124 
	#W_MIN_ROW
 3

	)

128 
	#SCREENMAX
 512

	)

132 
	#CAPBUFSIZ
 32

	)

133 
	#CLRBUFSIZ
 64

	)

134 
	#PFLAGSSIZ
 100

	)

135 
	#SMLBUFSIZ
 128

	)

136 
	#MEDBUFSIZ
 256

	)

137 
	#LRGBUFSIZ
 512

	)

138 
	#OURPATHSZ
 1024

	)

139 
	#BIGBUFSIZ
 2048

	)

142 
	#ROWMINSIZ
 ( 
SCREENMAX
 + 4 * (
CAPBUFSIZ
 + 
CLRBUFSIZ
Ë)

	)

143 
	#ROWMAXSIZ
 ( 
SCREENMAX
 + 16 * (
CAPBUFSIZ
 + 
CLRBUFSIZ
Ë)

	)

145 
	#READMINSZ
 2048

	)

147 
	#FNDBUFSIZ
 
MEDBUFSIZ


	)

151 
	#COLPADSTR
 " "

	)

152 
	#COLPADSIZ
 ( (
COLPADSTR
Ë- 1 )

	)

154 
	#COLPLUSCH
 '+'

	)

157 
	#kbd_ESC
 '\033'

	)

158 
	#kbd_SPACE
 ' '

	)

159 
	#kbd_ENTER
 '\n'

	)

160 
	#kbd_UP
 129

	)

161 
	#kbd_DOWN
 130

	)

162 
	#kbd_LEFT
 131

	)

163 
	#kbd_RIGHT
 132

	)

164 
	#kbd_PGUP
 133

	)

165 
	#kbd_PGDN
 134

	)

166 
	#kbd_HOME
 135

	)

167 
	#kbd_END
 136

	)

168 
	#kbd_BKSP
 137

	)

169 
	#kbd_INS
 138

	)

170 
	#kbd_DEL
 139

	)

171 
	#kbd_CålO
 '\017'

	)

175 
	#PROC_XTRA
 -1

	)

177 #i‚de‡
CPU_ZEROTICS


181 
	#TICS_EDGE
 20

	)

189 
	epÊag
 {

190 
	mEU_PID
 = 0, 
	mEU_PPD
,

191 
	mEU_UED
, 
	mEU_UEN
, 
	mEU_URD
, 
	mEU_URN
, 
	mEU_USD
, 
	mEU_USN
,

192 
	mEU_GID
, 
	mEU_GRP
, 
	mEU_PGD
, 
	mEU_TTY
, 
	mEU_TPG
, 
	mEU_SID
,

193 
	mEU_PRI
, 
	mEU_NCE
, 
	mEU_THD
,

194 
	mEU_CPN
, 
	mEU_CPU
, 
	mEU_TME
, 
	mEU_TM2
,

195 
	mEU_MEM
, 
	mEU_VRT
, 
	mEU_SWP
, 
	mEU_RES
, 
	mEU_COD
, 
	mEU_DAT
, 
	mEU_SHR
,

196 
	mEU_FL1
, 
	mEU_FL2
, 
	mEU_DRT
,

197 
	mEU_STA
, 
	mEU_CMD
, 
	mEU_WCH
, 
	mEU_FLG
, 
	mEU_CGR
,

198 
	mEU_SGD
, 
	mEU_SGN
, 
	mEU_TGD
,

199 
	mEU_OOA
, 
	mEU_OOM
,

200 
	mEU_ENV
,

201 
	mEU_FV1
, 
	mEU_FV2
,

202 
	mEU_USE
,

203 
	mEU_NS1
, 
	mEU_NS2
, 
	mEU_NS3
, 
	mEU_NS4
, 
	mEU_NS5
, 
	mEU_NS6
,

204 
	mEU_LXC
,

205 
	mEU_RZA
, 
	mEU_RZF
, 
	mEU_RZL
, 
	mEU_RZS
,

206 
	mEU_CGN
,

207 
	mEU_NMA
,

208 #ifde‡
USE_X_COLHDR


210 
	mEU_MAXPFLGS


213 
	mEU_MAXPFLGS
, 
	mEU_XON
, 
	mEU_XOF


218 
	esˇÀ_íum
 {

219 
	mSK_Kb
, 
	mSK_Mb
, 
	mSK_Gb
, 
	mSK_Tb
, 
	mSK_Pb
, 
	mSK_Eb


223 
	eªsize_°©es
 {

224 
	mBREAK_off
 = 0, 
	mBREAK_kbd
, 
	mBREAK_sig


228 
	tFLG_t
;

231 
	tTIC_t
;

232 
	tSIC_t
;

235 (*
	tQFP_t
)(const *, const *);

239 
	sFLD_t
 {

240 
width
;

241 
sˇÀ
;

242 c⁄° 
Æign
;

243 c⁄° 
QFP_t
 
s‹t
;

244 c⁄° 
lÊg
;

245 } 
	tFLD_t
;

247 #ifde‡
OFF_HST_HASH


251 
	sHST_t
 {

252 
TIC_t
 
tics
;

253 
maj
, 
mö
;

254 
pid
;

255 } 
	tHST_t
;

262 
	sHST_t
 {

263 
TIC_t
 
tics
;

264 
maj
, 
mö
;

265 
pid
;

266 
 k
;

267 } 
	tHST_t
;

273 
	sCT_t
 {

278 
TIC_t
 
u
, 
n
, 
s
, 
i
, 
w
, 
x
, 
y
, 
z
;

279 #i‚de‡
CPU_ZEROTICS


280 
SIC_t
 
tŸ
;

282 } 
	tCT_t
;

284 
	sCPU_t
 {

285 
CT_t
 
cur
;

286 
CT_t
 
ßv
;

287 #i‚de‡
CPU_ZEROTICS


288 
SIC_t
 
edge
;

290 
id
;

291 
node
;

292 } 
	tCPU_t
;

298 
	#CAPTABMAX
 9

	)

299 
	#GROUPSMAX
 4

	)

300 
	#WINNAMSIZ
 4

	)

301 
	#GRPNAMSIZ
 
WINNAMSIZ
+2

	)

307 
	#Võw_CPUSUM
 0x008000

308 
	#Võw_CPUNOD
 0x400000

309 
	#Võw_LOADAV
 0x004000

310 
	#Võw_STATES
 0x002000

311 
	#Võw_MEMORY
 0x001000

312 
	#Võw_NOBOLD
 0x000008

313 
	#Võw_SCROLL
 0x080000

315 
	#Show_COLORS
 0x000800

316 
	#Show_HIBOLD
 0x000400

317 
	#Show_HICOLS
 0x000200

318 
	#Show_HIROWS
 0x000100

319 
	#Show_CMDLIN
 0x000080

320 
	#Show_CTIMES
 0x000040

321 
	#Show_IDLEPS
 0x000020

322 
	#Show_TASKON
 0x000010

323 
	#Show_FOREST
 0x000002

324 
	#Q§t_NORMAL
 0x000004

325 
	#Show_JRSTRS
 0x040000

326 
	#Show_JRNUMS
 0x020000

328 
	#INFINDS_xxx
 0x010000

329 
	#EQUWINS_xxx
 0x000001

330 #i‚de‡
USE_X_COLHDR


	)

331 
	#NOHISEL_xxx
 0x200000

332 
	#NOHIFND_xxx
 0x100000

334 

	)

336 #ifde‡
ORIG_TOPDEFS


337 
	#DEF_WINFLGS
 ( 
Võw_LOADAV
 | 
Võw_STATES
 | 
Võw_CPUSUM
 | 
Võw_MEMORY
 \

338 | 
Show_HIBOLD
 | 
Show_HIROWS
 | 
Show_IDLEPS
 | 
Show_TASKON
 | 
Show_JRNUMS
 \

339 | 
Q§t_NORMAL
 )

	)

340 
	#DEF_GRAPHS2
 0, 0

	)

341 
	#DEF_SCALES2
 
SK_Mb
, 
SK_Kb


	)

342 
	#ALT_WINFLGS
 
DEF_WINFLGS


	)

343 
	#ALT_GRAPHS2
 0, 0

	)

345 
	#DEF_WINFLGS
 ( 
Võw_LOADAV
 | 
Võw_STATES
 | 
Võw_MEMORY
 | 
Show_CMDLIN
 \

346 | 
Show_COLORS
 | 
Show_FOREST
 | 
Show_HIROWS
 | 
Show_IDLEPS
 | 
Show_JRNUMS
 | 
Show_TASKON
 \

347 | 
Q§t_NORMAL
 )

	)

348 
	#DEF_GRAPHS2
 1, 2

	)

349 
	#DEF_SCALES2
 
SK_Gb
, 
SK_Mb


	)

350 
	#ALT_WINFLGS
 (
DEF_WINFLGS
 | 
Show_HIBOLD
Ë& ~
Show_FOREST


	)

351 
	#ALT_GRAPHS2
 2, 0

	)

355 
	eªÊag_íum
 {

356 
Fœgs_TOG
, 
Fœgs_SET
, 
Fœgs_OFF


360 
	ew¨n_íum
 {

361 
W¨n_ALT
, 
W¨n_VIZ


365 
	sRCW_t
 {

366 
s‹tödx
,

367 
wöÊags
,

368 
maxèsks
,

369 
gøph_˝us
,

370 
gøph_mems
,

371 
summ˛r
,

372 
msgs˛r
,

373 
hód˛r
,

374 
èsk˛r
;

375 
wö«me
 [
WINNAMSIZ
],

376 
fõldscur
 [
PFLAGSSIZ
];

377 } 
	tRCW_t
;

380 
	sRCF_t
 {

381 
id
;

382 
mode_Æts¸
;

383 
mode_úixps
;

384 
dñay_time
;

385 
wö_ödex
;

386 
RCW_t
 
wö
 [
GROUPSMAX
];

387 
fixed_wide°
;

388 
summ_msˇÀ
;

389 
èsk_msˇÀ
;

390 
zîo_suµªss
;

391 } 
	tRCF_t
;

397 
	sWIN_t
 {

398 
FLG_t
 
pÊgßŒ
 [
PFLAGSSIZ
],

399 
¥ocÊgs
 [
PFLAGSSIZ
];

400 
RCW_t
 
rc
;

401 
wönum
,

402 
wölöes
,

403 
maxpÊgs
,

404 
tŸpÊgs
,

405 
begpÊg
,

406 
ídpÊg
,

407 
begèsk
,

408 #i‚de‡
SCROLLVAR_NO


409 
v¨cﬁbeg
,

411 
v¨cﬁsz
,

412 
u§£luid
,

413 
u§£…yp
,

414 
u§£lÊg
,

415 
hdrˇ∂í
;

416 
ˇp˛r_sum
 [
CLRBUFSIZ
],

417 
ˇp˛r_msg
 [
CLRBUFSIZ
],

418 
ˇp˛r_pmt
 [
CLRBUFSIZ
],

419 
ˇp˛r_hdr
 [
CLRBUFSIZ
],

420 
ˇp˛r_rowhigh
 [
CLRBUFSIZ
],

421 
ˇp˛r_rown‹m
 [
CLRBUFSIZ
],

422 
ˇp_bﬁd
 [
CAPBUFSIZ
],

423 
gΩ«me
 [
GRPNAMSIZ
],

424 #ifde‡
USE_X_COLHDR


425 
cﬁumnhdr
 [
ROWMINSIZ
],

427 
cﬁumnhdr
 [
SCREENMAX
],

429 *
ˇ±ab
 [
CAPTABMAX
];

430 
o£l_s
 *
o£l_1°
;

431 
o£l_tŸ
;

432 *
o£l_¥t
;

433 *
föd°r
;

434 
födÀn
;

435 
¥oc_t
 **
µt
;

436 
WIN_t
 *
√xt
,

437 *
¥ev
;

438 } 
	tWIN_t
;

441 
	#CHKw
(
q
,
f
Ë()((q)->
rc
.
wöÊags
 & (f))

	)

442 
	#TOGw
(
q
,
f
Ë(q)->
rc
.
wöÊags
 ^(f)

	)

443 
	#SETw
(
q
,
f
Ë(q)->
rc
.
wöÊags
 |(f)

	)

444 
	#OFFw
(
q
,
f
Ë(q)->
rc
.
wöÊags
 &~(f)

	)

445 
	#ALTCHKw
 (
Rc
.
mode_Æts¸
 ? 1 : 
	`wö_w¨n
(
W¨n_ALT
))

	)

446 
	#VIZISw
(
q
Ë(!
Rc
.
mode_Æts¸
 || 
	`CHKw
(q,
Show_TASKON
))

	)

447 
	#VIZCHKw
(
q
Ë(
	`VIZISw
(q)Ë? 1 : 
	`wö_w¨n
(
W¨n_VIZ
)

	)

448 
	#VIZTOGw
(
q
,
f
Ë(
	`VIZISw
(q)Ë? 
	`TOGw
(q,(f)Ë: 
	`wö_w¨n
(
W¨n_VIZ
)

	)

451 
	#FLD⁄
(
c
Ë((cË|0x80)

	)

452 
	#FLDgë
(
q
,
i
Ë((
FLG_t
)((q)->
rc
.
fõldscur
[i] & 0x7fË- 
FLD_OFFSET
)

	)

453 
	#FLDtog
(
q
,
i
Ë((q)->
rc
.
fõldscur
[i] ^0x80)

	)

454 
	#FLDviz
(
q
,
i
Ë((q)->
rc
.
fõldscur
[i] & 0x80)

	)

455 
	#ENUviz
(
w
,
E
Ë(
NULL
 !
	`memchr
((w)->
¥ocÊgs
, E, (w)->
maxpÊgs
))

	)

456 
	#ENUpos
(
w
,
E
Ë(()((
FLG_t
*)
	`memchr
((w)->
pÊgßŒ
, E, (w)->
tŸpÊgs
Ë- (w)->pÊgßŒ))

	)

459 
	#VARcﬁ
(
E
Ë(-1 =
Fõld°ab
[E].
width
)

	)

460 #i‚de‡
SCROLLVAR_NO


461 #ifde‡
USE_X_COLHDR


462 
	#VARright
(
w
Ë(1 =w->
maxpÊgs
 && 
	`VARcﬁ
(w->
¥ocÊgs
[0]))

	)

464 
	#VARright
(
w
Ë((1 =w->
maxpÊgs
 && 
	`VARcﬁ
(w->
¥ocÊgs
[0])) || \

465 (3 =
w
->
maxpÊgs
 && 
EU_XON
 =w->
¥ocÊgs
[0] && 
	`VARcﬁ
(w->¥ocÊgs[1])))

	)

467 
	#VARÀ·
(
w
Ë(w->
v¨cﬁbeg
 && 
	`VARright
(w))

	)

468 
	#SCROLLAMT
 8

	)

478 
	#MAXTBL
(
t
Ë()(—Ë/ —[0]))

	)

482 
	#STRLCPY
(
d°
,
§c
Ë{ 
	`°∫˝y
(d°, src, (d°)); d°[(d°Ë- 1] = '\0'; 
	}

	)
}

485 
	#PSU_CLREOS
(
y
Ë
	`mem£t
(&
P£udo_s¸ìn
[
ROWMAXSIZ
*y], '\0', 
P£udo_size
-(ROWMAXSIZ*y))

	)

488 
	#SORT_…
 ( 
Føme_§tÊg
 > 0 ? 1 : -1 )

	)

489 
	#SORT_gt
 ( 
Føme_§tÊg
 > 0 ? -1 : 1 )

	)

490 
	#SORT_eq
 0

	)

495 
	#SCB_NAME
(
f
Ë
s‹t_EU_
 ## 
	)
f

496 
	#SCB_NUM1
(
f
,
n
) \

497 
	`SCB_NAME
(
f
Ë(c⁄° 
¥oc_t
 **
P
, c⁄°Öroc_à**
Q
) { \

498 i‡–(*
P
)->
n
 < (*
Q
)->¿Ë 
SORT_…
; \

499 i‡–(*
P
)->
n
 > (*
Q
)->¿Ë 
SORT_gt
; \

500  
SORT_eq
; }

	)

501 
	#SCB_NUM2
(
f
,
n1
,
n2
) \

502 
	`SCB_NAME
(
f
Ë(c⁄° 
¥oc_t
 **
P
, c⁄°Öroc_à**
Q
) { \

503 i‡–((*
P
)->
n1
+(*P)->
n2
Ë< ((*
Q
)->n1+(*Q)->n2ËË 
SORT_…
; \

504 i‡–((*
P
)->
n1
+(*P)->
n2
Ë> ((*
Q
)->n1+(*Q)->n2ËË 
SORT_gt
; \

505  
SORT_eq
; }

	)

506 
	#SCB_NUMx
(
f
,
n
) \

507 
	`SCB_NAME
(
f
Ë(c⁄° 
¥oc_t
 **
P
, c⁄°Öroc_à**
Q
) { \

508  
Føme_§tÊg
 * ( (*
Q
)->
n
 - (*
P
)->¿); }

	)

509 
	#SCB_STRS
(
f
,
s
) \

510 
	`SCB_NAME
(
f
Ë(c⁄° 
¥oc_t
 **
P
, c⁄°Öroc_à**
Q
) { \

511 i‡(!(*
P
)->
s
 || !(*
Q
)->sË 
SORT_eq
; \

512  
Føme_§tÊg
 * 
	`STRCMP
((*
Q
)->
s
, (*
P
)->s); }

	)

513 
	#SCB_STRV
(
f
,
b
,
v
,
s
) \

514 
	`SCB_NAME
(
f
Ë(c⁄° 
¥oc_t
 **
P
, c⁄°Öroc_à**
Q
) { \

515 i‡(
b
) { \

516 i‡(!(*
P
)->
v
 || !(*
Q
)->vË 
SORT_eq
; \

517  
Føme_§tÊg
 * 
	`STRCMP
((*
Q
)->
v
[0], (*
P
)->v[0]); } \

518  
Føme_§tÊg
 * 
	`STRCMP
((*
Q
)->
s
, (*
P
)->s); }

	)

519 
	#SCB_STRX
(
f
,
s
) \

520 
	`°rvîscmp
(c⁄° *
s1
, c⁄° *
s2
); \

521 
	`SCB_NAME
(
f
Ë(c⁄° 
¥oc_t
 **
P
, c⁄°Öroc_à**
Q
) { \

522 i‡(!(*
P
)->
s
 || !(*
Q
)->sË 
SORT_eq
; \

523  
Føme_§tÊg
 * 
	`°rvîscmp
((*
Q
)->
s
, (*
P
)->s); }

	)

534 
	#PUTT
(
fmt
,
¨g
...) do { \

535 
_°r
[
ROWMAXSIZ
]; \

536 
	`¢¥ötf
(
_°r
, (_°r), 
fmt
, ## 
¨g
); \

537 
	`puç
(
_°r
); \

538 } 0)

	)

545 
	#PUFF
(
fmt
,
¨g
...) do { \

546 
_°r
[
ROWMAXSIZ
], *
_eﬁ
; \

547 
_eﬁ
 = 
_°r
 + 
	`¢¥ötf
(_°r, (_°r), 
fmt
, ## 
¨g
); \

548 i‡(
B©ch
) { \

549 *(--
_eﬁ
Ë=' '); *(++_eﬁË'\0'; 
	`puç
(
_°r
); } \

551 *
_±r
 = &
P£udo_s¸ìn
[
P£udo_row
 * 
ROWMAXSIZ
]; \

552 i‡(
P£udo_row
 + 1 < 
S¸ìn_rows
) ++Pseudo_row; \

553 i‡(!
	`°rcmp
(
_±r
, 
_°r
)Ë
	`puç
("\n"); \

555 
	`°r˝y
(
_±r
, 
_°r
); \

556 
	`puç
(
_±r
); } } \

557 } 0)

	)

562 
	#POOF
(
°r
,
ˇp
) do { \

563 
	`puç
(
°r
);Öuç(
ˇp
); \

564 
P£udo_s¸ìn
[
P£udo_row
 * 
ROWMAXSIZ
] = '\0'; \

565 i‡(
P£udo_row
 + 1 < 
S¸ìn_rows
) ++Pseudo_row; \

566 } 0)

	)

569 
	#debug_END
(
s
) { \

570 
	`îr‹_exô
 (const *); \

571 
	`Âuts
(
C≠_˛r_s¸
, 
°dout
); \

572 
	`îr‹_exô
(
s
); \

573 }

	)

576 
	#ôs_YOUR_Áu…
 { *((*)0Ë'!'; }

	)

584 
	#SYS_RCFILESPEC
 "/ëc/t›rc"

	)

585 
	#RCF_EYECATCHER
 "C⁄fig Fûê(LöuxÖro˚s£†wôh wödows)\n"

	)

586 
	#RCF_PLUS_H
 "\\]^_`abcdefghij"

	)

587 #ifde‡
VER_J_RCFILE


588 
	#RCF_PLUS_J
 "klmn›qr°uvwxyz"

	)

589 
	#RCF_VERSION_ID
 'j'

	)

591 
	#RCF_VERSION_ID
 'i'

	)

592 
	#RCF_PLUS_J
 ""

	)

602 
	#FLD_OFFSET
 '%'

	)

604 #ifde‡
ORIG_TOPDEFS


605 
	#DEF_FIELDS
 "•®≥¥ªΩ¿ƒ∑∫π≈&')*+,-./012568<>?ABCFGHIJKLMNOPQRSTUVWXYZ[" 
RCF_PLUS_H
 
RCF_PLUS_J


	)

607 
	#DEF_FIELDS
 "•&K®≥¥ªΩ@∑∫π56ƒF≈')*+,-./0128<>?ABCGHIJLMNOPQRSTUVWXYZ[" 
RCF_PLUS_H
 
RCF_PLUS_J


	)

610 
	#JOB_FIELDS
 "•¶π∑∫(≥¥ƒªΩ@<ß≈)*+,-./012568>?ABCFGHIJKLMNOPQRSTUVWXYZ[" 
RCF_PLUS_H
 
RCF_PLUS_J


	)

611 
	#MEM_FIELDS
 "•∫ª<Ωæø¿¡MBN√D34∑≈&'()*+,-./0125689FGHIJKLOPQRSTUVWXYZ[" 
RCF_PLUS_H
 
RCF_PLUS_J


	)

612 
	#USR_FIELDS
 "•¶ß®™∞π∑∫ƒ≈)+,-./1234568;<=>?@ABCFGHIJKLMNOPQRSTUVWXYZ[" 
RCF_PLUS_H
 
RCF_PLUS_J


	)

615 
	#CVT_FIELDS
 "%&*'(-0346789:;<=>?@ACDEFGML)+,./125BHIJKNOPQRSTUVWXYZ["

	)

616 
	#CVT_FLDMAX
 28

	)

620 
	#DEF_RCFILE
 { \

621 
RCF_VERSION_ID
, 0, 1, 
DEF_DELAY
, 0, { \

622 { 
EU_CPU
, 
DEF_WINFLGS
, 0, 
DEF_GRAPHS2
, \

623 
COLOR_RED
, COLOR_RED, 
COLOR_YELLOW
, COLOR_RED, \

624 "Def", 
DEF_FIELDS
 }, \

625 { 
EU_PID
, 
ALT_WINFLGS
, 0, 
ALT_GRAPHS2
, \

626 
COLOR_CYAN
, COLOR_CYAN, 
COLOR_WHITE
, COLOR_CYAN, \

627 "Job", 
JOB_FIELDS
 }, \

628 { 
EU_MEM
, 
ALT_WINFLGS
, 0, 
ALT_GRAPHS2
, \

629 
COLOR_MAGENTA
, COLOR_MAGENTA, 
COLOR_BLUE
, COLOR_MAGENTA, \

630 "Mem", 
MEM_FIELDS
 }, \

631 { 
EU_UEN
, 
ALT_WINFLGS
, 0, 
ALT_GRAPHS2
, \

632 
COLOR_YELLOW
, COLOR_YELLOW, 
COLOR_GREEN
, COLOR_YELLOW, \

633 "U§", 
USR_FIELDS
 } \

634 }, 0, 
DEF_SCALES2
, 0 }

	)

638 
	#LOADAV_löe
 "%†-%s\n"

	)

639 
	#LOADAV_löe_Æt
 "%s~6 -%s\n"

	)

645 #i‡
deföed
(
ATEOJ_RPTHSH
Ë&& deföed(
OFF_HST_HASH
)

646 #îr‹ 'ATEOJ_RPTHSH' 
c⁄Êi˘s
 
wôh
 'OFF_HST_HASH'

648 #i‡
deföed
(
RECALL_FIXED
Ë&& deföed(
TERMIOS_ONLY
)

649 #îr‹ 'RECALL_FIXED' 
c⁄Êi˘s
 
wôh
 'TERMIOS_ONLY'

651 #i‡(
LRGBUFSIZ
 < 
SCREENMAX
)

652 #îr‹ 'LRGBUFSIZ' 
mu°
 
NOT
 
be
 
Àss
 
th™
 'SCREENMAX'

654 #i‡
deföed
(
TERMIOS_ONLY
)

655 #w¨nög 'TERMIOS_ONLY' 
dißbÀs
 
öput
 
ªˇŒ
 
™d
 
makes
 
m™
 
doc
 
öc‹ª˘


657 #i‡
deföed
(
MEMGRAPH_OLD
)

658 #w¨nög 'MEMGRAPH_OLD' 
wûl
 
make
 
the
 
m™
 
documít
 
Se˘i⁄
 2c. 
mi¶ódög


725 #ifde‡
OFF_HST_HASH


736 #i‚de‡
INSP_OFFDEMO


777 #i‚de‡
TREE_SCANALL


	@top/top_nls.c

20 
	~<loˇÀ.h
>

21 
	~<°dio.h
>

22 
	~<°rög.h
>

24 
	~"../ö˛ude/∆s.h
"

26 
	~"t›.h
"

27 
	~"t›_∆s.h
"

29 #ifde‡
VALIDATE_NLS


30 
	~<°dlib.h
>

97 c⁄° *
	gHód_∆°ab
[
EU_MAXPFLGS
];

98 c⁄° *
	gDesc_∆°ab
[
EU_MAXPFLGS
];

99 c⁄° *
	gN‹m_∆°ab
[
n‹m_MAX
];

100 c⁄° *
	gUniq_∆°ab
[
uniq_MAX
];

107 
	$buûd_two_∆°abs
 () {

124 
Hód_∆°ab
[
EU_PID
] = 
	`_
("PID");

125 
Desc_∆°ab
[
EU_PID
] = 
	`_
("Process Id");

127 
Hód_∆°ab
[
EU_PPD
] = 
	`_
("PPID");

128 
Desc_∆°ab
[
EU_PPD
] = 
	`_
("Parent ProcessÖid");

130 
Hód_∆°ab
[
EU_UED
] = 
	`_
("UID");

131 
Desc_∆°ab
[
EU_UED
] = 
	`_
("Effective User Id");

133 
Hód_∆°ab
[
EU_UEN
] = 
	`_
("USER");

134 
Desc_∆°ab
[
EU_UEN
] = 
	`_
("Effective User Name");

136 
Hód_∆°ab
[
EU_URD
] = 
	`_
("RUID");

137 
Desc_∆°ab
[
EU_URD
] = 
	`_
("Real User Id");

139 
Hód_∆°ab
[
EU_URN
] = 
	`_
("RUSER");

140 
Desc_∆°ab
[
EU_URN
] = 
	`_
("Real User Name");

142 
Hód_∆°ab
[
EU_USD
] = 
	`_
("SUID");

143 
Desc_∆°ab
[
EU_USD
] = 
	`_
("Saved User Id");

145 
Hód_∆°ab
[
EU_USN
] = 
	`_
("SUSER");

146 
Desc_∆°ab
[
EU_USN
] = 
	`_
("Saved User Name");

148 
Hód_∆°ab
[
EU_GID
] = 
	`_
("GID");

149 
Desc_∆°ab
[
EU_GID
] = 
	`_
("Group Id");

151 
Hód_∆°ab
[
EU_GRP
] = 
	`_
("GROUP");

152 
Desc_∆°ab
[
EU_GRP
] = 
	`_
("Group Name");

154 
Hód_∆°ab
[
EU_PGD
] = 
	`_
("PGRP");

155 
Desc_∆°ab
[
EU_PGD
] = 
	`_
("Process Group Id");

157 
Hód_∆°ab
[
EU_TTY
] = 
	`_
("TTY");

158 
Desc_∆°ab
[
EU_TTY
] = 
	`_
("Controlling Tty");

160 
Hód_∆°ab
[
EU_TPG
] = 
	`_
("TPGID");

161 
Desc_∆°ab
[
EU_TPG
] = 
	`_
("Tty Process Grp Id");

163 
Hód_∆°ab
[
EU_SID
] = 
	`_
("SID");

164 
Desc_∆°ab
[
EU_SID
] = 
	`_
("Session Id");

166 
Hód_∆°ab
[
EU_PRI
] = 
	`_
("PR");

167 
Desc_∆°ab
[
EU_PRI
] = 
	`_
("Priority");

169 
Hód_∆°ab
[
EU_NCE
] = 
	`_
("NI");

170 
Desc_∆°ab
[
EU_NCE
] = 
	`_
("Nice Value");

172 
Hód_∆°ab
[
EU_THD
] = 
	`_
("nTH");

173 
Desc_∆°ab
[
EU_THD
] = 
	`_
("Number of Threads");

175 
Hód_∆°ab
[
EU_CPN
] = 
	`_
("P");

176 
Desc_∆°ab
[
EU_CPN
] = 
	`_
("Last Used Cpu (SMP)");

178 
Hód_∆°ab
[
EU_CPU
] = 
	`_
("%CPU");

179 
Desc_∆°ab
[
EU_CPU
] = 
	`_
("CPU Usage");

181 
Hód_∆°ab
[
EU_TME
] = 
	`_
("TIME");

182 
Desc_∆°ab
[
EU_TME
] = 
	`_
("CPU Time");

184 
Hód_∆°ab
[
EU_TM2
] = 
	`_
("TIME+");

185 
Desc_∆°ab
[
EU_TM2
] = 
	`_
("CPU Time, hundredths");

187 
Hód_∆°ab
[
EU_MEM
] = 
	`_
("%MEM");

188 
Desc_∆°ab
[
EU_MEM
] = 
	`_
("Memory Usage (RES)");

190 
Hód_∆°ab
[
EU_VRT
] = 
	`_
("VIRT");

191 
Desc_∆°ab
[
EU_VRT
] = 
	`_
("Virtual Image (KiB)");

193 
Hód_∆°ab
[
EU_SWP
] = 
	`_
("SWAP");

194 
Desc_∆°ab
[
EU_SWP
] = 
	`_
("Swapped Size (KiB)");

196 
Hód_∆°ab
[
EU_RES
] = 
	`_
("RES");

197 
Desc_∆°ab
[
EU_RES
] = 
	`_
("Resident Size (KiB)");

199 
Hód_∆°ab
[
EU_COD
] = 
	`_
("CODE");

200 
Desc_∆°ab
[
EU_COD
] = 
	`_
("Code Size (KiB)");

202 
Hód_∆°ab
[
EU_DAT
] = 
	`_
("DATA");

203 
Desc_∆°ab
[
EU_DAT
] = 
	`_
("Data+Stack (KiB)");

205 
Hód_∆°ab
[
EU_SHR
] = 
	`_
("SHR");

206 
Desc_∆°ab
[
EU_SHR
] = 
	`_
("Shared Memory (KiB)");

208 
Hód_∆°ab
[
EU_FL1
] = 
	`_
("nMaj");

209 
Desc_∆°ab
[
EU_FL1
] = 
	`_
("Major Page Faults");

211 
Hód_∆°ab
[
EU_FL2
] = 
	`_
("nMin");

212 
Desc_∆°ab
[
EU_FL2
] = 
	`_
("Minor Page Faults");

214 
Hód_∆°ab
[
EU_DRT
] = 
	`_
("nDRT");

215 
Desc_∆°ab
[
EU_DRT
] = 
	`_
("Dirty Pages Count");

217 
Hód_∆°ab
[
EU_STA
] = 
	`_
("S");

218 
Desc_∆°ab
[
EU_STA
] = 
	`_
("Process Status");

220 
Hód_∆°ab
[
EU_CMD
] = 
	`_
("COMMAND");

221 
Desc_∆°ab
[
EU_CMD
] = 
	`_
("Command Name/Line");

223 
Hód_∆°ab
[
EU_WCH
] = 
	`_
("WCHAN");

224 
Desc_∆°ab
[
EU_WCH
] = 
	`_
("Sleeping in Function");

226 
Hód_∆°ab
[
EU_FLG
] = 
	`_
("Flags");

227 
Desc_∆°ab
[
EU_FLG
] = 
	`_
("Task Flags <sched.h>");

229 
Hód_∆°ab
[
EU_CGR
] = 
	`_
("CGROUPS");

230 
Desc_∆°ab
[
EU_CGR
] = 
	`_
("Control Groups");

232 
Hód_∆°ab
[
EU_SGD
] = 
	`_
("SUPGIDS");

233 
Desc_∆°ab
[
EU_SGD
] = 
	`_
("Supp Groups IDs");

235 
Hód_∆°ab
[
EU_SGN
] = 
	`_
("SUPGRPS");

236 
Desc_∆°ab
[
EU_SGN
] = 
	`_
("Supp Groups Names");

238 
Hód_∆°ab
[
EU_TGD
] = 
	`_
("TGID");

239 
Desc_∆°ab
[
EU_TGD
] = 
	`_
("Thread Group Id");

241 
Hód_∆°ab
[
EU_OOA
] = 
	`_
("OOMa");

242 
Desc_∆°ab
[
EU_OOA
] = 
	`_
("OOMEM Adjustment");

244 
Hód_∆°ab
[
EU_OOM
] = 
	`_
("OOMs");

245 
Desc_∆°ab
[
EU_OOM
] = 
	`_
("OOMEM Score current");

247 
Hód_∆°ab
[
EU_ENV
] = 
	`_
("ENVIRON");

250 
Desc_∆°ab
[
EU_ENV
] = 
	`_
("Environment vars");

252 
Hód_∆°ab
[
EU_FV1
] = 
	`_
("vMj");

253 
Desc_∆°ab
[
EU_FV1
] = 
	`_
("Major Faults delta");

255 
Hód_∆°ab
[
EU_FV2
] = 
	`_
("vMn");

256 
Desc_∆°ab
[
EU_FV2
] = 
	`_
("Minor Faults delta");

258 
Hód_∆°ab
[
EU_USE
] = 
	`_
("USED");

259 
Desc_∆°ab
[
EU_USE
] = 
	`_
("Res+Swap Size (KiB)");

261 
Hód_∆°ab
[
EU_NS1
] = 
	`_
("nsIPC");

262 
Desc_∆°ab
[
EU_NS1
] = 
	`_
("IPCÇamespace Inode");

264 
Hód_∆°ab
[
EU_NS2
] = 
	`_
("nsMNT");

265 
Desc_∆°ab
[
EU_NS2
] = 
	`_
("MNTÇamespace Inode");

267 
Hód_∆°ab
[
EU_NS3
] = 
	`_
("nsNET");

268 
Desc_∆°ab
[
EU_NS3
] = 
	`_
("NETÇamespace Inode");

270 
Hód_∆°ab
[
EU_NS4
] = 
	`_
("nsPID");

271 
Desc_∆°ab
[
EU_NS4
] = 
	`_
("PIDÇamespace Inode");

273 
Hód_∆°ab
[
EU_NS5
] = 
	`_
("nsUSER");

274 
Desc_∆°ab
[
EU_NS5
] = 
	`_
("USERÇamespace Inode");

276 
Hód_∆°ab
[
EU_NS6
] = 
	`_
("nsUTS");

277 
Desc_∆°ab
[
EU_NS6
] = 
	`_
("UTSÇamespace Inode");

279 
Hód_∆°ab
[
EU_LXC
] = 
	`_
("LXC");

280 
Desc_∆°ab
[
EU_LXC
] = 
	`_
("LXC containerÇame");

282 
Hód_∆°ab
[
EU_RZA
] = 
	`_
("RSan");

283 
Desc_∆°ab
[
EU_RZA
] = 
	`_
("RES Anonymous (KiB)");

285 
Hód_∆°ab
[
EU_RZF
] = 
	`_
("RSfd");

286 
Desc_∆°ab
[
EU_RZF
] = 
	`_
("RES File-based (KiB)");

288 
Hód_∆°ab
[
EU_RZL
] = 
	`_
("RSlk");

289 
Desc_∆°ab
[
EU_RZL
] = 
	`_
("RES Locked (KiB)");

291 
Hód_∆°ab
[
EU_RZS
] = 
	`_
("RSsh");

292 
Desc_∆°ab
[
EU_RZS
] = 
	`_
("RES Shared (KiB)");

294 
Hód_∆°ab
[
EU_CGN
] = 
	`_
("CGNAME");

295 
Desc_∆°ab
[
EU_CGN
] = 
	`_
("Control GroupÇame");

297 
Hód_∆°ab
[
EU_NMA
] = 
	`_
("NU");

298 
Desc_∆°ab
[
EU_NMA
] = 
	`_
("Last Used NUMAÇode");

299 
	}
}

305 
	$buûd_n‹m_∆°ab
 () {

318 
N‹m_∆°ab
[
EXIT_sig«ls_fmt
] = 
	`_
(""

321 
N‹m_∆°ab
[
WRONG_swôch_fmt
] = 
	`_
(""

324 
N‹m_∆°ab
[
HELP_cmdlöe_fmt
] = 
	`_
(""

327 
N‹m_∆°ab
[
FAIL_°©›n_fmt
] = 
	`_
("failed /proc/stat open: %s");

328 
N‹m_∆°ab
[
FAIL_›ílib_fmt
] = 
	`_
("failed openproc: %s");

329 
N‹m_∆°ab
[
BAD_dñayöt_fmt
] = 
	`_
("bad delay interval '%s'");

330 
N‹m_∆°ab
[
BAD_nôî©e_fmt
] = 
	`_
("bad iterationsárgument '%s'");

331 
N‹m_∆°ab
[
LIMIT_ex˚ed_fmt
] = 
	`_
("pidÜimit (%d)Éxceeded");

332 
N‹m_∆°ab
[
BAD_m⁄_pids_fmt
] = 
	`_
("badÖid '%s'");

333 
N‹m_∆°ab
[
MISSING_¨gs_fmt
] = 
	`_
("-%cÑequiresárgument");

334 
N‹m_∆°ab
[
BAD_width¨g_fmt
] = 
	`_
("bad widthárg '%s'");

335 
N‹m_∆°ab
[
UNKNOWN_›ts_fmt
] = 
	`_
(""

338 
N‹m_∆°ab
[
DELAY_£cuª_txt
] = 
	`_
("-d disallowed in \"secure\" mode");

339 
N‹m_∆°ab
[
DELAY_bad¨g_txt
] = 
	`_
("-dÑequiresÖositiveárgument");

340 
N‹m_∆°ab
[
ON_w‹d_⁄ly_txt
] = 
	`_
("On");

341 
N‹m_∆°ab
[
OFF_⁄e_w‹d_txt
] = 
	`_
("Off");

344 
N‹m_∆°ab
[
USAGE_abbªv_txt
] = 
	`_
(" -hv | -bcEHiOSs1 -d secs -n max -u|U user -pÖid(s) -o field -w [cols]");

345 
N‹m_∆°ab
[
FAIL_°©gë_txt
] = 
	`_
("failed /proc/statÑead");

346 
N‹m_∆°ab
[
FOREST_modes_fmt
] = 
	`_
("Forest mode %s");

347 
N‹m_∆°ab
[
FAIL_ây_gë_txt
] = 
	`_
("failedÅty get");

348 
N‹m_∆°ab
[
FAIL_ây_£t_fmt
] = 
	`_
("failedÅty set: %s");

349 
N‹m_∆°ab
[
CHOOSE_group_txt
] = 
	`_
("Choose field group (1 - 4)");

350 
N‹m_∆°ab
[
DISABLED_cmd_txt
] = 
	`_
("Command disabled, 'A' modeÑequired");

351 
N‹m_∆°ab
[
DISABLED_wö_fmt
] = 
	`_
("Command disabled,áctivate %s with '-' or '_'");

352 
N‹m_∆°ab
[
COLORS_nom≠_txt
] = 
	`_
("No colorsÅo map!");

353 
N‹m_∆°ab
[
FAIL_rc_›í_fmt
] = 
	`_
("Failed '%s' open: %s");

354 
N‹m_∆°ab
[
WRITE_rcfûe_fmt
] = 
	`_
("Wrote configurationÅo '%s'");

355 
N‹m_∆°ab
[
DELAY_ch™ge_fmt
] = 
	`_
("Change delay from %.1fÅo");

356 
N‹m_∆°ab
[
THREADS_show_fmt
] = 
	`_
("ShowÅhreads %s");

357 
N‹m_∆°ab
[
IRIX_curmode_fmt
] = 
	`_
("Irix mode %s");

358 
N‹m_∆°ab
[
GET_pid2kûl_fmt
] = 
	`_
("PIDÅo signal/kill [defaultÖid = %d]");

359 
N‹m_∆°ab
[
GET_sigs_num_fmt
] = 
	`_
("SendÖid %d signal [%d/sigterm]");

360 
N‹m_∆°ab
[
FAIL_sig«ls_fmt
] = 
	`_
("Failed signalÖid '%d' with '%d': %s");

361 
N‹m_∆°ab
[
BAD_sig«lid_txt
] = 
	`_
("Invalid signal");

362 
N‹m_∆°ab
[
GET_pid2ni˚_fmt
] = 
	`_
("PIDÅoÑenice [defaultÖid = %d]");

363 
N‹m_∆°ab
[
GET_ni˚_num_fmt
] = 
	`_
("Renice PID %dÅo value");

364 
N‹m_∆°ab
[
FAIL_ª_ni˚_fmt
] = 
	`_
("FailedÑenice of PID %dÅo %d: %s");

365 
N‹m_∆°ab
[
NAME_wödows_fmt
] = 
	`_
("Rename window '%s'Åo (1-3 chars)");

366 
N‹m_∆°ab
[
TIME_accumed_fmt
] = 
	`_
("CumulativeÅime %s");

367 
N‹m_∆°ab
[
GET_max_èsk_fmt
] = 
	`_
("MaximumÅasks = %d, changeÅo (0 is unlimited)");

368 
N‹m_∆°ab
[
BAD_max_èsk_txt
] = 
	`_
("Invalid maximum");

369 
N‹m_∆°ab
[
GET_u£r_ids_txt
] = 
	`_
("Which user (blank foráll)");

370 
N‹m_∆°ab
[
UNKNOWN_cmds_txt
] = 
	`_
("Unknown command -Åry 'h' for help");

371 
N‹m_∆°ab
[
SCROLL_co‹d_fmt
] = 
	`_
("scroll coordinates: y = %d/%%d (tasks), x = %d/%d (fields)");

372 
N‹m_∆°ab
[
FAIL_Æloc_c_txt
] = 
	`_
("failed memoryállocate");

373 
N‹m_∆°ab
[
FAIL_Æloc_r_txt
] = 
	`_
("failed memoryÑe-allocate");

374 
N‹m_∆°ab
[
BAD_numÊﬂt_txt
] = 
	`_
("Unacceptable floatingÖoint");

375 
N‹m_∆°ab
[
BAD_u£∫ame_txt
] = 
	`_
("Invalid user");

376 
N‹m_∆°ab
[
FOREST_võws_txt
] = 
	`_
("forest view");

377 
N‹m_∆°ab
[
FAIL_widïid_txt
] = 
	`_
("failedÖid maximum sizeÅest");

378 
N‹m_∆°ab
[
FAIL_wide˝u_txt
] = 
	`_
("failedÇumber of cpusÅest");

379 
N‹m_∆°ab
[
RC_bad_fûes_fmt
] = 
	`_
("incompatibleÑcfile, you should delete '%s'");

380 
N‹m_∆°ab
[
RC_bad_íåy_fmt
] = 
	`_
("windowÉntry #%d corrupt,Ölease delete '%s'");

381 
N‹m_∆°ab
[
NOT_⁄£cuª_txt
] = 
	`_
("Unavailable in secure mode");

382 
N‹m_∆°ab
[
NOT_smp_˝us_txt
] = 
	`_
("Only 1 cpu detected");

383 
N‹m_∆°ab
[
BAD_öãgîs_txt
] = 
	`_
("Unacceptable integer");

384 
N‹m_∆°ab
[
SELECT_˛ash_txt
] = 
	`_
("conflictingÖrocess selections (U/p/u)");

387 
N‹m_∆°ab
[
AMT_kûobyã_txt
] = 
	`_
("KiB");

390 
N‹m_∆°ab
[
AMT_megabyã_txt
] = 
	`_
("MiB");

393 
N‹m_∆°ab
[
AMT_gigabyã_txt
] = 
	`_
("GiB");

396 
N‹m_∆°ab
[
AMT_ãøbyã_txt
] = 
	`_
("TiB");

399 
N‹m_∆°ab
[
AMT_≥èbyã_txt
] = 
	`_
("PiB");

402 
N‹m_∆°ab
[
AMT_exxabyã_txt
] = 
	`_
("EiB");

403 
N‹m_∆°ab
[
WORD_thªads_txt
] = 
	`_
("Threads");

404 
N‹m_∆°ab
[
WORD_¥o˚ss_txt
] = 
	`_
("Tasks");

408 
N‹m_∆°ab
[
WORD_Æl˝us_txt
] = 
	`_
("Cpu(s):");

411 
N‹m_∆°ab
[
WORD_óch˝u_fmt
] = 
	`_
("Cpu%-3d:");

413 
N‹m_∆°ab
[
WORD_™Ÿhî_txt
] = 
	`_
("another ");

414 
N‹m_∆°ab
[
FIND_no_√xt_txt
] = 
	`_
("LocateÇext inactive, use \"L\"");

415 
N‹m_∆°ab
[
GET_föd_°r_txt
] = 
	`_
("Locate string");

416 
N‹m_∆°ab
[
FIND_no_föd_fmt
] = 
	`_
("%s\"%s\"Çot found");

417 
N‹m_∆°ab
[
XTRA_fixwide_fmt
] = 
	`_
("width incr is %d, changeÅo (0 default, -1áuto)");

418 
N‹m_∆°ab
[
XTRA_w¨ncfg_txt
] = 
	`_
("OverwriteÉxisting obsolete/corruptedÑcfile?");

419 
N‹m_∆°ab
[
XTRA_badÊds_fmt
] = 
	`_
("unrecognized fieldÇame '%s'");

420 
N‹m_∆°ab
[
XTRA_wösize_txt
] = 
	`_
("even using fieldÇames only, window isÇowÅoo small");

421 #i‚de‡
INSP_OFFDEMO


422 
N‹m_∆°ab
[
YINSP_demo01_txt
] = 
	`_
("Open Files");

423 
N‹m_∆°ab
[
YINSP_demo02_txt
] = 
	`_
("NUMA Info");

424 
N‹m_∆°ab
[
YINSP_demo03_txt
] = 
	`_
("Log");

425 
N‹m_∆°ab
[
YINSP_deqfmt_txt
] = 
	`_
("the '=' key willÉventually showÅheáctual fileÑead or command(s)Éxecuted ...");

426 
N‹m_∆°ab
[
YINSP_deqtyp_txt
] = 
	`_
("demo");

427 
N‹m_∆°ab
[
YINSP_d°‹y_txt
] = 
	`_
(""

459 
N‹m_∆°ab
[
YINSP_n€¡s_txt
] = 
	`_
("toÉnable 'Y'Öress <Enter>ÅhenÅype 'W'ándÑestartÅop");

461 
N‹m_∆°ab
[
YINSP_n€¡s_txt
] = 
	`_
("toÉnable 'Y'Ölease consultÅheÅop manÖage (press Enter)");

463 
N‹m_∆°ab
[
YINSP_Áûed_fmt
] = 
	`_
("Selection failed with: %s\n");

464 
N‹m_∆°ab
[
YINSP_pidbad_fmt
] = 
	`_
("unableÅo inspect,Öid %dÇot found");

465 
N‹m_∆°ab
[
YINSP_pid£e_fmt
] = 
	`_
("inspectát PID [defaultÖid = %d]");

466 
N‹m_∆°ab
[
YINSP_°©us_fmt
] = 
	`_
("%s: %*d-%-*dÜines, %*d-%*d columns, %lu bytesÑead");

467 
N‹m_∆°ab
[
YINSP_w‹kö_txt
] = 
	`_
("patienceÖlease, working...");

470 
N‹m_∆°ab
[
OSEL_¥om±s_fmt
] = 
	`_
("add filter #%d (%s)ás: [!]FLD?VAL");

471 
N‹m_∆°ab
[
OSEL_ˇ£nŸ_txt
] = 
	`_
("ignoring case");

472 
N‹m_∆°ab
[
OSEL_ˇ£yes_txt
] = 
	`_
("case sensitive");

473 
N‹m_∆°ab
[
OSEL_îrdups_txt
] = 
	`_
("duplicate filter was ignored");

474 
N‹m_∆°ab
[
OSEL_îrdñm_fmt
] = 
	`_
("'%s' filter delimiter is missing");

475 
N‹m_∆°ab
[
OSEL_îrvÆu_fmt
] = 
	`_
("'%s' filter value is missing");

476 
N‹m_∆°ab
[
WORD_ö˛ude_txt
] = 
	`_
("include");

477 
N‹m_∆°ab
[
WORD_ex˛ude_txt
] = 
	`_
("exclude");

478 
N‹m_∆°ab
[
OSEL_°©lö_fmt
] = 
	`_
("<Enter>ÅoÑesume, filters: %s");

479 
N‹m_∆°ab
[
WORD_n⁄e⁄e_txt
] = 
	`_
("none");

481 
N‹m_∆°ab
[
NUMA_nodíam_fmt
] = 
	`_
("Node%-2d:");

482 
N‹m_∆°ab
[
NUMA_nodegë_fmt
] = 
	`_
("expand whichÇode (0-%d)");

483 
N‹m_∆°ab
[
NUMA_nodebad_txt
] = 
	`_
("invalidÇode");

484 
N‹m_∆°ab
[
NUMA_nodíŸ_txt
] = 
	`_
("sorry, NUMAÉxtensions unavailable");

489 
N‹m_∆°ab
[
WORD_abv_mem_txt
] = 
	`_
("Mem ");

490 
N‹m_∆°ab
[
WORD_abv_swp_txt
] = 
	`_
("Swap");

491 
N‹m_∆°ab
[
BAD_memsˇÀ_fmt
] = 
	`_
("bad memory scalingárg '%c'");

492 
	}
}

498 
	$buûd_uniq_∆°ab
 () {

525 
Uniq_∆°ab
[
KEYS_hñpbas_fmt
] = 
	`_
(""

553 
Uniq_∆°ab
[
KEYS_hñ≥xt_fmt
] = 
	`_
(""

557 
Uniq_∆°ab
[
WINDOWS_hñp_fmt
] = 
	`_
(""

607 
Uniq_∆°ab
[
COLOR_cu°om_fmt
] = 
	`_
(""

633 
Uniq_∆°ab
[
FIELD_hódî_fmt
] = 
	`_
(""

638 
Uniq_∆°ab
[
STATE_löe_1_fmt
] = 
	`_
("%s:~3"

641 
Uniq_∆°ab
[
STATE_lö2x4_fmt
] = 
	`_
("%%%s~3"

644 
Uniq_∆°ab
[
STATE_lö2x5_fmt
] = 
	`_
("%%%s~3"

650 
Uniq_∆°ab
[
STATE_lö2x6_fmt
] = 
	`_
("%%%s~3"

656 
Uniq_∆°ab
[
STATE_lö2x7_fmt
] = 
	`_
("%%%s~3"

659 
Uniq_∆°ab
[
MEMORY_löes_fmt
] = 
	`_
(""

663 
Uniq_∆°ab
[
YINSP_hd£ls_fmt
] = 
	`_
(""

668 
Uniq_∆°ab
[
YINSP_hdvõw_fmt
] = 
	`_
(""

672 
	}
}

694 
	$öôülize_∆s
 () {

695 #ifde‡
VALIDATE_NLS


696 c⁄° *
∆s_îr
 ="\t%s_nlstab[%d] == NULL\n";

697 
i
;

699 
	`£éoˇÀ
 (
LC_ALL
, "");

700 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

701 
	`ãxtdomaö
(
PACKAGE
);

703 
	`mem£t
(
Hód_∆°ab
, 0, (Head_nlstab));

704 
	`mem£t
(
Desc_∆°ab
, 0, (Desc_nlstab));

705 
	`buûd_two_∆°abs
();

706 
i
 = 0; i < 
EU_MAXPFLGS
; i++) {

707 i‡(!
Hód_∆°ab
[
i
]) {

708 
	`Ârötf
(
°dîr
, 
∆s_îr
, "Hód", 
i
);

709 
	`exô
(1);

711 i‡(!
Desc_∆°ab
[
i
]) {

712 
	`Ârötf
(
°dîr
, 
∆s_îr
, "Desc", 
i
);

713 
	`exô
(1);

716 
	`mem£t
(
N‹m_∆°ab
, 0, (Norm_nlstab));

717 
	`buûd_n‹m_∆°ab
();

718 
i
 = 0; i < 
n‹m_MAX
; i++)

719 i‡(!
N‹m_∆°ab
[
i
]) {

720 
	`Ârötf
(
°dîr
, 
∆s_îr
, "N‹m", 
i
);

721 
	`exô
(1);

723 
	`mem£t
(
Uniq_∆°ab
, 0, (Uniq_nlstab));

724 
	`buûd_uniq_∆°ab
();

725 
i
 = 0; i < 
uniq_MAX
; i++)

726 i‡(!
Uniq_∆°ab
[
i
]) {

727 
	`Ârötf
(
°dîr
, 
∆s_îr
, "Uniq", 
i
);

728 
	`exô
(1);

731 
	`£éoˇÀ
 (
LC_ALL
, "");

732 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

733 
	`ãxtdomaö
(
PACKAGE
);

735 
	`buûd_two_∆°abs
();

736 
	`buûd_n‹m_∆°ab
();

737 
	`buûd_uniq_∆°ab
();

739 
	}
}

	@top/top_nls.h

19 #i‚de‡
_It›_∆s


20 
	#_It›_∆s


	)

40 c⁄° *
Hód_∆°ab
[];

41 c⁄° *
Desc_∆°ab
[];

42 c⁄° *
N‹m_∆°ab
[];

43 c⁄° *
Uniq_∆°ab
[];

50 
	#N_cﬁ
(
e
Ë
Hód_∆°ab
[e]

	)

51 
	#N_Êd
(
e
Ë
Desc_∆°ab
[e]

	)

52 
	#N_txt
(
e
Ë
N‹m_∆°ab
[e]

	)

53 
	#N_fmt
(
e
Ë
N‹m_∆°ab
[e]

	)

54 
	#N_unq
(
e
Ë
Uniq_∆°ab
[e]

	)

64 
	en‹m_∆s
 {

65 
	mAMT_exxabyã_txt
, 
	mAMT_gigabyã_txt
, 
	mAMT_kûobyã_txt
, 
	mAMT_megabyã_txt
,

66 
	mAMT_≥èbyã_txt
, 
	mAMT_ãøbyã_txt
, 
	mBAD_dñayöt_fmt
, 
	mBAD_öãgîs_txt
,

67 
	mBAD_max_èsk_txt
, 
	mBAD_memsˇÀ_fmt
, 
	mBAD_m⁄_pids_fmt
, 
	mBAD_nôî©e_fmt
,

68 
	mBAD_numÊﬂt_txt
, 
	mBAD_sig«lid_txt
, 
	mBAD_u£∫ame_txt
, 
	mBAD_width¨g_fmt
,

69 
	mCHOOSE_group_txt
, 
	mCOLORS_nom≠_txt
, 
	mDELAY_bad¨g_txt
, 
	mDELAY_ch™ge_fmt
,

70 
	mDELAY_£cuª_txt
, 
	mDISABLED_cmd_txt
, 
	mDISABLED_wö_fmt
, 
	mEXIT_sig«ls_fmt
,

71 
	mFAIL_Æloc_c_txt
, 
	mFAIL_Æloc_r_txt
, 
	mFAIL_›ílib_fmt
, 
	mFAIL_rc_›í_fmt
,

72 
	mFAIL_ª_ni˚_fmt
, 
	mFAIL_sig«ls_fmt
, 
	mFAIL_°©gë_txt
, 
	mFAIL_°©›n_fmt
,

73 
	mFAIL_ây_gë_txt
, 
	mFAIL_ây_£t_fmt
, 
	mFAIL_wide˝u_txt
, 
	mFAIL_widïid_txt
,

74 
	mFIND_no_föd_fmt
, 
	mFIND_no_√xt_txt
, 
	mFOREST_modes_fmt
, 
	mFOREST_võws_txt
,

75 
	mGET_föd_°r_txt
, 
	mGET_max_èsk_fmt
, 
	mGET_ni˚_num_fmt
, 
	mGET_pid2kûl_fmt
,

76 
	mGET_pid2ni˚_fmt
, 
	mGET_sigs_num_fmt
, 
	mGET_u£r_ids_txt
, 
	mHELP_cmdlöe_fmt
,

77 
	mIRIX_curmode_fmt
, 
	mLIMIT_ex˚ed_fmt
, 
	mMISSING_¨gs_fmt
, 
	mNAME_wödows_fmt
,

78 
	mNOT_⁄£cuª_txt
, 
	mNOT_smp_˝us_txt
, 
	mNUMA_nodebad_txt
, 
	mNUMA_nodegë_fmt
,

79 
	mNUMA_nodíam_fmt
, 
	mNUMA_nodíŸ_txt
, 
	mOFF_⁄e_w‹d_txt
, 
	mON_w‹d_⁄ly_txt
,

80 
	mOSEL_ˇ£nŸ_txt
, 
	mOSEL_ˇ£yes_txt
, 
	mOSEL_îrdñm_fmt
, 
	mOSEL_îrdups_txt
,

81 
	mOSEL_îrvÆu_fmt
, 
	mOSEL_¥om±s_fmt
, 
	mOSEL_°©lö_fmt
, 
	mRC_bad_íåy_fmt
,

82 
	mRC_bad_fûes_fmt
, 
	mSCROLL_co‹d_fmt
, 
	mSELECT_˛ash_txt
, 
	mTHREADS_show_fmt
,

83 
	mTIME_accumed_fmt
, 
	mUNKNOWN_cmds_txt
, 
	mUNKNOWN_›ts_fmt
, 
	mUSAGE_abbªv_txt
,

84 
	mWORD_abv_mem_txt
, 
	mWORD_abv_swp_txt
, 
	mWORD_Æl˝us_txt
, 
	mWORD_™Ÿhî_txt
,

85 
	mWORD_óch˝u_fmt
, 
	mWORD_ex˛ude_txt
, 
	mWORD_ö˛ude_txt
, 
	mWORD_n⁄e⁄e_txt
,

86 
	mWORD_¥o˚ss_txt
, 
	mWORD_thªads_txt
, 
	mWRITE_rcfûe_fmt
, 
	mWRONG_swôch_fmt
,

87 
	mXTRA_badÊds_fmt
, 
	mXTRA_fixwide_fmt
, 
	mXTRA_w¨ncfg_txt
, 
	mXTRA_wösize_txt
,

88 #i‚de‡
INSP_OFFDEMO


89 
	mYINSP_demo01_txt
, 
	mYINSP_demo02_txt
, 
	mYINSP_demo03_txt
, 
	mYINSP_deqfmt_txt
,

90 
	mYINSP_deqtyp_txt
, 
	mYINSP_d°‹y_txt
,

92 
	mYINSP_Áûed_fmt
, 
	mYINSP_n€¡s_txt
, 
	mYINSP_pidbad_fmt
, 
	mYINSP_pid£e_fmt
,

93 
	mYINSP_°©us_fmt
, 
	mYINSP_w‹kö_txt
,

94 
	mn‹m_MAX


97 
	euniq_∆s
 {

98 
	mCOLOR_cu°om_fmt
, 
	mFIELD_hódî_fmt
, 
	mKEYS_hñpbas_fmt
, 
	mKEYS_hñ≥xt_fmt
,

99 
	mMEMORY_löes_fmt
, 
	mSTATE_lö2x4_fmt
, 
	mSTATE_lö2x5_fmt
, 
	mSTATE_lö2x6_fmt
,

100 
	mSTATE_lö2x7_fmt
, 
	mSTATE_löe_1_fmt
, 
	mWINDOWS_hñp_fmt
, 
	mYINSP_hd£ls_fmt
,

101 
	mYINSP_hdvõw_fmt
,

102 
	muniq_MAX


105 
öôülize_∆s
 ();

	@uptime.c

20 
	~<î∫o.h
>

21 
	~<gë›t.h
>

22 
	~<°dlib.h
>

23 
	~<°dio.h
>

24 
	~<time.h
>

25 
	~<sys/time.h
>

27 
	~"c.h
"

28 
	~"fûeutûs.h
"

29 
	~"∆s.h
"

30 
	~"¥oc/sysöfo.h
"

31 
	~"¥oc/wh©time.h
"

32 
	~"¥oc/vîsi⁄.h
"

34 
	$¥öt_u±ime_sö˚
()

36 
now
, 
u±ime_£cs
, 
idÀ_£cs
;

37 
time_t
 
up_sö˚_£cs
;

38 
tm
 *
up_sö˚
;

39 
timevÆ
 
tim
;

42 
	`gëtimeofday
(&
tim
, 
NULL
);

43 
now
 = 
tim
.
tv_£c
 + (tim.
tv_u£c
 / 1000000.0);

46 
	`u±ime
(&
u±ime_£cs
, &
idÀ_£cs
);

47 
up_sö˚_£cs
 = (
time_t
Ë((
now
 - 
u±ime_£cs
) + 0.5);

50 
up_sö˚
 = 
	`loˇ…ime
(&
up_sö˚_£cs
);

51 
	`¥ötf
("%04d-%02d-%02d %02d:%02d:%02d\n",

52 
up_sö˚
->
tm_yór
 + 1900, up_sö˚->
tm_m⁄
 + 1, up_sö˚->
tm_mday
,

53 
up_sö˚
->
tm_hour
, up_sö˚->
tm_mö
, up_sö˚->
tm_£c
);

54 
	}
}

56 
__©åibuã__
 ((
__n‹ëu∫__
)Ë
	$ußge
(
FILE
 * 
out
)

58 
	`Âuts
(
USAGE_HEADER
, 
out
);

59 
	`Ârötf
(
out
, 
	`_
(" %†[›ti⁄s]\n"), 
¥ogøm_övoˇti⁄_sh‹t_«me
);

60 
	`Âuts
(
USAGE_OPTIONS
, 
out
);

61 
	`Âuts
(
	`_
(" -p, --¥ëty show u±imêöÖªây f‹m©\n"), 
out
);

62 
	`Âuts
(
USAGE_HELP
, 
out
);

63 
	`Âuts
(
	`_
(" -s, --sö˚ sy°em u∞sö˚\n"), 
out
);

64 
	`Âuts
(
USAGE_VERSION
, 
out
);

65 
	`Ârötf
(
out
, 
	`USAGE_MAN_TAIL
("uptime(1)"));

67 
	`exô
(
out
 =
°dîr
 ? 
EXIT_FAILURE
 : 
EXIT_SUCCESS
);

68 
	}
}

70 
	$maö
(
¨gc
, **
¨gv
)

72 
c
, 
p
 = 0;

74 c⁄° 
›ti⁄
 
l⁄g›ts
[] = {

75 {"¥ëty", 
no_¨gumít
, 
NULL
, 'p'},

76 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

77 {"sö˚", 
no_¨gumít
, 
NULL
, 's'},

78 {"vîsi⁄", 
no_¨gumít
, 
NULL
, 'V'},

79 {
NULL
, 0, NULL, 0}

82 #ifde‡
HAVE_PROGRAM_INVOCATION_NAME


83 
¥ogøm_övoˇti⁄_«me
 = 
¥ogøm_övoˇti⁄_sh‹t_«me
;

85 
	`£éoˇÀ
 (
LC_ALL
, "");

86 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

87 
	`ãxtdomaö
(
PACKAGE
);

88 
	`©exô
(
˛o£_°dout
);

90 (
c
 = 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "phsV", 
l⁄g›ts
, 
NULL
)) != -1)

91 
c
) {

93 
p
 = 1;

96 
	`ußge
(
°dout
);

98 
	`¥öt_u±ime_sö˚
();

99  
EXIT_SUCCESS
;

101 
	`¥ötf
(
PROCPS_NG_VERSION
);

102  
EXIT_SUCCESS
;

104 
	`ußge
(
°dîr
);

107 
	`¥öt_u±ime
(
p
);

108  
EXIT_SUCCESS
;

109 
	}
}

	@vmstat.c

31 
	~<as£π.h
>

32 
	~<˘y≥.h
>

33 
	~<dúít.h
>

34 
	~<î∫o.h
>

35 
	~<f˙é.h
>

36 
	~<gë›t.h
>

37 
	~<limôs.h
>

38 
	~<°dio.h
>

39 
	~<°dlib.h
>

40 
	~<°rög.h
>

41 
	~<sys/io˘l.h
>

42 
	~<sys/ty≥s.h
>

43 
	~<ãrmios.h
>

44 
	~<uni°d.h
>

45 
	~<time.h
>

47 
	~"c.h
"

48 
	~"fûeutûs.h
"

49 
	~"∆s.h
"

50 
	~"°rutûs.h
"

51 
	~"¥oc/sysöfo.h
"

52 
	~"¥oc/vîsi⁄.h
"

54 
	#UNIT_B
 1

	)

55 
	#UNIT_k
 1000

	)

56 
	#UNIT_K
 1024

	)

57 
	#UNIT_m
 1000000

	)

58 
	#UNIT_M
 1048576

	)

60 
	gd©aUnô
 = 
UNIT_K
;

61 
	gszD©aUnô
[3] = "K";

63 
	#VMSTAT
 0

	)

64 
	#DISKSTAT
 0x00000001

	)

65 
	#VMSUMSTAT
 0x00000002

	)

66 
	#SLABSTAT
 0x00000004

	)

67 
	#PARTITIONSTAT
 0x00000008

	)

68 
	#DISKSUMSTAT
 0x00000010

	)

70 
	g°©Mode
 = 
VMSTAT
;

73 
	ga_›ti⁄
;

76 
	gw_›ti⁄
;

79 
	gt_›ti⁄
;

81 
	g¶ìp_time
 = 1;

82 
	göföôe_upd©es
 = 0;

83 
	gnum_upd©es
;

85 
	gheight
;

86 
	gm‹ehódîs
 = 
TRUE
;

88 
__©åibuã__
 ((
__n‹ëu∫__
))

89 
	$ußge
(
FILE
 * 
out
)

91 
	`Âuts
(
USAGE_HEADER
, 
out
);

92 
	`Ârötf
(
out
,

93 
	`_
(" %s [options] [delay [count]]\n"),

94 
¥ogøm_övoˇti⁄_sh‹t_«me
);

95 
	`Âuts
(
USAGE_OPTIONS
, 
out
);

96 
	`Âuts
(
	`_
(" -a, --a˘ivêá˘ive/öa˘ivêmem‹y\n"), 
out
);

97 
	`Âuts
(
	`_
(" -f, --f‹k†Çumbî o‡f‹k†sö˚ boŸ\n"), 
out
);

98 
	`Âuts
(
	`_
(" -m, --¶ab† sœböfo\n"), 
out
);

99 
	`Âuts
(
	`_
(" -n, --⁄e-hódî dÿnŸÑedi•œy hódî\n"), 
out
);

100 
	`Âuts
(
	`_
(" -s, --°©†Évíàcou¡î sèti°ics\n"), 
out
);

101 
	`Âuts
(
	`_
(" -d, --disk disk sèti°ics\n"), 
out
);

102 
	`Âuts
(
	`_
(" -D, --disk-sum summ¨izêdisk sèti°ics\n"), 
out
);

103 
	`Âuts
(
	`_
(" -p, --∑πôi⁄ <dev>Ö¨tôi⁄ s≥cifi¯°©i°ics\n"), 
out
);

104 
	`Âuts
(
	`_
(" -S, --unô <ch¨> deföêdi•œy unô\n"), 
out
);

105 
	`Âuts
(
	`_
(" -w, --widê widêouçut\n"), 
out
);

106 
	`Âuts
(
	`_
(" -t, --time°am∞ showÅime°amp\n"), 
out
);

107 
	`Âuts
(
USAGE_SEPARATOR
, 
out
);

108 
	`Âuts
(
USAGE_HELP
, 
out
);

109 
	`Âuts
(
USAGE_VERSION
, 
out
);

110 
	`Ârötf
(
out
, 
	`USAGE_MAN_TAIL
("vmstat(8)"));

112 
	`exô
(
out
 =
°dîr
 ? 
EXIT_FAILURE
 : 
EXIT_SUCCESS
);

113 
	}
}

117 
	$f‹m©_1024
(
vÆ64
, *
ª°ri˘
 
d°
)

119 
ﬁdvÆ
;

120 c⁄° 
suffix
[] = " kmgtpe";

121 
Àvñ
 = 0;

122 
vÆ32
;

124 i‡(
vÆ64
 < 1000) {

126 
vÆ32
 = 
vÆ64
;

127  
	`•rötf
(
d°
, "%3u ", 
vÆ32
);

130 
vÆ64
 > 0xffffffffull) {

131 
Àvñ
++;

132 
vÆ64
 /= 1024;

135 
vÆ32
 = 
vÆ64
;

137 
vÆ32
 > 999) {

138 
Àvñ
++;

139 
ﬁdvÆ
 = 
vÆ32
;

140 
vÆ32
 /= 1024;

143 i‡(
vÆ32
 < 10) {

144 
‰a˘
 = (
ﬁdvÆ
 % 1024) * 10 / 1024;

145  
	`•rötf
(
d°
, "%u.%u%¯", 
vÆ32
, 
‰a˘
, 
suffix
[
Àvñ
]);

147  
	`•rötf
(
d°
, "%3u%¯", 
vÆ32
, 
suffix
[
Àvñ
]);

148 
	}
}

151 
	$f‹m©_1000
(
vÆ64
, *
ª°ri˘
 
d°
)

153 
ﬁdvÆ
;

154 c⁄° 
suffix
[] = " kmgtpe";

155 
Àvñ
 = 0;

156 
vÆ32
;

158 i‡(
vÆ64
 < 1000) {

160 
vÆ32
 = 
vÆ64
;

161  
	`•rötf
(
d°
, "%3u ", 
vÆ32
);

164 
vÆ64
 > 0xffffffffull) {

165 
Àvñ
++;

166 
vÆ64
 /= 1000;

169 
vÆ32
 = 
vÆ64
;

171 
vÆ32
 > 999) {

172 
Àvñ
++;

173 
ﬁdvÆ
 = 
vÆ32
;

174 
vÆ32
 /= 1000;

177 i‡(
vÆ32
 < 10) {

178 
‰a˘
 = (
ﬁdvÆ
 % 1000) / 100;

179  
	`•rötf
(
d°
, "%u.%u%¯", 
vÆ32
, 
‰a˘
, 
suffix
[
Àvñ
]);

181  
	`•rötf
(
d°
, "%3u%¯", 
vÆ32
, 
suffix
[
Àvñ
]);

182 
	}
}

185 
	$√w_hódî
()

187 
tm
 *
tm_±r
;

188 
time_t
 
the_time
;

189 
timebuf
[32];

194 c⁄° *
hódî
 =

195 
	`_
("procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----");

196 c⁄° *
wide_hódî
 =

197 
	`_
("procs -----------------------memory---------------------- ---swap-- -----io---- -system-- --------cpu--------");

198 c⁄° *
time°amp_hódî
 = 
	`_
(" -----timestamp-----");

200 c⁄° 
f‹m©
[] =

202 c⁄° 
wide_f‹m©
[] =

206 
	`¥ötf
("%s", 
w_›ti⁄
 ? 
wide_hódî
 : 
hódî
);

208 i‡(
t_›ti⁄
) {

209 
	`¥ötf
("%s", 
time°amp_hódî
);

212 
	`¥ötf
("\n");

214 
	`¥ötf
(

215 
w_›ti⁄
 ? 
wide_f‹m©
 : 
f‹m©
,

217 
	`_
("r"),

219 
	`_
("b"),

221 
	`_
("swpd"),

223 
	`_
("free"),

225 
a_›ti⁄
 ? 
	`_
("inact") :

227 
	`_
("buff"),

229 
a_›ti⁄
 ? 
	`_
("active") :

231 
	`_
("cache"),

233 
	`_
("si"),

235 
	`_
("so"),

237 
	`_
("bi"),

239 
	`_
("bo"),

241 
	`_
("in"),

243 
	`_
("cs"),

245 
	`_
("us"),

247 
	`_
("sy"),

249 
	`_
("id"),

251 
	`_
("wa"),

253 
	`_
("st"));

255 i‡(
t_›ti⁄
) {

256 (Ë
	`time
–&
the_time
 );

257 
tm_±r
 = 
	`loˇ…ime
–&
the_time
 );

258 i‡(
	`°r·ime
(
timebuf
, —imebuf), "%Z", 
tm_±r
)) {

259 
timebuf
[
	`°æí
(
time°amp_hódî
) - 1] = '\0';

261 
timebuf
[0] = '\0';

263 
	`¥ötf
(" %*s", ()(
	`°æí
(
time°amp_hódî
Ë- 1), 
timebuf
);

266 
	`¥ötf
("\n");

267 
	}
}

269 
	$unôC⁄vît
(
size
)

271 
cvSize
;

272 
cvSize
 = ()
size
 / 
d©aUnô
 * ((
°©Mode
 =
SLABSTAT
) ? 1 : 1024);

273  (()
cvSize
);

274 
	}
}

276 
	$√w_f‹m©
()

278 c⁄° 
f‹m©
[] =

280 c⁄° 
wide_f‹m©
[] =

283 
tog
 = 0;

284 
i
;

285 
hz
 = 
Hîtz
;

286 
ru¬ög
, 
blocked
, 
dummy_1
, 
dummy_2
;

287 
jiff
 
˝u_u£
[2], 
˝u_nic
[2], 
˝u_sys
[2], 
˝u_idl
[2], 
˝u_iow
[2],

288 
˝u_xxx
[2], 
˝u_yyy
[2], 
˝u_zzz
[2];

289 
jiff
 
du£
, 
dsys
, 
didl
, 
diow
, 
d°l
, 
Div
, 
divo2
;

290 
pgpgö
[2], 
pgpgout
[2], 
pswpö
[2], 
pswpout
[2];

291 
öå
[2], 
˘xt
[2];

292 
¶ìp_hÆf
;

293 
kb_≥r_∑ge
 = 
	`sysc⁄f
(
_SC_PAGESIZE
) / 1024ul;

294 
debt
 = 0;

295 
tm
 *
tm_±r
;

296 
time_t
 
the_time
;

297 
timebuf
[32];

299 
¶ìp_hÆf
 = (
¶ìp_time
 / 2);

300 
	`√w_hódî
();

301 
	`memöfo
();

303 
	`gë°©
(
˝u_u£
, 
˝u_nic
, 
˝u_sys
, 
˝u_idl
, 
˝u_iow
, 
˝u_xxx
, 
˝u_yyy
,

304 
˝u_zzz
, 
pgpgö
, 
pgpgout
, 
pswpö
, 
pswpout
, 
öå
, 
˘xt
, &
ru¬ög
,

305 &
blocked
, &
dummy_1
, &
dummy_2
);

307 i‡(
t_›ti⁄
) {

308 (Ë
	`time
–&
the_time
 );

309 
tm_±r
 = 
	`loˇ…ime
–&
the_time
 );

310 
	`°r·ime
(
timebuf
, —imebuf), "%Y-%m-%d %H:%M:%S", 
tm_±r
);

313 
du£
 = *
˝u_u£
 + *
˝u_nic
;

314 
dsys
 = *
˝u_sys
 + *
˝u_xxx
 + *
˝u_yyy
;

315 
didl
 = *
˝u_idl
;

316 
diow
 = *
˝u_iow
;

317 
d°l
 = *
˝u_zzz
;

318 
Div
 = 
du£
 + 
dsys
 + 
didl
 + 
diow
 + 
d°l
;

319 i‡(!
Div
ËDiv = 1, 
didl
 = 1;

320 
divo2
 = 
Div
 / 2UL;

321 
	`¥ötf
(
w_›ti⁄
 ? 
wide_f‹m©
 : 
f‹m©
,

322 
ru¬ög
, 
blocked
,

323 
	`unôC⁄vît
(
kb_sw≠_u£d
), unôC⁄vît(
kb_maö_‰ì
),

324 
	`unôC⁄vît
(
a_›ti⁄
?
kb_öa˘ive
:
kb_maö_buf„rs
),

325 
	`unôC⁄vît
(
a_›ti⁄
?
kb_a˘ive
:
kb_maö_ˇched
),

326 ()–(
	`unôC⁄vît
(*
pswpö
 * 
kb_≥r_∑ge
Ë* 
hz
 + 
divo2
Ë/ 
Div
 ),

327 ()–(
	`unôC⁄vît
(*
pswpout
 * 
kb_≥r_∑ge
Ë* 
hz
 + 
divo2
Ë/ 
Div
 ),

328 ()–(*
pgpgö
 * 
hz
 + 
divo2
Ë/ 
Div
 ),

329 ()–(*
pgpgout
 * 
hz
 + 
divo2
Ë/ 
Div
 ),

330 ()–(*
öå
 * 
hz
 + 
divo2
Ë/ 
Div
 ),

331 ()–(*
˘xt
 * 
hz
 + 
divo2
Ë/ 
Div
 ),

332 ()–(100*
du£
 + 
divo2
Ë/ 
Div
 ),

333 ()–(100*
dsys
 + 
divo2
Ë/ 
Div
 ),

334 ()–(100*
didl
 + 
divo2
Ë/ 
Div
 ),

335 ()–(100*
diow
 + 
divo2
Ë/ 
Div
 ),

336 ()–(100*
d°l
 + 
divo2
Ë/ 
Div
 )

339 i‡(
t_›ti⁄
) {

340 
	`¥ötf
(" %s", 
timebuf
);

343 
	`¥ötf
("\n");

346 
i
 = 1; 
öföôe_upd©es
 || i < 
num_upd©es
; i++) {

347 
	`¶ìp
(
¶ìp_time
);

348 i‡(
m‹ehódîs
 && ((
i
 % 
height
) == 0))

349 
	`√w_hódî
();

350 
tog
 = !tog;

352 
	`memöfo
();

354 
	`gë°©
(
˝u_u£
 + 
tog
, 
˝u_nic
 +Åog, 
˝u_sys
 +Åog,

355 
˝u_idl
 + 
tog
, 
˝u_iow
 +Åog, 
˝u_xxx
 +Åog,

356 
˝u_yyy
 + 
tog
, 
˝u_zzz
 +Åog, 
pgpgö
 +Åog,

357 
pgpgout
 + 
tog
, 
pswpö
 +Åog, 
pswpout
 +Åog, 
öå
 +Åog,

358 
˘xt
 + 
tog
, &
ru¬ög
, &
blocked
, &
dummy_1
, &
dummy_2
);

360 i‡(
t_›ti⁄
) {

361 (Ë
	`time
–&
the_time
 );

362 
tm_±r
 = 
	`loˇ…ime
–&
the_time
 );

363 
	`°r·ime
(
timebuf
, —imebuf), "%Y-%m-%d %H:%M:%S", 
tm_±r
);

366 
du£
 =

367 
˝u_u£
[
tog
] - cpu_u£[!tog] + 
˝u_nic
[tog] - cpu_nic[!tog];

368 
dsys
 =

369 
˝u_sys
[
tog
] - cpu_sys[!tog] + 
˝u_xxx
[tog] -

370 
˝u_xxx
[!
tog
] + 
˝u_yyy
[tog] - cpu_yyy[!tog];

371 
didl
 = 
˝u_idl
[
tog
] - cpu_idl[!tog];

372 
diow
 = 
˝u_iow
[
tog
] - cpu_iow[!tog];

373 
d°l
 = 
˝u_zzz
[
tog
] - cpu_zzz[!tog];

376 i‡(
debt
) {

377 
didl
 = ()did»+ 
debt
;

378 
debt
 = 0;

380 i‡(()
didl
 < 0) {

381 
debt
 = ()
didl
;

382 
didl
 = 0;

385 
Div
 = 
du£
 + 
dsys
 + 
didl
 + 
diow
 + 
d°l
;

386 i‡(!
Div
ËDiv = 1, 
didl
 = 1;

387 
divo2
 = 
Div
 / 2UL;

388 
	`¥ötf
(
w_›ti⁄
 ? 
wide_f‹m©
 : 
f‹m©
,

389 
ru¬ög
,

390 
blocked
,

391 
	`unôC⁄vît
(
kb_sw≠_u£d
),unôC⁄vît(
kb_maö_‰ì
),

392 
	`unôC⁄vît
(
a_›ti⁄
?
kb_öa˘ive
:
kb_maö_buf„rs
),

393 
	`unôC⁄vît
(
a_›ti⁄
?
kb_a˘ive
:
kb_maö_ˇched
),

395 ()––
	`unôC⁄vît
((
pswpö
 [
tog
] -Öswpö [!tog])*
kb_≥r_∑ge
)+
¶ìp_hÆf
 )/
¶ìp_time
 ),

397 ()––
	`unôC⁄vît
((
pswpout
[
tog
] -Öswpout[!tog])*
kb_≥r_∑ge
)+
¶ìp_hÆf
 )/
¶ìp_time
 ),

399 ()––
pgpgö
 [
tog
] -Ögpgö [!tog] +
¶ìp_hÆf
 )/
¶ìp_time
 ),

401 ()––
pgpgout
[
tog
] -Ögpgout[!tog] +
¶ìp_hÆf
 )/
¶ìp_time
 ),

403 ()––
öå
 [
tog
] - i¡∏[!tog] +
¶ìp_hÆf
 )/
¶ìp_time
 ),

405 ()––
˘xt
 [
tog
] - ctxà[!tog] +
¶ìp_hÆf
 )/
¶ìp_time
 ),

407 ()–(100*
du£
+
divo2
)/
Div
 ),

409 ()–(100*
dsys
+
divo2
)/
Div
 ),

411 ()–(100*
didl
+
divo2
)/
Div
 ),

413 ()–(100*
diow
+
divo2
)/
Div
 ),

415 ()–(100*
d°l
+
divo2
)/
Div
 )

418 i‡(
t_›ti⁄
) {

419 
	`¥ötf
(" %s", 
timebuf
);

422 
	`¥ötf
("\n");

424 
	}
}

426 
	$disk∑πôi⁄_hódî
(c⁄° *
∑πôi⁄_«me
)

428 
	`¥ötf
("%-10s %10s %10s %10s %10s\n",

429 
∑πôi⁄_«me
,

436 
	`_
("reads "),

438 
	`_
("read sectors"),

442 
	`_
("writes "),

444 
	`_
("requested writes"));

445 
	}
}

447 
	$disk∑πôi⁄_f‹m©
(c⁄° *
∑πôi⁄_«me
)

449 
FILE
 *
fDisk°©
;

450 
disk_°©
 *
disks
;

451 
∑πôi⁄_°©
 *
∑πôi⁄s
, *
cuºít_∑πôi⁄
 = 
NULL
;

452 
ndisks
, 
j
, 
k
, 
≈¨tôi⁄s
;

453 c⁄° 
f‹m©
[] = "%20u %10llu %10u %10llu\n";

455 
fDisk°©
 = 
	`f›í
("/proc/diskstats", "rb");

456 i‡(!
fDisk°©
)

457 
	`xîrx
(
EXIT_FAILURE
,

458 
	`_
("your kernel doesÇot support diskstat. (2.5.70 oráboveÑequired)"));

460 
	`f˛o£
(
fDisk°©
);

461 
ndisks
 = 
	`gëdisk°©
(&
disks
, &
∑πôi⁄s
);

462 
≈¨tôi⁄s
 = 
	`gë∑πôi⁄s_num
(
disks
, 
ndisks
);

463 
k
 = 0; k < 
≈¨tôi⁄s
; k++) {

464 i‡(!
	`°rcmp
(
∑πôi⁄_«me
, 
∑πôi⁄s
[
k
].partition_name)) {

465 
cuºít_∑πôi⁄
 = &(
∑πôi⁄s
[
k
]);

468 i‡(!
cuºít_∑πôi⁄
) {

469 
	`‰ì
(
disks
);

470 
	`‰ì
(
∑πôi⁄s
);

473 
	`disk∑πôi⁄_hódî
(
∑πôi⁄_«me
);

474 
	`¥ötf
(
f‹m©
,

475 
cuºít_∑πôi⁄
->
ªads
, cuºít_∑πôi⁄->
ªads_£˘‹s
,

476 
cuºít_∑πôi⁄
->
wrôes
, cuºít_∑πôi⁄->
ªque°ed_wrôes
);

477 
	`fÊush
(
°dout
);

478 
	`‰ì
(
disks
);

479 
	`‰ì
(
∑πôi⁄s
);

480 
j
 = 1; 
öföôe_upd©es
 || j < 
num_upd©es
; j++) {

481 i‡(
m‹ehódîs
 && ((
j
 % 
height
) == 0))

482 
	`disk∑πôi⁄_hódî
(
∑πôi⁄_«me
);

483 
	`¶ìp
(
¶ìp_time
);

484 
ndisks
 = 
	`gëdisk°©
(&
disks
, &
∑πôi⁄s
);

485 
≈¨tôi⁄s
 = 
	`gë∑πôi⁄s_num
(
disks
, 
ndisks
);

486 
cuºít_∑πôi⁄
 = 
NULL
;

487 
k
 = 0; k < 
≈¨tôi⁄s
; k++) {

488 i‡(!
°rcmp


489 (
∑πôi⁄_«me
, 
∑πôi⁄s
[
k
].partition_name)) {

490 
cuºít_∑πôi⁄
 = &(
∑πôi⁄s
[
k
]);

493 i‡(!
cuºít_∑πôi⁄
) {

494 
	`‰ì
(
disks
);

495 
	`‰ì
(
∑πôi⁄s
);

498 
	`¥ötf
(
f‹m©
,

499 
cuºít_∑πôi⁄
->
ªads
,

500 
cuºít_∑πôi⁄
->
ªads_£˘‹s
,

501 
cuºít_∑πôi⁄
->
wrôes
,

502 
cuºít_∑πôi⁄
->
ªque°ed_wrôes
);

503 
	`fÊush
(
°dout
);

504 
	`‰ì
(
disks
);

505 
	`‰ì
(
∑πôi⁄s
);

508 
	}
}

510 
	$diskhódî
()

512 
tm
 *
tm_±r
;

513 
time_t
 
the_time
;

514 
timebuf
[32];

519 c⁄° *
hódî
 =

520 
	`_
("disk- ------------reads------------ ------------writes----------- -----IO------");

521 c⁄° *
wide_hódî
 =

522 
	`_
("disk- -------------------reads------------------- -------------------writes------------------ ------IO-------");

523 c⁄° *
time°amp_hódî
 = 
	`_
(" -----timestamp-----");

525 c⁄° 
f‹m©
[] =

527 c⁄° 
wide_f‹m©
[] =

530 
	`¥ötf
("%s", 
w_›ti⁄
 ? 
wide_hódî
 : 
hódî
);

532 i‡(
t_›ti⁄
) {

533 
	`¥ötf
("%s", 
time°amp_hódî
);

536 
	`¥ötf
("\n");

538 
	`¥ötf
(
w_›ti⁄
 ? 
wide_f‹m©
 : 
f‹m©
,

541 
	`_
("total"),

543 
	`_
("merged"),

545 
	`_
("sectors"),

547 
	`_
("ms"),

549 
	`_
("total"),

551 
	`_
("merged"),

553 
	`_
("sectors"),

555 
	`_
("ms"),

557 
	`_
("cur"),

559 
	`_
("sec"));

561 i‡(
t_›ti⁄
) {

562 (Ë
	`time
–&
the_time
 );

563 
tm_±r
 = 
	`loˇ…ime
–&
the_time
 );

564 i‡(
	`°r·ime
(
timebuf
, —imebuf), "%Z", 
tm_±r
)) {

565 
timebuf
[
	`°æí
(
time°amp_hódî
) - 1] = '\0';

567 
timebuf
[0] = '\0';

569 
	`¥ötf
(" %*s", ()(
	`°æí
(
time°amp_hódî
Ë- 1), 
timebuf
);

572 
	`¥ötf
("\n");

573 
	}
}

575 
	$diskf‹m©
()

577 c⁄° 
f‹m©
[] =

579 c⁄° 
wide_f‹m©
[] =

582 
FILE
 *
fDisk°©
;

583 
disk_°©
 *
disks
;

584 
∑πôi⁄_°©
 *
∑πôi⁄s
;

585 
ndisks
, 
i
, 
j
, 
k
;

586 
tm
 *
tm_±r
;

587 
time_t
 
the_time
;

588 
timebuf
[32];

591 i‡((
fDisk°©
 = 
	`f›í
("/proc/diskstats", "rb"))) {

592 
	`f˛o£
(
fDisk°©
);

593 
ndisks
 = 
	`gëdisk°©
(&
disks
, &
∑πôi⁄s
);

595 i‡(
t_›ti⁄
) {

596 (Ë
	`time
–&
the_time
 );

597 
tm_±r
 = 
	`loˇ…ime
–&
the_time
 );

598 
	`°r·ime
(
timebuf
, —imebuf), "%Y-%m-%d %H:%M:%S", 
tm_±r
);

601 i‡(!
m‹ehódîs
)

602 
	`diskhódî
();

603 
k
 = 0; k < 
ndisks
; k++) {

604 i‡(
m‹ehódîs
 && ((
k
 % 
height
) == 0))

605 
	`diskhódî
();

606 
	`¥ötf
(
w_›ti⁄
 ? 
wide_f‹m©
 : 
f‹m©
,

607 
disks
[
k
].
disk_«me
,

608 
disks
[
k
].
ªads
,

609 
disks
[
k
].
mîged_ªads
,

610 
disks
[
k
].
ªads_£˘‹s
,

611 
disks
[
k
].
mûli_ªadög
,

612 
disks
[
k
].
wrôes
,

613 
disks
[
k
].
mîged_wrôes
,

614 
disks
[
k
].
wrôãn_£˘‹s
,

615 
disks
[
k
].
mûli_wrôög
,

616 
disks
[
k
].
ö¥ogªss_IO
 ? disks[k].inprogress_IO / 1000 : 0,

617 
disks
[
k
].
mûli_•ít_IO
 ? disks[k].

618 
mûli_•ít_IO
 / 1000 : 0);

620 i‡(
t_›ti⁄
) {

621 
	`¥ötf
(" %s", 
timebuf
);

624 
	`¥ötf
("\n");

625 
	`fÊush
(
°dout
);

627 
	`‰ì
(
disks
);

628 
	`‰ì
(
∑πôi⁄s
);

630 
j
 = 1; 
öföôe_upd©es
 || j < 
num_upd©es
; j++) {

631 
	`¶ìp
(
¶ìp_time
);

632 
ndisks
 = 
	`gëdisk°©
(&
disks
, &
∑πôi⁄s
);

634 i‡(
t_›ti⁄
) {

635 (Ë
	`time
–&
the_time
 );

636 
tm_±r
 = 
	`loˇ…ime
–&
the_time
 );

637 
	`°r·ime
(
timebuf
, —imebuf), "%Y-%m-%d %H:%M:%S", 
tm_±r
);

640 
i
 = 0; i < 
ndisks
; i++, 
k
++) {

641 i‡(
m‹ehódîs
 && ((
k
 % 
height
) == 0))

642 
	`diskhódî
();

643 
	`¥ötf
(
w_›ti⁄
 ? 
wide_f‹m©
 : 
f‹m©
,

644 
disks
[
i
].
disk_«me
,

645 
disks
[
i
].
ªads
,

646 
disks
[
i
].
mîged_ªads
,

647 
disks
[
i
].
ªads_£˘‹s
,

648 
disks
[
i
].
mûli_ªadög
,

649 
disks
[
i
].
wrôes
,

650 
disks
[
i
].
mîged_wrôes
,

651 
disks
[
i
].
wrôãn_£˘‹s
,

652 
disks
[
i
].
mûli_wrôög
,

653 
disks
[
i
].
ö¥ogªss_IO
 ? disks[i].inprogress_IO / 1000 : 0,

654 
disks
[
i
].
mûli_•ít_IO
 ? disks[i].

655 
mûli_•ít_IO
 / 1000 : 0);

657 i‡(
t_›ti⁄
) {

658 
	`¥ötf
(" %s", 
timebuf
);

661 
	`¥ötf
("\n");

662 
	`fÊush
(
°dout
);

664 
	`‰ì
(
disks
);

665 
	`‰ì
(
∑πôi⁄s
);

668 
	`xîrx
(
EXIT_FAILURE
,

669 
	`_
("your kernel doesÇot support diskstat (2.5.70 oráboveÑequired)"));

670 
	}
}

672 
	$¶abhódî
()

674 
	`¥ötf
("%-24s %6s %6s %6s %6s\n",

679 
	`_
("Cache"),

681 
	`_
("Num"),

683 
	`_
("Total"),

685 
	`_
("Size"),

687 
	`_
("Pages"));

688 
	}
}

690 
	$¶abf‹m©
()

692 
FILE
 *
fSœb
;

693 
¶ab_ˇche
 *
¶abs
;

694 
nSœb
, 
i
, 
j
, 
k
;

695 c⁄° 
f‹m©
[] = "%-24s %6u %6u %6u %6u\n";

697 
fSœb
 = 
	`f›í
("/proc/slabinfo", "rb");

698 i‡(!
fSœb
) {

699 
	`xw¨nx
(
	`_
("your kernel doesÇot support slabinfo or yourÖermissionsáre insufficient"));

703 i‡(!
m‹ehódîs
)

704 
	`¶abhódî
();

705 
nSœb
 = 
	`gë¶aböfo
(&
¶abs
);

706 
k
 = 0; k < 
nSœb
; k++) {

707 i‡(
m‹ehódîs
 && ((
k
 % 
height
) == 0))

708 
	`¶abhódî
();

709 
	`¥ötf
(
f‹m©
,

710 
¶abs
[
k
].
«me
,

711 
¶abs
[
k
].
a˘ive_objs
,

712 
¶abs
[
k
].
num_objs
,

713 
¶abs
[
k
].
objsize
, sœbs[k].
obj≥r¶ab
);

715 
	`‰ì
(
¶abs
);

716 
j
 = 1, 
k
 = 1; 
öföôe_upd©es
 || j < 
num_upd©es
; j++) {

717 
	`¶ìp
(
¶ìp_time
);

718 
nSœb
 = 
	`gë¶aböfo
(&
¶abs
);

719 
i
 = 0; i < 
nSœb
; i++, 
k
++) {

720 i‡(
m‹ehódîs
 && ((
k
 % 
height
) == 0))

721 
	`¶abhódî
();

722 
	`¥ötf
(
f‹m©
,

723 
¶abs
[
i
].
«me
,

724 
¶abs
[
i
].
a˘ive_objs
,

725 
¶abs
[
i
].
num_objs
,

726 
¶abs
[
i
].
objsize
, sœbs[i].
obj≥r¶ab
);

728 
	`‰ì
(
¶abs
);

730 
	`f˛o£
(
fSœb
);

731 
	}
}

733 
	$disksum_f‹m©
()

736 
FILE
 *
fDisk°©
;

737 
disk_°©
 *
disks
;

738 
∑πôi⁄_°©
 *
∑πôi⁄s
;

739 
ndisks
, 
i
;

740 
ªads
, 
mîged_ªads
, 
ªad_£˘‹s
, 
mûli_ªadög
, 
wrôes
,

741 
mîged_wrôes
, 
wrôãn_£˘‹s
, 
mûli_wrôög
, 
ö¥ogªss_IO
,

742 
mûli_•ít_IO
, 
weighãd_mûli_•ít_IO
;

744 
ªads
 = 
mîged_ªads
 = 
ªad_£˘‹s
 = 
mûli_ªadög
 = 
wrôes
 =

745 
mîged_wrôes
 = 
wrôãn_£˘‹s
 = 
mûli_wrôög
 = 
ö¥ogªss_IO
 =

746 
mûli_•ít_IO
 = 
weighãd_mûli_•ít_IO
 = 0;

748 i‡((
fDisk°©
 = 
	`f›í
("/proc/diskstats", "rb"))) {

749 
	`f˛o£
(
fDisk°©
);

750 
ndisks
 = 
	`gëdisk°©
(&
disks
, &
∑πôi⁄s
);

751 
	`¥ötf
(
	`_
("%13d disk†\n"), 
ndisks
);

752 
	`¥ötf
(
	`_
("%13dÖartitions \n"),

753 
	`gë∑πôi⁄s_num
(
disks
, 
ndisks
));

755 
i
 = 0; i < 
ndisks
; i++) {

756 
ªads
 +
disks
[
i
].reads;

757 
mîged_ªads
 +
disks
[
i
].merged_reads;

758 
ªad_£˘‹s
 +
disks
[
i
].
ªads_£˘‹s
;

759 
mûli_ªadög
 +
disks
[
i
].milli_reading;

760 
wrôes
 +
disks
[
i
].writes;

761 
mîged_wrôes
 +
disks
[
i
].merged_writes;

762 
wrôãn_£˘‹s
 +
disks
[
i
].written_sectors;

763 
mûli_wrôög
 +
disks
[
i
].milli_writing;

764 
ö¥ogªss_IO
 +
disks
[
i
].inprogress_IO ? disks[i].inprogress_IO / 1000 : 0;

765 
mûli_•ít_IO
 +
disks
[
i
].milli_spent_IO ? disks[i].milli_spent_IO / 1000 : 0;

768 
	`¥ötf
(
	`_
("%13luÅŸÆÑóds\n"), 
ªads
);

769 
	`¥ötf
(
	`_
("%13lu mîgedÑóds\n"), 
mîged_ªads
);

770 
	`¥ötf
(
	`_
("%13luÑód se˘‹s\n"), 
ªad_£˘‹s
);

771 
	`¥ötf
(
	`_
("%13lu mûlòªadög\n"), 
mûli_ªadög
);

772 
	`¥ötf
(
	`_
("%13lu wrôes\n"), 
wrôes
);

773 
	`¥ötf
(
	`_
("%13lu mîged wrôes\n"), 
mîged_wrôes
);

774 
	`¥ötf
(
	`_
("%13lu wrôã¿£˘‹s\n"), 
wrôãn_£˘‹s
);

775 
	`¥ötf
(
	`_
("%13lu mûlòwrôög\n"), 
mûli_wrôög
);

776 
	`¥ötf
(
	`_
("%13lu i≈rogªs†IO\n"), 
ö¥ogªss_IO
);

777 
	`¥ötf
(
	`_
("%13lu mûlò•íàIO\n"), 
mûli_•ít_IO
);

779 
	`‰ì
(
disks
);

780 
	`‰ì
(
∑πôi⁄s
);

782 
	}
}

784 
	$sum_f‹m©
()

786 
ru¬ög
, 
blocked
, 
btime
, 
¥o˚s£s
;

787 
jiff
 
˝u_u£
, 
˝u_nic
, 
˝u_sys
, 
˝u_idl
, 
˝u_iow
, 
˝u_xxx
, 
˝u_yyy
, 
˝u_zzz
;

788 
pgpgö
, 
pgpgout
, 
pswpö
, 
pswpout
;

789 
öå
, 
˘xt
;

791 
	`memöfo
();

793 
	`gë°©
(&
˝u_u£
, &
˝u_nic
, &
˝u_sys
, &
˝u_idl
,

794 &
˝u_iow
, &
˝u_xxx
, &
˝u_yyy
, &
˝u_zzz
,

795 &
pgpgö
, &
pgpgout
, &
pswpö
, &
pswpout
,

796 &
öå
, &
˘xt
, &
ru¬ög
, &
blocked
, &
btime
, &
¥o˚s£s
);

798 
	`¥ötf
(
	`_
("%13lu %†tŸÆ mem‹y\n"), 
	`unôC⁄vît
(
kb_maö_tŸÆ
), 
szD©aUnô
);

799 
	`¥ötf
(
	`_
("%13lu %†u£d mem‹y\n"), 
	`unôC⁄vît
(
kb_maö_u£d
), 
szD©aUnô
);

800 
	`¥ötf
(
	`_
("%13lu %†a˘ivêmem‹y\n"), 
	`unôC⁄vît
(
kb_a˘ive
), 
szD©aUnô
);

801 
	`¥ötf
(
	`_
("%13lu %†öa˘ivêmem‹y\n"), 
	`unôC⁄vît
(
kb_öa˘ive
), 
szD©aUnô
);

802 
	`¥ötf
(
	`_
("%13lu %†‰ì mem‹y\n"), 
	`unôC⁄vît
(
kb_maö_‰ì
), 
szD©aUnô
);

803 
	`¥ötf
(
	`_
("%13lu %†buf„∏mem‹y\n"), 
	`unôC⁄vît
(
kb_maö_buf„rs
), 
szD©aUnô
);

804 
	`¥ötf
(
	`_
("%13lu %†sw≠ cache\n"), 
	`unôC⁄vît
(
kb_maö_ˇched
), 
szD©aUnô
);

805 
	`¥ötf
(
	`_
("%13lu %†tŸÆ sw≠\n"), 
	`unôC⁄vît
(
kb_sw≠_tŸÆ
), 
szD©aUnô
);

806 
	`¥ötf
(
	`_
("%13lu %†u£d sw≠\n"), 
	`unôC⁄vît
(
kb_sw≠_u£d
), 
szD©aUnô
);

807 
	`¥ötf
(
	`_
("%13lu %†‰ì sw≠\n"), 
	`unôC⁄vît
(
kb_sw≠_‰ì
), 
szD©aUnô
);

808 
	`¥ötf
(
	`_
("%13ŒdÇ⁄-ni˚ u£∏˝uÅicks\n"), 
˝u_u£
);

809 
	`¥ötf
(
	`_
("%13ŒdÇi˚ u£∏˝uÅicks\n"), 
˝u_nic
);

810 
	`¥ötf
(
	`_
("%13Œd sy°em cpuÅicks\n"), 
˝u_sys
);

811 
	`¥ötf
(
	`_
("%13Œd idÀ cpuÅicks\n"), 
˝u_idl
);

812 
	`¥ötf
(
	`_
("%13Œd IO-waô cpuÅicks\n"), 
˝u_iow
);

813 
	`¥ötf
(
	`_
("%13Œd IRQ cpuÅicks\n"), 
˝u_xxx
);

814 
	`¥ötf
(
	`_
("%13Œd so·úq cpuÅicks\n"), 
˝u_yyy
);

815 
	`¥ötf
(
	`_
("%13Œd stﬁí cpuÅicks\n"), 
˝u_zzz
);

816 
	`¥ötf
(
	`_
("%13luÖage†∑ged in\n"), 
pgpgö
);

817 
	`¥ötf
(
	`_
("%13luÖage†∑ged out\n"), 
pgpgout
);

818 
	`¥ötf
(
	`_
("%13luÖage†sw≠≥d in\n"), 
pswpö
);

819 
	`¥ötf
(
	`_
("%13luÖage†sw≠≥d out\n"), 
pswpout
);

820 
	`¥ötf
(
	`_
("%13u i¡îru±s\n"), 
öå
);

821 
	`¥ötf
(
	`_
("%13u CPU c⁄ãxàswôches\n"), 
˘xt
);

822 
	`¥ötf
(
	`_
("%13u boŸÅime\n"), 
btime
);

823 
	`¥ötf
(
	`_
("%13u f‹ks\n"), 
¥o˚s£s
);

824 
	}
}

826 
	$f‹k_f‹m©
()

828 
ru¬ög
, 
blocked
, 
btime
, 
¥o˚s£s
;

829 
jiff
 
˝u_u£
, 
˝u_nic
, 
˝u_sys
, 
˝u_idl
, 
˝u_iow
, 
˝u_xxx
, 
˝u_yyy
, 
˝u_zzz
;

830 
pgpgö
, 
pgpgout
, 
pswpö
, 
pswpout
;

831 
öå
, 
˘xt
;

833 
	`gë°©
(&
˝u_u£
, &
˝u_nic
, &
˝u_sys
, &
˝u_idl
,

834 &
˝u_iow
, &
˝u_xxx
, &
˝u_yyy
, &
˝u_zzz
,

835 &
pgpgö
, &
pgpgout
, &
pswpö
, &
pswpout
,

836 &
öå
, &
˘xt
, &
ru¬ög
, &
blocked
, &
btime
, &
¥o˚s£s
);

838 
	`¥ötf
(
	`_
("%13u f‹ks\n"), 
¥o˚s£s
);

839 
	}
}

841 
	$wöhi
()

843 
wösize
 
wö
;

844 
rows
 = 24;

846 i‡(
	`io˘l
(
STDOUT_FILENO
, 
TIOCGWINSZ
, &
wö
Ë!-1 && 0 < wö.
ws_row
)

847 
rows
 = 
wö
.
ws_row
;

849  
rows
;

850 
	}
}

852 
	$maö
(
¨gc
, *
¨gv
[])

854 *
∑πôi⁄
 = 
NULL
;

855 
c
;

856 
tmp
;

858 c⁄° 
›ti⁄
 
l⁄g›ts
[] = {

859 {"a˘ive", 
no_¨gumít
, 
NULL
, 'a'},

860 {"f‹ks", 
no_¨gumít
, 
NULL
, 'f'},

861 {"¶abs", 
no_¨gumít
, 
NULL
, 'm'},

862 {"⁄e-hódî", 
no_¨gumít
, 
NULL
, 'n'},

863 {"°©s", 
no_¨gumít
, 
NULL
, 's'},

864 {"disk", 
no_¨gumít
, 
NULL
, 'd'},

865 {"disk-sum", 
no_¨gumít
, 
NULL
, 'D'},

866 {"∑πôi⁄", 
ªquúed_¨gumít
, 
NULL
, 'p'},

867 {"unô", 
ªquúed_¨gumít
, 
NULL
, 'S'},

868 {"wide", 
no_¨gumít
, 
NULL
, 'w'},

869 {"time°amp", 
no_¨gumít
, 
NULL
, 't'},

870 {"hñp", 
no_¨gumít
, 
NULL
, 'h'},

871 {"vîsi⁄", 
no_¨gumít
, 
NULL
, 'V'},

872 {
NULL
, 0, NULL, 0}

875 #ifde‡
HAVE_PROGRAM_INVOCATION_NAME


876 
¥ogøm_övoˇti⁄_«me
 = 
¥ogøm_övoˇti⁄_sh‹t_«me
;

878 
	`£éoˇÀ
 (
LC_ALL
, "");

879 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

880 
	`ãxtdomaö
(
PACKAGE
);

881 
	`©exô
(
˛o£_°dout
);

883 (
c
 =

884 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "afmnsdDp:S:wthV", 
l⁄g›ts
,

885 
NULL
)Ë!
EOF
)

886 
c
) {

888 
	`¥ötf
(
PROCPS_NG_VERSION
);

889  
EXIT_SUCCESS
;

891 
	`ußge
(
°dout
);

893 
°©Mode
 |
DISKSTAT
;

897 
a_›ti⁄
 = 1;

901 
	`f‹k_f‹m©
();

902 
	`exô
(0);

904 
°©Mode
 |
SLABSTAT
;

907 
°©Mode
 |
DISKSUMSTAT
;

911 
m‹ehódîs
 = 
FALSE
;

914 
°©Mode
 |
PARTITIONSTAT
;

915 
∑πôi⁄
 = 
›èrg
;

916 i‡(
	`memcmp
(
∑πôi⁄
, "/dev/", 5) == 0)

917 
∑πôi⁄
 += 5;

920 
›èrg
[0]) {

923 
d©aUnô
 = 
UNIT_B
;

926 
d©aUnô
 = 
UNIT_k
;

929 
d©aUnô
 = 
UNIT_K
;

932 
d©aUnô
 = 
UNIT_m
;

935 
d©aUnô
 = 
UNIT_M
;

938 
	`xîrx
(
EXIT_FAILURE
,

940 
	`_
("-SÑequires k, K, m or M (default is KiB)"));

942 
szD©aUnô
[0] = 
›èrg
[0];

945 
°©Mode
 |
VMSUMSTAT
;

948 
w_›ti⁄
 = 1;

951 
t_›ti⁄
 = 1;

955 
	`ußge
(
°dîr
);

958 i‡(
›töd
 < 
¨gc
) {

959 
tmp
 = 
	`°πﬁ_‹_îr
(
¨gv
[
›töd
++], 
	`_
("failedÅoÖarseárgument"));

960 i‡(
tmp
 < 1)

961 
	`xîrx
(
EXIT_FAILURE
, 
	`_
("delay must beÖositive integer"));

962 i‡(
UINT_MAX
 < 
tmp
)

963 
	`xîrx
(
EXIT_FAILURE
, 
	`_
("tooÜarge delay value"));

964 
¶ìp_time
 = 
tmp
;

965 
öföôe_upd©es
 = 1;

967 i‡(
›töd
 < 
¨gc
) {

968 
num_upd©es
 = 
	`°πﬁ_‹_îr
(
¨gv
[
›töd
++], 
	`_
("failedÅoÖarseárgument"));

969 
öföôe_upd©es
 = 0;

971 i‡(
›töd
 < 
¨gc
)

972 
	`ußge
(
°dîr
);

974 i‡(
m‹ehódîs
) {

975 
wheight
 = 
	`wöhi
() - 3;

976 
height
 = ((
wheight
 > 0) ? wheight : 22);

978 
	`£éöebuf
(
°dout
);

979 
°©Mode
) {

980 (
VMSTAT
):

981 
	`√w_f‹m©
();

983 (
VMSUMSTAT
):

984 
	`sum_f‹m©
();

986 (
DISKSTAT
):

987 
	`diskf‹m©
();

989 (
PARTITIONSTAT
):

990 i‡(
	`disk∑πôi⁄_f‹m©
(
∑πôi⁄
) == -1)

991 
	`¥ötf
(
	`_
("partition wasÇot found\n"));

993 (
SLABSTAT
):

994 
	`¶abf‹m©
();

996 (
DISKSUMSTAT
):

997 
	`disksum_f‹m©
();

1000 
	`ußge
(
°dîr
);

1004 
	}
}

	@w.c

26 
	~"c.h
"

27 
	~"fûeutûs.h
"

28 
	~"∆s.h
"

29 
	~"¥oc/dev«me.h
"

30 
	~"¥oc/esˇ≥.h
"

31 
	~"¥oc/¥o˝s.h
"

32 
	~"¥oc/ªad¥oc.h
"

33 
	~"¥oc/sysöfo.h
"

34 
	~"¥oc/vîsi⁄.h
"

35 
	~"¥oc/wh©time.h
"

37 
	~<˘y≥.h
>

38 
	~<î∫o.h
>

39 
	~<f˙é.h
>

40 
	~<gë›t.h
>

41 
	~<limôs.h
>

42 
	~<loˇÀ.h
>

43 
	~<loˇÀ.h
>

44 
	~<pwd.h
>

45 
	~<pwd.h
>

46 
	~<sig«l.h
>

47 
	~<°dio.h
>

48 
	~<°dlib.h
>

49 
	~<°rög.h
>

50 
	~<sys/io˘l.h
>

51 
	~<sys/mm™.h
>

52 
	~<sys/°©.h
>

53 
	~<sys/ty≥s.h
>

54 
	~<ãrmios.h
>

55 
	~<time.h
>

56 
	~<uni°d.h
>

57 
	~<utmp.h
>

58 
	~<¨∑/öë.h
>

60 
	gign‹eu£r
 = 0;

61 
	gﬁd°yÀ
 = 0;

62 
¥oc_t
 **
	g¥ocs
;

64 
utmp
 
	tutmp_t
;

66 #ifde‡
W_SHOWFROM


67 
	#FROM_STRING
 "⁄"

	)

69 
	#FROM_STRING
 "off"

	)

72 
	#MAX_CMD_WIDTH
 512

	)

73 
	#MIN_CMD_WIDTH
 7

	)

80 
	$¥öt_ho°
(c⁄° *
ª°ri˘
 
ho°
, 
Àn
, c⁄° 
‰omÀn
)

82 c⁄° *
œ°
;

83 
width
 = 0;

85 i‡(
Àn
 > 
‰omÀn
)

86 
Àn
 = 
‰omÀn
;

87 
œ°
 = 
ho°
 + 
Àn
;

88 ; 
ho°
 < 
œ°
; host++) {

89 i‡(*
ho°
 == '\0') ;

90 i‡(
	`i•röt
(*
ho°
) && *host != ' ') {

91 
	`Âutc
(*
ho°
, 
°dout
);

92 ++
width
;

94 
	`Âutc
('-', 
°dout
);

95 ++
width
;

104 i‡(!
width
) {

105 
	`Âutc
('-', 
°dout
);

106 ++
width
;

108 
width
++ < 
‰omÀn
)

109 
	`Âutc
(' ', 
°dout
);

110 
	}
}

114 
	$¥öt_di•œy_‹_öãrÁ˚
(c⁄° *
ª°ri˘
 
ho°
, 
Àn
, 
ª°Àn
)

116 *
di•
,*
tmp
;

118 i‡(
ª°Àn
 <= 0) ;

121 
di•
 = (*)
ho°
;

122  (
di•
 < (
ho°
 + 
Àn
)Ë&& (*di• !':'Ë&& 
	`i•röt
(*disp) ) disp++;

125 i‡(*
di•
 == ':') {

127 
tmp
 = 
di•
+1;

128  (
tmp
 < (
ho°
 + 
Àn
)Ë&& (*tm∞!':'Ë&& 
	`i•röt
(*tmp) )Åmp++;

130 i‡(*
tmp
 != ':') {

133 
Àn
 -(
di•
 - 
ho°
);

136 i‡(
Àn
 > 
ª°Àn
)Üen =Ñestlen;

139 (
Àn
 > 0Ë&& 
	`i•röt
(*
di•
) && (*disp != ' ')) {

140 
Àn
--; 
ª°Àn
--;

141 
	`Âutc
(*
di•
, 
°dout
);

142 
di•
++;

145 i‡((
Àn
 > 0Ë&& (*
di•
 != '\0')) {

146 
ª°Àn
--;

147 
	`Âutc
('-', 
°dout
);

152  (
tmp
 < (
ho°
 + 
Àn
)Ë&& (*tm∞!'%'Ë&& 
	`i•röt
(*tmp) )Åmp++;

154 i‡(*
tmp
 == '%') {

157 
Àn
 -(
tmp
 - 
ho°
);

160 i‡(
Àn
 > 
ª°Àn
)Üen =Ñestlen;

163 (
Àn
 > 0Ë&& 
	`i•röt
(*
tmp
) && (*tmp != ' ')) {

164 
Àn
--; 
ª°Àn
--;

165 
	`Âutc
(*
tmp
, 
°dout
);

166 
tmp
++;

168 i‡((
Àn
 > 0Ë&& (*
tmp
 != '\0')) {

169 
ª°Àn
--;

170 
	`Âutc
('-', 
°dout
);

178 
ª°Àn
 > 0) {

179 
	`Âutc
(' ', 
°dout
);

180 
ª°Àn
--;

182 
	}
}

186 
	$¥öt_‰om
(c⁄° 
utmp_t
 *
ª°ri˘
 c⁄° 
u
, c⁄° 
ù_addªs£s
, c⁄° 
‰omÀn
) {

187 
buf
[
‰omÀn
 + 1];

188 
buf_ùv6
[
INET6_ADDRSTRLEN
];

189 
Àn
;

190 #i‚de‡
__CYGWIN__


191 
öt32_t
 
ut_addr_v6
[4];

193 i‡(
ù_addªs£s
) {

194 
	`mem˝y
(&
ut_addr_v6
, &
u
->ut_addr_v6, (ut_addr_v6));

195 i‡(
	`IN6_IS_ADDR_V4MAPPED
(&
ut_addr_v6
)) {

197 
ut_addr_v6
[0] = ut_addr_v6[3];

198 
ut_addr_v6
[1] = 0;

199 
ut_addr_v6
[2] = 0;

200 
ut_addr_v6
[3] = 0;

202 i‡(
ut_addr_v6
[1] || ut_addr_v6[2] || ut_addr_v6[3]) {

204 i‡(!
	`öë_¡›
(
AF_INET6
, &
ut_addr_v6
, 
buf_ùv6
, (buf_ipv6))) {

205 
	`°r˝y
(
buf
, "");

207 
	`°∫˝y
(
buf
, 
buf_ùv6
, 
‰omÀn
);

211 i‡(!(
ut_addr_v6
[0] && 
	`öë_¡›
(
AF_INET
, &ut_addr_v6[0], 
buf
, (buf)))) {

212 
	`°r˝y
(
buf
, "");

215 
buf
[
‰omÀn
] = '\0';

217 
Àn
 = 
	`°æí
(
buf
);

218 i‡(
Àn
) {

219 
	`Âuts
(
buf
, 
°dout
);

221 
	`¥öt_di•œy_‹_öãrÁ˚
(
u
->
ut_ho°
, 
UT_HOSTSIZE
, 
‰omÀn
 - 
Àn
);

223 
	`¥öt_ho°
(
u
->
ut_ho°
, 
UT_HOSTSIZE
, 
‰omÀn
);

226 
	`¥öt_ho°
(
u
->
ut_ho°
, 
UT_HOSTSIZE
, 
‰omÀn
);

229 
	`¥öt_ho°
(
u
->
ut_ho°
, 
UT_HOSTSIZE
, 
‰omÀn
);

231 
	}
}

235 
	$¥öt_time_ivÆ7
(
time_t
 
t
, 
˚¡i_£c
, 
FILE
 * 
fout
)

237 i‡(()
t
 < ()0) {

239 
	`¥ötf
(" ? ");

242 i‡(
ﬁd°yÀ
) {

243 i‡(
t
 >= 48 * 60 * 60)

245 
	`Ârötf
(
fout
, 
	`_
(" %2ludays"), 
t
 / (24 * 60 * 60));

246 i‡(
t
 >= 60 * 60)

249 
	`Ârötf
(
fout
, " %2lu:%02u ", 
t
 / (60 * 60),

250 ()((
t
 / 60) % 60));

251 i‡(
t
 > 60)

254 
	`Ârötf
(
fout
, 
	`_
(" %2lu:%02um"), 
t
 / 60, ()t % 60);

256 
	`Ârötf
(
fout
, " ");

258 i‡(
t
 >= 48 * 60 * 60)

260 
	`Ârötf
(
fout
, 
	`_
(" %2ludays"), 
t
 / (24 * 60 * 60));

261 i‡(
t
 >= 60 * 60)

264 
	`Ârötf
(
fout
, 
	`_
(" %2lu:%02um"), 
t
 / (60 * 60),

265 ()((
t
 / 60) % 60));

266 i‡(
t
 > 60)

269 
	`Ârötf
(
fout
, " %2lu:%02u ", 
t
 / 60, ()t % 60);

272 
	`Ârötf
(
fout
, 
	`_
(" %2lu.%02us"), 
t
, 
˚¡i_£c
);

274 
	}
}

277 
time_t
 
	$idÀtime
(c⁄° *
ª°ri˘
 c⁄° 
ây
)

279 
°©
 
sbuf
;

280 i‡(
	`°©
(
ây
, &
sbuf
) != 0)

282  
	`time
(
NULL
Ë- 
sbuf
.
°_©ime
;

283 
	}
}

287 
	$¥öt_logötime
(
time_t
 
logt
, 
FILE
 * 
fout
)

293 
time_°r
[16];

294 
time_t
 
cuπ
;

295 
tm
 *
logtm
, *
cuπm
;

296 
today
;

298 
cuπ
 = 
	`time
(
NULL
);

299 
cuπm
 = 
	`loˇ…ime
(&
cuπ
);

301 
today
 = 
cuπm
->
tm_yday
;

302 
logtm
 = 
	`loˇ…ime
(&
logt
);

303 i‡(
cuπ
 - 
logt
 > 12 * 60 * 60 && 
logtm
->
tm_yday
 !
today
) {

304 i‡(
cuπ
 - 
logt
 > 6 * 24 * 60 * 60) {

305 
	`°r·ime
(
time_°r
, —ime_°r), "%b", 
logtm
);

306 
	`Ârötf
(
fout
, " %02d%3s%02d", 
logtm
->
tm_mday
,

307 
time_°r
, 
logtm
->
tm_yór
 % 100);

309 
	`°r·ime
(
time_°r
, —ime_°r), "%a", 
logtm
);

310 
	`Ârötf
(
fout
, " %3s%02d ", 
time_°r
,

311 
logtm
->
tm_hour
);

314 
	`Ârötf
(
fout
, " %02d:%02d ", 
logtm
->
tm_hour
,Üogtm->
tm_mö
);

316 
	}
}

325 c⁄° 
¥oc_t
 *
	$gë¥oc
(c⁄° 
utmp_t
 * 
ª°ri˘
 c⁄° 
u
,

326 c⁄° *
ª°ri˘
 c⁄° 
ây
,

327 *
ª°ri˘
 c⁄° 
j˝u
,

328 *
ª°ri˘
 c⁄° 
found_uçid
)

330 
löe
;

331 
¥oc_t
 **
µå
 = 
¥ocs
;

332 c⁄° 
¥oc_t
 *
be°
 = 
NULL
;

333 c⁄° 
¥oc_t
 *
£c⁄dbe°
 = 
NULL
;

334 
uid
 = ~0U;

336 *
found_uçid
 = 0;

337 i‡(!
ign‹eu£r
) {

338 
buf
[
UT_NAMESIZE
 + 1];

340 
∑sswd
 *
∑sswd_d©a
;

341 
	`°∫˝y
(
buf
, 
u
->
ut_u£r
, 
UT_NAMESIZE
);

342 
buf
[
UT_NAMESIZE
] = '\0';

343 
∑sswd_d©a
 = 
	`gëpw«m
(
buf
);

344 i‡(!
∑sswd_d©a
)

345  
NULL
;

346 
uid
 = 
∑sswd_d©a
->
pw_uid
;

349 
löe
 = 
	`ây_to_dev
(
ây
);

350 *
j˝u
 = 0;

351 ; *
µå
;Öptr++) {

352 c⁄° 
¥oc_t
 *
ª°ri˘
 c⁄° 
tmp
 = *
µå
;

353 i‡(
	`u∆ikñy
(
tmp
->
tgid
 =
u
->
ut_pid
)) {

354 *
found_uçid
 = 1;

355 i‡(!
be°
)

356 
be°
 = 
tmp
;

358 i‡(
tmp
->
ây
 !
löe
)

360 (*
j˝u
Ë+
tmp
->
utime
 +Åmp->
°ime
;

361 
£c⁄dbe°
 = 
tmp
;

363 i‡(!(
£c⁄dbe°
 && 
tmp
->
°¨t_time
 <= secondbest->start_time)) {

364 
£c⁄dbe°
 = 
tmp
;

366 i‡(!
ign‹eu£r
 && 
uid
 !
tmp
->
euid
 && uid !tmp->
ruid
)

368 i‡(
tmp
->
pgΩ
 !tmp->
çgid
)

370 i‡(
be°
 && 
tmp
->
°¨t_time
 <= best->start_time)

372 
be°
 = 
tmp
;

374  
be°
 ? be° : 
£c⁄dbe°
;

375 
	}
}

377 
	$showöfo
(
utmp_t
 * 
u
, 
f‹mty≥
, 
maxcmd
, 
‰om
,

378 c⁄° 
u£æí
, c⁄° 
‰omÀn
, c⁄° 
ù_addªs£s
)

380 
j˝u
;

381 
ut_pid_found
;

382 
i
;

383 
u«me
[
UT_NAMESIZE
 + 1] = "", 
ây
[5 + 
UT_LINESIZE
 + 1] = "/dev/";

384 c⁄° 
¥oc_t
 *
be°
;

386 
i
 = 0; i < 
UT_LINESIZE
; i++)

388 i‡(
	`iß um
(
u
->
ut_löe
[
i
]) || (u->ut_line[i] == '/'))

389 
ây
[
i
 + 5] = 
u
->
ut_löe
[i];

391 
ây
[
i
 + 5] = '\0';

393 
be°
 = 
	`gë¥oc
(
u
, 
ây
 + 5, &
j˝u
, &
ut_pid_found
);

401 i‡(!
ut_pid_found
)

405 
	`°∫˝y
(
u«me
, 
u
->
ut_u£r
, 
UT_NAMESIZE
);

407 i‡(
f‹mty≥
) {

408 
	`¥ötf
("%-*.*s%-9.8s", 
u£æí
 + 1, u£æí, 
u«me
, 
u
->
ut_löe
);

409 i‡(
‰om
)

410 
	`¥öt_‰om
(
u
, 
ù_addªs£s
, 
‰omÀn
);

411 
	`¥öt_logötime
(
u
->
ut_time
, 
°dout
);

412 i‡(*
u
->
ut_löe
 == ':')

414 
	`¥ötf
(" ?xdm? ");

416 
	`¥öt_time_ivÆ7
(
	`idÀtime
(
ây
), 0, 
°dout
);

417 
	`¥öt_time_ivÆ7
(
j˝u
 / 
Hîtz
, (jcpu % Hertz) * (100. / Hertz),

418 
°dout
);

419 i‡(
be°
) {

420 
p˝u
 = 
be°
->
utime
 + be°->
°ime
;

421 
	`¥öt_time_ivÆ7
(
p˝u
 / 
Hîtz
,

422 (
p˝u
 % 
Hîtz
) * (100. / Hertz),

423 
°dout
);

425 
	`¥ötf
(" ? ");

427 
	`¥ötf
("%-*.*s%-9.8s", 
u£æí
 + 1, u£æí, 
u
->
ut_u£r
,

428 
u
->
ut_löe
);

429 i‡(
‰om
)

430 
	`¥öt_‰om
(
u
, 
ù_addªs£s
, 
‰omÀn
);

431 i‡(*
u
->
ut_löe
 == ':')

433 
	`¥ötf
(" ?xdm? ");

435 
	`¥öt_time_ivÆ7
(
	`idÀtime
(
ây
), 0, 
°dout
);

437 
	`Âuts
(" ", 
°dout
);

438 i‡(
	`likñy
(
be°
)) {

439 
cmdbuf
[
MAX_CMD_WIDTH
];

440 
	`esˇ≥_comm™d
(
cmdbuf
, 
be°
,  cmdbuf, &
maxcmd
, 
ESC_ARGS
);

441 
	`Âuts
(
cmdbuf
, 
°dout
);

443 
	`¥ötf
("-");

445 
	`Âutc
('\n', 
°dout
);

446 
	}
}

448 
__©åibuã__
 ((
__n‹ëu∫__
))

449 
	$ußge
(
FILE
 * 
out
)

451 
	`Âuts
(
USAGE_HEADER
, 
out
);

452 
	`Ârötf
(
out
,

453 
	`_
(" %†[›ti⁄s]\n"), 
¥ogøm_övoˇti⁄_sh‹t_«me
);

454 
	`Âuts
(
USAGE_OPTIONS
, 
out
);

455 
	`Âuts
(
	`_
(" -h, --no-hódî dÿnŸÖröàhódî\n"),
out
);

456 
	`Âuts
(
	`_
(" -u, --no-cuºíà ign‹êcuºíà¥o˚s†u£∫ame\n"),
out
);

457 
	`Âuts
(
	`_
(" -s, --sh‹à sh‹àf‹m©\n"),
out
);

458 
	`Âuts
(
	`_
(" -f, --‰om showÑemŸêho°«mêfõld\n"),
out
);

459 
	`Âuts
(
	`_
(" -o, --ﬁd-°yÀ old styÀ ouçut\n"),
out
);

460 
	`Âuts
(
	`_
(" -i, --ù-add∏ di•œy IPáddªs†ö°ód o‡ho°«mê(i‡possibÀ)\n"), 
out
);

461 
	`Âuts
(
USAGE_SEPARATOR
, 
out
);

462 
	`Âuts
(
	`_
(" --hñ∞ di•œyÅhi†hñ∞™dÉxô\n"), 
out
);

463 
	`Âuts
(
USAGE_VERSION
, 
out
);

464 
	`Ârötf
(
out
, 
	`USAGE_MAN_TAIL
("w(1)"));

466 
	`exô
(
out
 =
°dîr
 ? 
EXIT_FAILURE
 : 
EXIT_SUCCESS
);

467 
	}
}

469 
	$maö
(
¨gc
, **
¨gv
)

471 *
u£r
 = 
NULL
, *
p
;

472 
utmp_t
 *
u
;

473 
wösize
 
wö
;

474 
ch
;

475 
maxcmd
 = 80;

476 
u£æí
 = 8;

477 
‰omÀn
 = 16;

478 *
ív_v¨
;

481 
hódî
 = 1;

482 
l⁄gf‹m
 = 1;

483 
‰om
 = 1;

484 
ù_addªs£s
 = 0;

487 
HELP_OPTION
 = 
CHAR_MAX
 + 1

490 c⁄° 
›ti⁄
 
l⁄g›ts
[] = {

491 {"no-hódî", 
no_¨gumít
, 
NULL
, 'h'},

492 {"no-cuºít", 
no_¨gumít
, 
NULL
, 'u'},

493 {"sh‹t", 
no_¨gumít
, 
NULL
, 's'},

494 {"‰om", 
no_¨gumít
, 
NULL
, 'f'},

495 {"ﬁd-°yÀ", 
no_¨gumít
, 
NULL
, 'o'},

496 {"ù-addr", 
no_¨gumít
, 
NULL
, 'i'},

497 {"hñp", 
no_¨gumít
, 
NULL
, 
HELP_OPTION
},

498 {"vîsi⁄", 
no_¨gumít
, 
NULL
, 'V'},

499 {
NULL
, 0, NULL, 0}

502 #ifde‡
HAVE_PROGRAM_INVOCATION_NAME


503 
¥ogøm_övoˇti⁄_«me
 = 
¥ogøm_övoˇti⁄_sh‹t_«me
;

505 
	`£éoˇÀ
 (
LC_ALL
, "");

506 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

507 
	`ãxtdomaö
(
PACKAGE
);

508 
	`©exô
(
˛o£_°dout
);

510 #i‚de‡
W_SHOWFROM


511 
‰om
 = 0;

514 (
ch
 =

515 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "husfoVi", 
l⁄g›ts
, 
NULL
)) != -1)

516 
ch
) {

518 
hódî
 = 0;

521 
l⁄gf‹m
 = 1;

524 
l⁄gf‹m
 = 0;

527 
‰om
 = !from;

530 
	`¥ötf
(
PROCPS_NG_VERSION
);

531 
	`exô
(0);

533 
ign‹eu£r
 = 1;

536 
ﬁd°yÀ
 = 1;

539 
ù_addªs£s
 = 1;

540 
‰om
 = 1;

542 
HELP_OPTION
:

543 
	`ußge
(
°dout
);

545 
	`ußge
(
°dîr
);

548 i‡((
¨gv
[
›töd
]))

549 
u£r
 = (
¨gv
[
›töd
]);

552 i‡((
ív_v¨
 = 
	`gëív
("PROCPS_USERLEN")Ë!
NULL
) {

553 
ut_«mesize
 = 
UT_NAMESIZE
;

554 
u£æí
 = 
	`©oi
(
ív_v¨
);

555 i‡(
u£æí
 < 8 || 
ut_«mesize
 < userlen) {

556 
xw¨nx


557 (
	`_
("UserÜengthÉnvironment PROCPS_USERLEN must be between 8ánd %i, ignoring.\n"),

558 
ut_«mesize
);

559 
u£æí
 = 8;

563 i‡((
ív_v¨
 = 
	`gëív
("PROCPS_FROMLEN")Ë!
NULL
) {

564 
‰omÀn
 = 
	`©oi
(
ív_v¨
);

565 i‡(
‰omÀn
 < 8 || 
UT_HOSTSIZE
 < fromlen) {

566 
xw¨nx


567 (
	`_
("fromÜengthÉnvironment PROCPS_FROMLEN must be between 8ánd %d, ignoring\n"),

568 
UT_HOSTSIZE
);

569 
‰omÀn
 = 16;

572 i‡(
	`io˘l
(
STDOUT_FILENO
, 
TIOCGWINSZ
, &
wö
Ë!-1 && wö.
ws_cﬁ
 > 0)

573 
maxcmd
 = 
wö
.
ws_cﬁ
;

574 i‡((
p
 = 
	`gëív
("COLUMNS")))

575 
maxcmd
 = 
	`©oi
(
p
);

577 
maxcmd
 = 
MAX_CMD_WIDTH
;

578 i‡(
MAX_CMD_WIDTH
 < 
maxcmd
)

579 
maxcmd
 = 
MAX_CMD_WIDTH
;

580 
maxcmd
 -21 + 
u£æí
 + (
‰om
 ? 
‰omÀn
 : 0Ë+ (
l⁄gf‹m
 ? 20 : 0);

581 i‡(
maxcmd
 < 
MIN_CMD_WIDTH
)

582 
maxcmd
 = 
MIN_CMD_WIDTH
;

584 
¥ocs
 = 
	`ªad¥o˘ab
(
PROC_FILLCOM
 | 
PROC_FILLUSR
 | 
PROC_FILLSTAT
);

586 i‡(
hódî
) {

588 
	`¥öt_u±ime
(0);

591 
	`¥ötf
(
	`_
("%-*†TTY "), 
u£æí
, _("USER"));

592 i‡(
‰om
)

593 
	`¥ötf
("%-*s", 
‰omÀn
 - 1, 
	`_
("FROM"));

594 i‡(
l⁄gf‹m
)

595 
	`¥ötf
(
	`_
(" LOGIN@ IDLE JCPU PCPU WHAT\n"));

597 
	`¥ötf
(
	`_
(" IDLE WHAT\n"));

600 
	`utm≤ame
(
UTMP_FILE
);

601 
	`£tuã¡
();

602 i‡(
u£r
) {

604 
u
 = 
	`gëuã¡
();

605 i‡(
	`u∆ikñy
(!
u
))

607 i‡(
u
->
ut_ty≥
 !
USER_PROCESS
)

609 i‡(!
	`°∫cmp
(
u
->
ut_u£r
, 
u£r
, 
UT_NAMESIZE
))

610 
	`showöfo
(
u
, 
l⁄gf‹m
, 
maxcmd
, 
‰om
, 
u£æí
,

611 
‰omÀn
, 
ù_addªs£s
);

615 
u
 = 
	`gëuã¡
();

616 i‡(
	`u∆ikñy
(!
u
))

618 i‡(
u
->
ut_ty≥
 !
USER_PROCESS
)

620 i‡(*
u
->
ut_u£r
)

621 
	`showöfo
(
u
, 
l⁄gf‹m
, 
maxcmd
, 
‰om
, 
u£æí
,

622 
‰omÀn
, 
ù_addªs£s
);

625 
	`íduã¡
();

627  
EXIT_SUCCESS
;

628 
	}
}

	@watch.c

30 
	~"c.h
"

31 
	~"c⁄fig.h
"

32 
	~"fûeutûs.h
"

33 
	~"∆s.h
"

34 
	~"°rutûs.h
"

35 
	~"xÆloc.h
"

36 
	~<˘y≥.h
>

37 
	~<î∫o.h
>

38 
	~<gë›t.h
>

39 
	~<loˇÀ.h
>

40 
	~<limôs.h
>

41 
	~<sig«l.h
>

42 
	~<°dio.h
>

43 
	~<°dlib.h
>

44 
	~<°rög.h
>

45 
	~<sys/io˘l.h
>

46 
	~<sys/time.h
>

47 
	~<sys/waô.h
>

48 
	~<ãrmios.h
>

49 
	~<time.h
>

50 
	~<uni°d.h
>

51 #ifde‡
WITH_WATCH8BIT


52 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

53 
	~<wch¨.h
>

54 
	~<w˘y≥.h
>

56 
	~<ncur£s.h
>

58 #ifde‡
FORCE_8BIT


59 #unde‡
i•röt


60 
	#i•röt
(
x
Ë–(x>=' '&&x<='~'Ë|| (x>=0xa0Ë)

	)

63 #i‚de‡
HOST_NAME_MAX


64 
	#HOST_NAME_MAX
 64

	)

68 
	gÊags
;

69 
	#WATCH_DIFF
 (1 << 1)

	)

70 
	#WATCH_CUMUL
 (1 << 2)

	)

71 
	#WATCH_EXEC
 (1 << 3)

	)

72 
	#WATCH_BEEP
 (1 << 4)

	)

73 
	#WATCH_COLOR
 (1 << 5)

	)

74 
	#WATCH_ERREXIT
 (1 << 6)

	)

75 
	#WATCH_CHGEXIT
 (1 << 7)

	)

77 
	gcur£s_°¨ãd
 = 0;

78 
	gheight
 = 24, 
	gwidth
 = 80;

79 
	gs¸ìn_size_ch™ged
 = 0;

80 
	gfú°_s¸ìn
 = 1;

81 
	gshow_tôÀ
 = 2;

82 
	g¥eci£_timekìpög
 = 0;

84 
	#mö
(
x
,
y
Ë((xË> (yË? (yË: (x))

	)

85 
	#MAX_ANSIBUF
 100

	)

87 
__©åibuã__
 ((
__n‹ëu∫__
))

88 
	$ußge
(
FILE
 * 
out
)

90 
	`Âuts
(
USAGE_HEADER
, 
out
);

91 
	`Ârötf
(
out
,

92 
	`_
(" %†[›ti⁄s] comm™d\n"), 
¥ogøm_övoˇti⁄_sh‹t_«me
);

93 
	`Âuts
(
USAGE_OPTIONS
, 
out
);

94 
	`Âuts
(
	`_
(" -b, --bì∞ bì∞i‡comm™d ha†®n⁄-zîÿexô\n"), 
out
);

95 
	`Âuts
(
	`_
(" -c, --cﬁ‹ i¡î¥ë ANSI cﬁ‹ánd styÀ sequí˚s\n"), 
out
);

96 
	`Âuts
(
	`_
(" -d, --differences[=<permanent>]\n"

97 " highlighàch™ge†bëwì¿upd©es\n"), 
out
);

98 
	`Âuts
(
	`_
(" -e, --îªxôÉxô i‡comm™d ha†®n⁄-zîÿexô\n"), 
out
);

99 
	`Âuts
(
	`_
(" -g, --chgexôÉxô whí ouçuà‰om comm™d ch™ges\n"), 
out
);

100 
	`Âuts
(
	`_
(" -n, --öãrvÆ <£cs> sec⁄d†tÿwaô bëwì¿upd©es\n"), 
out
);

101 
	`Âuts
(
	`_
(" -p, --¥eci£áâem±Ñu¿comm™d i¿¥eci£ i¡îvÆs\n"), 
out
);

102 
	`Âuts
(
	`_
(" -t, --no-tôÀÅu∫ of‡hódî\n"), 
out
);

103 
	`Âuts
(
	`_
(" -x, --exe¯Öas†comm™dÅÿexe¯ö°ód o‡\"sh -c\"\n"), 
out
);

104 
	`Âuts
(
USAGE_SEPARATOR
, 
out
);

105 
	`Âuts
(
USAGE_HELP
, 
out
);

106 
	`Âuts
(
	`_
(" -v, --vîsi⁄ ouçuàvîsi⁄ inf‹m©i⁄ándÉxô\n"), 
out
);

107 
	`Ârötf
(
out
, 
	`USAGE_MAN_TAIL
("watch(1)"));

109 
	`exô
(
out
 =
°dîr
 ? 
EXIT_FAILURE
 : 
EXIT_SUCCESS
);

110 
	}
}

112 
	gƒ_of_cﬁ‹s
;

113 
	g©åibuãs
;

114 
	gfg_cﬁ
;

115 
	gbg_cﬁ
;

118 
	$ª£t_™si
()

120 
©åibuãs
 = 
A_NORMAL
;

121 
fg_cﬁ
 = 0;

122 
bg_cﬁ
 = 0;

123 
	}
}

125 
	$öô_™si_cﬁ‹s
()

127 
ncur£s_cﬁ‹s
[] = {

128 -1, 
COLOR_BLACK
, 
COLOR_RED
, 
COLOR_GREEN
, 
COLOR_YELLOW
,

129 
COLOR_BLUE
, 
COLOR_MAGENTA
, 
COLOR_CYAN
, 
COLOR_WHITE


132 
ƒ_of_cﬁ‹s
 = (
ncur£s_cﬁ‹s
) / ();

134 
bg_cﬁ
 = 0; bg_cﬁ < 
ƒ_of_cﬁ‹s
; bg_col++)

135 
fg_cﬁ
 = 0; fg_cﬁ < 
ƒ_of_cﬁ‹s
; fg_col++)

136 
	`öô_∑ú
(
bg_cﬁ
 * 
ƒ_of_cﬁ‹s
 + 
fg_cﬁ
 + 1, 
ncur£s_cﬁ‹s
[fg_col],Çcurses_colors[bg_col]);

137 
	`ª£t_™si
();

138 
	}
}

141 
	$£t_™si_©åibuã
(c⁄° 
©åib
)

143 
©åib
) {

147 
	`ª£t_™si
();

150 
©åibuãs
 |
A_BOLD
;

153 
©åibuãs
 |
A_DIM
;

155 #ifde‡
A_ITALIC


157 
©åibuãs
 |
A_ITALIC
;

161 
©åibuãs
 |
A_UNDERLINE
;

164 
©åibuãs
 |
A_BLINK
;

167 
©åibuãs
 |
A_REVERSE
;

170 
©åibuãs
 &~
A_BOLD
;

173 
©åibuãs
 &~(
A_BOLD
 | 
A_DIM
);

175 #ifde‡
A_ITALIC


177 
©åibuãs
 &~
A_ITALIC
;

181 
©åibuãs
 &~
A_UNDERLINE
;

184 
©åibuãs
 &~
A_BLINK
;

187 
©åibuãs
 &~
A_REVERSE
;

190 i‡(
©åib
 >= 30 &&áttrib <= 37) {

191 
fg_cﬁ
 = 
©åib
 - 30 + 1;

192 } i‡(
©åib
 >= 40 &&áttrib <= 47) {

193 
bg_cﬁ
 = 
©åib
 - 40 + 1;

198 
	`©å£t
(
©åibuãs
 | 
	`COLOR_PAIR
(
bg_cﬁ
 * 
ƒ_of_cﬁ‹s
 + 
fg_cﬁ
 + 1));

200 
	}
}

202 
	$¥o˚ss_™si
(
FILE
 * 
Â
)

204 
i
, 
c
;

205 
buf
[
MAX_ANSIBUF
];

206 *
num°¨t
, *
íd±r
;

208 
c
 = 
	`gëc
(
Â
);

209 i‡(
c
 != '[') {

210 
	`ungëc
(
c
, 
Â
);

213 
i
 = 0; i < 
MAX_ANSIBUF
; i++) {

214 
c
 = 
	`gëc
(
Â
);

216 i‡(
c
 == 'm') {

217 
buf
[
i
] = '\0';

220 i‡((
c
 < '0' || c > '9') && c != ';') {

223 
buf
[
i
] = ()
c
;

234 i‡(
buf
[0] == '\0')

235 
	`£t_™si_©åibuã
(0);

237 
íd±r
 = 
num°¨t
 = 
buf
; *endptr != '\0';Çumstart =Éndptr + 1) {

238 i‡(!
	`£t_™si_©åibuã
(
	`°πﬁ
(
num°¨t
, &
íd±r
, 10)))

241 
	}
}

243 
__©åibuã__
 ((
__n‹ëu∫__
)Ë
	$do_exô
(
°©us
)

245 i‡(
cur£s_°¨ãd
)

246 
	`ídwö
();

247 
	`exô
(
°©us
);

248 
	}
}

251 
dõ
(
nŸu£d
 
__©åibuã__
 ((
__unu£d__
)))

253 
do_exô
(
EXIT_SUCCESS
);

256 
wöch_h™dÀr
(
nŸu£d
 
__©åibuã__
 ((
__unu£d__
)))

258 
	gs¸ìn_size_ch™ged
 = 1;

261 
	gív_cﬁ_buf
[24];

262 
	gív_row_buf
[24];

263 
	göcomög_cﬁs
;

264 
	göcomög_rows
;

266 
	$gë_ãrmöÆ_size
()

268 
wösize
 
w
;

269 i‡(!
öcomög_cﬁs
) {

271 c⁄° *
s
 = 
	`gëív
("COLUMNS");

272 
öcomög_cﬁs
 = -1;

273 i‡(
s
 && *s) {

274 
t
;

275 *
íd±r
;

276 
t
 = 
	`°πﬁ
(
s
, &
íd±r
, 0);

277 i‡(!*
íd±r
 && 0 < 
t
)

278 
öcomög_cﬁs
 = 
t
;

279 
width
 = 
öcomög_cﬁs
;

280 
	`¢¥ötf
(
ív_cﬁ_buf
, Énv_col_buf, "COLUMNS=%ld",

281 
width
);

282 
	`puãnv
(
ív_cﬁ_buf
);

285 i‡(!
öcomög_rows
) {

287 c⁄° *
s
 = 
	`gëív
("LINES");

288 
öcomög_rows
 = -1;

289 i‡(
s
 && *s) {

290 
t
;

291 *
íd±r
;

292 
t
 = 
	`°πﬁ
(
s
, &
íd±r
, 0);

293 i‡(!*
íd±r
 && 0 < 
t
)

294 
öcomög_rows
 = 
t
;

295 
height
 = 
öcomög_rows
;

296 
	`¢¥ötf
(
ív_row_buf
, Énv_row_buf, "LINES=%ld",

297 
height
);

298 
	`puãnv
(
ív_row_buf
);

301 i‡(
	`io˘l
(
STDERR_FILENO
, 
TIOCGWINSZ
, &
w
) == 0) {

302 i‡(
öcomög_cﬁs
 < 0 || 
öcomög_rows
 < 0) {

303 i‡(
öcomög_rows
 < 0 && 
w
.
ws_row
 > 0) {

304 
height
 = 
w
.
ws_row
;

305 
	`¢¥ötf
(
ív_row_buf
, Énv_row_buf,

306 "LINES=%ld", 
height
);

307 
	`puãnv
(
ív_row_buf
);

309 i‡(
öcomög_cﬁs
 < 0 && 
w
.
ws_cﬁ
 > 0) {

310 
width
 = 
w
.
ws_cﬁ
;

311 
	`¢¥ötf
(
ív_cﬁ_buf
, Énv_col_buf,

312 "COLUMNS=%ld", 
width
);

313 
	`puãnv
(
ív_cﬁ_buf
);

317 
	}
}

320 
	tw©ch_u£c_t
;

321 
	#USECS_PER_SEC
 (1000000uŒ)

	)

322 
w©ch_u£c_t
 
	$gë_time_u£c
()

324 
timevÆ
 
now
;

325 
	`gëtimeofday
(&
now
, 
NULL
);

326  
USECS_PER_SEC
 * 
now
.
tv_£c
 +Çow.
tv_u£c
;

327 
	}
}

329 #ifde‡
WITH_WATCH8BIT


331 
	#MAX_ENC_BYTES
 16

	)

332 
wöt_t
 
my_gëwc
(
FILE
 * 
s
);

333 
wöt_t
 
	$my_gëwc
(
FILE
 * 
s
)

336 
i
[
MAX_ENC_BYTES
];

337 
byã
 = 0;

338 
c⁄vît
;

339 
x
;

340 
wch¨_t
 
rvÆ
;

342 
i
[
byã
] = 
	`gëc
(
s
);

343 i‡(
i
[
byã
] =
EOF
) {

344  
WEOF
;

346 
byã
++;

347 
î∫o
 = 0;

348 
	`mbtowc
(
NULL
, NULL, 0);

349 
c⁄vît
 = 
	`mbtowc
(&
rvÆ
, 
i
, 
byã
);

350 
x
 = 
î∫o
;

351 i‡(
c⁄vît
 > 0) {

353  
rvÆ
;

355 i‡(
byã
 =
MAX_ENC_BYTES
) {

356 
byã
 > 1) {

358 
	`ungëc
(
i
[--
byã
], 
s
);

360 
î∫o
 = -
EILSEQ
;

361  
WEOF
;

364 
	}
}

367 #ifde‡
WITH_WATCH8BIT


368 
	$ouçut_hódî
(
wch¨_t
 *
ª°ri˘
 
wcomm™d
, 
wcomm™d_ch¨a˘îs
, 
öãrvÆ
)

370 
	$ouçut_hódî
(*
ª°ri˘
 
comm™d
, 
öãrvÆ
)

373 
time_t
 
t
 = 
	`time
(
NULL
);

374 *
ts
 = 
	`˘ime
(&
t
);

375 *
hódî
;

376 *
right_hódî
;

377 
ho°«me
[
HOST_NAME_MAX
 + 1];

378 
comm™d_cﬁumns
 = 0;

380 
	`gëho°«me
(
ho°«me
, (hostname));

386 
hÀn
 = 
	`a•rötf
(&
hódî
, 
	`_
("Evîy %.1fs: "), 
öãrvÆ
);

387 
rhÀn
 = 
	`a•rötf
(&
right_hódî
, 
	`_
("%s: %s"), 
ho°«me
, 
ts
);

400 i‡(
width
 < 
rhÀn
) {

401 
	`‰ì
(
hódî
);

402 
	`‰ì
(
right_hódî
);

405 i‡(
rhÀn
 + 
hÀn
 + 1 <
width
) {

406 
	`mvadd°r
(0, 0, 
hódî
);

407 i‡(
rhÀn
 + 
hÀn
 + 2 <
width
) {

408 i‡(
width
 < 
rhÀn
 + 
hÀn
 + 4) {

409 
	`mvadd°r
(0, 
width
 - 
rhÀn
 - 4, "... ");

411 #ifde‡
WITH_WATCH8BIT


412 
comm™d_cﬁumns
 = 
	`wcswidth
(
wcomm™d
, -1);

413 i‡(
width
 < 
rhÀn
 + 
hÀn
 + 
comm™d_cﬁumns
) {

415 
avaûabÀ
 = 
width
 - 
rhÀn
 - 
hÀn
;

416 
ö_u£
 = 
comm™d_cﬁumns
;

417 
wcomm_Àn
 = 
wcomm™d_ch¨a˘îs
;

418 
avaûabÀ
 - 4 < 
ö_u£
) {

419 
wcomm_Àn
--;

420 
ö_u£
 = 
	`wcswidth
(
wcomm™d
, 
wcomm_Àn
);

422 
	`mvaddnw°r
(0, 
hÀn
, 
wcomm™d
, 
wcomm_Àn
);

423 
	`mvadd°r
(0, 
width
 - 
rhÀn
 - 4, "... ");

425 
	`mvaddw°r
(0, 
hÀn
, 
wcomm™d
);

428 
comm™d_cﬁumns
 = 
	`°æí
(
comm™d
);

429 i‡(
width
 < 
rhÀn
 + 
hÀn
 + 
comm™d_cﬁumns
) {

431 
	`mvaddn°r
(0, 
hÀn
, 
comm™d
, 
width
 - 
rhÀn
 - hlen - 4);

432 
	`mvadd°r
(0, 
width
 - 
rhÀn
 - 4, "... ");

434 
	`mvaddn°r
(0, 
hÀn
, 
comm™d
, 
width
 - 
rhÀn
 - hlen);

440 
	`mvadd°r
(0, 
width
 - 
rhÀn
 + 1, 
right_hódî
);

441 
	`‰ì
(
hódî
);

442 
	`‰ì
(
right_hódî
);

444 
	}
}

446 
	$run_comm™d
(*
ª°ri˘
 
comm™d
, **ª°ri˘ 
comm™d_¨gv
)

448 
FILE
 *
p
;

449 
x
, 
y
;

450 
ﬁdeﬁ£í
 = 1;

451 
pùefd
[2];

452 
pid_t
 
chûd
;

453 
exô_óæy
 = 0;

454 
°©us
;

457 i‡(
	`pùe
(
pùefd
) < 0)

458 
	`xîr
(7, 
	`_
("unableÅo create IPCÖipes"));

461 
	`fÊush
(
°dout
);

462 
	`fÊush
(
°dîr
);

465 
chûd
 = 
	`f‹k
();

467 i‡(
chûd
 < 0) {

468 
	`xîr
(2, 
	`_
("unableÅo forkÖrocess"));

469 } i‡(
chûd
 == 0) {

470 
	`˛o£
(
pùefd
[0]);

471 
	`˛o£
(1);

472 i‡(
	`dup2
(
pùefd
[1], 1) < 0) {

473 
	`xîr
(3, 
	`_
("dup2 failed"));

475 
	`˛o£
(
pùefd
[1]);

476 
	`dup2
(1, 2);

478 i‡(
Êags
 & 
WATCH_EXEC
) {

479 i‡(
	`execvp
(
comm™d_¨gv
[0], command_argv) == -1) {

480 
	`xîr
(4, 
	`_
("unableÅoÉxecute '%s'"),

481 
comm™d_¨gv
[0]);

484 
°©us
 = 
	`sy°em
(
comm™d
);

486 i‡(!
	`WIFEXITED
(
°©us
)) {

487 
	`exô
(
EXIT_FAILURE
);

489 
	`exô
(
	`WEXITSTATUS
(
°©us
));

495 
	`˛o£
(
pùefd
[1]);

496 i‡((
p
 = 
	`fd›í
(
pùefd
[0], "r")Ë=
NULL
)

497 
	`xîr
(5, 
	`_
("fdopen"));

499 
	`ª£t_™si
();

500 
y
 = 
show_tôÀ
; y < 
height
; y++) {

501 
eﬁ£í
 = 0, 
èb≥ndög
 = 0, 
èbwa•ídög
 = 0;

502 i‡(
Êags
 & 
WATCH_COLOR
)

503 
	`£t_™si_©åibuã
(-1);

504 #ifde‡
WITH_WATCH8BIT


505 
wöt_t
 
ˇºy
 = 
WEOF
;

507 
x
 = 0; x < 
width
; x++) {

508 #ifde‡
WITH_WATCH8BIT


509 
wöt_t
 
c
 = ' ';

511 
c
 = ' ';

513 
©å
 = 0;

515 i‡(
èbwa•ídög
 && (
Êags
 & 
WATCH_COLOR
))

516 
	`£t_™si_©åibuã
(-1);

517 
èbwa•ídög
 = 0;

519 i‡(!
eﬁ£í
) {

523 i‡(!
èb≥ndög
)

524 #ifde‡
WITH_WATCH8BIT


526 i‡(
ˇºy
 =
WEOF
) {

527 
c
 = 
	`my_gëwc
(
p
);

529 
c
 = 
ˇºy
;

530 
ˇºy
 = 
WEOF
;

532 } 
c
 !
WEOF
 && !
	`isw¥öt
(c)

533 && 
c
 < 128

534 && 
	`wcwidth
(
c
) == 0

535 && 
c
 !
L
'\n'

536 && 
c
 !
L
'\t'

537 && (
c
 !
L
'\033'

538 || !(
Êags
 & 
WATCH_COLOR
)));

541 
c
 = 
	`gëc
(
p
);

542 
c
 !
EOF
 && !
	`i•röt
(c)

543 && 
c
 != '\n'

544 && 
c
 != '\t'

545 && (
c
 !
L
'\033'

546 || !(
Êags
 & 
WATCH_COLOR
)));

548 i‡(
c
 =
L
'\033' && (
Êags
 & 
WATCH_COLOR
)) {

549 
x
--;

550 
	`¥o˚ss_™si
(
p
);

553 i‡(
c
 =
L
'\n')

554 i‡(!
ﬁdeﬁ£í
 && 
x
 == 0) {

555 
x
 = -1;

558 
eﬁ£í
 = 1;

559 i‡(
c
 =
L
'\t')

560 
èb≥ndög
 = 1;

561 #ifde‡
WITH_WATCH8BIT


562 i‡(
x
 =
width
 - 1 && 
	`wcwidth
(
c
) == 2) {

563 
y
++;

564 
x
 = -1;

565 
ˇºy
 = 
c
;

568 i‡(
c
 =
WEOF
 || c =
L
'\n' || c == L'\t') {

569 
c
 = 
L
' ';

570 i‡(
Êags
 & 
WATCH_COLOR
)

571 
	`©å£t
(
A_NORMAL
);

574 i‡(
c
 =
EOF
 || c == '\n' || c == '\t') {

575 
c
 = ' ';

576 i‡(
Êags
 & 
WATCH_COLOR
)

577 
	`©å£t
(
A_NORMAL
);

580 i‡(
èb≥ndög
 && (((
x
 + 1) % 8) == 0)) {

581 
èb≥ndög
 = 0;

582 
èbwa•ídög
 = 1;

585 
	`move
(
y
, 
x
);

587 i‡(!
fú°_s¸ìn
 && !
exô_óæy
 && (
Êags
 & 
WATCH_CHGEXIT
)) {

588 #ifde‡
WITH_WATCH8BIT


589 
cch¨_t
 
ﬁdc
;

590 
	`ö_wch
(&
ﬁdc
);

591 
exô_óæy
 = (
wch¨_t
Ë
c
 !
ﬁdc
.
ch¨s
[0];

593 
chty≥
 
ﬁdch
 = 
	`öch
();

594 
ﬁdc
 = 
ﬁdch
 & 
A_CHARTEXT
;

595 
exô_óæy
 = ()
c
 !
ﬁdc
;

598 i‡(
Êags
 & 
WATCH_DIFF
) {

599 #ifde‡
WITH_WATCH8BIT


600 
cch¨_t
 
ﬁdc
;

601 
	`ö_wch
(&
ﬁdc
);

602 
©å
 = !
fú°_s¸ìn


603 && ((
wch¨_t
Ë
c
 !
ﬁdc
.
ch¨s
[0]

605 ((
Êags
 & 
WATCH_CUMUL
)

606 && (
ﬁdc
.
©å
 & 
A_ATTRIBUTES
)));

608 
chty≥
 
ﬁdch
 = 
	`öch
();

609 
ﬁdc
 = 
ﬁdch
 & 
A_CHARTEXT
;

610 
©å
 = !
fú°_s¸ìn


611 && (()
c
 !
ﬁdc


613 ((
Êags
 & 
WATCH_CUMUL
)

614 && (
ﬁdch
 & 
A_ATTRIBUTES
)));

617 i‡(
©å
)

618 
	`°™dout
();

619 #ifde‡
WITH_WATCH8BIT


620 
	`addnw°r
((
wch¨_t
 *Ë& 
c
, 1);

622 
	`addch
(
c
);

624 i‡(
©å
)

625 
	`°™díd
();

626 #ifde‡
WITH_WATCH8BIT


627 i‡(
	`wcwidth
(
c
) == 0) {

628 
x
--;

630 i‡(
	`wcwidth
(
c
) == 2) {

631 
x
++;

635 
ﬁdeﬁ£í
 = 
eﬁ£í
;

638 
	`f˛o£
(
p
);

642 i‡(
	`waôpid
(
chûd
, &
°©us
, 0) < 0)

643 
	`xîr
(8, 
	`_
("waitpid"));

646 i‡((!
	`WIFEXITED
(
°©us
Ë|| 
	`WEXITSTATUS
(status))) {

647 i‡(
Êags
 & 
WATCH_BEEP
)

648 
	`bìp
();

649 i‡(
Êags
 & 
WATCH_ERREXIT
) {

650 
	`mvadd°r
(
height
 - 1, 0,

651 
	`_
("commandÉxit witháÇon-zero status,Öressá keyÅoÉxit"));

652 
	`ª‰esh
();

653 
	`fgëc
(
°dö
);

654 
	`ídwö
();

655 
	`exô
(8);

658 
fú°_s¸ìn
 = 0;

659 
	`ª‰esh
();

660  
exô_óæy
;

661 
	}
}

663 
	$maö
(
¨gc
, *
¨gv
[])

665 
›tc
;

666 
öãrvÆ
 = 2;

667 *
comm™d
;

668 **
comm™d_¨gv
;

669 
comm™d_Àngth
 = 0;

670 
w©ch_u£c_t
 
√xt_lo›
;

672 #ifde‡
WITH_WATCH8BIT


673 
wch¨_t
 *
wcomm™d
 = 
NULL
;

674 
wcomm™d_ch¨a˘îs
 = 0;

677 
›ti⁄
 
l⁄g›ts
[] = {

678 {"cﬁ‹", 
no_¨gumít
, 0, 'c'},

679 {"dif„ªn˚s", 
›ti⁄Æ_¨gumít
, 0, 'd'},

680 {"hñp", 
no_¨gumít
, 0, 'h'},

681 {"öãrvÆ", 
ªquúed_¨gumít
, 0, 'n'},

682 {"bìp", 
no_¨gumít
, 0, 'b'},

683 {"îªxô", 
no_¨gumít
, 0, 'e'},

684 {"chgexô", 
no_¨gumít
, 0, 'g'},

685 {"exec", 
no_¨gumít
, 0, 'x'},

686 {"¥eci£", 
no_¨gumít
, 0, 'p'},

687 {"no-tôÀ", 
no_¨gumít
, 0, 't'},

688 {"vîsi⁄", 
no_¨gumít
, 0, 'v'},

692 #ifde‡
HAVE_PROGRAM_INVOCATION_NAME


693 
¥ogøm_övoˇti⁄_«me
 = 
¥ogøm_övoˇti⁄_sh‹t_«me
;

695 
	`£éoˇÀ
(
LC_ALL
, "");

696 
	`bödãxtdomaö
(
PACKAGE
, 
LOCALEDIR
);

697 
	`ãxtdomaö
(
PACKAGE
);

698 
	`©exô
(
˛o£_°dout
);

700 (
›tc
 =

701 
	`gë›t_l⁄g
(
¨gc
, 
¨gv
, "+b˚d::ghn:pvtx", 
l⁄g›ts
, (*)0))

702 !
EOF
) {

703 
›tc
) {

705 
Êags
 |
WATCH_BEEP
;

708 
Êags
 |
WATCH_COLOR
;

711 
Êags
 |
WATCH_DIFF
;

712 i‡(
›èrg
)

713 
Êags
 |
WATCH_CUMUL
;

716 
Êags
 |
WATCH_ERREXIT
;

719 
Êags
 |
WATCH_CHGEXIT
;

722 
show_tôÀ
 = 0;

725 
Êags
 |
WATCH_EXEC
;

728 
öãrvÆ
 = 
	`°πod_nﬁ_‹_îr
(
›èrg
, 
	`_
("failedÅoÖarseárgument"));

729 i‡(
öãrvÆ
 < 0.1)

730 
öãrvÆ
 = 0.1;

731 i‡(
öãrvÆ
 > 
UINT_MAX
)

732 
öãrvÆ
 = 
UINT_MAX
;

735 
¥eci£_timekìpög
 = 1;

738 
	`ußge
(
°dout
);

741 
	`¥ötf
(
PROCPS_NG_VERSION
);

742  
EXIT_SUCCESS
;

744 
	`ußge
(
°dîr
);

749 i‡(
›töd
 >
¨gc
)

750 
	`ußge
(
°dîr
);

753 
comm™d_¨gv
 = &(
¨gv
[
›töd
]);

755 
comm™d
 = 
	`x°rdup
(
¨gv
[
›töd
++]);

756 
comm™d_Àngth
 = 
	`°æí
(
comm™d
);

757 ; 
›töd
 < 
¨gc
; optind++) {

758 *
ídp
;

759 
s
 = 
	`°æí
(
¨gv
[
›töd
]);

761 
comm™d
 = 
	`xªÆloc
(comm™d, 
comm™d_Àngth
 + 
s
 + 2);

762 
ídp
 = 
comm™d
 + 
comm™d_Àngth
;

763 *
ídp
 = ' ';

764 
	`mem˝y
(
ídp
 + 1, 
¨gv
[
›töd
], 
s
);

766 
comm™d_Àngth
 +1 + 
s
;

767 
comm™d
[
comm™d_Àngth
] = '\0';

770 #ifde‡
WITH_WATCH8BIT


773 
wcomm™d_ch¨a˘îs
 = 
	`mb°owcs
(
NULL
, 
comm™d
, 0);

774 i‡(
wcomm™d_ch¨a˘îs
 < 0) {

775 
	`Ârötf
(
°dîr
, 
	`_
("unicode handlingÉrror\n"));

776 
	`exô
(
EXIT_FAILURE
);

778 
wcomm™d
 =

779 (
wch¨_t
 *Ë
	`mÆloc
((
wcomm™d_ch¨a˘îs
 + 1Ë* (
wcomm™d
));

780 i‡(
wcomm™d
 =
NULL
) {

781 
	`Ârötf
(
°dîr
, 
	`_
("unicode handlingÉrror (malloc)\n"));

782 
	`exô
(
EXIT_FAILURE
);

784 
	`mb°owcs
(
wcomm™d
, 
comm™d
, 
wcomm™d_ch¨a˘îs
 + 1);

787 
	`gë_ãrmöÆ_size
();

791 
	`sig«l
(
SIGINT
, 
dõ
);

792 
	`sig«l
(
SIGTERM
, 
dõ
);

793 
	`sig«l
(
SIGHUP
, 
dõ
);

794 
	`sig«l
(
SIGWINCH
, 
wöch_h™dÀr
);

797 
cur£s_°¨ãd
 = 1;

798 
	`öôs¸
();

799 i‡(
Êags
 & 
WATCH_COLOR
) {

800 i‡(
	`has_cﬁ‹s
()) {

801 
	`°¨t_cﬁ‹
();

802 
	`u£_deÁu…_cﬁ‹s
();

803 
	`öô_™si_cﬁ‹s
();

805 
Êags
 |
WATCH_COLOR
;

808 
	`n⁄l
();

809 
	`n€cho
();

810 
	`cbªak
();

812 i‡(
¥eci£_timekìpög
)

813 
√xt_lo›
 = 
	`gë_time_u£c
();

816 i‡(
s¸ìn_size_ch™ged
) {

817 
	`gë_ãrmöÆ_size
();

818 
	`ªsizëîm
(
height
, 
width
);

819 
	`˛ór
();

821 
s¸ìn_size_ch™ged
 = 0;

822 
fú°_s¸ìn
 = 1;

825 i‡(
show_tôÀ
)

826 #ifde‡
WITH_WATCH8BIT


827 
	`ouçut_hódî
(
wcomm™d
, 
wcomm™d_ch¨a˘îs
, 
öãrvÆ
);

829 
	`ouçut_hódî
(
comm™d
, 
öãrvÆ
);

832 i‡(
	`run_comm™d
(
comm™d
, 
comm™d_¨gv
))

836 i‡(
¥eci£_timekìpög
) {

837 
w©ch_u£c_t
 
cur_time
 = 
	`gë_time_u£c
();

838 
√xt_lo›
 +
USECS_PER_SEC
 * 
öãrvÆ
;

839 i‡(
cur_time
 < 
√xt_lo›
)

840 
	`u¶ìp
(
√xt_lo›
 - 
cur_time
);

842 i‡(
öãrvÆ
 < 
UINT_MAX
 / 
USECS_PER_SEC
)

843 
	`u¶ìp
(
öãrvÆ
 * 
USECS_PER_SEC
);

845 
	`¶ìp
(
öãrvÆ
);

848 
	`ídwö
();

849  
EXIT_SUCCESS
;

850 
	}
}

	@/usr/include/arpa/inet.h

18 #i‚de‡
_ARPA_INET_H


19 
	#_ARPA_INET_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<√töë/ö.h
>

25 #i‚de‡
__sockÀn_t_deföed


26 
__sockÀn_t
 
	tsockÀn_t
;

27 
	#__sockÀn_t_deföed


	)

30 
__BEGIN_DECLS


34 
ö_addr_t
 
	$öë_addr
 (c⁄° *
__˝
Ë
__THROW
;

37 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

41 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

42 
__THROW
;

45 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

49 
ö_addr_t
 
	$öë_√tw‹k
 (c⁄° *
__˝
Ë
__THROW
;

53 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

58 
	$öë_±⁄
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

59 *
__ª°ri˘
 
__buf
Ë
__THROW
;

64 c⁄° *
	$öë_¡›
 (
__af
, c⁄° *
__ª°ri˘
 
__˝
,

65 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

66 
__THROW
;

70 #ifde‡
__USE_MISC


73 
	$öë_©⁄
 (c⁄° *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

77 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

82 *
	$öë_√t_¡›
 (
__af
, c⁄° *
__˝
, 
__bôs
,

83 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

88 
	$öë_√t_±⁄
 (
__af
, c⁄° *
__˝
,

89 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

94 
	$öë_nßp_addr
 (c⁄° *
__˝
,

95 *
__buf
, 
__Àn
Ë
__THROW
;

99 *
	$öë_nßp_¡ﬂ
 (
__Àn
, c⁄° *
__˝
,

100 *
__buf
Ë
__THROW
;

103 
__END_DECLS


	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


88 
	#as£π
(
ex¥
) \

89 ((
ex¥
) \

90 ? 
	`__ASSERT_VOID_CAST
 (0) \

91 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

93 #ifdef 
__USE_GNU


94 
	#as£π_≥º‹
(
î∫um
) \

95 (!(
î∫um
) \

96 ? 
	`__ASSERT_VOID_CAST
 (0) \

97 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

105 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

106 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

108 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

109 
	#__ASSERT_FUNCTION
 
__func__


	)

111 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

118 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


119 #unde‡
°©ic_as£π


120 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #ifde‡
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #ifde‡
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/curses.h

37 #i‚de‡
__NCURSES_H


38 
	#__NCURSES_H


	)

40 
	#CURSES
 1

	)

41 
	#CURSES_H
 1

	)

44 
	#NCURSES_VERSION_MAJOR
 6

	)

45 
	#NCURSES_VERSION_MINOR
 0

	)

46 
	#NCURSES_VERSION_PATCH
 20160213

	)

49 #unde‡
NCURSES_VERSION


50 
	#NCURSES_VERSION
 "6.0"

	)

55 
	#NCURSES_MOUSE_VERSION
 1

	)

60 
	~<ncur£s_dŒ.h
>

63 
	~<°döt.h
>

69 #i‚de‡
NCURSES_ENABLE_STDBOOL_H


70 
	#NCURSES_ENABLE_STDBOOL_H
 1

	)

77 #i‚de‡
NCURSES_ATTR_T


78 
	#NCURSES_ATTR_T
 

	)

85 #unde‡
NCURSES_CONST


86 
	#NCURSES_CONST
 c⁄°

	)

88 #unde‡
NCURSES_INLINE


89 
	#NCURSES_INLINE
 
ölöe


	)

100 #unde‡
NCURSES_COLOR_T


101 
	#NCURSES_COLOR_T
 

	)

103 #unde‡
NCURSES_PAIRS_T


104 
	#NCURSES_PAIRS_T
 

	)

109 #i‚de‡
NCURSES_OPAQUE


110 
	#NCURSES_OPAQUE
 0

	)

116 #i‚de‡
NCURSES_REENTRANT


117 
	#NCURSES_REENTRANT
 0

	)

123 #unde‡
NCURSES_INTEROP_FUNCS


124 
	#NCURSES_INTEROP_FUNCS
 0

	)

129 #unde‡
NCURSES_SIZE_T


130 
	#NCURSES_SIZE_T
 

	)

135 #unde‡
NCURSES_TPARM_VARARGS


136 
	#NCURSES_TPARM_VARARGS
 1

	)

142 #unde‡
NCURSES_TPARM_ARG


143 
	#NCURSES_TPARM_ARG
 

	)

149 #unde‡
NCURSES_WCWIDTH_GRAPHICS


150 
	#NCURSES_WCWIDTH_GRAPHICS
 1

	)

157 #unde‡
NCURSES_CH_T


158 
	#NCURSES_CH_T
 
chty≥


	)

160 #i‡0 && 
deföed
(
_LP64
)

161 
	tchty≥
;

162 
	tmmask_t
;

164 
	tchty≥
;

165 
	tmmask_t
;

171 
	~<°dio.h
>

180 #i‚de‡
NCURSES_WIDECHAR


181 #i‡
deföed
(
_XOPEN_SOURCE_EXTENDED
Ë|| (deföed(
_XOPEN_SOURCE
) && (_XOPEN_SOURCE - 0 >= 500))

182 
	#NCURSES_WIDECHAR
 1

	)

184 
	#NCURSES_WIDECHAR
 0

	)

188 
	~<°d¨g.h
>

189 #i‡
NCURSES_WIDECHAR


190 
	~<°ddef.h
>

205 #unde‡
TRUE


206 
	#TRUE
 1

	)

208 #unde‡
FALSE


209 
	#FALSE
 0

	)

211 
	tNCURSES_BOOL
;

213 #i‡
deföed
(
__˝lu•lus
)

216 
	#NCURSES_BOOL
 
boﬁ


	)

220 #i‡
NCURSES_ENABLE_STDBOOL_H


221 
	~<°dboﬁ.h
>

223 
	#NCURSES_BOOL
 
boﬁ


	)

226 #unde‡
boﬁ


227 
	#boﬁ
 
NCURSES_BOOL


	)

232 #ifde‡
__˝lu•lus


234 
	#NCURSES_CAST
(
ty≥
,
vÆue
Ë
°©ic_ˇ°
<ty≥>(vÆue)

	)

236 
	#NCURSES_CAST
(
ty≥
,
vÆue
Ë—y≥)(vÆue)

	)

243 
	#WA_ATTRIBUTES
 
A_ATTRIBUTES


	)

244 
	#WA_NORMAL
 
A_NORMAL


	)

245 
	#WA_STANDOUT
 
A_STANDOUT


	)

246 
	#WA_UNDERLINE
 
A_UNDERLINE


	)

247 
	#WA_REVERSE
 
A_REVERSE


	)

248 
	#WA_BLINK
 
A_BLINK


	)

249 
	#WA_DIM
 
A_DIM


	)

250 
	#WA_BOLD
 
A_BOLD


	)

251 
	#WA_ALTCHARSET
 
A_ALTCHARSET


	)

252 
	#WA_INVIS
 
A_INVIS


	)

253 
	#WA_PROTECT
 
A_PROTECT


	)

254 
	#WA_HORIZONTAL
 
A_HORIZONTAL


	)

255 
	#WA_LEFT
 
A_LEFT


	)

256 
	#WA_LOW
 
A_LOW


	)

257 
	#WA_RIGHT
 
A_RIGHT


	)

258 
	#WA_TOP
 
A_TOP


	)

259 
	#WA_VERTICAL
 
A_VERTICAL


	)

262 
	#WA_ITALIC
 
A_ITALIC


	)

266 
	#COLOR_BLACK
 0

	)

267 
	#COLOR_RED
 1

	)

268 
	#COLOR_GREEN
 2

	)

269 
	#COLOR_YELLOW
 3

	)

270 
	#COLOR_BLUE
 4

	)

271 
	#COLOR_MAGENTA
 5

	)

272 
	#COLOR_CYAN
 6

	)

273 
	#COLOR_WHITE
 7

	)

277 #i‡0 || 
NCURSES_REENTRANT


278 
NCURSES_WRAPPED_VAR
(
chty≥
*, 
acs_m≠
);

279 
	#acs_m≠
 
	`NCURSES_PUBLIC_VAR
(
	`acs_m≠
())

	)

281 
NCURSES_EXPORT_VAR
(
chty≥
Ë
acs_m≠
[];

284 
	#NCURSES_ACS
(
c
Ë(
acs_m≠
[
	`NCURSES_CAST
(,(c))])

	)

287 
	#ACS_ULCORNER
 
	`NCURSES_ACS
('l'Ë

	)

288 
	#ACS_LLCORNER
 
	`NCURSES_ACS
('m'Ë

	)

289 
	#ACS_URCORNER
 
	`NCURSES_ACS
('k'Ë

	)

290 
	#ACS_LRCORNER
 
	`NCURSES_ACS
('j'Ë

	)

291 
	#ACS_LTEE
 
	`NCURSES_ACS
('t'Ë

	)

292 
	#ACS_RTEE
 
	`NCURSES_ACS
('u'Ë

	)

293 
	#ACS_BTEE
 
	`NCURSES_ACS
('v'Ë

	)

294 
	#ACS_TTEE
 
	`NCURSES_ACS
('w'Ë

	)

295 
	#ACS_HLINE
 
	`NCURSES_ACS
('q'Ë

	)

296 
	#ACS_VLINE
 
	`NCURSES_ACS
('x'Ë

	)

297 
	#ACS_PLUS
 
	`NCURSES_ACS
('n'Ë

	)

298 
	#ACS_S1
 
	`NCURSES_ACS
('o'Ë

	)

299 
	#ACS_S9
 
	`NCURSES_ACS
('s'Ë

	)

300 
	#ACS_DIAMOND
 
	`NCURSES_ACS
('`'Ë

	)

301 
	#ACS_CKBOARD
 
	`NCURSES_ACS
('a'Ë

	)

302 
	#ACS_DEGREE
 
	`NCURSES_ACS
('f'Ë

	)

303 
	#ACS_PLMINUS
 
	`NCURSES_ACS
('g'Ë

	)

304 
	#ACS_BULLET
 
	`NCURSES_ACS
('~'Ë

	)

306 
	#ACS_LARROW
 
	`NCURSES_ACS
(','Ë

	)

307 
	#ACS_RARROW
 
	`NCURSES_ACS
('+'Ë

	)

308 
	#ACS_DARROW
 
	`NCURSES_ACS
('.'Ë

	)

309 
	#ACS_UARROW
 
	`NCURSES_ACS
('-'Ë

	)

310 
	#ACS_BOARD
 
	`NCURSES_ACS
('h'Ë

	)

311 
	#ACS_LANTERN
 
	`NCURSES_ACS
('i'Ë

	)

312 
	#ACS_BLOCK
 
	`NCURSES_ACS
('0'Ë

	)

318 
	#ACS_S3
 
	`NCURSES_ACS
('p'Ë

	)

319 
	#ACS_S7
 
	`NCURSES_ACS
('r'Ë

	)

320 
	#ACS_LEQUAL
 
	`NCURSES_ACS
('y'Ë

	)

321 
	#ACS_GEQUAL
 
	`NCURSES_ACS
('z'Ë

	)

322 
	#ACS_PI
 
	`NCURSES_ACS
('{'Ë

	)

323 
	#ACS_NEQUAL
 
	`NCURSES_ACS
('|'Ë

	)

324 
	#ACS_STERLING
 
	`NCURSES_ACS
('}'Ë

	)

332 
	#ACS_BSSB
 
ACS_ULCORNER


	)

333 
	#ACS_SSBB
 
ACS_LLCORNER


	)

334 
	#ACS_BBSS
 
ACS_URCORNER


	)

335 
	#ACS_SBBS
 
ACS_LRCORNER


	)

336 
	#ACS_SBSS
 
ACS_RTEE


	)

337 
	#ACS_SSSB
 
ACS_LTEE


	)

338 
	#ACS_SSBS
 
ACS_BTEE


	)

339 
	#ACS_BSSS
 
ACS_TTEE


	)

340 
	#ACS_BSBS
 
ACS_HLINE


	)

341 
	#ACS_SBSB
 
ACS_VLINE


	)

342 
	#ACS_SSSS
 
ACS_PLUS


	)

344 #unde‡
ERR


345 
	#ERR
 (-1)

	)

347 #unde‡
OK


348 
	#OK
 (0)

	)

351 
	#_SUBWIN
 0x01

	)

352 
	#_ENDLINE
 0x02

	)

353 
	#_FULLWIN
 0x04

	)

354 
	#_SCROLLWIN
 0x08

	)

355 
	#_ISPAD
 0x10

	)

356 
	#_HASMOVED
 0x20

	)

357 
	#_WRAPPED
 0x40

	)

363 
	#_NOCHANGE
 -1

	)

369 
	#_NEWINDEX
 -1

	)

371 
s¸ìn
 
	tSCREEN
;

372 
_wö_°
 
	tWINDOW
;

374 
chty≥
 
	t©å_t
;

376 #i‡
NCURSES_WIDECHAR


379 #ifde‡
mbÀn


380 #unde‡
mbÀn


382 
	~<libutf8.h
>

386 
	~<wch¨.h
>

390 
	twch¨_t
;

394 
	twöt_t
;

403 
	#CCHARW_MAX
 5

	)

406 
©å_t
 
	g©å
;

407 
wch¨_t
 
	gch¨s
[
CCHARW_MAX
];

409 #unde‡
NCURSES_EXT_COLORS


410 
	#NCURSES_EXT_COLORS
 20160213

	)

411 
	gext_cﬁ‹
;

414 
	tcch¨_t
;

418 #i‡!
NCURSES_OPAQUE


419 
	gld©
;

421 
	s_wö_°


423 
NCURSES_SIZE_T
 
	g_cury
, 
	g_curx
;

426 
NCURSES_SIZE_T
 
	g_maxy
, 
	g_maxx
;

427 
NCURSES_SIZE_T
 
	g_begy
, 
	g_begx
;

429 
	g_Êags
;

432 
©å_t
 
	g_©ås
;

433 
chty≥
 
	g_bkgd
;

436 
boﬁ
 
	g_nŸimeout
;

437 
boﬁ
 
	g_˛ór
;

438 
boﬁ
 
	g_Àaveok
;

439 
boﬁ
 
	g_s¸ﬁl
;

440 
boﬁ
 
	g_idlok
;

441 
boﬁ
 
	g_idcok
;

442 
boﬁ
 
	g_immed
;

443 
boﬁ
 
	g_sync
;

444 
boﬁ
 
	g_u£_key∑d
;

445 
	g_dñay
;

447 
ld©
 *
	g_löe
;

450 
NCURSES_SIZE_T
 
	g_ªgt›
;

451 
NCURSES_SIZE_T
 
	g_ªgbŸtom
;

454 
	g_∑rx
;

455 
	g_∑ry
;

456 
WINDOW
 *
	g_∑ª¡
;

459 
	spd©


461 
NCURSES_SIZE_T
 
	g_∑d_y
, 
	g_∑d_x
;

462 
NCURSES_SIZE_T
 
	g_∑d_t›
, 
	g_∑d_À·
;

463 
NCURSES_SIZE_T
 
	g_∑d_bŸtom
, 
	g_∑d_right
;

464 } 
	g_∑d
;

466 
NCURSES_SIZE_T
 
	g_yoff£t
;

468 #i‡
NCURSES_WIDECHAR


469 
cch¨_t
 
	g_bkg∫d
;

471 
	g_cﬁ‹
;

481 #ifde‡
NCURSES_WGETCH_EVENTS


482 #i‡!
deföed
(
__BEOS__
Ë|| deföed(
__HAIKU__
)

484 
	#NCURSES_EVENT_VERSION
 1

	)

490 
	#_NC_EVENT_TIMEOUT_MSEC
 1

	)

491 
	#_NC_EVENT_FILE
 2

	)

492 
	#_NC_EVENT_FILE_READABLE
 2

	)

494 
	#_NC_EVENT_FILE_WRITABLE
 4

	)

495 
	#_NC_EVENT_FILE_EXCEPTION
 8

	)

500 
	gty≥
;

503 
	gtimeout_m£c
;

506 
	gÊags
;

507 
	gfd
;

508 
	gªsu…
;

509 } 
	g„v
;

510 } 
	gd©a
;

511 } 
	t_nc_evít
;

515 
	gcou¡
;

516 
	gªsu…_Êags
;

517 
_nc_evít
 *
	gevíts
[1];

518 } 
	t_nc_evíéi°
;

520 
NCURSES_EXPORT
(Ë
wgëch_evíts
 (
WINDOW
 *, 
_nc_evíéi°
 *);

521 
NCURSES_EXPORT
(Ë
wgën°r_evíts
 (
WINDOW
 *,*,,
_nc_evíéi°
 *);

533 #i‡!(
deföed
(
__GNUC__
Ë|| deföed(
__GNUG__
Ë|| deföed(
__©åibuã__
))

534 
	#__©åibuã__
(
p
Ë

	)

545 #i‚de‡
GCC_PRINTFLIKE


546 #i‡
deföed
(
GCC_PRINTF
Ë&& !deföed(
¥ötf
)

547 
	#GCC_PRINTFLIKE
(
fmt
,
v¨
Ë
	`__©åibuã__
((
	`f‹m©
(
¥ötf
,fmt,v¨)))

	)

549 
	#GCC_PRINTFLIKE
(
fmt
,
v¨
Ë

	)

553 #i‚de‡
GCC_SCANFLIKE


554 #i‡
deföed
(
GCC_SCANF
Ë&& !deföed(
sˇnf
)

555 
	#GCC_SCANFLIKE
(
fmt
,
v¨
Ë
	`__©åibuã__
((
	`f‹m©
(
sˇnf
,fmt,v¨)))

	)

557 
	#GCC_SCANFLIKE
(
fmt
,
v¨
Ë

	)

561 #i‚def 
GCC_NORETURN


562 
	#GCC_NORETURN


	)

565 #i‚def 
GCC_UNUSED


566 
	#GCC_UNUSED


	)

573 (*
	gNCURSES_OUTC
)();

582 
NCURSES_EXPORT
(Ë
addch
 (c⁄° 
chty≥
);

583 
NCURSES_EXPORT
(Ë
addchn°r
 (c⁄° 
chty≥
 *, );

584 
NCURSES_EXPORT
(Ë
addch°r
 (c⁄° 
chty≥
 *);

585 
NCURSES_EXPORT
(Ë
addn°r
 (const *, );

586 
NCURSES_EXPORT
(Ë
add°r
 (const *);

587 
NCURSES_EXPORT
(Ë
©åoff
 (
NCURSES_ATTR_T
);

588 
NCURSES_EXPORT
(Ë
©å⁄
 (
NCURSES_ATTR_T
);

589 
NCURSES_EXPORT
(Ë
©å£t
 (
NCURSES_ATTR_T
);

590 
NCURSES_EXPORT
(Ë
©å_gë
 (
©å_t
 *, 
NCURSES_PAIRS_T
 *, *);

591 
NCURSES_EXPORT
(Ë
©å_off
 (
©å_t
, *);

592 
NCURSES_EXPORT
(Ë
©å_⁄
 (
©å_t
, *);

593 
NCURSES_EXPORT
(Ë
©å_£t
 (
©å_t
, 
NCURSES_PAIRS_T
, *);

594 
NCURSES_EXPORT
(Ë
baudøã
 ();

595 
NCURSES_EXPORT
(Ë
bìp
 ();

596 
NCURSES_EXPORT
(Ë
bkgd
 (
chty≥
);

597 
NCURSES_EXPORT
(Ë
bkgd£t
 (
chty≥
);

598 
NCURSES_EXPORT
(Ë
b‹dî
 (
chty≥
,chtype,chtype,chtype,chtype,chtype,chtype,chtype);

599 
NCURSES_EXPORT
(Ë
box
 (
WINDOW
 *, 
chty≥
, chtype);

600 
NCURSES_EXPORT
(
boﬁ
Ë
ˇn_ch™ge_cﬁ‹
 ();

601 
NCURSES_EXPORT
(Ë
cbªak
 ();

602 
NCURSES_EXPORT
(Ë
chg©
 (, 
©å_t
, 
NCURSES_PAIRS_T
, const *);

603 
NCURSES_EXPORT
(Ë
˛ór
 ();

604 
NCURSES_EXPORT
(Ë
˛órok
 (
WINDOW
 *,
boﬁ
);

605 
NCURSES_EXPORT
(Ë
˛πobŸ
 ();

606 
NCURSES_EXPORT
(Ë
˛π€ﬁ
 ();

607 
NCURSES_EXPORT
(Ë
cﬁ‹_c⁄ã¡
 (
NCURSES_COLOR_T
,NCURSES_COLOR_T*,NCURSES_COLOR_T*,NCURSES_COLOR_T*);

608 
NCURSES_EXPORT
(Ë
cﬁ‹_£t
 (
NCURSES_PAIRS_T
,*);

609 
NCURSES_EXPORT
(Ë
COLOR_PAIR
 ();

610 
NCURSES_EXPORT
(Ë
c›ywö
 (c⁄° 
WINDOW
*,WINDOW*,,,,,,,);

611 
NCURSES_EXPORT
(Ë
curs_£t
 ();

612 
NCURSES_EXPORT
(Ë
def_¥og_mode
 ();

613 
NCURSES_EXPORT
(Ë
def_shñl_mode
 ();

614 
NCURSES_EXPORT
(Ë
dñay_ouçut
 ();

615 
NCURSES_EXPORT
(Ë
dñch
 ();

616 
NCURSES_EXPORT
(Ë
dñs¸ìn
 (
SCREEN
 *);

617 
NCURSES_EXPORT
(Ë
dñwö
 (
WINDOW
 *);

618 
NCURSES_EXPORT
(Ë
dñëñn
 ();

619 
NCURSES_EXPORT
(
WINDOW
 *Ë
dîwö
 (WINDOW *,,,,);

620 
NCURSES_EXPORT
(Ë
doupd©e
 ();

621 
NCURSES_EXPORT
(
WINDOW
 *Ë
dupwö
 (WINDOW *);

622 
NCURSES_EXPORT
(Ë
echo
 ();

623 
NCURSES_EXPORT
(Ë
echoch¨
 (c⁄° 
chty≥
);

624 
NCURSES_EXPORT
(Ë
îa£
 ();

625 
NCURSES_EXPORT
(Ë
ídwö
 ();

626 
NCURSES_EXPORT
(Ë
îa£ch¨
 ();

627 
NCURSES_EXPORT
(Ë
fûãr
 ();

628 
NCURSES_EXPORT
(Ë
Êash
 ();

629 
NCURSES_EXPORT
(Ë
Êushöp
 ();

630 
NCURSES_EXPORT
(
chty≥
Ë
gëbkgd
 (
WINDOW
 *);

631 
NCURSES_EXPORT
(Ë
gëch
 ();

632 
NCURSES_EXPORT
(Ë
gën°r
 (*, );

633 
NCURSES_EXPORT
(Ë
gë°r
 (*);

634 
NCURSES_EXPORT
(
WINDOW
 *Ë
gëwö
 (
FILE
 *);

635 
NCURSES_EXPORT
(Ë
hÆfdñay
 ();

636 
NCURSES_EXPORT
(
boﬁ
Ë
has_cﬁ‹s
 ();

637 
NCURSES_EXPORT
(
boﬁ
Ë
has_ic
 ();

638 
NCURSES_EXPORT
(
boﬁ
Ë
has_û
 ();

639 
NCURSES_EXPORT
(Ë
hlöe
 (
chty≥
, );

640 
NCURSES_EXPORT
(Ë
idcok
 (
WINDOW
 *, 
boﬁ
);

641 
NCURSES_EXPORT
(Ë
idlok
 (
WINDOW
 *, 
boﬁ
);

642 
NCURSES_EXPORT
(Ë
immedok
 (
WINDOW
 *, 
boﬁ
);

643 
NCURSES_EXPORT
(
chty≥
Ë
öch
 ();

644 
NCURSES_EXPORT
(Ë
öchn°r
 (
chty≥
 *, );

645 
NCURSES_EXPORT
(Ë
öch°r
 (
chty≥
 *);

646 
NCURSES_EXPORT
(
WINDOW
 *Ë
öôs¸
 ();

647 
NCURSES_EXPORT
(Ë
öô_cﬁ‹
 (
NCURSES_COLOR_T
,NCURSES_COLOR_T,NCURSES_COLOR_T,NCURSES_COLOR_T);

648 
NCURSES_EXPORT
(Ë
öô_∑ú
 (
NCURSES_PAIRS_T
,
NCURSES_COLOR_T
,NCURSES_COLOR_T);

649 
NCURSES_EXPORT
(Ë
ön°r
 (*, );

650 
NCURSES_EXPORT
(Ë
ösch
 (
chty≥
);

651 
NCURSES_EXPORT
(Ë
ösdñ 
 ();

652 
NCURSES_EXPORT
(Ë
ö£π 
 ();

653 
NCURSES_EXPORT
(Ë
ö¢°r
 (const *, );

654 
NCURSES_EXPORT
(Ë
ös°r
 (const *);

655 
NCURSES_EXPORT
(Ë
ö°r
 (*);

656 
NCURSES_EXPORT
(Ë
öåÊush
 (
WINDOW
 *,
boﬁ
);

657 
NCURSES_EXPORT
(
boﬁ
Ë
i£ndwö
 ();

658 
NCURSES_EXPORT
(
boﬁ
Ë
is_löëouched
 (
WINDOW
 *,);

659 
NCURSES_EXPORT
(
boﬁ
Ë
is_wötouched
 (
WINDOW
 *);

660 
NCURSES_EXPORT
(
NCURSES_CONST
 *Ë
key«me
 ();

661 
NCURSES_EXPORT
(Ë
key∑d
 (
WINDOW
 *,
boﬁ
);

662 
NCURSES_EXPORT
(Ë
kûlch¨
 ();

663 
NCURSES_EXPORT
(Ë
Àaveok
 (
WINDOW
 *,
boﬁ
);

664 
NCURSES_EXPORT
(*Ë
l⁄g«me
 ();

665 
NCURSES_EXPORT
(Ë
mëa
 (
WINDOW
 *,
boﬁ
);

666 
NCURSES_EXPORT
(Ë
move
 (, );

667 
NCURSES_EXPORT
(Ë
mvaddch
 (, , c⁄° 
chty≥
);

668 
NCURSES_EXPORT
(Ë
mvaddchn°r
 (, , c⁄° 
chty≥
 *, );

669 
NCURSES_EXPORT
(Ë
mvaddch°r
 (, , c⁄° 
chty≥
 *);

670 
NCURSES_EXPORT
(Ë
mvaddn°r
 (, , const *, );

671 
NCURSES_EXPORT
(Ë
mvadd°r
 (, , const *);

672 
NCURSES_EXPORT
(Ë
mvchg©
 (, , , 
©å_t
, 
NCURSES_PAIRS_T
, const *);

673 
NCURSES_EXPORT
(Ë
mvcur
 (,,,);

674 
NCURSES_EXPORT
(Ë
mvdñch
 (, );

675 
NCURSES_EXPORT
(Ë
mvdîwö
 (
WINDOW
 *, , );

676 
NCURSES_EXPORT
(Ë
mvgëch
 (, );

677 
NCURSES_EXPORT
(Ë
mvgën°r
 (, , *, );

678 
NCURSES_EXPORT
(Ë
mvgë°r
 (, , *);

679 
NCURSES_EXPORT
(Ë
mvhlöe
 (, , 
chty≥
, );

680 
NCURSES_EXPORT
(
chty≥
Ë
mvöch
 (, );

681 
NCURSES_EXPORT
(Ë
mvöchn°r
 (, , 
chty≥
 *, );

682 
NCURSES_EXPORT
(Ë
mvöch°r
 (, , 
chty≥
 *);

683 
NCURSES_EXPORT
(Ë
mvön°r
 (, , *, );

684 
NCURSES_EXPORT
(Ë
mvösch
 (, , 
chty≥
);

685 
NCURSES_EXPORT
(Ë
mvö¢°r
 (, , const *, );

686 
NCURSES_EXPORT
(Ë
mvös°r
 (, , const *);

687 
NCURSES_EXPORT
(Ë
mvö°r
 (, , *);

688 
NCURSES_EXPORT
(Ë
mv¥ötw
 (,, const *,...)

689 
GCC_PRINTFLIKE
(3,4);

690 
NCURSES_EXPORT
(Ë
mvsˇnw
 (,, 
NCURSES_CONST
 *,...)

691 
GCC_SCANFLIKE
(3,4);

692 
NCURSES_EXPORT
(Ë
mvvlöe
 (, , 
chty≥
, );

693 
NCURSES_EXPORT
(Ë
mvwaddch
 (
WINDOW
 *, , , c⁄° 
chty≥
);

694 
NCURSES_EXPORT
(Ë
mvwaddchn°r
 (
WINDOW
 *, , , c⁄° 
chty≥
 *, );

695 
NCURSES_EXPORT
(Ë
mvwaddch°r
 (
WINDOW
 *, , , c⁄° 
chty≥
 *);

696 
NCURSES_EXPORT
(Ë
mvwaddn°r
 (
WINDOW
 *, , , const *, );

697 
NCURSES_EXPORT
(Ë
mvwadd°r
 (
WINDOW
 *, , , const *);

698 
NCURSES_EXPORT
(Ë
mvwchg©
 (
WINDOW
 *, , , , 
©å_t
, 
NCURSES_PAIRS_T
, const *);

699 
NCURSES_EXPORT
(Ë
mvwdñch
 (
WINDOW
 *, , );

700 
NCURSES_EXPORT
(Ë
mvwgëch
 (
WINDOW
 *, , );

701 
NCURSES_EXPORT
(Ë
mvwgën°r
 (
WINDOW
 *, , , *, );

702 
NCURSES_EXPORT
(Ë
mvwgë°r
 (
WINDOW
 *, , , *);

703 
NCURSES_EXPORT
(Ë
mvwhlöe
 (
WINDOW
 *, , , 
chty≥
, );

704 
NCURSES_EXPORT
(Ë
mvwö
 (
WINDOW
 *,,);

705 
NCURSES_EXPORT
(
chty≥
Ë
mvwöch
 (
WINDOW
 *, , );

706 
NCURSES_EXPORT
(Ë
mvwöchn°r
 (
WINDOW
 *, , , 
chty≥
 *, );

707 
NCURSES_EXPORT
(Ë
mvwöch°r
 (
WINDOW
 *, , , 
chty≥
 *);

708 
NCURSES_EXPORT
(Ë
mvwön°r
 (
WINDOW
 *, , , *, );

709 
NCURSES_EXPORT
(Ë
mvwösch
 (
WINDOW
 *, , , 
chty≥
);

710 
NCURSES_EXPORT
(Ë
mvwö¢°r
 (
WINDOW
 *, , , const *, );

711 
NCURSES_EXPORT
(Ë
mvwös°r
 (
WINDOW
 *, , , const *);

712 
NCURSES_EXPORT
(Ë
mvwö°r
 (
WINDOW
 *, , , *);

713 
NCURSES_EXPORT
(Ë
mvw¥ötw
 (
WINDOW
*,,, const *,...)

714 
GCC_PRINTFLIKE
(4,5);

715 
NCURSES_EXPORT
(Ë
mvwsˇnw
 (
WINDOW
 *,,, 
NCURSES_CONST
 *,...)

716 
GCC_SCANFLIKE
(4,5);

717 
NCURSES_EXPORT
(Ë
mvwvlöe
 (
WINDOW
 *,, , 
chty≥
, );

718 
NCURSES_EXPORT
(Ë
«pms
 ();

719 
NCURSES_EXPORT
(
WINDOW
 *Ë
√w∑d
 (,);

720 
NCURSES_EXPORT
(
SCREEN
 *Ë
√wãrm
 (
NCURSES_CONST
 *,
FILE
 *,FILE *);

721 
NCURSES_EXPORT
(
WINDOW
 *Ë
√wwö
 (,,,);

722 
NCURSES_EXPORT
(Ë
∆
 ();

723 
NCURSES_EXPORT
(Ë
nocbªak
 ();

724 
NCURSES_EXPORT
(Ë
nodñay
 (
WINDOW
 *,
boﬁ
);

725 
NCURSES_EXPORT
(Ë
n€cho
 ();

726 
NCURSES_EXPORT
(Ë
n⁄l
 ();

727 
NCURSES_EXPORT
(Ë
noqiÊush
 ();

728 
NCURSES_EXPORT
(Ë
n‹aw
 ();

729 
NCURSES_EXPORT
(Ë
nŸimeout
 (
WINDOW
 *,
boﬁ
);

730 
NCURSES_EXPORT
(Ë
ovîœy
 (c⁄° 
WINDOW
*,WINDOW *);

731 
NCURSES_EXPORT
(Ë
ovîwrôe
 (c⁄° 
WINDOW
*,WINDOW *);

732 
NCURSES_EXPORT
(Ë
∑ú_c⁄ã¡
 (
NCURSES_PAIRS_T
,
NCURSES_COLOR_T
*,NCURSES_COLOR_T*);

733 
NCURSES_EXPORT
(Ë
PAIR_NUMBER
 ();

734 
NCURSES_EXPORT
(Ë
≥choch¨
 (
WINDOW
 *, c⁄° 
chty≥
);

735 
NCURSES_EXPORT
(Ë
≤ouåe‰esh
 (
WINDOW
*,,,,,,);

736 
NCURSES_EXPORT
(Ë
¥e‰esh
 (
WINDOW
 *,,,,,,);

737 
NCURSES_EXPORT
(Ë
¥ötw
 (const *,...)

738 
GCC_PRINTFLIKE
(1,2);

739 
NCURSES_EXPORT
(Ë
putwö
 (
WINDOW
 *, 
FILE
 *);

740 
NCURSES_EXPORT
(Ë
qiÊush
 ();

741 
NCURSES_EXPORT
(Ë
øw
 ();

742 
NCURSES_EXPORT
(Ë
ªdøwwö
 (
WINDOW
 *);

743 
NCURSES_EXPORT
(Ë
ª‰esh
 ();

744 
NCURSES_EXPORT
(Ë
ª£ây
 ();

745 
NCURSES_EXPORT
(Ë
ª£t_¥og_mode
 ();

746 
NCURSES_EXPORT
(Ë
ª£t_shñl_mode
 ();

747 
NCURSES_EXPORT
(Ë
rùofÊöe
 (, (*)(
WINDOW
 *, ));

748 
NCURSES_EXPORT
(Ë
ßvëty
 ();

749 
NCURSES_EXPORT
(Ë
sˇnw
 (
NCURSES_CONST
 *,...)

750 
GCC_SCANFLIKE
(1,2);

751 
NCURSES_EXPORT
(Ë
s¸_dump
 (const *);

752 
NCURSES_EXPORT
(Ë
s¸_öô
 (const *);

753 
NCURSES_EXPORT
(Ë
s¸l
 ();

754 
NCURSES_EXPORT
(Ë
s¸ﬁl
 (
WINDOW
 *);

755 
NCURSES_EXPORT
(Ë
s¸ﬁlok
 (
WINDOW
 *,
boﬁ
);

756 
NCURSES_EXPORT
(Ë
s¸_ª°‹e
 (const *);

757 
NCURSES_EXPORT
(Ë
s¸_£t
 (const *);

758 
NCURSES_EXPORT
(Ë
£ts¸ªg
 (,);

759 
NCURSES_EXPORT
(
SCREEN
 *Ë
£t_ãrm
 (SCREEN *);

760 
NCURSES_EXPORT
(Ë
¶k_©åoff
 (c⁄° 
chty≥
);

761 
NCURSES_EXPORT
(Ë
¶k_©å_off
 (c⁄° 
©å_t
, *);

762 
NCURSES_EXPORT
(Ë
¶k_©å⁄
 (c⁄° 
chty≥
);

763 
NCURSES_EXPORT
(Ë
¶k_©å_⁄
 (
©å_t
,*);

764 
NCURSES_EXPORT
(Ë
¶k_©å£t
 (c⁄° 
chty≥
);

765 
NCURSES_EXPORT
(
©å_t
Ë
¶k_©å
 ();

766 
NCURSES_EXPORT
(Ë
¶k_©å_£t
 (c⁄° 
©å_t
,
NCURSES_PAIRS_T
,*);

767 
NCURSES_EXPORT
(Ë
¶k_˛ór
 ();

768 
NCURSES_EXPORT
(Ë
¶k_cﬁ‹
 (
NCURSES_PAIRS_T
);

769 
NCURSES_EXPORT
(Ë
¶k_öô
 ();

770 
NCURSES_EXPORT
(*Ë
¶k_œbñ
 ();

771 
NCURSES_EXPORT
(Ë
¶k_nouåe‰esh
 ();

772 
NCURSES_EXPORT
(Ë
¶k_ª‰esh
 ();

773 
NCURSES_EXPORT
(Ë
¶k_ª°‹e
 ();

774 
NCURSES_EXPORT
(Ë
¶k_£t
 (,const *,);

775 
NCURSES_EXPORT
(Ë
¶k_touch
 ();

776 
NCURSES_EXPORT
(Ë
°™dout
 ();

777 
NCURSES_EXPORT
(Ë
°™díd
 ();

778 
NCURSES_EXPORT
(Ë
°¨t_cﬁ‹
 ();

779 
NCURSES_EXPORT
(
WINDOW
 *Ë
sub∑d
 (WINDOW *, , , , );

780 
NCURSES_EXPORT
(
WINDOW
 *Ë
subwö
 (WINDOW *, , , , );

781 
NCURSES_EXPORT
(Ë
syncok
 (
WINDOW
 *, 
boﬁ
);

782 
NCURSES_EXPORT
(
chty≥
Ë
ãrm©ås
 ();

783 
NCURSES_EXPORT
(*Ë
ãrm«me
 ();

784 
NCURSES_EXPORT
(Ë
timeout
 ();

785 
NCURSES_EXPORT
(Ë
touchlöe
 (
WINDOW
 *, , );

786 
NCURSES_EXPORT
(Ë
touchwö
 (
WINDOW
 *);

787 
NCURSES_EXPORT
(Ë
ty≥ahód
 ();

788 
NCURSES_EXPORT
(Ë
ungëch
 ();

789 
NCURSES_EXPORT
(Ë
u¡ouchwö
 (
WINDOW
 *);

790 
NCURSES_EXPORT
(Ë
u£_ív
 (
boﬁ
);

791 
NCURSES_EXPORT
(Ë
u£_tio˘l
 (
boﬁ
);

792 
NCURSES_EXPORT
(Ë
vid©å
 (
chty≥
);

793 
NCURSES_EXPORT
(Ë
vidputs
 (
chty≥
, 
NCURSES_OUTC
);

794 
NCURSES_EXPORT
(Ë
vlöe
 (
chty≥
, );

795 
NCURSES_EXPORT
(Ë
vw¥ötw
 (
WINDOW
 *, c⁄° *,
va_li°
);

796 
NCURSES_EXPORT
(Ë
vw_¥ötw
 (
WINDOW
 *, c⁄° *,
va_li°
);

797 
NCURSES_EXPORT
(Ë
vwsˇnw
 (
WINDOW
 *, 
NCURSES_CONST
 *,
va_li°
);

798 
NCURSES_EXPORT
(Ë
vw_sˇnw
 (
WINDOW
 *, 
NCURSES_CONST
 *,
va_li°
);

799 
NCURSES_EXPORT
(Ë
waddch
 (
WINDOW
 *, c⁄° 
chty≥
);

800 
NCURSES_EXPORT
(Ë
waddchn°r
 (
WINDOW
 *,c⁄° 
chty≥
 *,);

801 
NCURSES_EXPORT
(Ë
waddch°r
 (
WINDOW
 *,c⁄° 
chty≥
 *);

802 
NCURSES_EXPORT
(Ë
waddn°r
 (
WINDOW
 *,const *,);

803 
NCURSES_EXPORT
(Ë
wadd°r
 (
WINDOW
 *,const *);

804 
NCURSES_EXPORT
(Ë
w©å⁄
 (
WINDOW
 *, );

805 
NCURSES_EXPORT
(Ë
w©åoff
 (
WINDOW
 *, );

806 
NCURSES_EXPORT
(Ë
w©å£t
 (
WINDOW
 *, );

807 
NCURSES_EXPORT
(Ë
w©å_gë
 (
WINDOW
 *, 
©å_t
 *, 
NCURSES_PAIRS_T
 *, *);

808 
NCURSES_EXPORT
(Ë
w©å_⁄
 (
WINDOW
 *, 
©å_t
, *);

809 
NCURSES_EXPORT
(Ë
w©å_off
 (
WINDOW
 *, 
©å_t
, *);

810 
NCURSES_EXPORT
(Ë
w©å_£t
 (
WINDOW
 *, 
©å_t
, 
NCURSES_PAIRS_T
, *);

811 
NCURSES_EXPORT
(Ë
wbkgd
 (
WINDOW
 *, 
chty≥
);

812 
NCURSES_EXPORT
(Ë
wbkgd£t
 (
WINDOW
 *,
chty≥
);

813 
NCURSES_EXPORT
(Ë
wb‹dî
 (
WINDOW
 *,
chty≥
,chtype,chtype,chtype,chtype,chtype,chtype,chtype);

814 
NCURSES_EXPORT
(Ë
wchg©
 (
WINDOW
 *, , 
©å_t
, 
NCURSES_PAIRS_T
, const *);

815 
NCURSES_EXPORT
(Ë
w˛ór
 (
WINDOW
 *);

816 
NCURSES_EXPORT
(Ë
w˛πobŸ
 (
WINDOW
 *);

817 
NCURSES_EXPORT
(Ë
w˛π€ﬁ
 (
WINDOW
 *);

818 
NCURSES_EXPORT
(Ë
wcﬁ‹_£t
 (
WINDOW
*,
NCURSES_PAIRS_T
,*);

819 
NCURSES_EXPORT
(Ë
wcursyncup
 (
WINDOW
 *);

820 
NCURSES_EXPORT
(Ë
wdñch
 (
WINDOW
 *);

821 
NCURSES_EXPORT
(Ë
wdñëñn
 (
WINDOW
 *);

822 
NCURSES_EXPORT
(Ë
wechoch¨
 (
WINDOW
 *, c⁄° 
chty≥
);

823 
NCURSES_EXPORT
(Ë
wîa£
 (
WINDOW
 *);

824 
NCURSES_EXPORT
(Ë
wgëch
 (
WINDOW
 *);

825 
NCURSES_EXPORT
(Ë
wgën°r
 (
WINDOW
 *,*,);

826 
NCURSES_EXPORT
(Ë
wgë°r
 (
WINDOW
 *, *);

827 
NCURSES_EXPORT
(Ë
whlöe
 (
WINDOW
 *, 
chty≥
, );

828 
NCURSES_EXPORT
(
chty≥
Ë
wöch
 (
WINDOW
 *);

829 
NCURSES_EXPORT
(Ë
wöchn°r
 (
WINDOW
 *, 
chty≥
 *, );

830 
NCURSES_EXPORT
(Ë
wöch°r
 (
WINDOW
 *, 
chty≥
 *);

831 
NCURSES_EXPORT
(Ë
wön°r
 (
WINDOW
 *, *, );

832 
NCURSES_EXPORT
(Ë
wösch
 (
WINDOW
 *, 
chty≥
);

833 
NCURSES_EXPORT
(Ë
wösdñ 
 (
WINDOW
 *,);

834 
NCURSES_EXPORT
(Ë
wö£π 
 (
WINDOW
 *);

835 
NCURSES_EXPORT
(Ë
wö¢°r
 (
WINDOW
 *, const *,);

836 
NCURSES_EXPORT
(Ë
wös°r
 (
WINDOW
 *, const *);

837 
NCURSES_EXPORT
(Ë
wö°r
 (
WINDOW
 *, *);

838 
NCURSES_EXPORT
(Ë
wmove
 (
WINDOW
 *,,);

839 
NCURSES_EXPORT
(Ë
wnouåe‰esh
 (
WINDOW
 *);

840 
NCURSES_EXPORT
(Ë
w¥ötw
 (
WINDOW
 *, const *,...)

841 
GCC_PRINTFLIKE
(2,3);

842 
NCURSES_EXPORT
(Ë
wªdøw 
 (
WINDOW
 *,,);

843 
NCURSES_EXPORT
(Ë
wª‰esh
 (
WINDOW
 *);

844 
NCURSES_EXPORT
(Ë
wsˇnw
 (
WINDOW
 *, 
NCURSES_CONST
 *,...)

845 
GCC_SCANFLIKE
(2,3);

846 
NCURSES_EXPORT
(Ë
ws¸l
 (
WINDOW
 *,);

847 
NCURSES_EXPORT
(Ë
w£ts¸ªg
 (
WINDOW
 *,,);

848 
NCURSES_EXPORT
(Ë
w°™dout
 (
WINDOW
 *);

849 
NCURSES_EXPORT
(Ë
w°™díd
 (
WINDOW
 *);

850 
NCURSES_EXPORT
(Ë
wsyncdown
 (
WINDOW
 *);

851 
NCURSES_EXPORT
(Ë
wsyncup
 (
WINDOW
 *);

852 
NCURSES_EXPORT
(Ë
wtimeout
 (
WINDOW
 *,);

853 
NCURSES_EXPORT
(Ë
wtouch 
 (
WINDOW
 *,,,);

854 
NCURSES_EXPORT
(Ë
wvlöe
 (
WINDOW
 *,
chty≥
,);

859 
NCURSES_EXPORT
(Ë
tigëÊag
 (
NCURSES_CONST
 *);

860 
NCURSES_EXPORT
(Ë
tigënum
 (
NCURSES_CONST
 *);

861 
NCURSES_EXPORT
(*Ë
tigë°r
 (
NCURSES_CONST
 *);

862 
NCURSES_EXPORT
(Ë
puç
 (const *);

864 #i‡
NCURSES_TPARM_VARARGS


865 
NCURSES_EXPORT
(*Ë
ç¨m
 (
NCURSES_CONST
 *, ...);

867 
NCURSES_EXPORT
(*Ë
ç¨m
 (
NCURSES_CONST
 *, 
NCURSES_TPARM_ARG
,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG);

868 
NCURSES_EXPORT
(*Ë
ç¨m_v¨¨gs
 (
NCURSES_CONST
 *, ...);

871 
NCURSES_EXPORT
(*Ë
tù¨m
 (const *, ...);

876 
NCURSES_EXPORT
(Ë
gë©ås
 (c⁄° 
WINDOW
 *);

877 
NCURSES_EXPORT
(Ë
gëcurx
 (c⁄° 
WINDOW
 *);

878 
NCURSES_EXPORT
(Ë
gëcury
 (c⁄° 
WINDOW
 *);

879 
NCURSES_EXPORT
(Ë
gëbegx
 (c⁄° 
WINDOW
 *);

880 
NCURSES_EXPORT
(Ë
gëbegy
 (c⁄° 
WINDOW
 *);

881 
NCURSES_EXPORT
(Ë
gëmaxx
 (c⁄° 
WINDOW
 *);

882 
NCURSES_EXPORT
(Ë
gëmaxy
 (c⁄° 
WINDOW
 *);

883 
NCURSES_EXPORT
(Ë
gë∑rx
 (c⁄° 
WINDOW
 *);

884 
NCURSES_EXPORT
(Ë
gë∑ry
 (c⁄° 
WINDOW
 *);

889 #i‡!
NCURSES_WIDECHAR


890 
	#vid_©å
(
a
,
∑ú
,
›ts
Ë
	`vid©å
◊)

	)

897 #unde‡
NCURSES_EXT_FUNCS


898 
	#NCURSES_EXT_FUNCS
 20160213

	)

899 (*
	gNCURSES_WINDOW_CB
)(
	tWINDOW
 *, *);

900 (*
	gNCURSES_SCREEN_CB
)(
	tSCREEN
 *, *);

901 
NCURSES_EXPORT
(
boﬁ
Ë
is_ãrm_ªsized
 (, );

902 
NCURSES_EXPORT
(*Ë
keybound
 (, );

903 
NCURSES_EXPORT
(c⁄° *Ë
cur£s_vîsi⁄
 ();

904 
NCURSES_EXPORT
(Ë
assume_deÁu…_cﬁ‹s
 (, );

905 
NCURSES_EXPORT
(Ë
deföe_key
 (const *, );

906 
NCURSES_EXPORT
(Ë
gë_escdñay
 ();

907 
NCURSES_EXPORT
(Ë
key_deföed
 (const *);

908 
NCURSES_EXPORT
(Ë
keyok
 (, 
boﬁ
);

909 
NCURSES_EXPORT
(Ë
ªsize_ãrm
 (, );

910 
NCURSES_EXPORT
(Ë
ªsizëîm
 (, );

911 
NCURSES_EXPORT
(Ë
£t_escdñay
 ();

912 
NCURSES_EXPORT
(Ë
£t_èbsize
 ();

913 
NCURSES_EXPORT
(Ë
u£_deÁu…_cﬁ‹s
 ();

914 
NCURSES_EXPORT
(Ë
u£_exãnded_«mes
 (
boﬁ
);

915 
NCURSES_EXPORT
(Ë
u£_Àgacy_codög
 ();

916 
NCURSES_EXPORT
(Ë
u£_s¸ìn
 (
SCREEN
 *, 
NCURSES_SCREEN_CB
, *);

917 
NCURSES_EXPORT
(Ë
u£_wödow
 (
WINDOW
 *, 
NCURSES_WINDOW_CB
, *);

918 
NCURSES_EXPORT
(Ë
wªsize
 (
WINDOW
 *, , );

919 
NCURSES_EXPORT
(Ë
nofûãr
();

925 
NCURSES_EXPORT
(
WINDOW
 *Ë
wgë∑ª¡
 (const WINDOW *);

926 
NCURSES_EXPORT
(
boﬁ
Ë
is_˛óªd
 (c⁄° 
WINDOW
 *);

927 
NCURSES_EXPORT
(
boﬁ
Ë
is_idcok
 (c⁄° 
WINDOW
 *);

928 
NCURSES_EXPORT
(
boﬁ
Ë
is_idlok
 (c⁄° 
WINDOW
 *);

929 
NCURSES_EXPORT
(
boﬁ
Ë
is_immedok
 (c⁄° 
WINDOW
 *);

930 
NCURSES_EXPORT
(
boﬁ
Ë
is_key∑d
 (c⁄° 
WINDOW
 *);

931 
NCURSES_EXPORT
(
boﬁ
Ë
is_Àaveok
 (c⁄° 
WINDOW
 *);

932 
NCURSES_EXPORT
(
boﬁ
Ë
is_nodñay
 (c⁄° 
WINDOW
 *);

933 
NCURSES_EXPORT
(
boﬁ
Ë
is_nŸimeout
 (c⁄° 
WINDOW
 *);

934 
NCURSES_EXPORT
(
boﬁ
Ë
is_∑d
 (c⁄° 
WINDOW
 *);

935 
NCURSES_EXPORT
(
boﬁ
Ë
is_s¸ﬁlok
 (c⁄° 
WINDOW
 *);

936 
NCURSES_EXPORT
(
boﬁ
Ë
is_subwö
 (c⁄° 
WINDOW
 *);

937 
NCURSES_EXPORT
(
boﬁ
Ë
is_syncok
 (c⁄° 
WINDOW
 *);

938 
NCURSES_EXPORT
(Ë
wgëdñay
 (c⁄° 
WINDOW
 *);

939 
NCURSES_EXPORT
(Ë
wgës¸ªg
 (c⁄° 
WINDOW
 *, *, *);

942 
	#cur£s_vîsi⁄
(Ë
NCURSES_VERSION


	)

950 #unde‡
NCURSES_SP_FUNCS


951 
	#NCURSES_SP_FUNCS
 20160213

	)

952 
	#NCURSES_SP_NAME
(
«me
Ë«me##
_•


	)

955 
	#NCURSES_SP_OUTC
 
	`NCURSES_SP_NAME
(
NCURSES_OUTC
)

	)

956 (*
	gNCURSES_SP_OUTC
)(
	tSCREEN
*, );

958 
NCURSES_EXPORT
(
SCREEN
 *Ë
√w_¥es¸
 ();

960 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
baudøã
Ë(
SCREEN
*);

961 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
bìp
Ë(
SCREEN
*);

962 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
ˇn_ch™ge_cﬁ‹
Ë(
SCREEN
*);

963 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
cbªak
Ë(
SCREEN
*);

964 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
curs_£t
Ë(
SCREEN
*, );

965 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
cﬁ‹_c⁄ã¡
Ë(
SCREEN
*, 
NCURSES_PAIRS_T
, 
NCURSES_COLOR_T
*, NCURSES_COLOR_T*, NCURSES_COLOR_T*);

966 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
def_¥og_mode
Ë(
SCREEN
*);

967 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
def_shñl_mode
Ë(
SCREEN
*);

968 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
dñay_ouçut
Ë(
SCREEN
*, );

969 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
doupd©e
Ë(
SCREEN
*);

970 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
echo
Ë(
SCREEN
*);

971 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ídwö
Ë(
SCREEN
*);

972 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
îa£ch¨
Ë(
SCREEN
*);

973 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
fûãr
Ë(
SCREEN
*);

974 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
Êash
Ë(
SCREEN
*);

975 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
Êushöp
Ë(
SCREEN
*);

976 
NCURSES_EXPORT
(
WINDOW
 *Ë
NCURSES_SP_NAME
(
gëwö
Ë(
SCREEN
*, 
FILE
 *);

977 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
hÆfdñay
Ë(
SCREEN
*, );

978 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
has_cﬁ‹s
Ë(
SCREEN
*);

979 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
has_ic
Ë(
SCREEN
*);

980 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
has_û
Ë(
SCREEN
*);

981 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
öô_cﬁ‹
Ë(
SCREEN
*, 
NCURSES_COLOR_T
, NCURSES_COLOR_T, NCURSES_COLOR_T, NCURSES_COLOR_T);

982 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
öô_∑ú
Ë(
SCREEN
*, 
NCURSES_PAIRS_T
, 
NCURSES_COLOR_T
, NCURSES_COLOR_T);

983 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
öåÊush
Ë(
SCREEN
*, 
WINDOW
*, 
boﬁ
);

984 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
i£ndwö
Ë(
SCREEN
*);

985 
NCURSES_EXPORT
(
NCURSES_CONST
 *Ë
NCURSES_SP_NAME
(
key«me
Ë(
SCREEN
*, );

986 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
kûlch¨
Ë(
SCREEN
*);

987 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
l⁄g«me
Ë(
SCREEN
*);

988 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
mvcur
Ë(
SCREEN
*, , , , );

989 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
«pms
Ë(
SCREEN
*, );

990 
NCURSES_EXPORT
(
WINDOW
 *Ë
NCURSES_SP_NAME
(
√w∑d
Ë(
SCREEN
*, , );

991 
NCURSES_EXPORT
(
SCREEN
 *Ë
NCURSES_SP_NAME
(
√wãrm
Ë(SCREEN*, 
NCURSES_CONST
 *, 
FILE
 *, FILE *);

992 
NCURSES_EXPORT
(
WINDOW
 *Ë
NCURSES_SP_NAME
(
√wwö
Ë(
SCREEN
*, , , , );

993 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
∆
Ë(
SCREEN
*);

994 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
nocbªak
Ë(
SCREEN
*);

995 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
n€cho
Ë(
SCREEN
*);

996 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
n⁄l
Ë(
SCREEN
*);

997 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
noqiÊush
Ë(
SCREEN
*);

998 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
n‹aw
Ë(
SCREEN
*);

999 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
∑ú_c⁄ã¡
Ë(
SCREEN
*, 
NCURSES_PAIRS_T
, 
NCURSES_COLOR_T
*, NCURSES_COLOR_T*);

1000 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
qiÊush
Ë(
SCREEN
*);

1001 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
øw
Ë(
SCREEN
*);

1002 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ª£t_¥og_mode
Ë(
SCREEN
*);

1003 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ª£t_shñl_mode
Ë(
SCREEN
*);

1004 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ª£ây
Ë(
SCREEN
*);

1005 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
rùofÊöe
Ë(
SCREEN
*, , (*)(
WINDOW
 *, ));

1006 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ßvëty
Ë(
SCREEN
*);

1007 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
s¸_öô
Ë(
SCREEN
*, const *);

1008 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
s¸_ª°‹e
Ë(
SCREEN
*, const *);

1009 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
s¸_£t
Ë(
SCREEN
*, const *);

1010 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_©åoff
Ë(
SCREEN
*, c⁄° 
chty≥
);

1011 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_©å⁄
Ë(
SCREEN
*, c⁄° 
chty≥
);

1012 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_©å£t
Ë(
SCREEN
*, c⁄° 
chty≥
);

1013 
NCURSES_EXPORT
(
©å_t
Ë
NCURSES_SP_NAME
(
¶k_©å
Ë(
SCREEN
*);

1014 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_©å_£t
Ë(
SCREEN
*, c⁄° 
©å_t
, 
NCURSES_PAIRS_T
, *);

1015 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_˛ór
Ë(
SCREEN
*);

1016 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_cﬁ‹
Ë(
SCREEN
*, 
NCURSES_PAIRS_T
);

1017 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_öô
Ë(
SCREEN
*, );

1018 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
¶k_œbñ
Ë(
SCREEN
*, );

1019 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_nouåe‰esh
Ë(
SCREEN
*);

1020 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_ª‰esh
Ë(
SCREEN
*);

1021 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_ª°‹e
Ë(
SCREEN
*);

1022 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_£t
Ë(
SCREEN
*, , const *, );

1023 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_touch
Ë(
SCREEN
*);

1024 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
°¨t_cﬁ‹
Ë(
SCREEN
*);

1025 
NCURSES_EXPORT
(
chty≥
Ë
NCURSES_SP_NAME
(
ãrm©ås
Ë(
SCREEN
*);

1026 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
ãrm«me
Ë(
SCREEN
*);

1027 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ty≥ahód
Ë(
SCREEN
*, );

1028 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ungëch
Ë(
SCREEN
*, );

1029 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
u£_ív
Ë(
SCREEN
*, 
boﬁ
);

1030 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
u£_tio˘l
Ë(
SCREEN
*, 
boﬁ
);

1031 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
vid©å
Ë(
SCREEN
*, 
chty≥
);

1032 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
vidputs
Ë(
SCREEN
*, 
chty≥
, 
NCURSES_SP_OUTC
);

1034 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
keybound
Ë(
SCREEN
*, , );

1035 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
assume_deÁu…_cﬁ‹s
Ë(
SCREEN
*, , );

1036 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
deföe_key
Ë(
SCREEN
*, const *, );

1037 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
gë_escdñay
Ë(
SCREEN
*);

1038 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
is_ãrm_ªsized
Ë(
SCREEN
*, , );

1039 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
key_deföed
Ë(
SCREEN
*, const *);

1040 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
keyok
Ë(
SCREEN
*, , 
boﬁ
);

1041 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
nofûãr
Ë(
SCREEN
*);

1042 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ªsize_ãrm
Ë(
SCREEN
*, , );

1043 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ªsizëîm
Ë(
SCREEN
*, , );

1044 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
£t_escdñay
Ë(
SCREEN
*, );

1045 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
£t_èbsize
Ë(
SCREEN
*, );

1046 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
u£_deÁu…_cﬁ‹s
Ë(
SCREEN
*);

1047 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
u£_Àgacy_codög
Ë(
SCREEN
*, );

1050 #unde‡
NCURSES_SP_FUNCS


1051 
	#NCURSES_SP_FUNCS
 0

	)

1052 
	#NCURSES_SP_NAME
(
«me
Ë
	)
name

1053 
	#NCURSES_SP_OUTC
 
NCURSES_OUTC


	)

1058 
	#NCURSES_ATTR_SHIFT
 8

	)

1059 
	#NCURSES_BITS
(
mask
,
shi·
Ë(
	`NCURSES_CAST
(
chty≥
,(mask)Ë<< ((shi·Ë+ 
NCURSES_ATTR_SHIFT
))

	)

1061 
	#A_NORMAL
 (1UL - 1UL)

	)

1062 
	#A_ATTRIBUTES
 
	`NCURSES_BITS
(~(1UL - 1UL),0)

	)

1063 
	#A_CHARTEXT
 (
	`NCURSES_BITS
(1UL,0Ë- 1UL)

	)

1064 
	#A_COLOR
 
	`NCURSES_BITS
(((1ULË<< 8Ë- 1UL,0)

	)

1065 
	#A_STANDOUT
 
	`NCURSES_BITS
(1UL,8)

	)

1066 
	#A_UNDERLINE
 
	`NCURSES_BITS
(1UL,9)

	)

1067 
	#A_REVERSE
 
	`NCURSES_BITS
(1UL,10)

	)

1068 
	#A_BLINK
 
	`NCURSES_BITS
(1UL,11)

	)

1069 
	#A_DIM
 
	`NCURSES_BITS
(1UL,12)

	)

1070 
	#A_BOLD
 
	`NCURSES_BITS
(1UL,13)

	)

1071 
	#A_ALTCHARSET
 
	`NCURSES_BITS
(1UL,14)

	)

1072 
	#A_INVIS
 
	`NCURSES_BITS
(1UL,15)

	)

1073 
	#A_PROTECT
 
	`NCURSES_BITS
(1UL,16)

	)

1074 
	#A_HORIZONTAL
 
	`NCURSES_BITS
(1UL,17)

	)

1075 
	#A_LEFT
 
	`NCURSES_BITS
(1UL,18)

	)

1076 
	#A_LOW
 
	`NCURSES_BITS
(1UL,19)

	)

1077 
	#A_RIGHT
 
	`NCURSES_BITS
(1UL,20)

	)

1078 
	#A_TOP
 
	`NCURSES_BITS
(1UL,21)

	)

1079 
	#A_VERTICAL
 
	`NCURSES_BITS
(1UL,22)

	)

1082 
	#A_ITALIC
 
	`NCURSES_BITS
(1UL,23Ë

	)

1095 
	#gëyx
(
wö
,
y
,
x
Ë(y = 
	`gëcury
(wö), x = 
	`gëcurx
(wö))

	)

1096 
	#gëbegyx
(
wö
,
y
,
x
Ë(y = 
	`gëbegy
(wö), x = 
	`gëbegx
(wö))

	)

1097 
	#gëmaxyx
(
wö
,
y
,
x
Ë(y = 
	`gëmaxy
(wö), x = 
	`gëmaxx
(wö))

	)

1098 
	#gë∑ryx
(
wö
,
y
,
x
Ë(y = 
	`gë∑ry
(wö), x = 
	`gë∑rx
(wö))

	)

1100 
	#gësyx
(
y
,
x
Ëdÿ{ i‡(
√ws¸
) { \

1101 i‡(
	`is_Àaveok
(
√ws¸
)) \

1102 (
y
Ë(
x
) = -1; \

1104 
	`gëyx
(
√ws¸
,(
y
), (
x
)); \

1106 } 0)

	)

1108 
	#£tsyx
(
y
,
x
Ëdÿ{ i‡(
√ws¸
) { \

1109 i‡((
y
Ë=-1 && (
x
) == -1) \

1110 
	`Àaveok
(
√ws¸
, 
TRUE
); \

1112 
	`Àaveok
(
√ws¸
, 
FALSE
); \

1113 
	`wmove
(
√ws¸
, (
y
), (
x
)); \

1116 } 0)

	)

1118 #i‚de‡
NCURSES_NOMACROS


1124 
	#wgë°r
(
w
, 
s
Ë
	`wgën°r
(w, s, -1)

	)

1125 
	#gën°r
(
s
, 
n
Ë
	`wgën°r
(
°ds¸
, s, (n))

	)

1127 
	#£âîm
(
ãrm
Ë
	`£tu±îm
—îm, 1, (*)0)

	)

1129 
	#fixãrm
(Ë
	`ª£t_¥og_mode
()

	)

1130 
	#ª£âîm
(Ë
	`ª£t_shñl_mode
()

	)

1131 
	#ßvëîm
(Ë
	`def_¥og_mode
()

	)

1132 
	#¸mode
(Ë
	`cbªak
()

	)

1133 
	#no¸mode
(Ë
	`nocbªak
()

	)

1134 
	#gëtmode
()

	)

1137 #i‡!
NCURSES_OPAQUE


1138 
	#gë©ås
(
wö
Ë
	`NCURSES_CAST
(, (wöË? (wö)->
_©ås
 : 
A_NORMAL
)

	)

1139 
	#gëcurx
(
wö
Ë((wöË? (wö)->
_curx
 : 
ERR
)

	)

1140 
	#gëcury
(
wö
Ë((wöË? (wö)->
_cury
 : 
ERR
)

	)

1141 
	#gëbegx
(
wö
Ë((wöË? (wö)->
_begx
 : 
ERR
)

	)

1142 
	#gëbegy
(
wö
Ë((wöË? (wö)->
_begy
 : 
ERR
)

	)

1143 
	#gëmaxx
(
wö
Ë((wöË? ((wö)->
_maxx
 + 1Ë: 
ERR
)

	)

1144 
	#gëmaxy
(
wö
Ë((wöË? ((wö)->
_maxy
 + 1Ë: 
ERR
)

	)

1145 
	#gë∑rx
(
wö
Ë((wöË? (wö)->
_∑rx
 : 
ERR
)

	)

1146 
	#gë∑ry
(
wö
Ë((wöË? (wö)->
_∑ry
 : 
ERR
)

	)

1149 
	#w°™dout
(
wö
Ë(
	`w©å£t
(wö,
A_STANDOUT
))

	)

1150 
	#w°™díd
(
wö
Ë(
	`w©å£t
(wö,
A_NORMAL
))

	)

1152 
	#w©å⁄
(
wö
,
©
Ë
	`w©å_⁄
(wö, 
	`NCURSES_CAST
(
©å_t
,át), 
NULL
)

	)

1153 
	#w©åoff
(
wö
,
©
Ë
	`w©å_off
(wö, 
	`NCURSES_CAST
(
©å_t
,át), 
NULL
)

	)

1155 #i‡!
NCURSES_OPAQUE


1156 #i‡
NCURSES_WIDECHAR
 && 0

1157 
	#w©å£t
(
wö
,
©
) ((win) \

1158 ? ((
wö
)->
_cﬁ‹
 = 
	`NCURSES_CAST
(, 
	`PAIR_NUMBER
(
©
)), \

1159 (
wö
)->
_©ås
 = 
	`NCURSES_CAST
(
©å_t
, 
©
), \

1160 
OK
) \

1161 : 
ERR
)

	)

1163 
	#w©å£t
(
wö
,
©
) ((win) \

1164 ? ((
wö
)->
_©ås
 = 
	`NCURSES_CAST
(
©å_t
, 
©
), \

1165 
OK
) \

1166 : 
ERR
)

	)

1170 
	#s¸ﬁl
(
wö
Ë
	`ws¸l
(wö,1)

	)

1172 
	#touchwö
(
wö
Ë
	`wtouch 
((wö), 0, 
	`gëmaxy
(wö), 1)

	)

1173 
	#touchlöe
(
wö
, 
s
, 
c
Ë
	`wtouch 
((wö), s, c, 1)

	)

1174 
	#u¡ouchwö
(
wö
Ë
	`wtouch 
((wö), 0, 
	`gëmaxy
(wö), 0)

	)

1176 
	#box
(
wö
, 
v
, 
h
Ë
	`wb‹dî
(wö, v, v, h, h, 0, 0, 0, 0)

	)

1177 
	#b‹dî
(
ls
, 
rs
, 
ts
, 
bs
, 
é
, 
å
, 
bl
, 
br
Ë
	`wb‹dî
(
°ds¸
,Üs,Ñs,Ås, bs,Ål,År, bl, br)

	)

1178 
	#hlöe
(
ch
, 
n
Ë
	`whlöe
(
°ds¸
, ch, (n))

	)

1179 
	#vlöe
(
ch
, 
n
Ë
	`wvlöe
(
°ds¸
, ch, (n))

	)

1181 
	#wö°r
(
w
, 
s
Ë
	`wön°r
(w, s, -1)

	)

1182 
	#wöch°r
(
w
, 
s
Ë
	`wöchn°r
(w, s, -1)

	)

1183 
	#wös°r
(
w
, 
s
Ë
	`wö¢°r
(w, s, -1)

	)

1185 #i‡!
NCURSES_OPAQUE


1186 
	#ªdøwwö
(
wö
Ë
	`wªdøw 
(wö, 0, ((wöË? (wö)->
_maxy
+1 : -1))

	)

1189 
	#wadd°r
(
wö
,
°r
Ë
	`waddn°r
(wö,°r,-1)

	)

1190 
	#waddch°r
(
wö
,
°r
Ë
	`waddchn°r
(wö,°r,-1)

	)

1195 
	#COLOR_PAIR
(
n
Ë
	`NCURSES_BITS
(“), 0)

	)

1196 
	#PAIR_NUMBER
(
a
Ë(
	`NCURSES_CAST
(,((NCURSES_CAST(,◊)Ë& 
A_COLOR
Ë>> 
NCURSES_ATTR_SHIFT
)))

	)

1202 
	#addch
(
ch
Ë
	`waddch
(
°ds¸
,(ch))

	)

1203 
	#addchn°r
(
°r
,
n
Ë
	`waddchn°r
(
°ds¸
,(°r),“))

	)

1204 
	#addch°r
(
°r
Ë
	`waddch°r
(
°ds¸
,(°r))

	)

1205 
	#addn°r
(
°r
,
n
Ë
	`waddn°r
(
°ds¸
,(°r),“))

	)

1206 
	#add°r
(
°r
Ë
	`waddn°r
(
°ds¸
,(°r),-1)

	)

1207 
	#©å_gë
(
≠
,
˝
,
o
Ë
	`w©å_gë
(
°ds¸
,◊p),(˝),(o))

	)

1208 
	#©å_off
(
a
,
o
Ë
	`w©å_off
(
°ds¸
,◊),(o))

	)

1209 
	#©å_⁄
(
a
,
o
Ë
	`w©å_⁄
(
°ds¸
,◊),(o))

	)

1210 
	#©å_£t
(
a
,
c
,
o
Ë
	`w©å_£t
(
°ds¸
,◊),(c),(o))

	)

1211 
	#©åoff
(
©
Ë
	`w©åoff
(
°ds¸
,◊t))

	)

1212 
	#©å⁄
(
©
Ë
	`w©å⁄
(
°ds¸
,◊t))

	)

1213 
	#©å£t
(
©
Ë
	`w©å£t
(
°ds¸
,◊t))

	)

1214 
	#bkgd
(
ch
Ë
	`wbkgd
(
°ds¸
,(ch))

	)

1215 
	#bkgd£t
(
ch
Ë
	`wbkgd£t
(
°ds¸
,(ch))

	)

1216 
	#chg©
(
n
,
a
,
c
,
o
Ë
	`wchg©
(
°ds¸
,“),◊),(c),(o))

	)

1217 
	#˛ór
(Ë
	`w˛ór
(
°ds¸
)

	)

1218 
	#˛πobŸ
(Ë
	`w˛πobŸ
(
°ds¸
)

	)

1219 
	#˛π€ﬁ
(Ë
	`w˛π€ﬁ
(
°ds¸
)

	)

1220 
	#cﬁ‹_£t
(
c
,
o
Ë
	`wcﬁ‹_£t
(
°ds¸
,(c),(o))

	)

1221 
	#dñch
(Ë
	`wdñch
(
°ds¸
)

	)

1222 
	#dñëñn
(Ë
	`wösdñ 
(
°ds¸
,-1)

	)

1223 
	#echoch¨
(
c
Ë
	`wechoch¨
(
°ds¸
,(c))

	)

1224 
	#îa£
(Ë
	`wîa£
(
°ds¸
)

	)

1225 
	#gëch
(Ë
	`wgëch
(
°ds¸
)

	)

1226 
	#gë°r
(
°r
Ë
	`wgë°r
(
°ds¸
,(°r))

	)

1227 
	#öch
(Ë
	`wöch
(
°ds¸
)

	)

1228 
	#öchn°r
(
s
,
n
Ë
	`wöchn°r
(
°ds¸
,(s),“))

	)

1229 
	#öch°r
(
s
Ë
	`wöch°r
(
°ds¸
,(s))

	)

1230 
	#ön°r
(
s
,
n
Ë
	`wön°r
(
°ds¸
,(s),“))

	)

1231 
	#ösch
(
c
Ë
	`wösch
(
°ds¸
,(c))

	)

1232 
	#ösdñ 
(
n
Ë
	`wösdñ 
(
°ds¸
,“))

	)

1233 
	#ö£π 
(Ë
	`wösdñ 
(
°ds¸
,1)

	)

1234 
	#ö¢°r
(
s
,
n
Ë
	`wö¢°r
(
°ds¸
,(s),“))

	)

1235 
	#ös°r
(
s
Ë
	`wös°r
(
°ds¸
,(s))

	)

1236 
	#ö°r
(
s
Ë
	`wö°r
(
°ds¸
,(s))

	)

1237 
	#move
(
y
,
x
Ë
	`wmove
(
°ds¸
,(y),(x))

	)

1238 
	#ª‰esh
(Ë
	`wª‰esh
(
°ds¸
)

	)

1239 
	#s¸l
(
n
Ë
	`ws¸l
(
°ds¸
,“))

	)

1240 
	#£ts¸ªg
(
t
,
b
Ë
	`w£ts¸ªg
(
°ds¸
,—),(b))

	)

1241 
	#°™díd
(Ë
	`w°™díd
(
°ds¸
)

	)

1242 
	#°™dout
(Ë
	`w°™dout
(
°ds¸
)

	)

1243 
	#timeout
(
dñay
Ë
	`wtimeout
(
°ds¸
,(dñay))

	)

1244 
	#wdñëñn
(
wö
Ë
	`wösdñ 
(wö,-1)

	)

1245 
	#wö£π 
(
wö
Ë
	`wösdñ 
(wö,1)

	)

1251 
	#mvwaddch
(
wö
,
y
,
x
,
ch
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`waddch
((wö),(ch)))

	)

1252 
	#mvwaddchn°r
(
wö
,
y
,
x
,
°r
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`waddchn°r
((wö),(°r),“)))

	)

1253 
	#mvwaddch°r
(
wö
,
y
,
x
,
°r
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`waddchn°r
((wö),(°r),-1))

	)

1254 
	#mvwaddn°r
(
wö
,
y
,
x
,
°r
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`waddn°r
((wö),(°r),“)))

	)

1255 
	#mvwadd°r
(
wö
,
y
,
x
,
°r
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`waddn°r
((wö),(°r),-1))

	)

1256 
	#mvwchg©
(
wö
,
y
,
x
,
n
,
a
,
c
,
o
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wchg©
((wö),“),◊),(c),(o)))

	)

1257 
	#mvwdñch
(
wö
,
y
,
x
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wdñch
(wö))

	)

1258 
	#mvwgëch
(
wö
,
y
,
x
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wgëch
(wö))

	)

1259 
	#mvwgën°r
(
wö
,
y
,
x
,
°r
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wgën°r
((wö),(°r),“)))

	)

1260 
	#mvwgë°r
(
wö
,
y
,
x
,
°r
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wgë°r
((wö),(°r)))

	)

1261 
	#mvwhlöe
(
wö
,
y
,
x
,
c
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`whlöe
((wö),(c),“)))

	)

1262 
	#mvwöch
(
wö
,
y
,
x
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? 
	`NCURSES_CAST
(
chty≥
, ERRË: 
	`wöch
(wö))

	)

1263 
	#mvwöchn°r
(
wö
,
y
,
x
,
s
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wöchn°r
((wö),(s),“)))

	)

1264 
	#mvwöch°r
(
wö
,
y
,
x
,
s
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wöch°r
((wö),(s)))

	)

1265 
	#mvwön°r
(
wö
,
y
,
x
,
s
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wön°r
((wö),(s),“)))

	)

1266 
	#mvwösch
(
wö
,
y
,
x
,
c
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wösch
((wö),(c)))

	)

1267 
	#mvwö¢°r
(
wö
,
y
,
x
,
s
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wö¢°r
((wö),(s),“)))

	)

1268 
	#mvwös°r
(
wö
,
y
,
x
,
s
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wös°r
((wö),(s)))

	)

1269 
	#mvwö°r
(
wö
,
y
,
x
,
s
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wö°r
((wö),(s)))

	)

1270 
	#mvwvlöe
(
wö
,
y
,
x
,
c
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wvlöe
((wö),(c),“)))

	)

1272 
	#mvaddch
(
y
,
x
,
ch
Ë
	`mvwaddch
(
°ds¸
,(y),(x),(ch))

	)

1273 
	#mvaddchn°r
(
y
,
x
,
°r
,
n
Ë
	`mvwaddchn°r
(
°ds¸
,(y),(x),(°r),“))

	)

1274 
	#mvaddch°r
(
y
,
x
,
°r
Ë
	`mvwaddch°r
(
°ds¸
,(y),(x),(°r))

	)

1275 
	#mvaddn°r
(
y
,
x
,
°r
,
n
Ë
	`mvwaddn°r
(
°ds¸
,(y),(x),(°r),“))

	)

1276 
	#mvadd°r
(
y
,
x
,
°r
Ë
	`mvwadd°r
(
°ds¸
,(y),(x),(°r))

	)

1277 
	#mvchg©
(
y
,
x
,
n
,
a
,
c
,
o
Ë
	`mvwchg©
(
°ds¸
,(y),(x),“),◊),(c),(o))

	)

1278 
	#mvdñch
(
y
,
x
Ë
	`mvwdñch
(
°ds¸
,(y),(x))

	)

1279 
	#mvgëch
(
y
,
x
Ë
	`mvwgëch
(
°ds¸
,(y),(x))

	)

1280 
	#mvgën°r
(
y
,
x
,
°r
,
n
Ë
	`mvwgën°r
(
°ds¸
,(y),(x),(°r),“))

	)

1281 
	#mvgë°r
(
y
,
x
,
°r
Ë
	`mvwgë°r
(
°ds¸
,(y),(x),(°r))

	)

1282 
	#mvhlöe
(
y
,
x
,
c
,
n
Ë
	`mvwhlöe
(
°ds¸
,(y),(x),(c),“))

	)

1283 
	#mvöch
(
y
,
x
Ë
	`mvwöch
(
°ds¸
,(y),(x))

	)

1284 
	#mvöchn°r
(
y
,
x
,
s
,
n
Ë
	`mvwöchn°r
(
°ds¸
,(y),(x),(s),“))

	)

1285 
	#mvöch°r
(
y
,
x
,
s
Ë
	`mvwöch°r
(
°ds¸
,(y),(x),(s))

	)

1286 
	#mvön°r
(
y
,
x
,
s
,
n
Ë
	`mvwön°r
(
°ds¸
,(y),(x),(s),“))

	)

1287 
	#mvösch
(
y
,
x
,
c
Ë
	`mvwösch
(
°ds¸
,(y),(x),(c))

	)

1288 
	#mvö¢°r
(
y
,
x
,
s
,
n
Ë
	`mvwö¢°r
(
°ds¸
,(y),(x),(s),“))

	)

1289 
	#mvös°r
(
y
,
x
,
s
Ë
	`mvwös°r
(
°ds¸
,(y),(x),(s))

	)

1290 
	#mvö°r
(
y
,
x
,
s
Ë
	`mvwö°r
(
°ds¸
,(y),(x),(s))

	)

1291 
	#mvvlöe
(
y
,
x
,
c
,
n
Ë
	`mvwvlöe
(
°ds¸
,(y),(x),(c),“))

	)

1296 #i‡!
NCURSES_OPAQUE


1297 
	#gëbkgd
(
wö
Ë((wöË? ((wö)->
_bkgd
Ë: 0)

	)

1300 
	#¶k_©å_off
(
a
,
v
Ë((vË? 
ERR
 : 
	`¶k_©åoff
◊))

	)

1301 
	#¶k_©å_⁄
(
a
,
v
Ë((vË? 
ERR
 : 
	`¶k_©å⁄
◊))

	)

1303 #i‡!
NCURSES_OPAQUE


1304 #i‡
NCURSES_WIDECHAR
 && 0

1305 
	#w©å_£t
(
wö
,
a
,
p
,
›ts
) (((win) \

1306 ? ((
wö
)->
_©ås
 = ((
a
Ë& ~
A_COLOR
), \

1307 (
wö
)->
_cﬁ‹
 = (
p
)) \

1308 : 
OK
), \

1309 
OK
)

	)

1310 
	#w©å_gë
(
wö
,
a
,
p
,
›ts
Ë(()((◊Ë!(*)0Ë? (*◊Ë(wöË? (wö)->
_©ås
 : 0Ë: 
OK
), \

1311 ()(((
p
Ë!(*)0Ë? (*’Ë(
NCURSES_PAIRS_T
Ë((
wö
Ë? (wö)->
_cﬁ‹
 : 0)Ë: 
OK
), \

1312 
OK
)

	)

1314 
	#w©å_£t
(
wö
,
a
,
p
,
›ts
) (((win) \

1315 ? ((
wö
)->
_©ås
 = (((
a
Ë& ~
A_COLOR
Ë| (
©å_t
)
	`COLOR_PAIR
(
p
))) \

1316 : 
OK
), \

1317 
OK
)

	)

1318 
	#w©å_gë
(
wö
,
a
,
p
,
›ts
Ë(()((◊Ë!(*)0Ë? (*◊Ë(wöË? (wö)->
_©ås
 : 0Ë: 
OK
), \

1319 ()(((
p
Ë!(*)0Ë? (*’Ë(
NCURSES_PAIRS_T
Ë((
wö
Ë? 
	`PAIR_NUMBER
((wö)->
_©ås
Ë: 0)Ë: 
OK
), \

1320 
OK
)

	)

1330 
	#vw_¥ötw
 
vw¥ötw


	)

1331 
	#vw_sˇnw
 
vwsˇnw


	)

1337 
	#vssˇnf
(
a
,
b
,
c
Ë
	`_nc_vssˇnf
◊,b,c)

	)

1338 
NCURSES_EXPORT
(Ë
vssˇnf
(c⁄° *, c⁄° *, 
va_li°
);

1345 #i‡!
NCURSES_OPAQUE


1346 
	#is_˛óªd
(
wö
Ë((wöË? (wö)->
_˛ór
 : 
FALSE
)

	)

1347 
	#is_idcok
(
wö
Ë((wöË? (wö)->
_idcok
 : 
FALSE
)

	)

1348 
	#is_idlok
(
wö
Ë((wöË? (wö)->
_idlok
 : 
FALSE
)

	)

1349 
	#is_immedok
(
wö
Ë((wöË? (wö)->
_immed
 : 
FALSE
)

	)

1350 
	#is_key∑d
(
wö
Ë((wöË? (wö)->
_u£_key∑d
 : 
FALSE
)

	)

1351 
	#is_Àaveok
(
wö
Ë((wöË? (wö)->
_Àaveok
 : 
FALSE
)

	)

1352 
	#is_nodñay
(
wö
Ë((wöË? ((wö)->
_dñay
 =0Ë: 
FALSE
)

	)

1353 
	#is_nŸimeout
(
wö
Ë((wöË? (wö)->
_nŸimeout
 : 
FALSE
)

	)

1354 
	#is_∑d
(
wö
Ë((wöË? ((wö)->
_Êags
 & 
_ISPAD
Ë!0 : 
FALSE
)

	)

1355 
	#is_s¸ﬁlok
(
wö
Ë((wöË? (wö)->
_s¸ﬁl
 : 
FALSE
)

	)

1356 
	#is_subwö
(
wö
Ë((wöË? ((wö)->
_Êags
 & 
_SUBWIN
Ë!0 : 
FALSE
)

	)

1357 
	#is_syncok
(
wö
Ë((wöË? (wö)->
_sync
 : 
FALSE
)

	)

1358 
	#wgëdñay
(
wö
Ë((wöË? (wö)->
_dñay
 : 0)

	)

1359 
	#wgë∑ª¡
(
wö
Ë((wöË? (wö)->
_∑ª¡
 : 0)

	)

1360 
	#wgës¸ªg
(
wö
,
t
,
b
Ë((wöË? (*—Ë(wö)->
_ªgt›
, *(bË(wö)->
_ªgbŸtom
, 
OK
Ë: 
ERR
)

	)

1374 #i‡
NCURSES_REENTRANT


1376 
NCURSES_WRAPPED_VAR
(
WINDOW
 *, 
curs¸
);

1377 
NCURSES_WRAPPED_VAR
(
WINDOW
 *, 
√ws¸
);

1378 
NCURSES_WRAPPED_VAR
(
WINDOW
 *, 
°ds¸
);

1379 
NCURSES_WRAPPED_VAR
(*, 
âyty≥
);

1380 
NCURSES_WRAPPED_VAR
(, 
COLORS
);

1381 
NCURSES_WRAPPED_VAR
(, 
COLOR_PAIRS
);

1382 
NCURSES_WRAPPED_VAR
(, 
COLS
);

1383 
NCURSES_WRAPPED_VAR
(, 
ESCDELAY
);

1384 
NCURSES_WRAPPED_VAR
(, 
LINES
);

1385 
NCURSES_WRAPPED_VAR
(, 
TABSIZE
);

1387 
	#curs¸
 
	`NCURSES_PUBLIC_VAR
(
	`curs¸
())

	)

1388 
	#√ws¸
 
	`NCURSES_PUBLIC_VAR
(
	`√ws¸
())

	)

1389 
	#°ds¸
 
	`NCURSES_PUBLIC_VAR
(
	`°ds¸
())

	)

1390 
	#âyty≥
 
	`NCURSES_PUBLIC_VAR
(
	`âyty≥
())

	)

1391 
	#COLORS
 
	`NCURSES_PUBLIC_VAR
(
	`COLORS
())

	)

1392 
	#COLOR_PAIRS
 
	`NCURSES_PUBLIC_VAR
(
	`COLOR_PAIRS
())

	)

1393 
	#COLS
 
	`NCURSES_PUBLIC_VAR
(
	`COLS
())

	)

1394 
	#ESCDELAY
 
	`NCURSES_PUBLIC_VAR
(
	`ESCDELAY
())

	)

1395 
	#LINES
 
	`NCURSES_PUBLIC_VAR
(
	`LINES
())

	)

1396 
	#TABSIZE
 
	`NCURSES_PUBLIC_VAR
(
	`TABSIZE
())

	)

1400 
NCURSES_EXPORT_VAR
(
WINDOW
 *Ë
curs¸
;

1401 
NCURSES_EXPORT_VAR
(
WINDOW
 *Ë
√ws¸
;

1402 
NCURSES_EXPORT_VAR
(
WINDOW
 *Ë
°ds¸
;

1403 
NCURSES_EXPORT_VAR
(Ë
âyty≥
[];

1404 
NCURSES_EXPORT_VAR
(Ë
COLORS
;

1405 
NCURSES_EXPORT_VAR
(Ë
COLOR_PAIRS
;

1406 
NCURSES_EXPORT_VAR
(Ë
COLS
;

1407 
NCURSES_EXPORT_VAR
(Ë
ESCDELAY
;

1408 
NCURSES_EXPORT_VAR
(Ë
LINES
;

1409 
NCURSES_EXPORT_VAR
(Ë
TABSIZE
;

1425 
	#KEY_CODE_YES
 0400

	)

1426 
	#KEY_MIN
 0401

	)

1427 
	#KEY_BREAK
 0401

	)

1428 
	#KEY_SRESET
 0530

	)

1429 
	#KEY_RESET
 0531

	)

1433 
	#KEY_DOWN
 0402

	)

1434 
	#KEY_UP
 0403

	)

1435 
	#KEY_LEFT
 0404

	)

1436 
	#KEY_RIGHT
 0405

	)

1437 
	#KEY_HOME
 0406

	)

1438 
	#KEY_BACKSPACE
 0407

	)

1439 
	#KEY_F0
 0410

	)

1440 
	#KEY_F
(
n
Ë(
KEY_F0
+“)Ë

	)

1441 
	#KEY_DL
 0510

	)

1442 
	#KEY_IL
 0511

	)

1443 
	#KEY_DC
 0512

	)

1444 
	#KEY_IC
 0513

	)

1445 
	#KEY_EIC
 0514

	)

1446 
	#KEY_CLEAR
 0515

	)

1447 
	#KEY_EOS
 0516

	)

1448 
	#KEY_EOL
 0517

	)

1449 
	#KEY_SF
 0520

	)

1450 
	#KEY_SR
 0521

	)

1451 
	#KEY_NPAGE
 0522

	)

1452 
	#KEY_PPAGE
 0523

	)

1453 
	#KEY_STAB
 0524

	)

1454 
	#KEY_CTAB
 0525

	)

1455 
	#KEY_CATAB
 0526

	)

1456 
	#KEY_ENTER
 0527

	)

1457 
	#KEY_PRINT
 0532

	)

1458 
	#KEY_LL
 0533

	)

1459 
	#KEY_A1
 0534

	)

1460 
	#KEY_A3
 0535

	)

1461 
	#KEY_B2
 0536

	)

1462 
	#KEY_C1
 0537

	)

1463 
	#KEY_C3
 0540

	)

1464 
	#KEY_BTAB
 0541

	)

1465 
	#KEY_BEG
 0542

	)

1466 
	#KEY_CANCEL
 0543

	)

1467 
	#KEY_CLOSE
 0544

	)

1468 
	#KEY_COMMAND
 0545

	)

1469 
	#KEY_COPY
 0546

	)

1470 
	#KEY_CREATE
 0547

	)

1471 
	#KEY_END
 0550

	)

1472 
	#KEY_EXIT
 0551

	)

1473 
	#KEY_FIND
 0552

	)

1474 
	#KEY_HELP
 0553

	)

1475 
	#KEY_MARK
 0554

	)

1476 
	#KEY_MESSAGE
 0555

	)

1477 
	#KEY_MOVE
 0556

	)

1478 
	#KEY_NEXT
 0557

	)

1479 
	#KEY_OPEN
 0560

	)

1480 
	#KEY_OPTIONS
 0561

	)

1481 
	#KEY_PREVIOUS
 0562

	)

1482 
	#KEY_REDO
 0563

	)

1483 
	#KEY_REFERENCE
 0564

	)

1484 
	#KEY_REFRESH
 0565

	)

1485 
	#KEY_REPLACE
 0566

	)

1486 
	#KEY_RESTART
 0567

	)

1487 
	#KEY_RESUME
 0570

	)

1488 
	#KEY_SAVE
 0571

	)

1489 
	#KEY_SBEG
 0572

	)

1490 
	#KEY_SCANCEL
 0573

	)

1491 
	#KEY_SCOMMAND
 0574

	)

1492 
	#KEY_SCOPY
 0575

	)

1493 
	#KEY_SCREATE
 0576

	)

1494 
	#KEY_SDC
 0577

	)

1495 
	#KEY_SDL
 0600

	)

1496 
	#KEY_SELECT
 0601

	)

1497 
	#KEY_SEND
 0602

	)

1498 
	#KEY_SEOL
 0603

	)

1499 
	#KEY_SEXIT
 0604

	)

1500 
	#KEY_SFIND
 0605

	)

1501 
	#KEY_SHELP
 0606

	)

1502 
	#KEY_SHOME
 0607

	)

1503 
	#KEY_SIC
 0610

	)

1504 
	#KEY_SLEFT
 0611

	)

1505 
	#KEY_SMESSAGE
 0612

	)

1506 
	#KEY_SMOVE
 0613

	)

1507 
	#KEY_SNEXT
 0614

	)

1508 
	#KEY_SOPTIONS
 0615

	)

1509 
	#KEY_SPREVIOUS
 0616

	)

1510 
	#KEY_SPRINT
 0617

	)

1511 
	#KEY_SREDO
 0620

	)

1512 
	#KEY_SREPLACE
 0621

	)

1513 
	#KEY_SRIGHT
 0622

	)

1514 
	#KEY_SRSUME
 0623

	)

1515 
	#KEY_SSAVE
 0624

	)

1516 
	#KEY_SSUSPEND
 0625

	)

1517 
	#KEY_SUNDO
 0626

	)

1518 
	#KEY_SUSPEND
 0627

	)

1519 
	#KEY_UNDO
 0630

	)

1520 
	#KEY_MOUSE
 0631

	)

1521 
	#KEY_RESIZE
 0632

	)

1522 
	#KEY_EVENT
 0633

	)

1524 
	#KEY_MAX
 0777

	)

1534 #i‡
NCURSES_MOUSE_VERSION
 > 1

1535 
	#NCURSES_MOUSE_MASK
(
b
,
m
Ë((mË<< (((bË- 1Ë* 5))

	)

1537 
	#NCURSES_MOUSE_MASK
(
b
,
m
Ë((mË<< (((bË- 1Ë* 6))

	)

1540 
	#NCURSES_BUTTON_RELEASED
 001L

	)

1541 
	#NCURSES_BUTTON_PRESSED
 002L

	)

1542 
	#NCURSES_BUTTON_CLICKED
 004L

	)

1543 
	#NCURSES_DOUBLE_CLICKED
 010L

	)

1544 
	#NCURSES_TRIPLE_CLICKED
 020L

	)

1545 
	#NCURSES_RESERVED_EVENT
 040L

	)

1548 
	#BUTTON1_RELEASED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_BUTTON_RELEASED
)

	)

1549 
	#BUTTON1_PRESSED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_BUTTON_PRESSED
)

	)

1550 
	#BUTTON1_CLICKED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_BUTTON_CLICKED
)

	)

1551 
	#BUTTON1_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_DOUBLE_CLICKED
)

	)

1552 
	#BUTTON1_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_TRIPLE_CLICKED
)

	)

1554 
	#BUTTON2_RELEASED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_BUTTON_RELEASED
)

	)

1555 
	#BUTTON2_PRESSED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_BUTTON_PRESSED
)

	)

1556 
	#BUTTON2_CLICKED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_BUTTON_CLICKED
)

	)

1557 
	#BUTTON2_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_DOUBLE_CLICKED
)

	)

1558 
	#BUTTON2_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_TRIPLE_CLICKED
)

	)

1560 
	#BUTTON3_RELEASED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_BUTTON_RELEASED
)

	)

1561 
	#BUTTON3_PRESSED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_BUTTON_PRESSED
)

	)

1562 
	#BUTTON3_CLICKED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_BUTTON_CLICKED
)

	)

1563 
	#BUTTON3_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_DOUBLE_CLICKED
)

	)

1564 
	#BUTTON3_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_TRIPLE_CLICKED
)

	)

1566 
	#BUTTON4_RELEASED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_BUTTON_RELEASED
)

	)

1567 
	#BUTTON4_PRESSED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_BUTTON_PRESSED
)

	)

1568 
	#BUTTON4_CLICKED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_BUTTON_CLICKED
)

	)

1569 
	#BUTTON4_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_DOUBLE_CLICKED
)

	)

1570 
	#BUTTON4_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_TRIPLE_CLICKED
)

	)

1576 #i‡
NCURSES_MOUSE_VERSION
 > 1

1578 
	#BUTTON5_RELEASED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_BUTTON_RELEASED
)

	)

1579 
	#BUTTON5_PRESSED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_BUTTON_PRESSED
)

	)

1580 
	#BUTTON5_CLICKED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_BUTTON_CLICKED
)

	)

1581 
	#BUTTON5_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_DOUBLE_CLICKED
)

	)

1582 
	#BUTTON5_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_TRIPLE_CLICKED
)

	)

1584 
	#BUTTON_CTRL
 
	`NCURSES_MOUSE_MASK
(6, 0001L)

	)

1585 
	#BUTTON_SHIFT
 
	`NCURSES_MOUSE_MASK
(6, 0002L)

	)

1586 
	#BUTTON_ALT
 
	`NCURSES_MOUSE_MASK
(6, 0004L)

	)

1587 
	#REPORT_MOUSE_POSITION
 
	`NCURSES_MOUSE_MASK
(6, 0010L)

	)

1591 
	#BUTTON1_RESERVED_EVENT
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_RESERVED_EVENT
)

	)

1592 
	#BUTTON2_RESERVED_EVENT
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_RESERVED_EVENT
)

	)

1593 
	#BUTTON3_RESERVED_EVENT
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_RESERVED_EVENT
)

	)

1594 
	#BUTTON4_RESERVED_EVENT
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_RESERVED_EVENT
)

	)

1596 
	#BUTTON_CTRL
 
	`NCURSES_MOUSE_MASK
(5, 0001L)

	)

1597 
	#BUTTON_SHIFT
 
	`NCURSES_MOUSE_MASK
(5, 0002L)

	)

1598 
	#BUTTON_ALT
 
	`NCURSES_MOUSE_MASK
(5, 0004L)

	)

1599 
	#REPORT_MOUSE_POSITION
 
	`NCURSES_MOUSE_MASK
(5, 0010L)

	)

1603 
	#ALL_MOUSE_EVENTS
 (
REPORT_MOUSE_POSITION
 - 1)

	)

1606 
	#BUTTON_RELEASE
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 001))

	)

1607 
	#BUTTON_PRESS
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 002))

	)

1608 
	#BUTTON_CLICK
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 004))

	)

1609 
	#BUTTON_DOUBLE_CLICK
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 010))

	)

1610 
	#BUTTON_TRIPLE_CLICK
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 020))

	)

1611 
	#BUTTON_RESERVED_EVENT
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 040))

	)

1615 
	gid
;

1616 
	gx
, 
	gy
, 
	gz
;

1617 
mmask_t
 
	gb°©e
;

1619 
	tMEVENT
;

1621 
NCURSES_EXPORT
(
boﬁ
Ë
has_mou£
();

1622 
NCURSES_EXPORT
(Ë
gëmou£
 (
MEVENT
 *);

1623 
NCURSES_EXPORT
(Ë
ungëmou£
 (
MEVENT
 *);

1624 
NCURSES_EXPORT
(
mmask_t
Ë
mou£mask
 (mmask_t, mmask_t *);

1625 
NCURSES_EXPORT
(
boﬁ
Ë
wí˛o£
 (c⁄° 
WINDOW
 *, , );

1626 
NCURSES_EXPORT
(Ë
mou£öãrvÆ
 ();

1627 
NCURSES_EXPORT
(
boﬁ
Ë
wmou£_åafo
 (c⁄° 
WINDOW
*, *, *, bool);

1628 
NCURSES_EXPORT
(
boﬁ
Ë
mou£_åafo
 (*, *, bool);

1630 #i‡
NCURSES_SP_FUNCS


1631 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
has_mou£
Ë(
SCREEN
*);

1632 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
gëmou£
Ë(
SCREEN
*, 
MEVENT
 *);

1633 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ungëmou£
Ë(
SCREEN
*,
MEVENT
 *);

1634 
NCURSES_EXPORT
(
mmask_t
Ë
NCURSES_SP_NAME
(
mou£mask
Ë(
SCREEN
*, mmask_t, mmask_t *);

1635 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
mou£öãrvÆ
Ë(
SCREEN
*, );

1638 #i‚de‡
NCURSES_NOMACROS


1639 
	#mou£_åafo
(
y
,
x
,
to_s¸ìn
Ë
	`wmou£_åafo
(
°ds¸
,y,x,to_s¸ìn)

	)

1644 
NCURSES_EXPORT
(Ë
m˝röt
 (*, );

1645 
NCURSES_EXPORT
(Ë
has_key
 ();

1647 #i‡
NCURSES_SP_FUNCS


1648 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
has_key
Ë(
SCREEN
*, );

1649 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
m˝röt
Ë(
SCREEN
*, *, );

1654 
NCURSES_EXPORT
(Ë
_åa˚f
 (c⁄° *, ...Ë
GCC_PRINTFLIKE
(1,2);

1655 
NCURSES_EXPORT
(*Ë
_åa˚©å
 (
©å_t
);

1656 
NCURSES_EXPORT
(*Ë
_åa˚©å2
 (, 
chty≥
);

1657 
NCURSES_EXPORT
(*Ë
_åa˚ch¨
 ();

1658 
NCURSES_EXPORT
(*Ë
_åa˚chty≥
 (
chty≥
);

1659 
NCURSES_EXPORT
(*Ë
_åa˚chty≥2
 (, 
chty≥
);

1660 #i‡
NCURSES_WIDECHAR


1661 
	#_åa˚ch_t
 
_åa˚cch¨_t


	)

1662 
NCURSES_EXPORT
(*Ë
_åa˚cch¨_t
 (c⁄° 
cch¨_t
 *);

1663 
	#_åa˚ch_t2
 
_åa˚cch¨_t2


	)

1664 
NCURSES_EXPORT
(*Ë
_åa˚cch¨_t2
 (, c⁄° 
cch¨_t
 *);

1666 
	#_åa˚ch_t
 
_åa˚chty≥


	)

1667 
	#_åa˚ch_t2
 
_åa˚chty≥2


	)

1669 
NCURSES_EXPORT
(Ë
åa˚
 (const );

1672 
	#TRACE_DISABLE
 0x0000

	)

1673 
	#TRACE_TIMES
 0x0001

	)

1674 
	#TRACE_TPUTS
 0x0002

	)

1675 
	#TRACE_UPDATE
 0x0004

	)

1676 
	#TRACE_MOVE
 0x0008

	)

1677 
	#TRACE_CHARPUT
 0x0010

	)

1678 
	#TRACE_ORDINARY
 0x001F

	)

1679 
	#TRACE_CALLS
 0x0020

	)

1680 
	#TRACE_VIRTPUT
 0x0040

	)

1681 
	#TRACE_IEVENT
 0x0080

	)

1682 
	#TRACE_BITS
 0x0100

	)

1683 
	#TRACE_ICALLS
 0x0200

	)

1684 
	#TRACE_CCALLS
 0x0400

	)

1685 
	#TRACE_DATABASE
 0x0800

	)

1686 
	#TRACE_ATTRS
 0x1000

	)

1688 
	#TRACE_SHIFT
 13

	)

1689 
	#TRACE_MAXIMUM
 ((1 << 
TRACE_SHIFT
Ë- 1Ë

	)

1691 #i‡
deföed
(
TRACE
Ë|| deföed(
NCURSES_TEST
)

1692 
NCURSES_EXPORT_VAR
(Ë
_nc_›timize_íabÀ
;

1693 
NCURSES_EXPORT
(c⁄° *Ë
_nc_visbuf
 (const *);

1694 
	#OPTIMIZE_MVCUR
 0x01

	)

1695 
	#OPTIMIZE_HASHMAP
 0x02

	)

1696 
	#OPTIMIZE_SCROLL
 0x04

	)

1697 
	#OPTIMIZE_ALL
 0xf‡

	)

1700 
	~<un˘æ.h
>

1702 #ifde‡
__˝lu•lus


1704 #i‚de‡
NCURSES_NOMACROS


1707 #unde‡
box


1708 #unde‡
˛ór


1709 #unde‡
îa£


1710 #unde‡
move


1711 #unde‡
ª‰esh


	@/usr/include/dirent.h

22 #i‚def 
_DIRENT_H


23 
	#_DIRENT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifde‡
__USE_XOPEN


32 #i‚de‡
__öo_t_deföed


33 #i‚de‡
__USE_FILE_OFFSET64


34 
__öo_t
 
	töo_t
;

36 
__öo64_t
 
	töo_t
;

38 
	#__öo_t_deföed


	)

40 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


41 
__öo64_t
 
	töo64_t
;

42 
	#__öo64_t_deföed


	)

61 
	~<bôs/dúít.h
>

63 #i‡
deföed
 
__USE_MISC
 && !deföed 
d_fûío


64 
	#d_öo
 
d_fûío


	)

81 #ifde‡
_DIRENT_HAVE_D_NAMLEN


82 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

83 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

85 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

86 #ifde‡
_DIRENT_HAVE_D_RECLEN


87 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

89 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

90 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

95 #ifde‡
__USE_MISC


99 
	mDT_UNKNOWN
 = 0,

100 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

101 
	mDT_FIFO
 = 1,

102 
	#DT_FIFO
 
DT_FIFO


	)

103 
	mDT_CHR
 = 2,

104 
	#DT_CHR
 
DT_CHR


	)

105 
	mDT_DIR
 = 4,

106 
	#DT_DIR
 
DT_DIR


	)

107 
	mDT_BLK
 = 6,

108 
	#DT_BLK
 
DT_BLK


	)

109 
	mDT_REG
 = 8,

110 
	#DT_REG
 
DT_REG


	)

111 
	mDT_LNK
 = 10,

112 
	#DT_LNK
 
DT_LNK


	)

113 
	mDT_SOCK
 = 12,

114 
	#DT_SOCK
 
DT_SOCK


	)

115 
	mDT_WHT
 = 14

116 
	#DT_WHT
 
DT_WHT


	)

120 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

121 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

127 
__dú°ªam
 
	tDIR
;

134 
DIR
 *
	$›ídú
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

136 #ifde‡
__USE_XOPEN2K8


141 
DIR
 *
	`fd›ídú
 (
__fd
);

149 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

161 #i‚de‡
__USE_FILE_OFFSET64


162 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

164 #ifde‡
__REDIRECT


165 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

166 
	`__n⁄nuŒ
 ((1));

168 
	#ªaddú
 
ªaddú64


	)

172 #ifde‡
__USE_LARGEFILE64


173 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

176 #ifde‡
__USE_POSIX


182 #i‚de‡
__USE_FILE_OFFSET64


183 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

184 
dúít
 *
__ª°ri˘
 
__íåy
,

185 
dúít
 **
__ª°ri˘
 
__ªsu…
)

186 
	`__n⁄nuŒ
 ((1, 2, 3));

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
ªaddú_r
,

190 (
DIR
 *
__ª°ri˘
 
__dúp
,

191 
dúít
 *
__ª°ri˘
 
__íåy
,

192 
dúít
 **
__ª°ri˘
 
__ªsu…
),

193 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

195 
	#ªaddú_r
 
ªaddú64_r


	)

199 #ifde‡
__USE_LARGEFILE64


200 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

201 
dúít64
 *
__ª°ri˘
 
__íåy
,

202 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

203 
	`__n⁄nuŒ
 ((1, 2, 3));

208 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

210 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


211 
	~<bôs/ty≥s.h
>

214 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

220 #ifde‡
__USE_XOPEN2K8


223 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


226 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

229 #ifde‡
__USE_MISC


230 #i‚de‡
MAXNAMLEN


232 
	~<bôs/posix1_lim.h
>

235 #ifde‡
NAME_MAX


236 
	#MAXNAMLEN
 
NAME_MAX


	)

238 
	#MAXNAMLEN
 255

	)

243 
	#__√ed_size_t


	)

244 
	~<°ddef.h
>

253 #i‚de‡
__USE_FILE_OFFSET64


254 
	$sˇndú
 (c⁄° *
__ª°ri˘
 
__dú
,

255 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

256 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

257 (*
__cmp
Ë(c⁄° 
dúít
 **,

258 c⁄° 
dúít
 **))

259 
	`__n⁄nuŒ
 ((1, 2));

261 #ifde‡
__REDIRECT


262 
	`__REDIRECT
 (
sˇndú
,

263 (c⁄° *
__ª°ri˘
 
__dú
,

264 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

265 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

266 (*
__cmp
Ë(c⁄° 
dúít
 **,

267 c⁄° 
dúít
 **)),

268 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

270 
	#sˇndú
 
sˇndú64


	)

274 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


277 
	$sˇndú64
 (c⁄° *
__ª°ri˘
 
__dú
,

278 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

279 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

280 (*
__cmp
Ë(c⁄° 
dúít64
 **,

281 c⁄° 
dúít64
 **))

282 
	`__n⁄nuŒ
 ((1, 2));

285 #ifde‡
__USE_GNU


291 #i‚de‡
__USE_FILE_OFFSET64


292 
	$sˇndú©
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

293 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

294 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

295 (*
__cmp
Ë(c⁄° 
dúít
 **,

296 c⁄° 
dúít
 **))

297 
	`__n⁄nuŒ
 ((2, 3));

299 #ifde‡
__REDIRECT


300 
	`__REDIRECT
 (
sˇndú©
,

301 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

302 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

303 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

304 (*
__cmp
Ë(c⁄° 
dúít
 **,

305 c⁄° 
dúít
 **)),

306 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

308 
	#sˇndú©
 
sˇndú©64


	)

314 
	$sˇndú©64
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

315 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

316 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

317 (*
__cmp
Ë(c⁄° 
dúít64
 **,

318 c⁄° 
dúít64
 **))

319 
	`__n⁄nuŒ
 ((2, 3));

323 #i‚de‡
__USE_FILE_OFFSET64


324 
	$Æphas‹t
 (c⁄° 
dúít
 **
__e1
,

325 c⁄° 
dúít
 **
__e2
)

326 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

328 #ifde‡
__REDIRECT


329 
	`__REDIRECT_NTH
 (
Æphas‹t
,

330 (c⁄° 
dúít
 **
__e1
,

331 c⁄° 
dúít
 **
__e2
),

332 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

334 
	#Æphas‹t
 
Æphas‹t64


	)

338 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


339 
	$Æphas‹t64
 (c⁄° 
dúít64
 **
__e1
,

340 c⁄° 
dúít64
 **
__e2
)

341 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

346 #ifde‡
__USE_MISC


351 #i‚de‡
__USE_FILE_OFFSET64


352 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

353 
size_t
 
__nbyãs
,

354 
__off_t
 *
__ª°ri˘
 
__ba£p
)

355 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

357 #ifde‡
__REDIRECT


358 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

359 (
__fd
, *
__ª°ri˘
 
__buf
,

360 
size_t
 
__nbyãs
,

361 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

362 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

364 
	#gëdúíåõs
 
gëdúíåõs64


	)

368 #ifde‡
__USE_LARGEFILE64


369 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

370 
size_t
 
__nbyãs
,

371 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

372 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

376 #ifde‡
__USE_GNU


378 #i‚de‡
__USE_FILE_OFFSET64


379 
	$vîsi⁄s‹t
 (c⁄° 
dúít
 **
__e1
,

380 c⁄° 
dúít
 **
__e2
)

381 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

383 #ifde‡
__REDIRECT


384 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

385 (c⁄° 
dúít
 **
__e1
,

386 c⁄° 
dúít
 **
__e2
),

387 
vîsi⁄s‹t64
)

388 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

390 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

394 #ifde‡
__USE_LARGEFILE64


395 
	$vîsi⁄s‹t64
 (c⁄° 
dúít64
 **
__e1
,

396 c⁄° 
dúít64
 **
__e2
)

397 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

401 
__END_DECLS


	@/usr/include/dlfcn.h

19 #i‚def 
_DLFCN_H


20 
	#_DLFCN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

27 
	~<bôs/dlf˙.h
>

30 #ifde‡
__USE_GNU


35 
	#RTLD_NEXT
 ((*Ë-1l)

	)

40 
	#RTLD_DEFAULT
 ((*Ë0)

	)

44 
	tLmid_t
;

47 
	#LM_ID_BASE
 0

	)

48 
	#LM_ID_NEWLM
 -1

	)

52 
__BEGIN_DECLS


56 *
	$dl›í
 (c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

60 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1));

64 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

65 c⁄° *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

67 #ifde‡
__USE_GNU


69 *
	$dlm›í
 (
Lmid_t
 
__nsid
, c⁄° *
__fûe
, 
__mode
Ë
__THROWNL
;

73 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

74 c⁄° *
__ª°ri˘
 
__«me
,

75 c⁄° *
__ª°ri˘
 
__vîsi⁄
)

76 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

82 *
	$dÀº‹
 (Ë
__THROW
;

85 #ifde‡
__USE_GNU


90 c⁄° *
dli_‚ame
;

91 *
dli_fba£
;

92 c⁄° *
dli_¢ame
;

93 *
dli_ßddr
;

94 } 
	tDl_öfo
;

98 
	$dœddr
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
)

99 
__THROW
 
	`__n⁄nuŒ
 ((2));

102 
	$dœddr1
 (c⁄° *
__addªss
, 
Dl_öfo
 *
__öfo
,

103 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

111 
RTLD_DL_SYMENT
 = 1,

114 
RTLD_DL_LINKMAP
 = 2

123 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

124 
__ªque°
, *
__ª°ri˘
 
__¨g
)

125 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

131 
RTLD_DI_LMID
 = 1,

135 
RTLD_DI_LINKMAP
 = 2,

137 
RTLD_DI_CONFIGADDR
 = 3,

144 
RTLD_DI_SERINFO
 = 4,

145 
RTLD_DI_SERINFOSIZE
 = 5,

149 
RTLD_DI_ORIGIN
 = 6,

151 
RTLD_DI_PROFILENAME
 = 7,

152 
RTLD_DI_PROFILEOUT
 = 8,

157 
RTLD_DI_TLS_MODID
 = 9,

163 
RTLD_DI_TLS_DATA
 = 10,

165 
RTLD_DI_MAX
 = 10

173 *
dls_«me
;

174 
dls_Êags
;

175 } 
	tDl_£Ω©h
;

181 
size_t
 
dls_size
;

182 
dls_˙t
;

183 
Dl_£Ω©h
 
dls_£Ω©h
[1];

184 } 
	tDl_£röfo
;

188 
__END_DECLS


	@/usr/include/elf.h

19 #i‚de‡
_ELF_H


20 
	#_ELF_H
 1

	)

22 
	~<„©uªs.h
>

24 
	g__BEGIN_DECLS


28 
	~<°döt.h
>

31 
uöt16_t
 
	tElf32_HÆf
;

32 
uöt16_t
 
	tElf64_HÆf
;

35 
uöt32_t
 
	tElf32_W‹d
;

36 
öt32_t
 
	tElf32_Sw‹d
;

37 
uöt32_t
 
	tElf64_W‹d
;

38 
öt32_t
 
	tElf64_Sw‹d
;

41 
uöt64_t
 
	tElf32_Xw‹d
;

42 
öt64_t
 
	tElf32_Sxw‹d
;

43 
uöt64_t
 
	tElf64_Xw‹d
;

44 
öt64_t
 
	tElf64_Sxw‹d
;

47 
uöt32_t
 
	tElf32_Addr
;

48 
uöt64_t
 
	tElf64_Addr
;

51 
uöt32_t
 
	tElf32_Off
;

52 
uöt64_t
 
	tElf64_Off
;

55 
uöt16_t
 
	tElf32_Se˘i⁄
;

56 
uöt16_t
 
	tElf64_Se˘i⁄
;

59 
Elf32_HÆf
 
	tElf32_Vîsym
;

60 
Elf64_HÆf
 
	tElf64_Vîsym
;

65 
	#EI_NIDENT
 (16)

	)

69 
	me_idít
[
EI_NIDENT
];

70 
Elf32_HÆf
 
	me_ty≥
;

71 
Elf32_HÆf
 
	me_machöe
;

72 
Elf32_W‹d
 
	me_vîsi⁄
;

73 
Elf32_Addr
 
	me_íåy
;

74 
Elf32_Off
 
	me_phoff
;

75 
Elf32_Off
 
	me_shoff
;

76 
Elf32_W‹d
 
	me_Êags
;

77 
Elf32_HÆf
 
	me_ehsize
;

78 
Elf32_HÆf
 
	me_phítsize
;

79 
Elf32_HÆf
 
	me_phnum
;

80 
Elf32_HÆf
 
	me_shítsize
;

81 
Elf32_HÆf
 
	me_shnum
;

82 
Elf32_HÆf
 
	me_sh°∫dx
;

83 } 
	tElf32_Ehdr
;

87 
	me_idít
[
EI_NIDENT
];

88 
Elf64_HÆf
 
	me_ty≥
;

89 
Elf64_HÆf
 
	me_machöe
;

90 
Elf64_W‹d
 
	me_vîsi⁄
;

91 
Elf64_Addr
 
	me_íåy
;

92 
Elf64_Off
 
	me_phoff
;

93 
Elf64_Off
 
	me_shoff
;

94 
Elf64_W‹d
 
	me_Êags
;

95 
Elf64_HÆf
 
	me_ehsize
;

96 
Elf64_HÆf
 
	me_phítsize
;

97 
Elf64_HÆf
 
	me_phnum
;

98 
Elf64_HÆf
 
	me_shítsize
;

99 
Elf64_HÆf
 
	me_shnum
;

100 
Elf64_HÆf
 
	me_sh°∫dx
;

101 } 
	tElf64_Ehdr
;

107 
	#EI_MAG0
 0

	)

108 
	#ELFMAG0
 0x7‡

	)

110 
	#EI_MAG1
 1

	)

111 
	#ELFMAG1
 'E'

	)

113 
	#EI_MAG2
 2

	)

114 
	#ELFMAG2
 'L'

	)

116 
	#EI_MAG3
 3

	)

117 
	#ELFMAG3
 'F'

	)

120 
	#ELFMAG
 "\177ELF"

	)

121 
	#SELFMAG
 4

	)

123 
	#EI_CLASS
 4

	)

124 
	#ELFCLASSNONE
 0

	)

125 
	#ELFCLASS32
 1

	)

126 
	#ELFCLASS64
 2

	)

127 
	#ELFCLASSNUM
 3

	)

129 
	#EI_DATA
 5

	)

130 
	#ELFDATANONE
 0

	)

131 
	#ELFDATA2LSB
 1

	)

132 
	#ELFDATA2MSB
 2

	)

133 
	#ELFDATANUM
 3

	)

135 
	#EI_VERSION
 6

	)

138 
	#EI_OSABI
 7

	)

139 
	#ELFOSABI_NONE
 0

	)

140 
	#ELFOSABI_SYSV
 0

	)

141 
	#ELFOSABI_HPUX
 1

	)

142 
	#ELFOSABI_NETBSD
 2

	)

143 
	#ELFOSABI_GNU
 3

	)

144 
	#ELFOSABI_LINUX
 
ELFOSABI_GNU


	)

145 
	#ELFOSABI_SOLARIS
 6

	)

146 
	#ELFOSABI_AIX
 7

	)

147 
	#ELFOSABI_IRIX
 8

	)

148 
	#ELFOSABI_FREEBSD
 9

	)

149 
	#ELFOSABI_TRU64
 10

	)

150 
	#ELFOSABI_MODESTO
 11

	)

151 
	#ELFOSABI_OPENBSD
 12

	)

152 
	#ELFOSABI_ARM_AEABI
 64

	)

153 
	#ELFOSABI_ARM
 97

	)

154 
	#ELFOSABI_STANDALONE
 255

	)

156 
	#EI_ABIVERSION
 8

	)

158 
	#EI_PAD
 9

	)

162 
	#ET_NONE
 0

	)

163 
	#ET_REL
 1

	)

164 
	#ET_EXEC
 2

	)

165 
	#ET_DYN
 3

	)

166 
	#ET_CORE
 4

	)

167 
	#ET_NUM
 5

	)

168 
	#ET_LOOS
 0x„00

	)

169 
	#ET_HIOS
 0x„f‡

	)

170 
	#ET_LOPROC
 0xff00

	)

171 
	#ET_HIPROC
 0xfff‡

	)

175 
	#EM_NONE
 0

	)

176 
	#EM_M32
 1

	)

177 
	#EM_SPARC
 2

	)

178 
	#EM_386
 3

	)

179 
	#EM_68K
 4

	)

180 
	#EM_88K
 5

	)

181 
	#EM_860
 7

	)

182 
	#EM_MIPS
 8

	)

183 
	#EM_S370
 9

	)

184 
	#EM_MIPS_RS3_LE
 10

	)

186 
	#EM_PARISC
 15

	)

187 
	#EM_VPP500
 17

	)

188 
	#EM_SPARC32PLUS
 18

	)

189 
	#EM_960
 19

	)

190 
	#EM_PPC
 20

	)

191 
	#EM_PPC64
 21

	)

192 
	#EM_S390
 22

	)

194 
	#EM_V800
 36

	)

195 
	#EM_FR20
 37

	)

196 
	#EM_RH32
 38

	)

197 
	#EM_RCE
 39

	)

198 
	#EM_ARM
 40

	)

199 
	#EM_FAKE_ALPHA
 41

	)

200 
	#EM_SH
 42

	)

201 
	#EM_SPARCV9
 43

	)

202 
	#EM_TRICORE
 44

	)

203 
	#EM_ARC
 45

	)

204 
	#EM_H8_300
 46

	)

205 
	#EM_H8_300H
 47

	)

206 
	#EM_H8S
 48

	)

207 
	#EM_H8_500
 49

	)

208 
	#EM_IA_64
 50

	)

209 
	#EM_MIPS_X
 51

	)

210 
	#EM_COLDFIRE
 52

	)

211 
	#EM_68HC12
 53

	)

212 
	#EM_MMA
 54

	)

213 
	#EM_PCP
 55

	)

214 
	#EM_NCPU
 56

	)

215 
	#EM_NDR1
 57

	)

216 
	#EM_STARCORE
 58

	)

217 
	#EM_ME16
 59

	)

218 
	#EM_ST100
 60

	)

219 
	#EM_TINYJ
 61

	)

220 
	#EM_X86_64
 62

	)

221 
	#EM_PDSP
 63

	)

223 
	#EM_FX66
 66

	)

224 
	#EM_ST9PLUS
 67

	)

225 
	#EM_ST7
 68

	)

226 
	#EM_68HC16
 69

	)

227 
	#EM_68HC11
 70

	)

228 
	#EM_68HC08
 71

	)

229 
	#EM_68HC05
 72

	)

230 
	#EM_SVX
 73

	)

231 
	#EM_ST19
 74

	)

232 
	#EM_VAX
 75

	)

233 
	#EM_CRIS
 76

	)

234 
	#EM_JAVELIN
 77

	)

235 
	#EM_FIREPATH
 78

	)

236 
	#EM_ZSP
 79

	)

237 
	#EM_MMIX
 80

	)

238 
	#EM_HUANY
 81

	)

239 
	#EM_PRISM
 82

	)

240 
	#EM_AVR
 83

	)

241 
	#EM_FR30
 84

	)

242 
	#EM_D10V
 85

	)

243 
	#EM_D30V
 86

	)

244 
	#EM_V850
 87

	)

245 
	#EM_M32R
 88

	)

246 
	#EM_MN10300
 89

	)

247 
	#EM_MN10200
 90

	)

248 
	#EM_PJ
 91

	)

249 
	#EM_OPENRISC
 92

	)

250 
	#EM_ARC_A5
 93

	)

251 
	#EM_XTENSA
 94

	)

252 
	#EM_ALTERA_NIOS2
 113

	)

253 
	#EM_AARCH64
 183

	)

254 
	#EM_TILEPRO
 188

	)

255 
	#EM_MICROBLAZE
 189

	)

256 
	#EM_TILEGX
 191

	)

257 
	#EM_NUM
 192

	)

263 
	#EM_ALPHA
 0x9026

	)

267 
	#EV_NONE
 0

	)

268 
	#EV_CURRENT
 1

	)

269 
	#EV_NUM
 2

	)

275 
Elf32_W‹d
 
	msh_«me
;

276 
Elf32_W‹d
 
	msh_ty≥
;

277 
Elf32_W‹d
 
	msh_Êags
;

278 
Elf32_Addr
 
	msh_addr
;

279 
Elf32_Off
 
	msh_off£t
;

280 
Elf32_W‹d
 
	msh_size
;

281 
Elf32_W‹d
 
	msh_lök
;

282 
Elf32_W‹d
 
	msh_öfo
;

283 
Elf32_W‹d
 
	msh_addølign
;

284 
Elf32_W‹d
 
	msh_ítsize
;

285 } 
	tElf32_Shdr
;

289 
Elf64_W‹d
 
	msh_«me
;

290 
Elf64_W‹d
 
	msh_ty≥
;

291 
Elf64_Xw‹d
 
	msh_Êags
;

292 
Elf64_Addr
 
	msh_addr
;

293 
Elf64_Off
 
	msh_off£t
;

294 
Elf64_Xw‹d
 
	msh_size
;

295 
Elf64_W‹d
 
	msh_lök
;

296 
Elf64_W‹d
 
	msh_öfo
;

297 
Elf64_Xw‹d
 
	msh_addølign
;

298 
Elf64_Xw‹d
 
	msh_ítsize
;

299 } 
	tElf64_Shdr
;

303 
	#SHN_UNDEF
 0

	)

304 
	#SHN_LORESERVE
 0xff00

	)

305 
	#SHN_LOPROC
 0xff00

	)

306 
	#SHN_BEFORE
 0xff00

	)

308 
	#SHN_AFTER
 0xff01

	)

310 
	#SHN_HIPROC
 0xff1‡

	)

311 
	#SHN_LOOS
 0xff20

	)

312 
	#SHN_HIOS
 0xff3‡

	)

313 
	#SHN_ABS
 0xfff1

	)

314 
	#SHN_COMMON
 0xfff2

	)

315 
	#SHN_XINDEX
 0xfff‡

	)

316 
	#SHN_HIRESERVE
 0xfff‡

	)

320 
	#SHT_NULL
 0

	)

321 
	#SHT_PROGBITS
 1

	)

322 
	#SHT_SYMTAB
 2

	)

323 
	#SHT_STRTAB
 3

	)

324 
	#SHT_RELA
 4

	)

325 
	#SHT_HASH
 5

	)

326 
	#SHT_DYNAMIC
 6

	)

327 
	#SHT_NOTE
 7

	)

328 
	#SHT_NOBITS
 8

	)

329 
	#SHT_REL
 9

	)

330 
	#SHT_SHLIB
 10

	)

331 
	#SHT_DYNSYM
 11

	)

332 
	#SHT_INIT_ARRAY
 14

	)

333 
	#SHT_FINI_ARRAY
 15

	)

334 
	#SHT_PREINIT_ARRAY
 16

	)

335 
	#SHT_GROUP
 17

	)

336 
	#SHT_SYMTAB_SHNDX
 18

	)

337 
	#SHT_NUM
 19

	)

338 
	#SHT_LOOS
 0x60000000

	)

339 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

340 
	#SHT_GNU_HASH
 0x6ffffff6

	)

341 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

342 
	#SHT_CHECKSUM
 0x6ffffff8

	)

343 
	#SHT_LOSUNW
 0x6fffffÁ

	)

344 
	#SHT_SUNW_move
 0x6fffffÁ

	)

345 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

346 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

347 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

348 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

349 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

350 
	#SHT_HISUNW
 0x6ffffff‡

	)

351 
	#SHT_HIOS
 0x6ffffff‡

	)

352 
	#SHT_LOPROC
 0x70000000

	)

353 
	#SHT_HIPROC
 0x7ffffff‡

	)

354 
	#SHT_LOUSER
 0x80000000

	)

355 
	#SHT_HIUSER
 0x8ffffff‡

	)

359 
	#SHF_WRITE
 (1 << 0Ë

	)

360 
	#SHF_ALLOC
 (1 << 1Ë

	)

361 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

362 
	#SHF_MERGE
 (1 << 4Ë

	)

363 
	#SHF_STRINGS
 (1 << 5Ë

	)

364 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

365 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

366 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

368 
	#SHF_GROUP
 (1 << 9Ë

	)

369 
	#SHF_TLS
 (1 << 10Ë

	)

370 
	#SHF_COMPRESSED
 (1 << 11Ë

	)

371 
	#SHF_MASKOS
 0x0ff00000

	)

372 
	#SHF_MASKPROC
 0xf0000000

	)

373 
	#SHF_ORDERED
 (1 << 30Ë

	)

375 
	#SHF_EXCLUDE
 (1U << 31Ë

	)

382 
Elf32_W‹d
 
	mch_ty≥
;

383 
Elf32_W‹d
 
	mch_size
;

384 
Elf32_W‹d
 
	mch_addølign
;

385 } 
	tElf32_Chdr
;

389 
Elf64_W‹d
 
	mch_ty≥
;

390 
Elf64_W‹d
 
	mch_ª£rved
;

391 
Elf64_Xw‹d
 
	mch_size
;

392 
Elf64_Xw‹d
 
	mch_addølign
;

393 } 
	tElf64_Chdr
;

396 
	#ELFCOMPRESS_ZLIB
 1

	)

397 
	#ELFCOMPRESS_LOOS
 0x60000000

	)

398 
	#ELFCOMPRESS_HIOS
 0x6ffffff‡

	)

399 
	#ELFCOMPRESS_LOPROC
 0x70000000

	)

400 
	#ELFCOMPRESS_HIPROC
 0x7ffffff‡

	)

403 
	#GRP_COMDAT
 0x1

	)

409 
Elf32_W‹d
 
	m°_«me
;

410 
Elf32_Addr
 
	m°_vÆue
;

411 
Elf32_W‹d
 
	m°_size
;

412 
	m°_öfo
;

413 
	m°_Ÿhî
;

414 
Elf32_Se˘i⁄
 
	m°_shndx
;

415 } 
	tElf32_Sym
;

419 
Elf64_W‹d
 
	m°_«me
;

420 
	m°_öfo
;

421 
	m°_Ÿhî
;

422 
Elf64_Se˘i⁄
 
	m°_shndx
;

423 
Elf64_Addr
 
	m°_vÆue
;

424 
Elf64_Xw‹d
 
	m°_size
;

425 } 
	tElf64_Sym
;

432 
Elf32_HÆf
 
	msi_boundto
;

433 
Elf32_HÆf
 
	msi_Êags
;

434 } 
	tElf32_Symöfo
;

438 
Elf64_HÆf
 
	msi_boundto
;

439 
Elf64_HÆf
 
	msi_Êags
;

440 } 
	tElf64_Symöfo
;

443 
	#SYMINFO_BT_SELF
 0xfff‡

	)

444 
	#SYMINFO_BT_PARENT
 0xff„

	)

445 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

448 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

449 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

450 
	#SYMINFO_FLG_COPY
 0x0004

	)

451 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

454 
	#SYMINFO_NONE
 0

	)

455 
	#SYMINFO_CURRENT
 1

	)

456 
	#SYMINFO_NUM
 2

	)

461 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

462 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

463 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

466 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

467 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

468 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

472 
	#STB_LOCAL
 0

	)

473 
	#STB_GLOBAL
 1

	)

474 
	#STB_WEAK
 2

	)

475 
	#STB_NUM
 3

	)

476 
	#STB_LOOS
 10

	)

477 
	#STB_GNU_UNIQUE
 10

	)

478 
	#STB_HIOS
 12

	)

479 
	#STB_LOPROC
 13

	)

480 
	#STB_HIPROC
 15

	)

484 
	#STT_NOTYPE
 0

	)

485 
	#STT_OBJECT
 1

	)

486 
	#STT_FUNC
 2

	)

487 
	#STT_SECTION
 3

	)

488 
	#STT_FILE
 4

	)

489 
	#STT_COMMON
 5

	)

490 
	#STT_TLS
 6

	)

491 
	#STT_NUM
 7

	)

492 
	#STT_LOOS
 10

	)

493 
	#STT_GNU_IFUNC
 10

	)

494 
	#STT_HIOS
 12

	)

495 
	#STT_LOPROC
 13

	)

496 
	#STT_HIPROC
 15

	)

503 
	#STN_UNDEF
 0

	)

508 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

511 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

514 
	#STV_DEFAULT
 0

	)

515 
	#STV_INTERNAL
 1

	)

516 
	#STV_HIDDEN
 2

	)

517 
	#STV_PROTECTED
 3

	)

524 
Elf32_Addr
 
	mr_off£t
;

525 
Elf32_W‹d
 
	mr_öfo
;

526 } 
	tElf32_Rñ
;

535 
Elf64_Addr
 
	mr_off£t
;

536 
Elf64_Xw‹d
 
	mr_öfo
;

537 } 
	tElf64_Rñ
;

543 
Elf32_Addr
 
	mr_off£t
;

544 
Elf32_W‹d
 
	mr_öfo
;

545 
Elf32_Sw‹d
 
	mr_addíd
;

546 } 
	tElf32_Rña
;

550 
Elf64_Addr
 
	mr_off£t
;

551 
Elf64_Xw‹d
 
	mr_öfo
;

552 
Elf64_Sxw‹d
 
	mr_addíd
;

553 } 
	tElf64_Rña
;

557 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

558 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

559 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

561 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

562 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

563 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

569 
Elf32_W‹d
 
	mp_ty≥
;

570 
Elf32_Off
 
	mp_off£t
;

571 
Elf32_Addr
 
	mp_vaddr
;

572 
Elf32_Addr
 
	mp_∑ddr
;

573 
Elf32_W‹d
 
	mp_fûesz
;

574 
Elf32_W‹d
 
	mp_memsz
;

575 
Elf32_W‹d
 
	mp_Êags
;

576 
Elf32_W‹d
 
	mp_Æign
;

577 } 
	tElf32_Phdr
;

581 
Elf64_W‹d
 
	mp_ty≥
;

582 
Elf64_W‹d
 
	mp_Êags
;

583 
Elf64_Off
 
	mp_off£t
;

584 
Elf64_Addr
 
	mp_vaddr
;

585 
Elf64_Addr
 
	mp_∑ddr
;

586 
Elf64_Xw‹d
 
	mp_fûesz
;

587 
Elf64_Xw‹d
 
	mp_memsz
;

588 
Elf64_Xw‹d
 
	mp_Æign
;

589 } 
	tElf64_Phdr
;

595 
	#PN_XNUM
 0xffff

	)

599 
	#PT_NULL
 0

	)

600 
	#PT_LOAD
 1

	)

601 
	#PT_DYNAMIC
 2

	)

602 
	#PT_INTERP
 3

	)

603 
	#PT_NOTE
 4

	)

604 
	#PT_SHLIB
 5

	)

605 
	#PT_PHDR
 6

	)

606 
	#PT_TLS
 7

	)

607 
	#PT_NUM
 8

	)

608 
	#PT_LOOS
 0x60000000

	)

609 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

610 
	#PT_GNU_STACK
 0x6474e551

	)

611 
	#PT_GNU_RELRO
 0x6474e552

	)

612 
	#PT_LOSUNW
 0x6fffffÁ

	)

613 
	#PT_SUNWBSS
 0x6fffffÁ

	)

614 
	#PT_SUNWSTACK
 0x6ffffffb

	)

615 
	#PT_HISUNW
 0x6fffffff

	)

616 
	#PT_HIOS
 0x6ffffff‡

	)

617 
	#PT_LOPROC
 0x70000000

	)

618 
	#PT_HIPROC
 0x7ffffff‡

	)

622 
	#PF_X
 (1 << 0Ë

	)

623 
	#PF_W
 (1 << 1Ë

	)

624 
	#PF_R
 (1 << 2Ë

	)

625 
	#PF_MASKOS
 0x0ff00000

	)

626 
	#PF_MASKPROC
 0xf0000000

	)

630 
	#NT_PRSTATUS
 1

	)

631 
	#NT_FPREGSET
 2

	)

632 
	#NT_PRPSINFO
 3

	)

633 
	#NT_PRXREG
 4

	)

634 
	#NT_TASKSTRUCT
 4

	)

635 
	#NT_PLATFORM
 5

	)

636 
	#NT_AUXV
 6

	)

637 
	#NT_GWINDOWS
 7

	)

638 
	#NT_ASRS
 8

	)

639 
	#NT_PSTATUS
 10

	)

640 
	#NT_PSINFO
 13

	)

641 
	#NT_PRCRED
 14

	)

642 
	#NT_UTSNAME
 15

	)

643 
	#NT_LWPSTATUS
 16

	)

644 
	#NT_LWPSINFO
 17

	)

645 
	#NT_PRFPXREG
 20

	)

646 
	#NT_SIGINFO
 0x53494749

	)

648 
	#NT_FILE
 0x46494c45

	)

650 
	#NT_PRXFPREG
 0x46e62b7‡

	)

651 
	#NT_PPC_VMX
 0x100

	)

652 
	#NT_PPC_SPE
 0x101

	)

653 
	#NT_PPC_VSX
 0x102

	)

654 
	#NT_386_TLS
 0x200

	)

655 
	#NT_386_IOPERM
 0x201

	)

656 
	#NT_X86_XSTATE
 0x202

	)

657 
	#NT_S390_HIGH_GPRS
 0x300

	)

658 
	#NT_S390_TIMER
 0x301

	)

659 
	#NT_S390_TODCMP
 0x302

	)

660 
	#NT_S390_TODPREG
 0x303

	)

661 
	#NT_S390_CTRS
 0x304

	)

662 
	#NT_S390_PREFIX
 0x305

	)

663 
	#NT_S390_LAST_BREAK
 0x306

	)

664 
	#NT_S390_SYSTEM_CALL
 0x307

	)

665 
	#NT_S390_TDB
 0x308

	)

666 
	#NT_ARM_VFP
 0x400

	)

667 
	#NT_ARM_TLS
 0x401

	)

668 
	#NT_ARM_HW_BREAK
 0x402

	)

669 
	#NT_ARM_HW_WATCH
 0x403

	)

673 
	#NT_VERSION
 1

	)

680 
Elf32_Sw‹d
 
	md_èg
;

683 
Elf32_W‹d
 
	md_vÆ
;

684 
Elf32_Addr
 
	md_±r
;

685 } 
	md_un
;

686 } 
	tElf32_Dyn
;

690 
Elf64_Sxw‹d
 
	md_èg
;

693 
Elf64_Xw‹d
 
	md_vÆ
;

694 
Elf64_Addr
 
	md_±r
;

695 } 
	md_un
;

696 } 
	tElf64_Dyn
;

700 
	#DT_NULL
 0

	)

701 
	#DT_NEEDED
 1

	)

702 
	#DT_PLTRELSZ
 2

	)

703 
	#DT_PLTGOT
 3

	)

704 
	#DT_HASH
 4

	)

705 
	#DT_STRTAB
 5

	)

706 
	#DT_SYMTAB
 6

	)

707 
	#DT_RELA
 7

	)

708 
	#DT_RELASZ
 8

	)

709 
	#DT_RELAENT
 9

	)

710 
	#DT_STRSZ
 10

	)

711 
	#DT_SYMENT
 11

	)

712 
	#DT_INIT
 12

	)

713 
	#DT_FINI
 13

	)

714 
	#DT_SONAME
 14

	)

715 
	#DT_RPATH
 15

	)

716 
	#DT_SYMBOLIC
 16

	)

717 
	#DT_REL
 17

	)

718 
	#DT_RELSZ
 18

	)

719 
	#DT_RELENT
 19

	)

720 
	#DT_PLTREL
 20

	)

721 
	#DT_DEBUG
 21

	)

722 
	#DT_TEXTREL
 22

	)

723 
	#DT_JMPREL
 23

	)

724 
	#DT_BIND_NOW
 24

	)

725 
	#DT_INIT_ARRAY
 25

	)

726 
	#DT_FINI_ARRAY
 26

	)

727 
	#DT_INIT_ARRAYSZ
 27

	)

728 
	#DT_FINI_ARRAYSZ
 28

	)

729 
	#DT_RUNPATH
 29

	)

730 
	#DT_FLAGS
 30

	)

731 
	#DT_ENCODING
 32

	)

732 
	#DT_PREINIT_ARRAY
 32

	)

733 
	#DT_PREINIT_ARRAYSZ
 33

	)

734 
	#DT_NUM
 34

	)

735 
	#DT_LOOS
 0x6000000d

	)

736 
	#DT_HIOS
 0x6ffff000

	)

737 
	#DT_LOPROC
 0x70000000

	)

738 
	#DT_HIPROC
 0x7ffffff‡

	)

739 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

744 
	#DT_VALRNGLO
 0x6ffffd00

	)

745 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

746 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

747 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

748 
	#DT_CHECKSUM
 0x6ffffdf8

	)

749 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

750 
	#DT_MOVEENT
 0x6ffffdÁ

	)

751 
	#DT_MOVESZ
 0x6ffffdfb

	)

752 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

753 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

755 
	#DT_SYMINSZ
 0x6ffffd„

	)

756 
	#DT_SYMINENT
 0x6ffffdf‡

	)

757 
	#DT_VALRNGHI
 0x6ffffdff

	)

758 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

759 
	#DT_VALNUM
 12

	)

766 
	#DT_ADDRRNGLO
 0x6fff„00

	)

767 
	#DT_GNU_HASH
 0x6fff„f5

	)

768 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

769 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

770 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

771 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

772 
	#DT_CONFIG
 0x6fff„Á

	)

773 
	#DT_DEPAUDIT
 0x6fff„fb

	)

774 
	#DT_AUDIT
 0x6fff„f¯

	)

775 
	#DT_PLTPAD
 0x6fff„fd

	)

776 
	#DT_MOVETAB
 0x6fff„„

	)

777 
	#DT_SYMINFO
 0x6fff„f‡

	)

778 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

779 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

780 
	#DT_ADDRNUM
 11

	)

784 
	#DT_VERSYM
 0x6ffffff0

	)

786 
	#DT_RELACOUNT
 0x6ffffff9

	)

787 
	#DT_RELCOUNT
 0x6fffffÁ

	)

790 
	#DT_FLAGS_1
 0x6ffffffb

	)

791 
	#DT_VERDEF
 0x6ffffff¯

	)

793 
	#DT_VERDEFNUM
 0x6ffffffd

	)

794 
	#DT_VERNEED
 0x6fffff„

	)

796 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

797 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

798 
	#DT_VERSIONTAGNUM
 16

	)

802 
	#DT_AUXILIARY
 0x7ffffffd

	)

803 
	#DT_FILTER
 0x7ffffff‡

	)

804 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

805 
	#DT_EXTRANUM
 3

	)

808 
	#DF_ORIGIN
 0x00000001

	)

809 
	#DF_SYMBOLIC
 0x00000002

	)

810 
	#DF_TEXTREL
 0x00000004

	)

811 
	#DF_BIND_NOW
 0x00000008

	)

812 
	#DF_STATIC_TLS
 0x00000010

	)

816 
	#DF_1_NOW
 0x00000001

	)

817 
	#DF_1_GLOBAL
 0x00000002

	)

818 
	#DF_1_GROUP
 0x00000004

	)

819 
	#DF_1_NODELETE
 0x00000008

	)

820 
	#DF_1_LOADFLTR
 0x00000010

	)

821 
	#DF_1_INITFIRST
 0x00000020

	)

822 
	#DF_1_NOOPEN
 0x00000040

	)

823 
	#DF_1_ORIGIN
 0x00000080

	)

824 
	#DF_1_DIRECT
 0x00000100

	)

825 
	#DF_1_TRANS
 0x00000200

	)

826 
	#DF_1_INTERPOSE
 0x00000400

	)

827 
	#DF_1_NODEFLIB
 0x00000800

	)

828 
	#DF_1_NODUMP
 0x00001000

	)

829 
	#DF_1_CONFALT
 0x00002000

	)

830 
	#DF_1_ENDFILTEE
 0x00004000

	)

831 
	#DF_1_DISPRELDNE
 0x00008000

	)

832 
	#DF_1_DISPRELPND
 0x00010000

	)

833 
	#DF_1_NODIRECT
 0x00020000

	)

834 
	#DF_1_IGNMULDEF
 0x00040000

	)

835 
	#DF_1_NOKSYMS
 0x00080000

	)

836 
	#DF_1_NOHDR
 0x00100000

	)

837 
	#DF_1_EDITED
 0x00200000

	)

838 
	#DF_1_NORELOC
 0x00400000

	)

839 
	#DF_1_SYMINTPOSE
 0x00800000

	)

840 
	#DF_1_GLOBAUDIT
 0x01000000

	)

841 
	#DF_1_SINGLETON
 0x02000000

	)

844 
	#DTF_1_PARINIT
 0x00000001

	)

845 
	#DTF_1_CONFEXP
 0x00000002

	)

848 
	#DF_P1_LAZYLOAD
 0x00000001

	)

849 
	#DF_P1_GROUPPERM
 0x00000002

	)

856 
Elf32_HÆf
 
	mvd_vîsi⁄
;

857 
Elf32_HÆf
 
	mvd_Êags
;

858 
Elf32_HÆf
 
	mvd_ndx
;

859 
Elf32_HÆf
 
	mvd_˙t
;

860 
Elf32_W‹d
 
	mvd_hash
;

861 
Elf32_W‹d
 
	mvd_aux
;

862 
Elf32_W‹d
 
	mvd_√xt
;

864 } 
	tElf32_Vîdef
;

868 
Elf64_HÆf
 
	mvd_vîsi⁄
;

869 
Elf64_HÆf
 
	mvd_Êags
;

870 
Elf64_HÆf
 
	mvd_ndx
;

871 
Elf64_HÆf
 
	mvd_˙t
;

872 
Elf64_W‹d
 
	mvd_hash
;

873 
Elf64_W‹d
 
	mvd_aux
;

874 
Elf64_W‹d
 
	mvd_√xt
;

876 } 
	tElf64_Vîdef
;

880 
	#VER_DEF_NONE
 0

	)

881 
	#VER_DEF_CURRENT
 1

	)

882 
	#VER_DEF_NUM
 2

	)

885 
	#VER_FLG_BASE
 0x1

	)

886 
	#VER_FLG_WEAK
 0x2

	)

889 
	#VER_NDX_LOCAL
 0

	)

890 
	#VER_NDX_GLOBAL
 1

	)

891 
	#VER_NDX_LORESERVE
 0xff00

	)

892 
	#VER_NDX_ELIMINATE
 0xff01

	)

898 
Elf32_W‹d
 
	mvda_«me
;

899 
Elf32_W‹d
 
	mvda_√xt
;

901 } 
	tElf32_Vîdaux
;

905 
Elf64_W‹d
 
	mvda_«me
;

906 
Elf64_W‹d
 
	mvda_√xt
;

908 } 
	tElf64_Vîdaux
;

915 
Elf32_HÆf
 
	mvn_vîsi⁄
;

916 
Elf32_HÆf
 
	mvn_˙t
;

917 
Elf32_W‹d
 
	mvn_fûe
;

919 
Elf32_W‹d
 
	mvn_aux
;

920 
Elf32_W‹d
 
	mvn_√xt
;

922 } 
	tElf32_Vî√ed
;

926 
Elf64_HÆf
 
	mvn_vîsi⁄
;

927 
Elf64_HÆf
 
	mvn_˙t
;

928 
Elf64_W‹d
 
	mvn_fûe
;

930 
Elf64_W‹d
 
	mvn_aux
;

931 
Elf64_W‹d
 
	mvn_√xt
;

933 } 
	tElf64_Vî√ed
;

937 
	#VER_NEED_NONE
 0

	)

938 
	#VER_NEED_CURRENT
 1

	)

939 
	#VER_NEED_NUM
 2

	)

945 
Elf32_W‹d
 
	mv«_hash
;

946 
Elf32_HÆf
 
	mv«_Êags
;

947 
Elf32_HÆf
 
	mv«_Ÿhî
;

948 
Elf32_W‹d
 
	mv«_«me
;

949 
Elf32_W‹d
 
	mv«_√xt
;

951 } 
	tElf32_Vî«ux
;

955 
Elf64_W‹d
 
	mv«_hash
;

956 
Elf64_HÆf
 
	mv«_Êags
;

957 
Elf64_HÆf
 
	mv«_Ÿhî
;

958 
Elf64_W‹d
 
	mv«_«me
;

959 
Elf64_W‹d
 
	mv«_√xt
;

961 } 
	tElf64_Vî«ux
;

965 
	#VER_FLG_WEAK
 0x2

	)

979 
uöt32_t
 
	ma_ty≥
;

982 
uöt32_t
 
	ma_vÆ
;

986 } 
	ma_un
;

987 } 
	tElf32_auxv_t
;

991 
uöt64_t
 
	ma_ty≥
;

994 
uöt64_t
 
	ma_vÆ
;

998 } 
	ma_un
;

999 } 
	tElf64_auxv_t
;

1001 
	~<bôs/auxv.h
>

1007 
Elf32_W‹d
 
	mn_«mesz
;

1008 
Elf32_W‹d
 
	mn_descsz
;

1009 
Elf32_W‹d
 
	mn_ty≥
;

1010 } 
	tElf32_Nhdr
;

1014 
Elf64_W‹d
 
	mn_«mesz
;

1015 
Elf64_W‹d
 
	mn_descsz
;

1016 
Elf64_W‹d
 
	mn_ty≥
;

1017 } 
	tElf64_Nhdr
;

1022 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

1025 
	#ELF_NOTE_GNU
 "GNU"

	)

1031 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1042 
	#NT_GNU_ABI_TAG
 1

	)

1043 
	#ELF_NOTE_ABI
 
NT_GNU_ABI_TAG


	)

1047 
	#ELF_NOTE_OS_LINUX
 0

	)

1048 
	#ELF_NOTE_OS_GNU
 1

	)

1049 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1050 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1058 
	#NT_GNU_HWCAP
 2

	)

1062 
	#NT_GNU_BUILD_ID
 3

	)

1065 
	#NT_GNU_GOLD_VERSION
 4

	)

1071 
Elf32_Xw‹d
 
	mm_vÆue
;

1072 
Elf32_W‹d
 
	mm_öfo
;

1073 
Elf32_W‹d
 
	mm_poff£t
;

1074 
Elf32_HÆf
 
	mm_ª≥©
;

1075 
Elf32_HÆf
 
	mm_°ride
;

1076 } 
	tElf32_Move
;

1080 
Elf64_Xw‹d
 
	mm_vÆue
;

1081 
Elf64_Xw‹d
 
	mm_öfo
;

1082 
Elf64_Xw‹d
 
	mm_poff£t
;

1083 
Elf64_HÆf
 
	mm_ª≥©
;

1084 
Elf64_HÆf
 
	mm_°ride
;

1085 } 
	tElf64_Move
;

1088 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1089 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1090 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1092 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1093 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1094 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1100 
	#EF_CPU32
 0x00810000

	)

1104 
	#R_68K_NONE
 0

	)

1105 
	#R_68K_32
 1

	)

1106 
	#R_68K_16
 2

	)

1107 
	#R_68K_8
 3

	)

1108 
	#R_68K_PC32
 4

	)

1109 
	#R_68K_PC16
 5

	)

1110 
	#R_68K_PC8
 6

	)

1111 
	#R_68K_GOT32
 7

	)

1112 
	#R_68K_GOT16
 8

	)

1113 
	#R_68K_GOT8
 9

	)

1114 
	#R_68K_GOT32O
 10

	)

1115 
	#R_68K_GOT16O
 11

	)

1116 
	#R_68K_GOT8O
 12

	)

1117 
	#R_68K_PLT32
 13

	)

1118 
	#R_68K_PLT16
 14

	)

1119 
	#R_68K_PLT8
 15

	)

1120 
	#R_68K_PLT32O
 16

	)

1121 
	#R_68K_PLT16O
 17

	)

1122 
	#R_68K_PLT8O
 18

	)

1123 
	#R_68K_COPY
 19

	)

1124 
	#R_68K_GLOB_DAT
 20

	)

1125 
	#R_68K_JMP_SLOT
 21

	)

1126 
	#R_68K_RELATIVE
 22

	)

1127 
	#R_68K_TLS_GD32
 25

	)

1128 
	#R_68K_TLS_GD16
 26

	)

1129 
	#R_68K_TLS_GD8
 27

	)

1130 
	#R_68K_TLS_LDM32
 28

	)

1131 
	#R_68K_TLS_LDM16
 29

	)

1132 
	#R_68K_TLS_LDM8
 30

	)

1133 
	#R_68K_TLS_LDO32
 31

	)

1134 
	#R_68K_TLS_LDO16
 32

	)

1135 
	#R_68K_TLS_LDO8
 33

	)

1136 
	#R_68K_TLS_IE32
 34

	)

1137 
	#R_68K_TLS_IE16
 35

	)

1138 
	#R_68K_TLS_IE8
 36

	)

1139 
	#R_68K_TLS_LE32
 37

	)

1141 
	#R_68K_TLS_LE16
 38

	)

1143 
	#R_68K_TLS_LE8
 39

	)

1145 
	#R_68K_TLS_DTPMOD32
 40

	)

1146 
	#R_68K_TLS_DTPREL32
 41

	)

1147 
	#R_68K_TLS_TPREL32
 42

	)

1149 
	#R_68K_NUM
 43

	)

1155 
	#R_386_NONE
 0

	)

1156 
	#R_386_32
 1

	)

1157 
	#R_386_PC32
 2

	)

1158 
	#R_386_GOT32
 3

	)

1159 
	#R_386_PLT32
 4

	)

1160 
	#R_386_COPY
 5

	)

1161 
	#R_386_GLOB_DAT
 6

	)

1162 
	#R_386_JMP_SLOT
 7

	)

1163 
	#R_386_RELATIVE
 8

	)

1164 
	#R_386_GOTOFF
 9

	)

1165 
	#R_386_GOTPC
 10

	)

1166 
	#R_386_32PLT
 11

	)

1167 
	#R_386_TLS_TPOFF
 14

	)

1168 
	#R_386_TLS_IE
 15

	)

1170 
	#R_386_TLS_GOTIE
 16

	)

1172 
	#R_386_TLS_LE
 17

	)

1174 
	#R_386_TLS_GD
 18

	)

1176 
	#R_386_TLS_LDM
 19

	)

1179 
	#R_386_16
 20

	)

1180 
	#R_386_PC16
 21

	)

1181 
	#R_386_8
 22

	)

1182 
	#R_386_PC8
 23

	)

1183 
	#R_386_TLS_GD_32
 24

	)

1185 
	#R_386_TLS_GD_PUSH
 25

	)

1186 
	#R_386_TLS_GD_CALL
 26

	)

1188 
	#R_386_TLS_GD_POP
 27

	)

1189 
	#R_386_TLS_LDM_32
 28

	)

1191 
	#R_386_TLS_LDM_PUSH
 29

	)

1192 
	#R_386_TLS_LDM_CALL
 30

	)

1194 
	#R_386_TLS_LDM_POP
 31

	)

1195 
	#R_386_TLS_LDO_32
 32

	)

1196 
	#R_386_TLS_IE_32
 33

	)

1198 
	#R_386_TLS_LE_32
 34

	)

1200 
	#R_386_TLS_DTPMOD32
 35

	)

1201 
	#R_386_TLS_DTPOFF32
 36

	)

1202 
	#R_386_TLS_TPOFF32
 37

	)

1203 
	#R_386_SIZE32
 38

	)

1204 
	#R_386_TLS_GOTDESC
 39

	)

1205 
	#R_386_TLS_DESC_CALL
 40

	)

1208 
	#R_386_TLS_DESC
 41

	)

1212 
	#R_386_IRELATIVE
 42

	)

1214 
	#R_386_NUM
 43

	)

1220 
	#STT_SPARC_REGISTER
 13

	)

1224 
	#EF_SPARCV9_MM
 3

	)

1225 
	#EF_SPARCV9_TSO
 0

	)

1226 
	#EF_SPARCV9_PSO
 1

	)

1227 
	#EF_SPARCV9_RMO
 2

	)

1228 
	#EF_SPARC_LEDATA
 0x800000

	)

1229 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1230 
	#EF_SPARC_32PLUS
 0x000100

	)

1231 
	#EF_SPARC_SUN_US1
 0x000200

	)

1232 
	#EF_SPARC_HAL_R1
 0x000400

	)

1233 
	#EF_SPARC_SUN_US3
 0x000800

	)

1237 
	#R_SPARC_NONE
 0

	)

1238 
	#R_SPARC_8
 1

	)

1239 
	#R_SPARC_16
 2

	)

1240 
	#R_SPARC_32
 3

	)

1241 
	#R_SPARC_DISP8
 4

	)

1242 
	#R_SPARC_DISP16
 5

	)

1243 
	#R_SPARC_DISP32
 6

	)

1244 
	#R_SPARC_WDISP30
 7

	)

1245 
	#R_SPARC_WDISP22
 8

	)

1246 
	#R_SPARC_HI22
 9

	)

1247 
	#R_SPARC_22
 10

	)

1248 
	#R_SPARC_13
 11

	)

1249 
	#R_SPARC_LO10
 12

	)

1250 
	#R_SPARC_GOT10
 13

	)

1251 
	#R_SPARC_GOT13
 14

	)

1252 
	#R_SPARC_GOT22
 15

	)

1253 
	#R_SPARC_PC10
 16

	)

1254 
	#R_SPARC_PC22
 17

	)

1255 
	#R_SPARC_WPLT30
 18

	)

1256 
	#R_SPARC_COPY
 19

	)

1257 
	#R_SPARC_GLOB_DAT
 20

	)

1258 
	#R_SPARC_JMP_SLOT
 21

	)

1259 
	#R_SPARC_RELATIVE
 22

	)

1260 
	#R_SPARC_UA32
 23

	)

1264 
	#R_SPARC_PLT32
 24

	)

1265 
	#R_SPARC_HIPLT22
 25

	)

1266 
	#R_SPARC_LOPLT10
 26

	)

1267 
	#R_SPARC_PCPLT32
 27

	)

1268 
	#R_SPARC_PCPLT22
 28

	)

1269 
	#R_SPARC_PCPLT10
 29

	)

1270 
	#R_SPARC_10
 30

	)

1271 
	#R_SPARC_11
 31

	)

1272 
	#R_SPARC_64
 32

	)

1273 
	#R_SPARC_OLO10
 33

	)

1274 
	#R_SPARC_HH22
 34

	)

1275 
	#R_SPARC_HM10
 35

	)

1276 
	#R_SPARC_LM22
 36

	)

1277 
	#R_SPARC_PC_HH22
 37

	)

1278 
	#R_SPARC_PC_HM10
 38

	)

1279 
	#R_SPARC_PC_LM22
 39

	)

1280 
	#R_SPARC_WDISP16
 40

	)

1281 
	#R_SPARC_WDISP19
 41

	)

1282 
	#R_SPARC_GLOB_JMP
 42

	)

1283 
	#R_SPARC_7
 43

	)

1284 
	#R_SPARC_5
 44

	)

1285 
	#R_SPARC_6
 45

	)

1286 
	#R_SPARC_DISP64
 46

	)

1287 
	#R_SPARC_PLT64
 47

	)

1288 
	#R_SPARC_HIX22
 48

	)

1289 
	#R_SPARC_LOX10
 49

	)

1290 
	#R_SPARC_H44
 50

	)

1291 
	#R_SPARC_M44
 51

	)

1292 
	#R_SPARC_L44
 52

	)

1293 
	#R_SPARC_REGISTER
 53

	)

1294 
	#R_SPARC_UA64
 54

	)

1295 
	#R_SPARC_UA16
 55

	)

1296 
	#R_SPARC_TLS_GD_HI22
 56

	)

1297 
	#R_SPARC_TLS_GD_LO10
 57

	)

1298 
	#R_SPARC_TLS_GD_ADD
 58

	)

1299 
	#R_SPARC_TLS_GD_CALL
 59

	)

1300 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1301 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1302 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1303 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1304 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1305 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1306 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1307 
	#R_SPARC_TLS_IE_HI22
 67

	)

1308 
	#R_SPARC_TLS_IE_LO10
 68

	)

1309 
	#R_SPARC_TLS_IE_LD
 69

	)

1310 
	#R_SPARC_TLS_IE_LDX
 70

	)

1311 
	#R_SPARC_TLS_IE_ADD
 71

	)

1312 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1313 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1314 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1315 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1316 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1317 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1318 
	#R_SPARC_TLS_TPOFF32
 78

	)

1319 
	#R_SPARC_TLS_TPOFF64
 79

	)

1320 
	#R_SPARC_GOTDATA_HIX22
 80

	)

1321 
	#R_SPARC_GOTDATA_LOX10
 81

	)

1322 
	#R_SPARC_GOTDATA_OP_HIX22
 82

	)

1323 
	#R_SPARC_GOTDATA_OP_LOX10
 83

	)

1324 
	#R_SPARC_GOTDATA_OP
 84

	)

1325 
	#R_SPARC_H34
 85

	)

1326 
	#R_SPARC_SIZE32
 86

	)

1327 
	#R_SPARC_SIZE64
 87

	)

1328 
	#R_SPARC_WDISP10
 88

	)

1329 
	#R_SPARC_JMP_IREL
 248

	)

1330 
	#R_SPARC_IRELATIVE
 249

	)

1331 
	#R_SPARC_GNU_VTINHERIT
 250

	)

1332 
	#R_SPARC_GNU_VTENTRY
 251

	)

1333 
	#R_SPARC_REV32
 252

	)

1335 
	#R_SPARC_NUM
 253

	)

1339 
	#DT_SPARC_REGISTER
 0x70000001

	)

1340 
	#DT_SPARC_NUM
 2

	)

1346 
	#EF_MIPS_NOREORDER
 1

	)

1347 
	#EF_MIPS_PIC
 2

	)

1348 
	#EF_MIPS_CPIC
 4

	)

1349 
	#EF_MIPS_XGOT
 8

	)

1350 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1351 
	#EF_MIPS_ABI2
 32

	)

1352 
	#EF_MIPS_ABI_ON32
 64

	)

1353 
	#EF_MIPS_FP64
 512

	)

1354 
	#EF_MIPS_NAN2008
 1024

	)

1355 
	#EF_MIPS_ARCH
 0xf0000000

	)

1359 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1360 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1361 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1362 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1363 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1364 
	#EF_MIPS_ARCH_32
 0x50000000

	)

1365 
	#EF_MIPS_ARCH_64
 0x60000000

	)

1366 
	#EF_MIPS_ARCH_32R2
 0x70000000

	)

1367 
	#EF_MIPS_ARCH_64R2
 0x80000000

	)

1371 
	#E_MIPS_ARCH_1
 
EF_MIPS_ARCH_1


	)

1372 
	#E_MIPS_ARCH_2
 
EF_MIPS_ARCH_2


	)

1373 
	#E_MIPS_ARCH_3
 
EF_MIPS_ARCH_3


	)

1374 
	#E_MIPS_ARCH_4
 
EF_MIPS_ARCH_4


	)

1375 
	#E_MIPS_ARCH_5
 
EF_MIPS_ARCH_5


	)

1376 
	#E_MIPS_ARCH_32
 
EF_MIPS_ARCH_32


	)

1377 
	#E_MIPS_ARCH_64
 
EF_MIPS_ARCH_64


	)

1381 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1382 
	#SHN_MIPS_TEXT
 0xff01

	)

1383 
	#SHN_MIPS_DATA
 0xff02

	)

1384 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1385 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1389 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1390 
	#SHT_MIPS_MSYM
 0x70000001

	)

1391 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1392 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1393 
	#SHT_MIPS_UCODE
 0x70000004

	)

1394 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1395 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1396 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1397 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1398 
	#SHT_MIPS_RELD
 0x70000009

	)

1399 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1400 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1401 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1402 
	#SHT_MIPS_SHDR
 0x70000010

	)

1403 
	#SHT_MIPS_FDESC
 0x70000011

	)

1404 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1405 
	#SHT_MIPS_DENSE
 0x70000013

	)

1406 
	#SHT_MIPS_PDESC
 0x70000014

	)

1407 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1408 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1409 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1410 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1411 
	#SHT_MIPS_LINE
 0x70000019

	)

1412 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1413 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1414 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1415 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1416 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1417 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1418 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1419 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1420 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1421 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1422 
	#SHT_MIPS_XLATE
 0x70000024

	)

1423 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1424 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1425 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1426 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1427 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1431 
	#SHF_MIPS_GPREL
 0x10000000

	)

1432 
	#SHF_MIPS_MERGE
 0x20000000

	)

1433 
	#SHF_MIPS_ADDR
 0x40000000

	)

1434 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1435 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1436 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1437 
	#SHF_MIPS_NAMES
 0x02000000

	)

1438 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1444 
	#STO_MIPS_DEFAULT
 0x0

	)

1445 
	#STO_MIPS_INTERNAL
 0x1

	)

1446 
	#STO_MIPS_HIDDEN
 0x2

	)

1447 
	#STO_MIPS_PROTECTED
 0x3

	)

1448 
	#STO_MIPS_PLT
 0x8

	)

1449 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1452 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1460 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1461 
Elf32_W‹d
 
	mgt_unu£d
;

1462 } 
	mgt_hódî
;

1465 
Elf32_W‹d
 
	mgt_g_vÆue
;

1466 
Elf32_W‹d
 
	mgt_byãs
;

1467 } 
	mgt_íåy
;

1468 } 
	tElf32_g±ab
;

1474 
Elf32_W‹d
 
	mri_g¥mask
;

1475 
Elf32_W‹d
 
	mri_˝rmask
[4];

1476 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1477 } 
	tElf32_RegInfo
;

1483 
	mköd
;

1485 
	msize
;

1486 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1488 
Elf32_W‹d
 
	möfo
;

1489 } 
	tElf_O±i⁄s
;

1493 
	#ODK_NULL
 0

	)

1494 
	#ODK_REGINFO
 1

	)

1495 
	#ODK_EXCEPTIONS
 2

	)

1496 
	#ODK_PAD
 3

	)

1497 
	#ODK_HWPATCH
 4

	)

1498 
	#ODK_FILL
 5

	)

1499 
	#ODK_TAGS
 6

	)

1500 
	#ODK_HWAND
 7

	)

1501 
	#ODK_HWOR
 8

	)

1505 
	#OEX_FPU_MIN
 0x1‡

	)

1506 
	#OEX_FPU_MAX
 0x1f00

	)

1507 
	#OEX_PAGE0
 0x10000

	)

1508 
	#OEX_SMM
 0x20000

	)

1509 
	#OEX_FPDBUG
 0x40000

	)

1510 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1511 
	#OEX_DISMISS
 0x80000

	)

1513 
	#OEX_FPU_INVAL
 0x10

	)

1514 
	#OEX_FPU_DIV0
 0x08

	)

1515 
	#OEX_FPU_OFLO
 0x04

	)

1516 
	#OEX_FPU_UFLO
 0x02

	)

1517 
	#OEX_FPU_INEX
 0x01

	)

1521 
	#OHW_R4KEOP
 0x1

	)

1522 
	#OHW_R8KPFETCH
 0x2

	)

1523 
	#OHW_R5KEOP
 0x4

	)

1524 
	#OHW_R5KCVTL
 0x8

	)

1526 
	#OPAD_PREFIX
 0x1

	)

1527 
	#OPAD_POSTFIX
 0x2

	)

1528 
	#OPAD_SYMBOL
 0x4

	)

1534 
Elf32_W‹d
 
	mhwp_Êags1
;

1535 
Elf32_W‹d
 
	mhwp_Êags2
;

1536 } 
	tElf_O±i⁄s_Hw
;

1540 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1541 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1545 
	#R_MIPS_NONE
 0

	)

1546 
	#R_MIPS_16
 1

	)

1547 
	#R_MIPS_32
 2

	)

1548 
	#R_MIPS_REL32
 3

	)

1549 
	#R_MIPS_26
 4

	)

1550 
	#R_MIPS_HI16
 5

	)

1551 
	#R_MIPS_LO16
 6

	)

1552 
	#R_MIPS_GPREL16
 7

	)

1553 
	#R_MIPS_LITERAL
 8

	)

1554 
	#R_MIPS_GOT16
 9

	)

1555 
	#R_MIPS_PC16
 10

	)

1556 
	#R_MIPS_CALL16
 11

	)

1557 
	#R_MIPS_GPREL32
 12

	)

1559 
	#R_MIPS_SHIFT5
 16

	)

1560 
	#R_MIPS_SHIFT6
 17

	)

1561 
	#R_MIPS_64
 18

	)

1562 
	#R_MIPS_GOT_DISP
 19

	)

1563 
	#R_MIPS_GOT_PAGE
 20

	)

1564 
	#R_MIPS_GOT_OFST
 21

	)

1565 
	#R_MIPS_GOT_HI16
 22

	)

1566 
	#R_MIPS_GOT_LO16
 23

	)

1567 
	#R_MIPS_SUB
 24

	)

1568 
	#R_MIPS_INSERT_A
 25

	)

1569 
	#R_MIPS_INSERT_B
 26

	)

1570 
	#R_MIPS_DELETE
 27

	)

1571 
	#R_MIPS_HIGHER
 28

	)

1572 
	#R_MIPS_HIGHEST
 29

	)

1573 
	#R_MIPS_CALL_HI16
 30

	)

1574 
	#R_MIPS_CALL_LO16
 31

	)

1575 
	#R_MIPS_SCN_DISP
 32

	)

1576 
	#R_MIPS_REL16
 33

	)

1577 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1578 
	#R_MIPS_PJUMP
 35

	)

1579 
	#R_MIPS_RELGOT
 36

	)

1580 
	#R_MIPS_JALR
 37

	)

1581 
	#R_MIPS_TLS_DTPMOD32
 38

	)

1582 
	#R_MIPS_TLS_DTPREL32
 39

	)

1583 
	#R_MIPS_TLS_DTPMOD64
 40

	)

1584 
	#R_MIPS_TLS_DTPREL64
 41

	)

1585 
	#R_MIPS_TLS_GD
 42

	)

1586 
	#R_MIPS_TLS_LDM
 43

	)

1587 
	#R_MIPS_TLS_DTPREL_HI16
 44

	)

1588 
	#R_MIPS_TLS_DTPREL_LO16
 45

	)

1589 
	#R_MIPS_TLS_GOTTPREL
 46

	)

1590 
	#R_MIPS_TLS_TPREL32
 47

	)

1591 
	#R_MIPS_TLS_TPREL64
 48

	)

1592 
	#R_MIPS_TLS_TPREL_HI16
 49

	)

1593 
	#R_MIPS_TLS_TPREL_LO16
 50

	)

1594 
	#R_MIPS_GLOB_DAT
 51

	)

1595 
	#R_MIPS_COPY
 126

	)

1596 
	#R_MIPS_JUMP_SLOT
 127

	)

1598 
	#R_MIPS_NUM
 128

	)

1602 
	#PT_MIPS_REGINFO
 0x70000000

	)

1603 
	#PT_MIPS_RTPROC
 0x70000001

	)

1604 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1605 
	#PT_MIPS_ABIFLAGS
 0x70000003

	)

1609 
	#PF_MIPS_LOCAL
 0x10000000

	)

1613 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1614 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1615 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1616 
	#DT_MIPS_IVERSION
 0x70000004

	)

1617 
	#DT_MIPS_FLAGS
 0x70000005

	)

1618 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1619 
	#DT_MIPS_MSYM
 0x70000007

	)

1620 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1621 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1622 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1623 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1624 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1625 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1626 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1627 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1628 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1629 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1630 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1631 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1633 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1634 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1636 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1637 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1639 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1641 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1643 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1645 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1647 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1648 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1649 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1650 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1651 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1652 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1653 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1654 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1655 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1656 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1657 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1658 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1660 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1662 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1663 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1664 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1666 
	#DT_MIPS_PLTGOT
 0x70000032

	)

1670 
	#DT_MIPS_RWPLT
 0x70000034

	)

1674 
	#DT_MIPS_RLD_MAP_REL
 0x70000035

	)

1675 
	#DT_MIPS_NUM
 0x36

	)

1679 
	#RHF_NONE
 0

	)

1680 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

1681 
	#RHF_NOTPOT
 (1 << 1Ë

	)

1682 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

1683 
	#RHF_NO_MOVE
 (1 << 3)

	)

1684 
	#RHF_SGI_ONLY
 (1 << 4)

	)

1685 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

1686 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

1687 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

1688 
	#RHF_PIXIE
 (1 << 8)

	)

1689 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

1690 
	#RHF_REQUICKSTART
 (1 << 10)

	)

1691 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

1692 
	#RHF_CORD
 (1 << 12)

	)

1693 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

1694 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

1700 
Elf32_W‹d
 
	ml_«me
;

1701 
Elf32_W‹d
 
	ml_time_°amp
;

1702 
Elf32_W‹d
 
	ml_checksum
;

1703 
Elf32_W‹d
 
	ml_vîsi⁄
;

1704 
Elf32_W‹d
 
	ml_Êags
;

1705 } 
	tElf32_Lib
;

1709 
Elf64_W‹d
 
	ml_«me
;

1710 
Elf64_W‹d
 
	ml_time_°amp
;

1711 
Elf64_W‹d
 
	ml_checksum
;

1712 
Elf64_W‹d
 
	ml_vîsi⁄
;

1713 
Elf64_W‹d
 
	ml_Êags
;

1714 } 
	tElf64_Lib
;

1719 
	#LL_NONE
 0

	)

1720 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

1721 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

1722 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

1723 
	#LL_EXPORTS
 (1 << 3)

	)

1724 
	#LL_DELAY_LOAD
 (1 << 4)

	)

1725 
	#LL_DELTA
 (1 << 5)

	)

1729 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

1734 
Elf32_HÆf
 
	mvîsi⁄
;

1736 
	miß_Àvñ
;

1738 
	miß_ªv
;

1740 
	mg¥_size
;

1742 
	m˝r1_size
;

1744 
	m˝r2_size
;

1746 
	mÂ_abi
;

1748 
Elf32_W‹d
 
	miß_ext
;

1750 
Elf32_W‹d
 
	ma£s
;

1752 
Elf32_W‹d
 
	mÊags1
;

1753 
Elf32_W‹d
 
	mÊags2
;

1754 } 
	tElf_MIPS_ABIFœgs_v0
;

1758 
	#MIPS_AFL_REG_NONE
 0x00

	)

1759 
	#MIPS_AFL_REG_32
 0x01

	)

1760 
	#MIPS_AFL_REG_64
 0x02

	)

1761 
	#MIPS_AFL_REG_128
 0x03

	)

1765 
	#MIPS_AFL_ASE_DSP
 0x00000001

	)

1766 
	#MIPS_AFL_ASE_DSPR2
 0x00000002

	)

1767 
	#MIPS_AFL_ASE_EVA
 0x00000004

	)

1768 
	#MIPS_AFL_ASE_MCU
 0x00000008

	)

1769 
	#MIPS_AFL_ASE_MDMX
 0x00000010

	)

1770 
	#MIPS_AFL_ASE_MIPS3D
 0x00000020

	)

1771 
	#MIPS_AFL_ASE_MT
 0x00000040

	)

1772 
	#MIPS_AFL_ASE_SMARTMIPS
 0x00000080

	)

1773 
	#MIPS_AFL_ASE_VIRT
 0x00000100

	)

1774 
	#MIPS_AFL_ASE_MSA
 0x00000200

	)

1775 
	#MIPS_AFL_ASE_MIPS16
 0x00000400

	)

1776 
	#MIPS_AFL_ASE_MICROMIPS
 0x00000800

	)

1777 
	#MIPS_AFL_ASE_XPA
 0x00001000

	)

1778 
	#MIPS_AFL_ASE_MASK
 0x00001ff‡

	)

1782 
	#MIPS_AFL_EXT_XLR
 1

	)

1783 
	#MIPS_AFL_EXT_OCTEON2
 2

	)

1784 
	#MIPS_AFL_EXT_OCTEONP
 3

	)

1785 
	#MIPS_AFL_EXT_LOONGSON_3A
 4

	)

1786 
	#MIPS_AFL_EXT_OCTEON
 5

	)

1787 
	#MIPS_AFL_EXT_5900
 6

	)

1788 
	#MIPS_AFL_EXT_4650
 7

	)

1789 
	#MIPS_AFL_EXT_4010
 8

	)

1790 
	#MIPS_AFL_EXT_4100
 9

	)

1791 
	#MIPS_AFL_EXT_3900
 10

	)

1792 
	#MIPS_AFL_EXT_10000
 11

	)

1793 
	#MIPS_AFL_EXT_SB1
 12

	)

1794 
	#MIPS_AFL_EXT_4111
 13

	)

1795 
	#MIPS_AFL_EXT_4120
 14

	)

1796 
	#MIPS_AFL_EXT_5400
 15

	)

1797 
	#MIPS_AFL_EXT_5500
 16

	)

1798 
	#MIPS_AFL_EXT_LOONGSON_2E
 17

	)

1799 
	#MIPS_AFL_EXT_LOONGSON_2F
 18

	)

1802 
	#MIPS_AFL_FLAGS1_ODDSPREG
 1

	)

1808 
	mVÆ_GNU_MIPS_ABI_FP_ANY
 = 0,

1810 
	mVÆ_GNU_MIPS_ABI_FP_DOUBLE
 = 1,

1812 
	mVÆ_GNU_MIPS_ABI_FP_SINGLE
 = 2,

1814 
	mVÆ_GNU_MIPS_ABI_FP_SOFT
 = 3,

1816 
	mVÆ_GNU_MIPS_ABI_FP_OLD_64
 = 4,

1818 
	mVÆ_GNU_MIPS_ABI_FP_XX
 = 5,

1820 
	mVÆ_GNU_MIPS_ABI_FP_64
 = 6,

1822 
	mVÆ_GNU_MIPS_ABI_FP_64A
 = 7,

1824 
	mVÆ_GNU_MIPS_ABI_FP_MAX
 = 7

1831 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

1832 
	#EF_PARISC_EXT
 0x00020000

	)

1833 
	#EF_PARISC_LSB
 0x00040000

	)

1834 
	#EF_PARISC_WIDE
 0x00080000

	)

1835 
	#EF_PARISC_NO_KABP
 0x00100000

	)

1837 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

1838 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

1842 
	#EFA_PARISC_1_0
 0x020b

	)

1843 
	#EFA_PARISC_1_1
 0x0210

	)

1844 
	#EFA_PARISC_2_0
 0x0214

	)

1848 
	#SHN_PARISC_ANSI_COMMON
 0xff00

	)

1850 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

1854 
	#SHT_PARISC_EXT
 0x70000000

	)

1855 
	#SHT_PARISC_UNWIND
 0x70000001

	)

1856 
	#SHT_PARISC_DOC
 0x70000002

	)

1860 
	#SHF_PARISC_SHORT
 0x20000000

	)

1861 
	#SHF_PARISC_HUGE
 0x40000000

	)

1862 
	#SHF_PARISC_SBP
 0x80000000

	)

1866 
	#STT_PARISC_MILLICODE
 13

	)

1868 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

1869 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

1873 
	#R_PARISC_NONE
 0

	)

1874 
	#R_PARISC_DIR32
 1

	)

1875 
	#R_PARISC_DIR21L
 2

	)

1876 
	#R_PARISC_DIR17R
 3

	)

1877 
	#R_PARISC_DIR17F
 4

	)

1878 
	#R_PARISC_DIR14R
 6

	)

1879 
	#R_PARISC_PCREL32
 9

	)

1880 
	#R_PARISC_PCREL21L
 10

	)

1881 
	#R_PARISC_PCREL17R
 11

	)

1882 
	#R_PARISC_PCREL17F
 12

	)

1883 
	#R_PARISC_PCREL14R
 14

	)

1884 
	#R_PARISC_DPREL21L
 18

	)

1885 
	#R_PARISC_DPREL14R
 22

	)

1886 
	#R_PARISC_GPREL21L
 26

	)

1887 
	#R_PARISC_GPREL14R
 30

	)

1888 
	#R_PARISC_LTOFF21L
 34

	)

1889 
	#R_PARISC_LTOFF14R
 38

	)

1890 
	#R_PARISC_SECREL32
 41

	)

1891 
	#R_PARISC_SEGBASE
 48

	)

1892 
	#R_PARISC_SEGREL32
 49

	)

1893 
	#R_PARISC_PLTOFF21L
 50

	)

1894 
	#R_PARISC_PLTOFF14R
 54

	)

1895 
	#R_PARISC_LTOFF_FPTR32
 57

	)

1896 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

1897 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

1898 
	#R_PARISC_FPTR64
 64

	)

1899 
	#R_PARISC_PLABEL32
 65

	)

1900 
	#R_PARISC_PLABEL21L
 66

	)

1901 
	#R_PARISC_PLABEL14R
 70

	)

1902 
	#R_PARISC_PCREL64
 72

	)

1903 
	#R_PARISC_PCREL22F
 74

	)

1904 
	#R_PARISC_PCREL14WR
 75

	)

1905 
	#R_PARISC_PCREL14DR
 76

	)

1906 
	#R_PARISC_PCREL16F
 77

	)

1907 
	#R_PARISC_PCREL16WF
 78

	)

1908 
	#R_PARISC_PCREL16DF
 79

	)

1909 
	#R_PARISC_DIR64
 80

	)

1910 
	#R_PARISC_DIR14WR
 83

	)

1911 
	#R_PARISC_DIR14DR
 84

	)

1912 
	#R_PARISC_DIR16F
 85

	)

1913 
	#R_PARISC_DIR16WF
 86

	)

1914 
	#R_PARISC_DIR16DF
 87

	)

1915 
	#R_PARISC_GPREL64
 88

	)

1916 
	#R_PARISC_GPREL14WR
 91

	)

1917 
	#R_PARISC_GPREL14DR
 92

	)

1918 
	#R_PARISC_GPREL16F
 93

	)

1919 
	#R_PARISC_GPREL16WF
 94

	)

1920 
	#R_PARISC_GPREL16DF
 95

	)

1921 
	#R_PARISC_LTOFF64
 96

	)

1922 
	#R_PARISC_LTOFF14WR
 99

	)

1923 
	#R_PARISC_LTOFF14DR
 100

	)

1924 
	#R_PARISC_LTOFF16F
 101

	)

1925 
	#R_PARISC_LTOFF16WF
 102

	)

1926 
	#R_PARISC_LTOFF16DF
 103

	)

1927 
	#R_PARISC_SECREL64
 104

	)

1928 
	#R_PARISC_SEGREL64
 112

	)

1929 
	#R_PARISC_PLTOFF14WR
 115

	)

1930 
	#R_PARISC_PLTOFF14DR
 116

	)

1931 
	#R_PARISC_PLTOFF16F
 117

	)

1932 
	#R_PARISC_PLTOFF16WF
 118

	)

1933 
	#R_PARISC_PLTOFF16DF
 119

	)

1934 
	#R_PARISC_LTOFF_FPTR64
 120

	)

1935 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

1936 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

1937 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

1938 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

1939 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

1940 
	#R_PARISC_LORESERVE
 128

	)

1941 
	#R_PARISC_COPY
 128

	)

1942 
	#R_PARISC_IPLT
 129

	)

1943 
	#R_PARISC_EPLT
 130

	)

1944 
	#R_PARISC_TPREL32
 153

	)

1945 
	#R_PARISC_TPREL21L
 154

	)

1946 
	#R_PARISC_TPREL14R
 158

	)

1947 
	#R_PARISC_LTOFF_TP21L
 162

	)

1948 
	#R_PARISC_LTOFF_TP14R
 166

	)

1949 
	#R_PARISC_LTOFF_TP14F
 167

	)

1950 
	#R_PARISC_TPREL64
 216

	)

1951 
	#R_PARISC_TPREL14WR
 219

	)

1952 
	#R_PARISC_TPREL14DR
 220

	)

1953 
	#R_PARISC_TPREL16F
 221

	)

1954 
	#R_PARISC_TPREL16WF
 222

	)

1955 
	#R_PARISC_TPREL16DF
 223

	)

1956 
	#R_PARISC_LTOFF_TP64
 224

	)

1957 
	#R_PARISC_LTOFF_TP14WR
 227

	)

1958 
	#R_PARISC_LTOFF_TP14DR
 228

	)

1959 
	#R_PARISC_LTOFF_TP16F
 229

	)

1960 
	#R_PARISC_LTOFF_TP16WF
 230

	)

1961 
	#R_PARISC_LTOFF_TP16DF
 231

	)

1962 
	#R_PARISC_GNU_VTENTRY
 232

	)

1963 
	#R_PARISC_GNU_VTINHERIT
 233

	)

1964 
	#R_PARISC_TLS_GD21L
 234

	)

1965 
	#R_PARISC_TLS_GD14R
 235

	)

1966 
	#R_PARISC_TLS_GDCALL
 236

	)

1967 
	#R_PARISC_TLS_LDM21L
 237

	)

1968 
	#R_PARISC_TLS_LDM14R
 238

	)

1969 
	#R_PARISC_TLS_LDMCALL
 239

	)

1970 
	#R_PARISC_TLS_LDO21L
 240

	)

1971 
	#R_PARISC_TLS_LDO14R
 241

	)

1972 
	#R_PARISC_TLS_DTPMOD32
 242

	)

1973 
	#R_PARISC_TLS_DTPMOD64
 243

	)

1974 
	#R_PARISC_TLS_DTPOFF32
 244

	)

1975 
	#R_PARISC_TLS_DTPOFF64
 245

	)

1976 
	#R_PARISC_TLS_LE21L
 
R_PARISC_TPREL21L


	)

1977 
	#R_PARISC_TLS_LE14R
 
R_PARISC_TPREL14R


	)

1978 
	#R_PARISC_TLS_IE21L
 
R_PARISC_LTOFF_TP21L


	)

1979 
	#R_PARISC_TLS_IE14R
 
R_PARISC_LTOFF_TP14R


	)

1980 
	#R_PARISC_TLS_TPREL32
 
R_PARISC_TPREL32


	)

1981 
	#R_PARISC_TLS_TPREL64
 
R_PARISC_TPREL64


	)

1982 
	#R_PARISC_HIRESERVE
 255

	)

1986 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

1987 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

1988 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

1989 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

1990 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

1991 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

1992 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

1993 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

1994 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

1995 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

1996 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

1997 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

1998 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

1999 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

2000 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2002 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

2003 
	#PT_PARISC_UNWIND
 0x70000001

	)

2007 
	#PF_PARISC_SBP
 0x08000000

	)

2009 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

2010 
	#PF_HP_FAR_SHARED
 0x00200000

	)

2011 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

2012 
	#PF_HP_CODE
 0x01000000

	)

2013 
	#PF_HP_MODIFY
 0x02000000

	)

2014 
	#PF_HP_LAZYSWAP
 0x04000000

	)

2015 
	#PF_HP_SBP
 0x08000000

	)

2022 
	#EF_ALPHA_32BIT
 1

	)

2023 
	#EF_ALPHA_CANRELAX
 2

	)

2028 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

2029 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

2033 
	#SHF_ALPHA_GPREL
 0x10000000

	)

2036 
	#STO_ALPHA_NOPV
 0x80

	)

2037 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

2041 
	#R_ALPHA_NONE
 0

	)

2042 
	#R_ALPHA_REFLONG
 1

	)

2043 
	#R_ALPHA_REFQUAD
 2

	)

2044 
	#R_ALPHA_GPREL32
 3

	)

2045 
	#R_ALPHA_LITERAL
 4

	)

2046 
	#R_ALPHA_LITUSE
 5

	)

2047 
	#R_ALPHA_GPDISP
 6

	)

2048 
	#R_ALPHA_BRADDR
 7

	)

2049 
	#R_ALPHA_HINT
 8

	)

2050 
	#R_ALPHA_SREL16
 9

	)

2051 
	#R_ALPHA_SREL32
 10

	)

2052 
	#R_ALPHA_SREL64
 11

	)

2053 
	#R_ALPHA_GPRELHIGH
 17

	)

2054 
	#R_ALPHA_GPRELLOW
 18

	)

2055 
	#R_ALPHA_GPREL16
 19

	)

2056 
	#R_ALPHA_COPY
 24

	)

2057 
	#R_ALPHA_GLOB_DAT
 25

	)

2058 
	#R_ALPHA_JMP_SLOT
 26

	)

2059 
	#R_ALPHA_RELATIVE
 27

	)

2060 
	#R_ALPHA_TLS_GD_HI
 28

	)

2061 
	#R_ALPHA_TLSGD
 29

	)

2062 
	#R_ALPHA_TLS_LDM
 30

	)

2063 
	#R_ALPHA_DTPMOD64
 31

	)

2064 
	#R_ALPHA_GOTDTPREL
 32

	)

2065 
	#R_ALPHA_DTPREL64
 33

	)

2066 
	#R_ALPHA_DTPRELHI
 34

	)

2067 
	#R_ALPHA_DTPRELLO
 35

	)

2068 
	#R_ALPHA_DTPREL16
 36

	)

2069 
	#R_ALPHA_GOTTPREL
 37

	)

2070 
	#R_ALPHA_TPREL64
 38

	)

2071 
	#R_ALPHA_TPRELHI
 39

	)

2072 
	#R_ALPHA_TPRELLO
 40

	)

2073 
	#R_ALPHA_TPREL16
 41

	)

2075 
	#R_ALPHA_NUM
 46

	)

2078 
	#LITUSE_ALPHA_ADDR
 0

	)

2079 
	#LITUSE_ALPHA_BASE
 1

	)

2080 
	#LITUSE_ALPHA_BYTOFF
 2

	)

2081 
	#LITUSE_ALPHA_JSR
 3

	)

2082 
	#LITUSE_ALPHA_TLS_GD
 4

	)

2083 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

2086 
	#DT_ALPHA_PLTRO
 (
DT_LOPROC
 + 0)

	)

2087 
	#DT_ALPHA_NUM
 1

	)

2092 
	#EF_PPC_EMB
 0x80000000

	)

2095 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

2096 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

2100 
	#R_PPC_NONE
 0

	)

2101 
	#R_PPC_ADDR32
 1

	)

2102 
	#R_PPC_ADDR24
 2

	)

2103 
	#R_PPC_ADDR16
 3

	)

2104 
	#R_PPC_ADDR16_LO
 4

	)

2105 
	#R_PPC_ADDR16_HI
 5

	)

2106 
	#R_PPC_ADDR16_HA
 6

	)

2107 
	#R_PPC_ADDR14
 7

	)

2108 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

2109 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

2110 
	#R_PPC_REL24
 10

	)

2111 
	#R_PPC_REL14
 11

	)

2112 
	#R_PPC_REL14_BRTAKEN
 12

	)

2113 
	#R_PPC_REL14_BRNTAKEN
 13

	)

2114 
	#R_PPC_GOT16
 14

	)

2115 
	#R_PPC_GOT16_LO
 15

	)

2116 
	#R_PPC_GOT16_HI
 16

	)

2117 
	#R_PPC_GOT16_HA
 17

	)

2118 
	#R_PPC_PLTREL24
 18

	)

2119 
	#R_PPC_COPY
 19

	)

2120 
	#R_PPC_GLOB_DAT
 20

	)

2121 
	#R_PPC_JMP_SLOT
 21

	)

2122 
	#R_PPC_RELATIVE
 22

	)

2123 
	#R_PPC_LOCAL24PC
 23

	)

2124 
	#R_PPC_UADDR32
 24

	)

2125 
	#R_PPC_UADDR16
 25

	)

2126 
	#R_PPC_REL32
 26

	)

2127 
	#R_PPC_PLT32
 27

	)

2128 
	#R_PPC_PLTREL32
 28

	)

2129 
	#R_PPC_PLT16_LO
 29

	)

2130 
	#R_PPC_PLT16_HI
 30

	)

2131 
	#R_PPC_PLT16_HA
 31

	)

2132 
	#R_PPC_SDAREL16
 32

	)

2133 
	#R_PPC_SECTOFF
 33

	)

2134 
	#R_PPC_SECTOFF_LO
 34

	)

2135 
	#R_PPC_SECTOFF_HI
 35

	)

2136 
	#R_PPC_SECTOFF_HA
 36

	)

2139 
	#R_PPC_TLS
 67

	)

2140 
	#R_PPC_DTPMOD32
 68

	)

2141 
	#R_PPC_TPREL16
 69

	)

2142 
	#R_PPC_TPREL16_LO
 70

	)

2143 
	#R_PPC_TPREL16_HI
 71

	)

2144 
	#R_PPC_TPREL16_HA
 72

	)

2145 
	#R_PPC_TPREL32
 73

	)

2146 
	#R_PPC_DTPREL16
 74

	)

2147 
	#R_PPC_DTPREL16_LO
 75

	)

2148 
	#R_PPC_DTPREL16_HI
 76

	)

2149 
	#R_PPC_DTPREL16_HA
 77

	)

2150 
	#R_PPC_DTPREL32
 78

	)

2151 
	#R_PPC_GOT_TLSGD16
 79

	)

2152 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

2153 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

2154 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

2155 
	#R_PPC_GOT_TLSLD16
 83

	)

2156 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

2157 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

2158 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

2159 
	#R_PPC_GOT_TPREL16
 87

	)

2160 
	#R_PPC_GOT_TPREL16_LO
 88

	)

2161 
	#R_PPC_GOT_TPREL16_HI
 89

	)

2162 
	#R_PPC_GOT_TPREL16_HA
 90

	)

2163 
	#R_PPC_GOT_DTPREL16
 91

	)

2164 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

2165 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

2166 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

2167 
	#R_PPC_TLSGD
 95

	)

2168 
	#R_PPC_TLSLD
 96

	)

2172 
	#R_PPC_EMB_NADDR32
 101

	)

2173 
	#R_PPC_EMB_NADDR16
 102

	)

2174 
	#R_PPC_EMB_NADDR16_LO
 103

	)

2175 
	#R_PPC_EMB_NADDR16_HI
 104

	)

2176 
	#R_PPC_EMB_NADDR16_HA
 105

	)

2177 
	#R_PPC_EMB_SDAI16
 106

	)

2178 
	#R_PPC_EMB_SDA2I16
 107

	)

2179 
	#R_PPC_EMB_SDA2REL
 108

	)

2180 
	#R_PPC_EMB_SDA21
 109

	)

2181 
	#R_PPC_EMB_MRKREF
 110

	)

2182 
	#R_PPC_EMB_RELSEC16
 111

	)

2183 
	#R_PPC_EMB_RELST_LO
 112

	)

2184 
	#R_PPC_EMB_RELST_HI
 113

	)

2185 
	#R_PPC_EMB_RELST_HA
 114

	)

2186 
	#R_PPC_EMB_BIT_FLD
 115

	)

2187 
	#R_PPC_EMB_RELSDA
 116

	)

2190 
	#R_PPC_DIAB_SDA21_LO
 180

	)

2191 
	#R_PPC_DIAB_SDA21_HI
 181

	)

2192 
	#R_PPC_DIAB_SDA21_HA
 182

	)

2193 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

2194 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

2195 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

2198 
	#R_PPC_IRELATIVE
 248

	)

2201 
	#R_PPC_REL16
 249

	)

2202 
	#R_PPC_REL16_LO
 250

	)

2203 
	#R_PPC_REL16_HI
 251

	)

2204 
	#R_PPC_REL16_HA
 252

	)

2208 
	#R_PPC_TOC16
 255

	)

2211 
	#DT_PPC_GOT
 (
DT_LOPROC
 + 0)

	)

2212 
	#DT_PPC_OPT
 (
DT_LOPROC
 + 1)

	)

2213 
	#DT_PPC_NUM
 2

	)

2216 
	#PPC_OPT_TLS
 1

	)

2219 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

2220 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

2221 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

2222 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

2223 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

2224 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

2225 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

2226 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

2227 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

2228 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

2229 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

2230 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

2231 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

2232 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

2233 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

2234 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2235 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2236 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2238 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2239 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2240 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2241 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2243 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2244 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2245 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2246 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2247 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2248 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2249 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2250 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2252 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2253 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2254 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2255 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2256 
	#R_PPC64_ADDR30
 37

	)

2257 
	#R_PPC64_ADDR64
 38

	)

2258 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2259 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2260 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2261 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2262 
	#R_PPC64_UADDR64
 43

	)

2263 
	#R_PPC64_REL64
 44

	)

2264 
	#R_PPC64_PLT64
 45

	)

2265 
	#R_PPC64_PLTREL64
 46

	)

2266 
	#R_PPC64_TOC16
 47

	)

2267 
	#R_PPC64_TOC16_LO
 48

	)

2268 
	#R_PPC64_TOC16_HI
 49

	)

2269 
	#R_PPC64_TOC16_HA
 50

	)

2270 
	#R_PPC64_TOC
 51

	)

2271 
	#R_PPC64_PLTGOT16
 52

	)

2272 
	#R_PPC64_PLTGOT16_LO
 53

	)

2273 
	#R_PPC64_PLTGOT16_HI
 54

	)

2274 
	#R_PPC64_PLTGOT16_HA
 55

	)

2276 
	#R_PPC64_ADDR16_DS
 56

	)

2277 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2278 
	#R_PPC64_GOT16_DS
 58

	)

2279 
	#R_PPC64_GOT16_LO_DS
 59

	)

2280 
	#R_PPC64_PLT16_LO_DS
 60

	)

2281 
	#R_PPC64_SECTOFF_DS
 61

	)

2282 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2283 
	#R_PPC64_TOC16_DS
 63

	)

2284 
	#R_PPC64_TOC16_LO_DS
 64

	)

2285 
	#R_PPC64_PLTGOT16_DS
 65

	)

2286 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2289 
	#R_PPC64_TLS
 67

	)

2290 
	#R_PPC64_DTPMOD64
 68

	)

2291 
	#R_PPC64_TPREL16
 69

	)

2292 
	#R_PPC64_TPREL16_LO
 70

	)

2293 
	#R_PPC64_TPREL16_HI
 71

	)

2294 
	#R_PPC64_TPREL16_HA
 72

	)

2295 
	#R_PPC64_TPREL64
 73

	)

2296 
	#R_PPC64_DTPREL16
 74

	)

2297 
	#R_PPC64_DTPREL16_LO
 75

	)

2298 
	#R_PPC64_DTPREL16_HI
 76

	)

2299 
	#R_PPC64_DTPREL16_HA
 77

	)

2300 
	#R_PPC64_DTPREL64
 78

	)

2301 
	#R_PPC64_GOT_TLSGD16
 79

	)

2302 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2303 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2304 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2305 
	#R_PPC64_GOT_TLSLD16
 83

	)

2306 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2307 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2308 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2309 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2310 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2311 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2312 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2313 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2314 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2315 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2316 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2317 
	#R_PPC64_TPREL16_DS
 95

	)

2318 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2319 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2320 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2321 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2322 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2323 
	#R_PPC64_DTPREL16_DS
 101

	)

2324 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2325 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2326 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2327 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2328 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2329 
	#R_PPC64_TLSGD
 107

	)

2330 
	#R_PPC64_TLSLD
 108

	)

2331 
	#R_PPC64_TOCSAVE
 109

	)

2334 
	#R_PPC64_ADDR16_HIGH
 110

	)

2335 
	#R_PPC64_ADDR16_HIGHA
 111

	)

2336 
	#R_PPC64_TPREL16_HIGH
 112

	)

2337 
	#R_PPC64_TPREL16_HIGHA
 113

	)

2338 
	#R_PPC64_DTPREL16_HIGH
 114

	)

2339 
	#R_PPC64_DTPREL16_HIGHA
 115

	)

2342 
	#R_PPC64_JMP_IREL
 247

	)

2343 
	#R_PPC64_IRELATIVE
 248

	)

2344 
	#R_PPC64_REL16
 249

	)

2345 
	#R_PPC64_REL16_LO
 250

	)

2346 
	#R_PPC64_REL16_HI
 251

	)

2347 
	#R_PPC64_REL16_HA
 252

	)

2353 
	#EF_PPC64_ABI
 3

	)

2356 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2357 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2358 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2359 
	#DT_PPC64_OPT
 (
DT_LOPROC
 + 3)

	)

2360 
	#DT_PPC64_NUM
 4

	)

2363 
	#PPC64_OPT_TLS
 1

	)

2364 
	#PPC64_OPT_MULTI_TOC
 2

	)

2367 
	#STO_PPC64_LOCAL_BIT
 5

	)

2368 
	#STO_PPC64_LOCAL_MASK
 (7 << 
STO_PPC64_LOCAL_BIT
)

	)

2369 
	#PPC64_LOCAL_ENTRY_OFFSET
(
Ÿhî
) \

2370 (((1 << (((
Ÿhî
Ë& 
STO_PPC64_LOCAL_MASK
Ë>> 
STO_PPC64_LOCAL_BIT
)Ë>> 2Ë<< 2)

	)

2376 
	#EF_ARM_RELEXEC
 0x01

	)

2377 
	#EF_ARM_HASENTRY
 0x02

	)

2378 
	#EF_ARM_INTERWORK
 0x04

	)

2379 
	#EF_ARM_APCS_26
 0x08

	)

2380 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2381 
	#EF_ARM_PIC
 0x20

	)

2382 
	#EF_ARM_ALIGN8
 0x40

	)

2383 
	#EF_ARM_NEW_ABI
 0x80

	)

2384 
	#EF_ARM_OLD_ABI
 0x100

	)

2385 
	#EF_ARM_SOFT_FLOAT
 0x200

	)

2386 
	#EF_ARM_VFP_FLOAT
 0x400

	)

2387 
	#EF_ARM_MAVERICK_FLOAT
 0x800

	)

2389 
	#EF_ARM_ABI_FLOAT_SOFT
 0x200

	)

2390 
	#EF_ARM_ABI_FLOAT_HARD
 0x400

	)

2395 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2396 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2397 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2398 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2401 
	#EF_ARM_BE8
 0x00800000

	)

2402 
	#EF_ARM_LE8
 0x00400000

	)

2404 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2405 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2406 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2407 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2408 
	#EF_ARM_EABI_VER3
 0x03000000

	)

2409 
	#EF_ARM_EABI_VER4
 0x04000000

	)

2410 
	#EF_ARM_EABI_VER5
 0x05000000

	)

2413 
	#STT_ARM_TFUNC
 
STT_LOPROC


	)

2414 
	#STT_ARM_16BIT
 
STT_HIPROC


	)

2417 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2418 
	#SHF_ARM_COMDEF
 0x80000000

	)

2422 
	#PF_ARM_SB
 0x10000000

	)

2424 
	#PF_ARM_PI
 0x20000000

	)

2425 
	#PF_ARM_ABS
 0x40000000

	)

2428 
	#PT_ARM_EXIDX
 (
PT_LOPROC
 + 1Ë

	)

2431 
	#SHT_ARM_EXIDX
 (
SHT_LOPROC
 + 1Ë

	)

2432 
	#SHT_ARM_PREEMPTMAP
 (
SHT_LOPROC
 + 2Ë

	)

2433 
	#SHT_ARM_ATTRIBUTES
 (
SHT_LOPROC
 + 3Ë

	)

2438 
	#R_AARCH64_NONE
 0

	)

2441 
	#R_AARCH64_P32_ABS32
 1

	)

2442 
	#R_AARCH64_P32_COPY
 180

	)

2443 
	#R_AARCH64_P32_GLOB_DAT
 181

	)

2444 
	#R_AARCH64_P32_JUMP_SLOT
 182

	)

2445 
	#R_AARCH64_P32_RELATIVE
 183

	)

2446 
	#R_AARCH64_P32_TLS_DTPMOD
 184

	)

2447 
	#R_AARCH64_P32_TLS_DTPREL
 185

	)

2448 
	#R_AARCH64_P32_TLS_TPREL
 186

	)

2449 
	#R_AARCH64_P32_TLSDESC
 187

	)

2450 
	#R_AARCH64_P32_IRELATIVE
 188

	)

2453 
	#R_AARCH64_ABS64
 257

	)

2454 
	#R_AARCH64_ABS32
 258

	)

2455 
	#R_AARCH64_ABS16
 259

	)

2456 
	#R_AARCH64_PREL64
 260

	)

2457 
	#R_AARCH64_PREL32
 261

	)

2458 
	#R_AARCH64_PREL16
 262

	)

2459 
	#R_AARCH64_MOVW_UABS_G0
 263

	)

2460 
	#R_AARCH64_MOVW_UABS_G0_NC
 264

	)

2461 
	#R_AARCH64_MOVW_UABS_G1
 265

	)

2462 
	#R_AARCH64_MOVW_UABS_G1_NC
 266

	)

2463 
	#R_AARCH64_MOVW_UABS_G2
 267

	)

2464 
	#R_AARCH64_MOVW_UABS_G2_NC
 268

	)

2465 
	#R_AARCH64_MOVW_UABS_G3
 269

	)

2466 
	#R_AARCH64_MOVW_SABS_G0
 270

	)

2467 
	#R_AARCH64_MOVW_SABS_G1
 271

	)

2468 
	#R_AARCH64_MOVW_SABS_G2
 272

	)

2469 
	#R_AARCH64_LD_PREL_LO19
 273

	)

2470 
	#R_AARCH64_ADR_PREL_LO21
 274

	)

2471 
	#R_AARCH64_ADR_PREL_PG_HI21
 275

	)

2472 
	#R_AARCH64_ADR_PREL_PG_HI21_NC
 276

	)

2473 
	#R_AARCH64_ADD_ABS_LO12_NC
 277

	)

2474 
	#R_AARCH64_LDST8_ABS_LO12_NC
 278

	)

2475 
	#R_AARCH64_TSTBR14
 279

	)

2476 
	#R_AARCH64_CONDBR19
 280

	)

2477 
	#R_AARCH64_JUMP26
 282

	)

2478 
	#R_AARCH64_CALL26
 283

	)

2479 
	#R_AARCH64_LDST16_ABS_LO12_NC
 284

	)

2480 
	#R_AARCH64_LDST32_ABS_LO12_NC
 285

	)

2481 
	#R_AARCH64_LDST64_ABS_LO12_NC
 286

	)

2482 
	#R_AARCH64_MOVW_PREL_G0
 287

	)

2483 
	#R_AARCH64_MOVW_PREL_G0_NC
 288

	)

2484 
	#R_AARCH64_MOVW_PREL_G1
 289

	)

2485 
	#R_AARCH64_MOVW_PREL_G1_NC
 290

	)

2486 
	#R_AARCH64_MOVW_PREL_G2
 291

	)

2487 
	#R_AARCH64_MOVW_PREL_G2_NC
 292

	)

2488 
	#R_AARCH64_MOVW_PREL_G3
 293

	)

2489 
	#R_AARCH64_LDST128_ABS_LO12_NC
 299

	)

2490 
	#R_AARCH64_MOVW_GOTOFF_G0
 300

	)

2491 
	#R_AARCH64_MOVW_GOTOFF_G0_NC
 301

	)

2492 
	#R_AARCH64_MOVW_GOTOFF_G1
 302

	)

2493 
	#R_AARCH64_MOVW_GOTOFF_G1_NC
 303

	)

2494 
	#R_AARCH64_MOVW_GOTOFF_G2
 304

	)

2495 
	#R_AARCH64_MOVW_GOTOFF_G2_NC
 305

	)

2496 
	#R_AARCH64_MOVW_GOTOFF_G3
 306

	)

2497 
	#R_AARCH64_GOTREL64
 307

	)

2498 
	#R_AARCH64_GOTREL32
 308

	)

2499 
	#R_AARCH64_GOT_LD_PREL19
 309

	)

2500 
	#R_AARCH64_LD64_GOTOFF_LO15
 310

	)

2501 
	#R_AARCH64_ADR_GOT_PAGE
 311

	)

2502 
	#R_AARCH64_LD64_GOT_LO12_NC
 312

	)

2503 
	#R_AARCH64_LD64_GOTPAGE_LO15
 313

	)

2504 
	#R_AARCH64_TLSGD_ADR_PREL21
 512

	)

2505 
	#R_AARCH64_TLSGD_ADR_PAGE21
 513

	)

2506 
	#R_AARCH64_TLSGD_ADD_LO12_NC
 514

	)

2507 
	#R_AARCH64_TLSGD_MOVW_G1
 515

	)

2508 
	#R_AARCH64_TLSGD_MOVW_G0_NC
 516

	)

2509 
	#R_AARCH64_TLSLD_ADR_PREL21
 517

	)

2510 
	#R_AARCH64_TLSLD_ADR_PAGE21
 518

	)

2511 
	#R_AARCH64_TLSLD_ADD_LO12_NC
 519

	)

2512 
	#R_AARCH64_TLSLD_MOVW_G1
 520

	)

2513 
	#R_AARCH64_TLSLD_MOVW_G0_NC
 521

	)

2514 
	#R_AARCH64_TLSLD_LD_PREL19
 522

	)

2515 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G2
 523

	)

2516 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1
 524

	)

2517 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC
 525

	)

2518 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0
 526

	)

2519 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC
 527

	)

2520 
	#R_AARCH64_TLSLD_ADD_DTPREL_HI12
 528

	)

2521 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12
 529

	)

2522 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC
 530

	)

2523 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12
 531

	)

2524 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC
 532

	)

2525 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12
 533

	)

2526 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC
 534

	)

2527 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12
 535

	)

2528 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC
 536

	)

2529 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12
 537

	)

2530 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC
 538

	)

2531 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G1
 539

	)

2532 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC
 540

	)

2533 
	#R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21
 541

	)

2534 
	#R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC
 542

	)

2535 
	#R_AARCH64_TLSIE_LD_GOTTPREL_PREL19
 543

	)

2536 
	#R_AARCH64_TLSLE_MOVW_TPREL_G2
 544

	)

2537 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1
 545

	)

2538 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1_NC
 546

	)

2539 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0
 547

	)

2540 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0_NC
 548

	)

2541 
	#R_AARCH64_TLSLE_ADD_TPREL_HI12
 549

	)

2542 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12
 550

	)

2543 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12_NC
 551

	)

2544 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12
 552

	)

2545 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC
 553

	)

2546 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12
 554

	)

2547 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC
 555

	)

2548 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12
 556

	)

2549 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC
 557

	)

2550 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12
 558

	)

2551 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC
 559

	)

2552 
	#R_AARCH64_TLSDESC_LD_PREL19
 560

	)

2553 
	#R_AARCH64_TLSDESC_ADR_PREL21
 561

	)

2554 
	#R_AARCH64_TLSDESC_ADR_PAGE21
 562

	)

2555 
	#R_AARCH64_TLSDESC_LD64_LO12
 563

	)

2556 
	#R_AARCH64_TLSDESC_ADD_LO12
 564

	)

2557 
	#R_AARCH64_TLSDESC_OFF_G1
 565

	)

2558 
	#R_AARCH64_TLSDESC_OFF_G0_NC
 566

	)

2559 
	#R_AARCH64_TLSDESC_LDR
 567

	)

2560 
	#R_AARCH64_TLSDESC_ADD
 568

	)

2561 
	#R_AARCH64_TLSDESC_CALL
 569

	)

2562 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12
 570

	)

2563 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC
 571

	)

2564 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12
 572

	)

2565 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC
 573

	)

2566 
	#R_AARCH64_COPY
 1024

	)

2567 
	#R_AARCH64_GLOB_DAT
 1025

	)

2568 
	#R_AARCH64_JUMP_SLOT
 1026

	)

2569 
	#R_AARCH64_RELATIVE
 1027

	)

2570 
	#R_AARCH64_TLS_DTPMOD
 1028

	)

2571 
	#R_AARCH64_TLS_DTPREL
 1029

	)

2572 
	#R_AARCH64_TLS_TPREL
 1030

	)

2573 
	#R_AARCH64_TLSDESC
 1031

	)

2574 
	#R_AARCH64_IRELATIVE
 1032

	)

2578 
	#R_ARM_NONE
 0

	)

2579 
	#R_ARM_PC24
 1

	)

2581 
	#R_ARM_ABS32
 2

	)

2582 
	#R_ARM_REL32
 3

	)

2583 
	#R_ARM_PC13
 4

	)

2584 
	#R_ARM_ABS16
 5

	)

2585 
	#R_ARM_ABS12
 6

	)

2586 
	#R_ARM_THM_ABS5
 7

	)

2587 
	#R_ARM_ABS8
 8

	)

2588 
	#R_ARM_SBREL32
 9

	)

2589 
	#R_ARM_THM_PC22
 10

	)

2590 
	#R_ARM_THM_PC8
 11

	)

2592 
	#R_ARM_AMP_VCALL9
 12

	)

2593 
	#R_ARM_SWI24
 13

	)

2594 
	#R_ARM_TLS_DESC
 13

	)

2595 
	#R_ARM_THM_SWI8
 14

	)

2596 
	#R_ARM_XPC25
 15

	)

2597 
	#R_ARM_THM_XPC22
 16

	)

2598 
	#R_ARM_TLS_DTPMOD32
 17

	)

2599 
	#R_ARM_TLS_DTPOFF32
 18

	)

2600 
	#R_ARM_TLS_TPOFF32
 19

	)

2601 
	#R_ARM_COPY
 20

	)

2602 
	#R_ARM_GLOB_DAT
 21

	)

2603 
	#R_ARM_JUMP_SLOT
 22

	)

2604 
	#R_ARM_RELATIVE
 23

	)

2605 
	#R_ARM_GOTOFF
 24

	)

2606 
	#R_ARM_GOTPC
 25

	)

2607 
	#R_ARM_GOT32
 26

	)

2608 
	#R_ARM_PLT32
 27

	)

2609 
	#R_ARM_CALL
 28

	)

2610 
	#R_ARM_JUMP24
 29

	)

2612 
	#R_ARM_THM_JUMP24
 30

	)

2613 
	#R_ARM_BASE_ABS
 31

	)

2614 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2615 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2616 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2617 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2618 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2619 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2620 
	#R_ARM_TARGET1
 38

	)

2621 
	#R_ARM_SBREL31
 39

	)

2622 
	#R_ARM_V4BX
 40

	)

2623 
	#R_ARM_TARGET2
 41

	)

2624 
	#R_ARM_PREL31
 42

	)

2625 
	#R_ARM_MOVW_ABS_NC
 43

	)

2626 
	#R_ARM_MOVT_ABS
 44

	)

2627 
	#R_ARM_MOVW_PREL_NC
 45

	)

2628 
	#R_ARM_MOVT_PREL
 46

	)

2629 
	#R_ARM_THM_MOVW_ABS_NC
 47

	)

2630 
	#R_ARM_THM_MOVT_ABS
 48

	)

2632 
	#R_ARM_THM_MOVW_PREL_NC
 49

	)

2634 
	#R_ARM_THM_MOVT_PREL
 50

	)

2636 
	#R_ARM_THM_JUMP19
 51

	)

2638 
	#R_ARM_THM_JUMP6
 52

	)

2640 
	#R_ARM_THM_ALU_PREL_11_0
 53

	)

2642 
	#R_ARM_THM_PC12
 54

	)

2644 
	#R_ARM_ABS32_NOI
 55

	)

2645 
	#R_ARM_REL32_NOI
 56

	)

2646 
	#R_ARM_ALU_PC_G0_NC
 57

	)

2647 
	#R_ARM_ALU_PC_G0
 58

	)

2648 
	#R_ARM_ALU_PC_G1_NC
 59

	)

2649 
	#R_ARM_ALU_PC_G1
 60

	)

2650 
	#R_ARM_ALU_PC_G2
 61

	)

2651 
	#R_ARM_LDR_PC_G1
 62

	)

2652 
	#R_ARM_LDR_PC_G2
 63

	)

2653 
	#R_ARM_LDRS_PC_G0
 64

	)

2655 
	#R_ARM_LDRS_PC_G1
 65

	)

2657 
	#R_ARM_LDRS_PC_G2
 66

	)

2659 
	#R_ARM_LDC_PC_G0
 67

	)

2660 
	#R_ARM_LDC_PC_G1
 68

	)

2661 
	#R_ARM_LDC_PC_G2
 69

	)

2662 
	#R_ARM_ALU_SB_G0_NC
 70

	)

2663 
	#R_ARM_ALU_SB_G0
 71

	)

2664 
	#R_ARM_ALU_SB_G1_NC
 72

	)

2665 
	#R_ARM_ALU_SB_G1
 73

	)

2666 
	#R_ARM_ALU_SB_G2
 74

	)

2667 
	#R_ARM_LDR_SB_G0
 75

	)

2669 
	#R_ARM_LDR_SB_G1
 76

	)

2671 
	#R_ARM_LDR_SB_G2
 77

	)

2673 
	#R_ARM_LDRS_SB_G0
 78

	)

2675 
	#R_ARM_LDRS_SB_G1
 79

	)

2677 
	#R_ARM_LDRS_SB_G2
 80

	)

2679 
	#R_ARM_LDC_SB_G0
 81

	)

2680 
	#R_ARM_LDC_SB_G1
 82

	)

2681 
	#R_ARM_LDC_SB_G2
 83

	)

2682 
	#R_ARM_MOVW_BREL_NC
 84

	)

2684 
	#R_ARM_MOVT_BREL
 85

	)

2686 
	#R_ARM_MOVW_BREL
 86

	)

2688 
	#R_ARM_THM_MOVW_BREL_NC
 87

	)

2690 
	#R_ARM_THM_MOVT_BREL
 88

	)

2692 
	#R_ARM_THM_MOVW_BREL
 89

	)

2694 
	#R_ARM_TLS_GOTDESC
 90

	)

2695 
	#R_ARM_TLS_CALL
 91

	)

2696 
	#R_ARM_TLS_DESCSEQ
 92

	)

2697 
	#R_ARM_THM_TLS_CALL
 93

	)

2698 
	#R_ARM_PLT32_ABS
 94

	)

2699 
	#R_ARM_GOT_ABS
 95

	)

2700 
	#R_ARM_GOT_PREL
 96

	)

2701 
	#R_ARM_GOT_BREL12
 97

	)

2703 
	#R_ARM_GOTOFF12
 98

	)

2705 
	#R_ARM_GOTRELAX
 99

	)

2706 
	#R_ARM_GNU_VTENTRY
 100

	)

2707 
	#R_ARM_GNU_VTINHERIT
 101

	)

2708 
	#R_ARM_THM_PC11
 102

	)

2709 
	#R_ARM_THM_PC9
 103

	)

2711 
	#R_ARM_TLS_GD32
 104

	)

2713 
	#R_ARM_TLS_LDM32
 105

	)

2715 
	#R_ARM_TLS_LDO32
 106

	)

2717 
	#R_ARM_TLS_IE32
 107

	)

2719 
	#R_ARM_TLS_LE32
 108

	)

2721 
	#R_ARM_TLS_LDO12
 109

	)

2723 
	#R_ARM_TLS_LE12
 110

	)

2725 
	#R_ARM_TLS_IE12GP
 111

	)

2727 
	#R_ARM_ME_TOO
 128

	)

2728 
	#R_ARM_THM_TLS_DESCSEQ
 129

	)

2729 
	#R_ARM_THM_TLS_DESCSEQ16
 129

	)

2730 
	#R_ARM_THM_TLS_DESCSEQ32
 130

	)

2731 
	#R_ARM_THM_GOT_BREL12
 131

	)

2733 
	#R_ARM_IRELATIVE
 160

	)

2734 
	#R_ARM_RXPC25
 249

	)

2735 
	#R_ARM_RSBREL32
 250

	)

2736 
	#R_ARM_THM_RPC22
 251

	)

2737 
	#R_ARM_RREL32
 252

	)

2738 
	#R_ARM_RABS22
 253

	)

2739 
	#R_ARM_RPC24
 254

	)

2740 
	#R_ARM_RBASE
 255

	)

2742 
	#R_ARM_NUM
 256

	)

2747 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

2748 
	#EF_IA_64_ABI64
 0x00000010

	)

2749 
	#EF_IA_64_ARCH
 0xff000000

	)

2752 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

2753 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

2754 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

2755 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

2756 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2759 
	#PF_IA_64_NORECOV
 0x80000000

	)

2762 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

2763 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

2766 
	#SHF_IA_64_SHORT
 0x10000000

	)

2767 
	#SHF_IA_64_NORECOV
 0x20000000

	)

2770 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

2771 
	#DT_IA_64_NUM
 1

	)

2774 
	#R_IA64_NONE
 0x00

	)

2775 
	#R_IA64_IMM14
 0x21

	)

2776 
	#R_IA64_IMM22
 0x22

	)

2777 
	#R_IA64_IMM64
 0x23

	)

2778 
	#R_IA64_DIR32MSB
 0x24

	)

2779 
	#R_IA64_DIR32LSB
 0x25

	)

2780 
	#R_IA64_DIR64MSB
 0x26

	)

2781 
	#R_IA64_DIR64LSB
 0x27

	)

2782 
	#R_IA64_GPREL22
 0x2®

	)

2783 
	#R_IA64_GPREL64I
 0x2b

	)

2784 
	#R_IA64_GPREL32MSB
 0x2¯

	)

2785 
	#R_IA64_GPREL32LSB
 0x2d

	)

2786 
	#R_IA64_GPREL64MSB
 0x2ê

	)

2787 
	#R_IA64_GPREL64LSB
 0x2‡

	)

2788 
	#R_IA64_LTOFF22
 0x32

	)

2789 
	#R_IA64_LTOFF64I
 0x33

	)

2790 
	#R_IA64_PLTOFF22
 0x3®

	)

2791 
	#R_IA64_PLTOFF64I
 0x3b

	)

2792 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

2793 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

2794 
	#R_IA64_FPTR64I
 0x43

	)

2795 
	#R_IA64_FPTR32MSB
 0x44

	)

2796 
	#R_IA64_FPTR32LSB
 0x45

	)

2797 
	#R_IA64_FPTR64MSB
 0x46

	)

2798 
	#R_IA64_FPTR64LSB
 0x47

	)

2799 
	#R_IA64_PCREL60B
 0x48

	)

2800 
	#R_IA64_PCREL21B
 0x49

	)

2801 
	#R_IA64_PCREL21M
 0x4®

	)

2802 
	#R_IA64_PCREL21F
 0x4b

	)

2803 
	#R_IA64_PCREL32MSB
 0x4¯

	)

2804 
	#R_IA64_PCREL32LSB
 0x4d

	)

2805 
	#R_IA64_PCREL64MSB
 0x4ê

	)

2806 
	#R_IA64_PCREL64LSB
 0x4‡

	)

2807 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

2808 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

2809 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

2810 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

2811 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

2812 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

2813 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

2814 
	#R_IA64_SEGREL32LSB
 0x5d

	)

2815 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

2816 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

2817 
	#R_IA64_SECREL32MSB
 0x64

	)

2818 
	#R_IA64_SECREL32LSB
 0x65

	)

2819 
	#R_IA64_SECREL64MSB
 0x66

	)

2820 
	#R_IA64_SECREL64LSB
 0x67

	)

2821 
	#R_IA64_REL32MSB
 0x6¯

	)

2822 
	#R_IA64_REL32LSB
 0x6d

	)

2823 
	#R_IA64_REL64MSB
 0x6ê

	)

2824 
	#R_IA64_REL64LSB
 0x6‡

	)

2825 
	#R_IA64_LTV32MSB
 0x74

	)

2826 
	#R_IA64_LTV32LSB
 0x75

	)

2827 
	#R_IA64_LTV64MSB
 0x76

	)

2828 
	#R_IA64_LTV64LSB
 0x77

	)

2829 
	#R_IA64_PCREL21BI
 0x79

	)

2830 
	#R_IA64_PCREL22
 0x7®

	)

2831 
	#R_IA64_PCREL64I
 0x7b

	)

2832 
	#R_IA64_IPLTMSB
 0x80

	)

2833 
	#R_IA64_IPLTLSB
 0x81

	)

2834 
	#R_IA64_COPY
 0x84

	)

2835 
	#R_IA64_SUB
 0x85

	)

2836 
	#R_IA64_LTOFF22X
 0x86

	)

2837 
	#R_IA64_LDXMOV
 0x87

	)

2838 
	#R_IA64_TPREL14
 0x91

	)

2839 
	#R_IA64_TPREL22
 0x92

	)

2840 
	#R_IA64_TPREL64I
 0x93

	)

2841 
	#R_IA64_TPREL64MSB
 0x96

	)

2842 
	#R_IA64_TPREL64LSB
 0x97

	)

2843 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

2844 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

2845 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

2846 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

2847 
	#R_IA64_DTPREL14
 0xb1

	)

2848 
	#R_IA64_DTPREL22
 0xb2

	)

2849 
	#R_IA64_DTPREL64I
 0xb3

	)

2850 
	#R_IA64_DTPREL32MSB
 0xb4

	)

2851 
	#R_IA64_DTPREL32LSB
 0xb5

	)

2852 
	#R_IA64_DTPREL64MSB
 0xb6

	)

2853 
	#R_IA64_DTPREL64LSB
 0xb7

	)

2854 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

2859 
	#EF_SH_MACH_MASK
 0x1f

	)

2860 
	#EF_SH_UNKNOWN
 0x0

	)

2861 
	#EF_SH1
 0x1

	)

2862 
	#EF_SH2
 0x2

	)

2863 
	#EF_SH3
 0x3

	)

2864 
	#EF_SH_DSP
 0x4

	)

2865 
	#EF_SH3_DSP
 0x5

	)

2866 
	#EF_SH4AL_DSP
 0x6

	)

2867 
	#EF_SH3E
 0x8

	)

2868 
	#EF_SH4
 0x9

	)

2869 
	#EF_SH2E
 0xb

	)

2870 
	#EF_SH4A
 0xc

	)

2871 
	#EF_SH2A
 0xd

	)

2872 
	#EF_SH4_NOFPU
 0x10

	)

2873 
	#EF_SH4A_NOFPU
 0x11

	)

2874 
	#EF_SH4_NOMMU_NOFPU
 0x12

	)

2875 
	#EF_SH2A_NOFPU
 0x13

	)

2876 
	#EF_SH3_NOMMU
 0x14

	)

2877 
	#EF_SH2A_SH4_NOFPU
 0x15

	)

2878 
	#EF_SH2A_SH3_NOFPU
 0x16

	)

2879 
	#EF_SH2A_SH4
 0x17

	)

2880 
	#EF_SH2A_SH3E
 0x18

	)

2883 
	#R_SH_NONE
 0

	)

2884 
	#R_SH_DIR32
 1

	)

2885 
	#R_SH_REL32
 2

	)

2886 
	#R_SH_DIR8WPN
 3

	)

2887 
	#R_SH_IND12W
 4

	)

2888 
	#R_SH_DIR8WPL
 5

	)

2889 
	#R_SH_DIR8WPZ
 6

	)

2890 
	#R_SH_DIR8BP
 7

	)

2891 
	#R_SH_DIR8W
 8

	)

2892 
	#R_SH_DIR8L
 9

	)

2893 
	#R_SH_SWITCH16
 25

	)

2894 
	#R_SH_SWITCH32
 26

	)

2895 
	#R_SH_USES
 27

	)

2896 
	#R_SH_COUNT
 28

	)

2897 
	#R_SH_ALIGN
 29

	)

2898 
	#R_SH_CODE
 30

	)

2899 
	#R_SH_DATA
 31

	)

2900 
	#R_SH_LABEL
 32

	)

2901 
	#R_SH_SWITCH8
 33

	)

2902 
	#R_SH_GNU_VTINHERIT
 34

	)

2903 
	#R_SH_GNU_VTENTRY
 35

	)

2904 
	#R_SH_TLS_GD_32
 144

	)

2905 
	#R_SH_TLS_LD_32
 145

	)

2906 
	#R_SH_TLS_LDO_32
 146

	)

2907 
	#R_SH_TLS_IE_32
 147

	)

2908 
	#R_SH_TLS_LE_32
 148

	)

2909 
	#R_SH_TLS_DTPMOD32
 149

	)

2910 
	#R_SH_TLS_DTPOFF32
 150

	)

2911 
	#R_SH_TLS_TPOFF32
 151

	)

2912 
	#R_SH_GOT32
 160

	)

2913 
	#R_SH_PLT32
 161

	)

2914 
	#R_SH_COPY
 162

	)

2915 
	#R_SH_GLOB_DAT
 163

	)

2916 
	#R_SH_JMP_SLOT
 164

	)

2917 
	#R_SH_RELATIVE
 165

	)

2918 
	#R_SH_GOTOFF
 166

	)

2919 
	#R_SH_GOTPC
 167

	)

2921 
	#R_SH_NUM
 256

	)

2927 
	#EF_S390_HIGH_GPRS
 0x00000001

	)

2931 
	#R_390_NONE
 0

	)

2932 
	#R_390_8
 1

	)

2933 
	#R_390_12
 2

	)

2934 
	#R_390_16
 3

	)

2935 
	#R_390_32
 4

	)

2936 
	#R_390_PC32
 5

	)

2937 
	#R_390_GOT12
 6

	)

2938 
	#R_390_GOT32
 7

	)

2939 
	#R_390_PLT32
 8

	)

2940 
	#R_390_COPY
 9

	)

2941 
	#R_390_GLOB_DAT
 10

	)

2942 
	#R_390_JMP_SLOT
 11

	)

2943 
	#R_390_RELATIVE
 12

	)

2944 
	#R_390_GOTOFF32
 13

	)

2945 
	#R_390_GOTPC
 14

	)

2946 
	#R_390_GOT16
 15

	)

2947 
	#R_390_PC16
 16

	)

2948 
	#R_390_PC16DBL
 17

	)

2949 
	#R_390_PLT16DBL
 18

	)

2950 
	#R_390_PC32DBL
 19

	)

2951 
	#R_390_PLT32DBL
 20

	)

2952 
	#R_390_GOTPCDBL
 21

	)

2953 
	#R_390_64
 22

	)

2954 
	#R_390_PC64
 23

	)

2955 
	#R_390_GOT64
 24

	)

2956 
	#R_390_PLT64
 25

	)

2957 
	#R_390_GOTENT
 26

	)

2958 
	#R_390_GOTOFF16
 27

	)

2959 
	#R_390_GOTOFF64
 28

	)

2960 
	#R_390_GOTPLT12
 29

	)

2961 
	#R_390_GOTPLT16
 30

	)

2962 
	#R_390_GOTPLT32
 31

	)

2963 
	#R_390_GOTPLT64
 32

	)

2964 
	#R_390_GOTPLTENT
 33

	)

2965 
	#R_390_PLTOFF16
 34

	)

2966 
	#R_390_PLTOFF32
 35

	)

2967 
	#R_390_PLTOFF64
 36

	)

2968 
	#R_390_TLS_LOAD
 37

	)

2969 
	#R_390_TLS_GDCALL
 38

	)

2971 
	#R_390_TLS_LDCALL
 39

	)

2973 
	#R_390_TLS_GD32
 40

	)

2975 
	#R_390_TLS_GD64
 41

	)

2977 
	#R_390_TLS_GOTIE12
 42

	)

2979 
	#R_390_TLS_GOTIE32
 43

	)

2981 
	#R_390_TLS_GOTIE64
 44

	)

2983 
	#R_390_TLS_LDM32
 45

	)

2985 
	#R_390_TLS_LDM64
 46

	)

2987 
	#R_390_TLS_IE32
 47

	)

2989 
	#R_390_TLS_IE64
 48

	)

2991 
	#R_390_TLS_IEENT
 49

	)

2993 
	#R_390_TLS_LE32
 50

	)

2995 
	#R_390_TLS_LE64
 51

	)

2997 
	#R_390_TLS_LDO32
 52

	)

2999 
	#R_390_TLS_LDO64
 53

	)

3001 
	#R_390_TLS_DTPMOD
 54

	)

3002 
	#R_390_TLS_DTPOFF
 55

	)

3003 
	#R_390_TLS_TPOFF
 56

	)

3005 
	#R_390_20
 57

	)

3006 
	#R_390_GOT20
 58

	)

3007 
	#R_390_GOTPLT20
 59

	)

3008 
	#R_390_TLS_GOTIE20
 60

	)

3010 
	#R_390_IRELATIVE
 61

	)

3012 
	#R_390_NUM
 62

	)

3016 
	#R_CRIS_NONE
 0

	)

3017 
	#R_CRIS_8
 1

	)

3018 
	#R_CRIS_16
 2

	)

3019 
	#R_CRIS_32
 3

	)

3020 
	#R_CRIS_8_PCREL
 4

	)

3021 
	#R_CRIS_16_PCREL
 5

	)

3022 
	#R_CRIS_32_PCREL
 6

	)

3023 
	#R_CRIS_GNU_VTINHERIT
 7

	)

3024 
	#R_CRIS_GNU_VTENTRY
 8

	)

3025 
	#R_CRIS_COPY
 9

	)

3026 
	#R_CRIS_GLOB_DAT
 10

	)

3027 
	#R_CRIS_JUMP_SLOT
 11

	)

3028 
	#R_CRIS_RELATIVE
 12

	)

3029 
	#R_CRIS_16_GOT
 13

	)

3030 
	#R_CRIS_32_GOT
 14

	)

3031 
	#R_CRIS_16_GOTPLT
 15

	)

3032 
	#R_CRIS_32_GOTPLT
 16

	)

3033 
	#R_CRIS_32_GOTREL
 17

	)

3034 
	#R_CRIS_32_PLT_GOTREL
 18

	)

3035 
	#R_CRIS_32_PLT_PCREL
 19

	)

3037 
	#R_CRIS_NUM
 20

	)

3041 
	#R_X86_64_NONE
 0

	)

3042 
	#R_X86_64_64
 1

	)

3043 
	#R_X86_64_PC32
 2

	)

3044 
	#R_X86_64_GOT32
 3

	)

3045 
	#R_X86_64_PLT32
 4

	)

3046 
	#R_X86_64_COPY
 5

	)

3047 
	#R_X86_64_GLOB_DAT
 6

	)

3048 
	#R_X86_64_JUMP_SLOT
 7

	)

3049 
	#R_X86_64_RELATIVE
 8

	)

3050 
	#R_X86_64_GOTPCREL
 9

	)

3052 
	#R_X86_64_32
 10

	)

3053 
	#R_X86_64_32S
 11

	)

3054 
	#R_X86_64_16
 12

	)

3055 
	#R_X86_64_PC16
 13

	)

3056 
	#R_X86_64_8
 14

	)

3057 
	#R_X86_64_PC8
 15

	)

3058 
	#R_X86_64_DTPMOD64
 16

	)

3059 
	#R_X86_64_DTPOFF64
 17

	)

3060 
	#R_X86_64_TPOFF64
 18

	)

3061 
	#R_X86_64_TLSGD
 19

	)

3063 
	#R_X86_64_TLSLD
 20

	)

3065 
	#R_X86_64_DTPOFF32
 21

	)

3066 
	#R_X86_64_GOTTPOFF
 22

	)

3068 
	#R_X86_64_TPOFF32
 23

	)

3069 
	#R_X86_64_PC64
 24

	)

3070 
	#R_X86_64_GOTOFF64
 25

	)

3071 
	#R_X86_64_GOTPC32
 26

	)

3073 
	#R_X86_64_GOT64
 27

	)

3074 
	#R_X86_64_GOTPCREL64
 28

	)

3076 
	#R_X86_64_GOTPC64
 29

	)

3077 
	#R_X86_64_GOTPLT64
 30

	)

3078 
	#R_X86_64_PLTOFF64
 31

	)

3080 
	#R_X86_64_SIZE32
 32

	)

3081 
	#R_X86_64_SIZE64
 33

	)

3082 
	#R_X86_64_GOTPC32_TLSDESC
 34

	)

3083 
	#R_X86_64_TLSDESC_CALL
 35

	)

3085 
	#R_X86_64_TLSDESC
 36

	)

3086 
	#R_X86_64_IRELATIVE
 37

	)

3087 
	#R_X86_64_RELATIVE64
 38

	)

3089 
	#R_X86_64_NUM
 39

	)

3093 
	#R_MN10300_NONE
 0

	)

3094 
	#R_MN10300_32
 1

	)

3095 
	#R_MN10300_16
 2

	)

3096 
	#R_MN10300_8
 3

	)

3097 
	#R_MN10300_PCREL32
 4

	)

3098 
	#R_MN10300_PCREL16
 5

	)

3099 
	#R_MN10300_PCREL8
 6

	)

3100 
	#R_MN10300_GNU_VTINHERIT
 7

	)

3101 
	#R_MN10300_GNU_VTENTRY
 8

	)

3102 
	#R_MN10300_24
 9

	)

3103 
	#R_MN10300_GOTPC32
 10

	)

3104 
	#R_MN10300_GOTPC16
 11

	)

3105 
	#R_MN10300_GOTOFF32
 12

	)

3106 
	#R_MN10300_GOTOFF24
 13

	)

3107 
	#R_MN10300_GOTOFF16
 14

	)

3108 
	#R_MN10300_PLT32
 15

	)

3109 
	#R_MN10300_PLT16
 16

	)

3110 
	#R_MN10300_GOT32
 17

	)

3111 
	#R_MN10300_GOT24
 18

	)

3112 
	#R_MN10300_GOT16
 19

	)

3113 
	#R_MN10300_COPY
 20

	)

3114 
	#R_MN10300_GLOB_DAT
 21

	)

3115 
	#R_MN10300_JMP_SLOT
 22

	)

3116 
	#R_MN10300_RELATIVE
 23

	)

3117 
	#R_MN10300_TLS_GD
 24

	)

3118 
	#R_MN10300_TLS_LD
 25

	)

3119 
	#R_MN10300_TLS_LDO
 26

	)

3120 
	#R_MN10300_TLS_GOTIE
 27

	)

3122 
	#R_MN10300_TLS_IE
 28

	)

3124 
	#R_MN10300_TLS_LE
 29

	)

3126 
	#R_MN10300_TLS_DTPMOD
 30

	)

3127 
	#R_MN10300_TLS_DTPOFF
 31

	)

3128 
	#R_MN10300_TLS_TPOFF
 32

	)

3129 
	#R_MN10300_SYM_DIFF
 33

	)

3131 
	#R_MN10300_ALIGN
 34

	)

3133 
	#R_MN10300_NUM
 35

	)

3137 
	#R_M32R_NONE
 0

	)

3138 
	#R_M32R_16
 1

	)

3139 
	#R_M32R_32
 2

	)

3140 
	#R_M32R_24
 3

	)

3141 
	#R_M32R_10_PCREL
 4

	)

3142 
	#R_M32R_18_PCREL
 5

	)

3143 
	#R_M32R_26_PCREL
 6

	)

3144 
	#R_M32R_HI16_ULO
 7

	)

3145 
	#R_M32R_HI16_SLO
 8

	)

3146 
	#R_M32R_LO16
 9

	)

3147 
	#R_M32R_SDA16
 10

	)

3148 
	#R_M32R_GNU_VTINHERIT
 11

	)

3149 
	#R_M32R_GNU_VTENTRY
 12

	)

3151 
	#R_M32R_16_RELA
 33

	)

3152 
	#R_M32R_32_RELA
 34

	)

3153 
	#R_M32R_24_RELA
 35

	)

3154 
	#R_M32R_10_PCREL_RELA
 36

	)

3155 
	#R_M32R_18_PCREL_RELA
 37

	)

3156 
	#R_M32R_26_PCREL_RELA
 38

	)

3157 
	#R_M32R_HI16_ULO_RELA
 39

	)

3158 
	#R_M32R_HI16_SLO_RELA
 40

	)

3159 
	#R_M32R_LO16_RELA
 41

	)

3160 
	#R_M32R_SDA16_RELA
 42

	)

3161 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

3162 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

3163 
	#R_M32R_REL32
 45

	)

3165 
	#R_M32R_GOT24
 48

	)

3166 
	#R_M32R_26_PLTREL
 49

	)

3167 
	#R_M32R_COPY
 50

	)

3168 
	#R_M32R_GLOB_DAT
 51

	)

3169 
	#R_M32R_JMP_SLOT
 52

	)

3170 
	#R_M32R_RELATIVE
 53

	)

3171 
	#R_M32R_GOTOFF
 54

	)

3172 
	#R_M32R_GOTPC24
 55

	)

3173 
	#R_M32R_GOT16_HI_ULO
 56

	)

3175 
	#R_M32R_GOT16_HI_SLO
 57

	)

3177 
	#R_M32R_GOT16_LO
 58

	)

3178 
	#R_M32R_GOTPC_HI_ULO
 59

	)

3180 
	#R_M32R_GOTPC_HI_SLO
 60

	)

3182 
	#R_M32R_GOTPC_LO
 61

	)

3184 
	#R_M32R_GOTOFF_HI_ULO
 62

	)

3186 
	#R_M32R_GOTOFF_HI_SLO
 63

	)

3188 
	#R_M32R_GOTOFF_LO
 64

	)

3189 
	#R_M32R_NUM
 256

	)

3192 
	#R_MICROBLAZE_NONE
 0

	)

3193 
	#R_MICROBLAZE_32
 1

	)

3194 
	#R_MICROBLAZE_32_PCREL
 2

	)

3195 
	#R_MICROBLAZE_64_PCREL
 3

	)

3196 
	#R_MICROBLAZE_32_PCREL_LO
 4

	)

3197 
	#R_MICROBLAZE_64
 5

	)

3198 
	#R_MICROBLAZE_32_LO
 6

	)

3199 
	#R_MICROBLAZE_SRO32
 7

	)

3200 
	#R_MICROBLAZE_SRW32
 8

	)

3201 
	#R_MICROBLAZE_64_NONE
 9

	)

3202 
	#R_MICROBLAZE_32_SYM_OP_SYM
 10

	)

3203 
	#R_MICROBLAZE_GNU_VTINHERIT
 11

	)

3204 
	#R_MICROBLAZE_GNU_VTENTRY
 12

	)

3205 
	#R_MICROBLAZE_GOTPC_64
 13

	)

3206 
	#R_MICROBLAZE_GOT_64
 14

	)

3207 
	#R_MICROBLAZE_PLT_64
 15

	)

3208 
	#R_MICROBLAZE_REL
 16

	)

3209 
	#R_MICROBLAZE_JUMP_SLOT
 17

	)

3210 
	#R_MICROBLAZE_GLOB_DAT
 18

	)

3211 
	#R_MICROBLAZE_GOTOFF_64
 19

	)

3212 
	#R_MICROBLAZE_GOTOFF_32
 20

	)

3213 
	#R_MICROBLAZE_COPY
 21

	)

3214 
	#R_MICROBLAZE_TLS
 22

	)

3215 
	#R_MICROBLAZE_TLSGD
 23

	)

3216 
	#R_MICROBLAZE_TLSLD
 24

	)

3217 
	#R_MICROBLAZE_TLSDTPMOD32
 25

	)

3218 
	#R_MICROBLAZE_TLSDTPREL32
 26

	)

3219 
	#R_MICROBLAZE_TLSDTPREL64
 27

	)

3220 
	#R_MICROBLAZE_TLSGOTTPREL32
 28

	)

3221 
	#R_MICROBLAZE_TLSTPREL32
 29

	)

3224 
	#DT_NIOS2_GP
 0x70000002

	)

3227 
	#R_NIOS2_NONE
 0

	)

3228 
	#R_NIOS2_S16
 1

	)

3229 
	#R_NIOS2_U16
 2

	)

3230 
	#R_NIOS2_PCREL16
 3

	)

3231 
	#R_NIOS2_CALL26
 4

	)

3232 
	#R_NIOS2_IMM5
 5

	)

3233 
	#R_NIOS2_CACHE_OPX
 6

	)

3234 
	#R_NIOS2_IMM6
 7

	)

3235 
	#R_NIOS2_IMM8
 8

	)

3236 
	#R_NIOS2_HI16
 9

	)

3237 
	#R_NIOS2_LO16
 10

	)

3238 
	#R_NIOS2_HIADJ16
 11

	)

3239 
	#R_NIOS2_BFD_RELOC_32
 12

	)

3240 
	#R_NIOS2_BFD_RELOC_16
 13

	)

3241 
	#R_NIOS2_BFD_RELOC_8
 14

	)

3242 
	#R_NIOS2_GPREL
 15

	)

3243 
	#R_NIOS2_GNU_VTINHERIT
 16

	)

3244 
	#R_NIOS2_GNU_VTENTRY
 17

	)

3245 
	#R_NIOS2_UJMP
 18

	)

3246 
	#R_NIOS2_CJMP
 19

	)

3247 
	#R_NIOS2_CALLR
 20

	)

3248 
	#R_NIOS2_ALIGN
 21

	)

3250 
	#R_NIOS2_GOT16
 22

	)

3251 
	#R_NIOS2_CALL16
 23

	)

3252 
	#R_NIOS2_GOTOFF_LO
 24

	)

3253 
	#R_NIOS2_GOTOFF_HA
 25

	)

3254 
	#R_NIOS2_PCREL_LO
 26

	)

3255 
	#R_NIOS2_PCREL_HA
 27

	)

3256 
	#R_NIOS2_TLS_GD16
 28

	)

3257 
	#R_NIOS2_TLS_LDM16
 29

	)

3258 
	#R_NIOS2_TLS_LDO16
 30

	)

3259 
	#R_NIOS2_TLS_IE16
 31

	)

3260 
	#R_NIOS2_TLS_LE16
 32

	)

3261 
	#R_NIOS2_TLS_DTPMOD
 33

	)

3262 
	#R_NIOS2_TLS_DTPREL
 34

	)

3263 
	#R_NIOS2_TLS_TPREL
 35

	)

3264 
	#R_NIOS2_COPY
 36

	)

3265 
	#R_NIOS2_GLOB_DAT
 37

	)

3266 
	#R_NIOS2_JUMP_SLOT
 38

	)

3267 
	#R_NIOS2_RELATIVE
 39

	)

3268 
	#R_NIOS2_GOTOFF
 40

	)

3269 
	#R_NIOS2_CALL26_NOAT
 41

	)

3270 
	#R_NIOS2_GOT_LO
 42

	)

3271 
	#R_NIOS2_GOT_HA
 43

	)

3272 
	#R_NIOS2_CALL_LO
 44

	)

3273 
	#R_NIOS2_CALL_HA
 45

	)

3276 
	#R_TILEPRO_NONE
 0

	)

3277 
	#R_TILEPRO_32
 1

	)

3278 
	#R_TILEPRO_16
 2

	)

3279 
	#R_TILEPRO_8
 3

	)

3280 
	#R_TILEPRO_32_PCREL
 4

	)

3281 
	#R_TILEPRO_16_PCREL
 5

	)

3282 
	#R_TILEPRO_8_PCREL
 6

	)

3283 
	#R_TILEPRO_LO16
 7

	)

3284 
	#R_TILEPRO_HI16
 8

	)

3285 
	#R_TILEPRO_HA16
 9

	)

3286 
	#R_TILEPRO_COPY
 10

	)

3287 
	#R_TILEPRO_GLOB_DAT
 11

	)

3288 
	#R_TILEPRO_JMP_SLOT
 12

	)

3289 
	#R_TILEPRO_RELATIVE
 13

	)

3290 
	#R_TILEPRO_BROFF_X1
 14

	)

3291 
	#R_TILEPRO_JOFFLONG_X1
 15

	)

3292 
	#R_TILEPRO_JOFFLONG_X1_PLT
 16

	)

3293 
	#R_TILEPRO_IMM8_X0
 17

	)

3294 
	#R_TILEPRO_IMM8_Y0
 18

	)

3295 
	#R_TILEPRO_IMM8_X1
 19

	)

3296 
	#R_TILEPRO_IMM8_Y1
 20

	)

3297 
	#R_TILEPRO_MT_IMM15_X1
 21

	)

3298 
	#R_TILEPRO_MF_IMM15_X1
 22

	)

3299 
	#R_TILEPRO_IMM16_X0
 23

	)

3300 
	#R_TILEPRO_IMM16_X1
 24

	)

3301 
	#R_TILEPRO_IMM16_X0_LO
 25

	)

3302 
	#R_TILEPRO_IMM16_X1_LO
 26

	)

3303 
	#R_TILEPRO_IMM16_X0_HI
 27

	)

3304 
	#R_TILEPRO_IMM16_X1_HI
 28

	)

3305 
	#R_TILEPRO_IMM16_X0_HA
 29

	)

3306 
	#R_TILEPRO_IMM16_X1_HA
 30

	)

3307 
	#R_TILEPRO_IMM16_X0_PCREL
 31

	)

3308 
	#R_TILEPRO_IMM16_X1_PCREL
 32

	)

3309 
	#R_TILEPRO_IMM16_X0_LO_PCREL
 33

	)

3310 
	#R_TILEPRO_IMM16_X1_LO_PCREL
 34

	)

3311 
	#R_TILEPRO_IMM16_X0_HI_PCREL
 35

	)

3312 
	#R_TILEPRO_IMM16_X1_HI_PCREL
 36

	)

3313 
	#R_TILEPRO_IMM16_X0_HA_PCREL
 37

	)

3314 
	#R_TILEPRO_IMM16_X1_HA_PCREL
 38

	)

3315 
	#R_TILEPRO_IMM16_X0_GOT
 39

	)

3316 
	#R_TILEPRO_IMM16_X1_GOT
 40

	)

3317 
	#R_TILEPRO_IMM16_X0_GOT_LO
 41

	)

3318 
	#R_TILEPRO_IMM16_X1_GOT_LO
 42

	)

3319 
	#R_TILEPRO_IMM16_X0_GOT_HI
 43

	)

3320 
	#R_TILEPRO_IMM16_X1_GOT_HI
 44

	)

3321 
	#R_TILEPRO_IMM16_X0_GOT_HA
 45

	)

3322 
	#R_TILEPRO_IMM16_X1_GOT_HA
 46

	)

3323 
	#R_TILEPRO_MMSTART_X0
 47

	)

3324 
	#R_TILEPRO_MMEND_X0
 48

	)

3325 
	#R_TILEPRO_MMSTART_X1
 49

	)

3326 
	#R_TILEPRO_MMEND_X1
 50

	)

3327 
	#R_TILEPRO_SHAMT_X0
 51

	)

3328 
	#R_TILEPRO_SHAMT_X1
 52

	)

3329 
	#R_TILEPRO_SHAMT_Y0
 53

	)

3330 
	#R_TILEPRO_SHAMT_Y1
 54

	)

3331 
	#R_TILEPRO_DEST_IMM8_X1
 55

	)

3333 
	#R_TILEPRO_TLS_GD_CALL
 60

	)

3334 
	#R_TILEPRO_IMM8_X0_TLS_GD_ADD
 61

	)

3335 
	#R_TILEPRO_IMM8_X1_TLS_GD_ADD
 62

	)

3336 
	#R_TILEPRO_IMM8_Y0_TLS_GD_ADD
 63

	)

3337 
	#R_TILEPRO_IMM8_Y1_TLS_GD_ADD
 64

	)

3338 
	#R_TILEPRO_TLS_IE_LOAD
 65

	)

3339 
	#R_TILEPRO_IMM16_X0_TLS_GD
 66

	)

3340 
	#R_TILEPRO_IMM16_X1_TLS_GD
 67

	)

3341 
	#R_TILEPRO_IMM16_X0_TLS_GD_LO
 68

	)

3342 
	#R_TILEPRO_IMM16_X1_TLS_GD_LO
 69

	)

3343 
	#R_TILEPRO_IMM16_X0_TLS_GD_HI
 70

	)

3344 
	#R_TILEPRO_IMM16_X1_TLS_GD_HI
 71

	)

3345 
	#R_TILEPRO_IMM16_X0_TLS_GD_HA
 72

	)

3346 
	#R_TILEPRO_IMM16_X1_TLS_GD_HA
 73

	)

3347 
	#R_TILEPRO_IMM16_X0_TLS_IE
 74

	)

3348 
	#R_TILEPRO_IMM16_X1_TLS_IE
 75

	)

3349 
	#R_TILEPRO_IMM16_X0_TLS_IE_LO
 76

	)

3350 
	#R_TILEPRO_IMM16_X1_TLS_IE_LO
 77

	)

3351 
	#R_TILEPRO_IMM16_X0_TLS_IE_HI
 78

	)

3352 
	#R_TILEPRO_IMM16_X1_TLS_IE_HI
 79

	)

3353 
	#R_TILEPRO_IMM16_X0_TLS_IE_HA
 80

	)

3354 
	#R_TILEPRO_IMM16_X1_TLS_IE_HA
 81

	)

3355 
	#R_TILEPRO_TLS_DTPMOD32
 82

	)

3356 
	#R_TILEPRO_TLS_DTPOFF32
 83

	)

3357 
	#R_TILEPRO_TLS_TPOFF32
 84

	)

3358 
	#R_TILEPRO_IMM16_X0_TLS_LE
 85

	)

3359 
	#R_TILEPRO_IMM16_X1_TLS_LE
 86

	)

3360 
	#R_TILEPRO_IMM16_X0_TLS_LE_LO
 87

	)

3361 
	#R_TILEPRO_IMM16_X1_TLS_LE_LO
 88

	)

3362 
	#R_TILEPRO_IMM16_X0_TLS_LE_HI
 89

	)

3363 
	#R_TILEPRO_IMM16_X1_TLS_LE_HI
 90

	)

3364 
	#R_TILEPRO_IMM16_X0_TLS_LE_HA
 91

	)

3365 
	#R_TILEPRO_IMM16_X1_TLS_LE_HA
 92

	)

3367 
	#R_TILEPRO_GNU_VTINHERIT
 128

	)

3368 
	#R_TILEPRO_GNU_VTENTRY
 129

	)

3370 
	#R_TILEPRO_NUM
 130

	)

3374 
	#R_TILEGX_NONE
 0

	)

3375 
	#R_TILEGX_64
 1

	)

3376 
	#R_TILEGX_32
 2

	)

3377 
	#R_TILEGX_16
 3

	)

3378 
	#R_TILEGX_8
 4

	)

3379 
	#R_TILEGX_64_PCREL
 5

	)

3380 
	#R_TILEGX_32_PCREL
 6

	)

3381 
	#R_TILEGX_16_PCREL
 7

	)

3382 
	#R_TILEGX_8_PCREL
 8

	)

3383 
	#R_TILEGX_HW0
 9

	)

3384 
	#R_TILEGX_HW1
 10

	)

3385 
	#R_TILEGX_HW2
 11

	)

3386 
	#R_TILEGX_HW3
 12

	)

3387 
	#R_TILEGX_HW0_LAST
 13

	)

3388 
	#R_TILEGX_HW1_LAST
 14

	)

3389 
	#R_TILEGX_HW2_LAST
 15

	)

3390 
	#R_TILEGX_COPY
 16

	)

3391 
	#R_TILEGX_GLOB_DAT
 17

	)

3392 
	#R_TILEGX_JMP_SLOT
 18

	)

3393 
	#R_TILEGX_RELATIVE
 19

	)

3394 
	#R_TILEGX_BROFF_X1
 20

	)

3395 
	#R_TILEGX_JUMPOFF_X1
 21

	)

3396 
	#R_TILEGX_JUMPOFF_X1_PLT
 22

	)

3397 
	#R_TILEGX_IMM8_X0
 23

	)

3398 
	#R_TILEGX_IMM8_Y0
 24

	)

3399 
	#R_TILEGX_IMM8_X1
 25

	)

3400 
	#R_TILEGX_IMM8_Y1
 26

	)

3401 
	#R_TILEGX_DEST_IMM8_X1
 27

	)

3402 
	#R_TILEGX_MT_IMM14_X1
 28

	)

3403 
	#R_TILEGX_MF_IMM14_X1
 29

	)

3404 
	#R_TILEGX_MMSTART_X0
 30

	)

3405 
	#R_TILEGX_MMEND_X0
 31

	)

3406 
	#R_TILEGX_SHAMT_X0
 32

	)

3407 
	#R_TILEGX_SHAMT_X1
 33

	)

3408 
	#R_TILEGX_SHAMT_Y0
 34

	)

3409 
	#R_TILEGX_SHAMT_Y1
 35

	)

3410 
	#R_TILEGX_IMM16_X0_HW0
 36

	)

3411 
	#R_TILEGX_IMM16_X1_HW0
 37

	)

3412 
	#R_TILEGX_IMM16_X0_HW1
 38

	)

3413 
	#R_TILEGX_IMM16_X1_HW1
 39

	)

3414 
	#R_TILEGX_IMM16_X0_HW2
 40

	)

3415 
	#R_TILEGX_IMM16_X1_HW2
 41

	)

3416 
	#R_TILEGX_IMM16_X0_HW3
 42

	)

3417 
	#R_TILEGX_IMM16_X1_HW3
 43

	)

3418 
	#R_TILEGX_IMM16_X0_HW0_LAST
 44

	)

3419 
	#R_TILEGX_IMM16_X1_HW0_LAST
 45

	)

3420 
	#R_TILEGX_IMM16_X0_HW1_LAST
 46

	)

3421 
	#R_TILEGX_IMM16_X1_HW1_LAST
 47

	)

3422 
	#R_TILEGX_IMM16_X0_HW2_LAST
 48

	)

3423 
	#R_TILEGX_IMM16_X1_HW2_LAST
 49

	)

3424 
	#R_TILEGX_IMM16_X0_HW0_PCREL
 50

	)

3425 
	#R_TILEGX_IMM16_X1_HW0_PCREL
 51

	)

3426 
	#R_TILEGX_IMM16_X0_HW1_PCREL
 52

	)

3427 
	#R_TILEGX_IMM16_X1_HW1_PCREL
 53

	)

3428 
	#R_TILEGX_IMM16_X0_HW2_PCREL
 54

	)

3429 
	#R_TILEGX_IMM16_X1_HW2_PCREL
 55

	)

3430 
	#R_TILEGX_IMM16_X0_HW3_PCREL
 56

	)

3431 
	#R_TILEGX_IMM16_X1_HW3_PCREL
 57

	)

3432 
	#R_TILEGX_IMM16_X0_HW0_LAST_PCREL
 58

	)

3433 
	#R_TILEGX_IMM16_X1_HW0_LAST_PCREL
 59

	)

3434 
	#R_TILEGX_IMM16_X0_HW1_LAST_PCREL
 60

	)

3435 
	#R_TILEGX_IMM16_X1_HW1_LAST_PCREL
 61

	)

3436 
	#R_TILEGX_IMM16_X0_HW2_LAST_PCREL
 62

	)

3437 
	#R_TILEGX_IMM16_X1_HW2_LAST_PCREL
 63

	)

3438 
	#R_TILEGX_IMM16_X0_HW0_GOT
 64

	)

3439 
	#R_TILEGX_IMM16_X1_HW0_GOT
 65

	)

3440 
	#R_TILEGX_IMM16_X0_HW0_PLT_PCREL
 66

	)

3441 
	#R_TILEGX_IMM16_X1_HW0_PLT_PCREL
 67

	)

3442 
	#R_TILEGX_IMM16_X0_HW1_PLT_PCREL
 68

	)

3443 
	#R_TILEGX_IMM16_X1_HW1_PLT_PCREL
 69

	)

3444 
	#R_TILEGX_IMM16_X0_HW2_PLT_PCREL
 70

	)

3445 
	#R_TILEGX_IMM16_X1_HW2_PLT_PCREL
 71

	)

3446 
	#R_TILEGX_IMM16_X0_HW0_LAST_GOT
 72

	)

3447 
	#R_TILEGX_IMM16_X1_HW0_LAST_GOT
 73

	)

3448 
	#R_TILEGX_IMM16_X0_HW1_LAST_GOT
 74

	)

3449 
	#R_TILEGX_IMM16_X1_HW1_LAST_GOT
 75

	)

3450 
	#R_TILEGX_IMM16_X0_HW3_PLT_PCREL
 76

	)

3451 
	#R_TILEGX_IMM16_X1_HW3_PLT_PCREL
 77

	)

3452 
	#R_TILEGX_IMM16_X0_HW0_TLS_GD
 78

	)

3453 
	#R_TILEGX_IMM16_X1_HW0_TLS_GD
 79

	)

3454 
	#R_TILEGX_IMM16_X0_HW0_TLS_LE
 80

	)

3455 
	#R_TILEGX_IMM16_X1_HW0_TLS_LE
 81

	)

3456 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE
 82

	)

3457 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE
 83

	)

3458 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE
 84

	)

3459 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE
 85

	)

3460 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD
 86

	)

3461 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD
 87

	)

3462 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD
 88

	)

3463 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD
 89

	)

3465 
	#R_TILEGX_IMM16_X0_HW0_TLS_IE
 92

	)

3466 
	#R_TILEGX_IMM16_X1_HW0_TLS_IE
 93

	)

3467 
	#R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL
 94

	)

3468 
	#R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL
 95

	)

3469 
	#R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL
 96

	)

3470 
	#R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL
 97

	)

3471 
	#R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL
 98

	)

3472 
	#R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL
 99

	)

3473 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE
 100

	)

3474 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE
 101

	)

3475 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE
 102

	)

3476 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE
 103

	)

3478 
	#R_TILEGX_TLS_DTPMOD64
 106

	)

3479 
	#R_TILEGX_TLS_DTPOFF64
 107

	)

3480 
	#R_TILEGX_TLS_TPOFF64
 108

	)

3481 
	#R_TILEGX_TLS_DTPMOD32
 109

	)

3482 
	#R_TILEGX_TLS_DTPOFF32
 110

	)

3483 
	#R_TILEGX_TLS_TPOFF32
 111

	)

3484 
	#R_TILEGX_TLS_GD_CALL
 112

	)

3485 
	#R_TILEGX_IMM8_X0_TLS_GD_ADD
 113

	)

3486 
	#R_TILEGX_IMM8_X1_TLS_GD_ADD
 114

	)

3487 
	#R_TILEGX_IMM8_Y0_TLS_GD_ADD
 115

	)

3488 
	#R_TILEGX_IMM8_Y1_TLS_GD_ADD
 116

	)

3489 
	#R_TILEGX_TLS_IE_LOAD
 117

	)

3490 
	#R_TILEGX_IMM8_X0_TLS_ADD
 118

	)

3491 
	#R_TILEGX_IMM8_X1_TLS_ADD
 119

	)

3492 
	#R_TILEGX_IMM8_Y0_TLS_ADD
 120

	)

3493 
	#R_TILEGX_IMM8_Y1_TLS_ADD
 121

	)

3495 
	#R_TILEGX_GNU_VTINHERIT
 128

	)

3496 
	#R_TILEGX_GNU_VTENTRY
 129

	)

3498 
	#R_TILEGX_NUM
 130

	)

3501 
	g__END_DECLS


	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/error.h

19 #i‚de‡
_ERROR_H


20 
	#_ERROR_H
 1

	)

22 
	~<„©uªs.h
>

25 
__BEGIN_DECLS


31 
	$îr‹
 (
__°©us
, 
__î∫um
, c⁄° *
__f‹m©
, ...)

32 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

34 
	$îr‹_©_löe
 (
__°©us
, 
__î∫um
, c⁄° *
__‚ame
,

35 
__löío
, c⁄° *
__f‹m©
, ...)

36 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 5, 6)));

41 (*
îr‹_¥öt_¥og«me
) ();

44 
îr‹_mesßge_cou¡
;

48 
îr‹_⁄e_≥r_löe
;

51 #i‡
deföed
 
__exã∫_Æways_ölöe
 && deföed 
__va_¨g_∑ck


52 
	~<bôs/îr‹.h
>

55 
__END_DECLS


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

77 
	~<bôs/°©.h
>

79 
	#S_IFMT
 
__S_IFMT


	)

80 
	#S_IFDIR
 
__S_IFDIR


	)

81 
	#S_IFCHR
 
__S_IFCHR


	)

82 
	#S_IFBLK
 
__S_IFBLK


	)

83 
	#S_IFREG
 
__S_IFREG


	)

84 #ifde‡
__S_IFIFO


85 
	#S_IFIFO
 
__S_IFIFO


	)

87 #ifde‡
__S_IFLNK


88 
	#S_IFLNK
 
__S_IFLNK


	)

90 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


91 
	#S_IFSOCK
 
__S_IFSOCK


	)

96 
	#S_ISUID
 
__S_ISUID


	)

97 
	#S_ISGID
 
__S_ISGID


	)

99 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


101 
	#S_ISVTX
 
__S_ISVTX


	)

104 
	#S_IRUSR
 
__S_IREAD


	)

105 
	#S_IWUSR
 
__S_IWRITE


	)

106 
	#S_IXUSR
 
__S_IEXEC


	)

108 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

110 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

111 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

112 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

114 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

116 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

117 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

118 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

120 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

123 #ifdef 
__USE_MISC


124 #i‚de‡
R_OK


127 
	#R_OK
 4

	)

128 
	#W_OK
 2

	)

129 
	#X_OK
 1

	)

130 
	#F_OK
 0

	)

135 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


136 
	#SEEK_SET
 0

	)

137 
	#SEEK_CUR
 1

	)

138 
	#SEEK_END
 2

	)

146 
f˙é
 (
__fd
, 
__cmd
, ...);

155 #i‚de‡
__USE_FILE_OFFSET64


156 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

158 #ifde‡
__REDIRECT


159 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

160 
	`__n⁄nuŒ
 ((1));

162 
	#›í
 
›í64


	)

165 #ifde‡
__USE_LARGEFILE64


166 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

169 #ifde‡
__USE_ATFILE


179 #i‚de‡
__USE_FILE_OFFSET64


180 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

181 
	`__n⁄nuŒ
 ((2));

183 #ifde‡
__REDIRECT


184 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

185 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

187 
	#›í©
 
›í©64


	)

190 #ifde‡
__USE_LARGEFILE64


191 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

192 
	`__n⁄nuŒ
 ((2));

201 #i‚de‡
__USE_FILE_OFFSET64


202 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

204 #ifde‡
__REDIRECT


205 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

206 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

208 
	#¸ót
 
¸ót64


	)

211 #ifde‡
__USE_LARGEFILE64


212 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

215 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

216 && !
deföed
 
__USE_POSIX
))

225 
	#F_ULOCK
 0

	)

226 
	#F_LOCK
 1

	)

227 
	#F_TLOCK
 2

	)

228 
	#F_TEST
 3

	)

230 #i‚de‡
__USE_FILE_OFFSET64


231 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

233 #ifde‡
__REDIRECT


234 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

236 
	#lockf
 
lockf64


	)

239 #ifde‡
__USE_LARGEFILE64


240 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

244 #ifde‡
__USE_XOPEN2K


247 #i‚de‡
__USE_FILE_OFFSET64


248 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

249 
__advi£
Ë
__THROW
;

251 #ifde‡
__REDIRECT_NTH


252 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

253 
__off64_t
 
__Àn
, 
__advi£
),

254 
posix_Ádvi£64
);

256 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

259 #ifde‡
__USE_LARGEFILE64


260 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

261 
__advi£
Ë
__THROW
;

269 #i‚de‡
__USE_FILE_OFFSET64


270 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

272 #ifde‡
__REDIRECT


273 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

274 
__off64_t
 
__Àn
),

275 
posix_ÁŒoˇã64
);

277 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

280 #ifde‡
__USE_LARGEFILE64


281 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

287 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

288 && 
deföed
 
__va_¨g_∑ck_Àn


289 
	~<bôs/f˙é2.h
>

292 
__END_DECLS


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC11


98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_ISOCXX11


101 #unde‡
__USE_POSIX


102 #unde‡
__USE_POSIX2


103 #unde‡
__USE_POSIX199309


104 #unde‡
__USE_POSIX199506


105 #unde‡
__USE_XOPEN


106 #unde‡
__USE_XOPEN_EXTENDED


107 #unde‡
__USE_UNIX98


108 #unde‡
__USE_XOPEN2K


109 #unde‡
__USE_XOPEN2KXSI


110 #unde‡
__USE_XOPEN2K8


111 #unde‡
__USE_XOPEN2K8XSI


112 #unde‡
__USE_LARGEFILE


113 #unde‡
__USE_LARGEFILE64


114 #unde‡
__USE_FILE_OFFSET64


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

135 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


136 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

137 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

139 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

146 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

147 && !
deföed
 
	g_DEFAULT_SOURCE


152 #unde‡
_DEFAULT_SOURCE


153 
	#_DEFAULT_SOURCE
 1

	)

157 #ifde‡
_GNU_SOURCE


158 #unde‡
_ISOC95_SOURCE


159 
	#_ISOC95_SOURCE
 1

	)

160 #unde‡
_ISOC99_SOURCE


161 
	#_ISOC99_SOURCE
 1

	)

162 #unde‡
_ISOC11_SOURCE


163 
	#_ISOC11_SOURCE
 1

	)

164 #unde‡
_POSIX_SOURCE


165 
	#_POSIX_SOURCE
 1

	)

166 #unde‡
_POSIX_C_SOURCE


167 
	#_POSIX_C_SOURCE
 200809L

	)

168 #unde‡
_XOPEN_SOURCE


169 
	#_XOPEN_SOURCE
 700

	)

170 #unde‡
_XOPEN_SOURCE_EXTENDED


171 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

172 #unde‡
_LARGEFILE64_SOURCE


173 
	#_LARGEFILE64_SOURCE
 1

	)

174 #unde‡
_DEFAULT_SOURCE


175 
	#_DEFAULT_SOURCE
 1

	)

176 #unde‡
_ATFILE_SOURCE


177 
	#_ATFILE_SOURCE
 1

	)

182 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

183 || (!
deföed
 
	g__STRICT_ANSI__
 \

184 && !
deföed
 
	g_ISOC99_SOURCE
 \

185 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

186 && !
deföed
 
	g_XOPEN_SOURCE
))

187 #unde‡
_DEFAULT_SOURCE


188 
	#_DEFAULT_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC11_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

194 
	#__USE_ISOC11
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

200 
	#__USE_ISOC99
 1

	)

204 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

205 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

206 
	#__USE_ISOC95
 1

	)

213 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

214 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

215 
	#__USE_ISOCXX11
 1

	)

221 #ifde‡
_DEFAULT_SOURCE


222 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


223 
	#__USE_POSIX_IMPLICITLY
 1

	)

225 #unde‡
_POSIX_SOURCE


226 
	#_POSIX_SOURCE
 1

	)

227 #unde‡
_POSIX_C_SOURCE


228 
	#_POSIX_C_SOURCE
 200809L

	)

230 #i‡((!
deföed
 
__STRICT_ANSI__
 \

231 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

232 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

233 
	#_POSIX_SOURCE
 1

	)

234 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

235 
	#_POSIX_C_SOURCE
 2

	)

236 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

237 
	#_POSIX_C_SOURCE
 199506L

	)

238 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

239 
	#_POSIX_C_SOURCE
 200112L

	)

241 
	#_POSIX_C_SOURCE
 200809L

	)

243 
	#__USE_POSIX_IMPLICITLY
 1

	)

246 #i‡(
deföed
 
_POSIX_SOURCE
 \

247 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

248 || 
deföed
 
_XOPEN_SOURCE
)

249 
	#__USE_POSIX
 1

	)

252 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


253 
	#__USE_POSIX2
 1

	)

256 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

257 
	#__USE_POSIX199309
 1

	)

260 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

261 
	#__USE_POSIX199506
 1

	)

264 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

265 
	#__USE_XOPEN2K
 1

	)

266 #unde‡
__USE_ISOC95


267 
	#__USE_ISOC95
 1

	)

268 #unde‡
__USE_ISOC99


269 
	#__USE_ISOC99
 1

	)

272 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

273 
	#__USE_XOPEN2K8
 1

	)

274 #unde‡
_ATFILE_SOURCE


275 
	#_ATFILE_SOURCE
 1

	)

278 #ifdef 
_XOPEN_SOURCE


279 
	#__USE_XOPEN
 1

	)

280 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

281 
	#__USE_XOPEN_EXTENDED
 1

	)

282 
	#__USE_UNIX98
 1

	)

283 #unde‡
_LARGEFILE_SOURCE


284 
	#_LARGEFILE_SOURCE
 1

	)

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

286 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

287 
	#__USE_XOPEN2K8
 1

	)

288 
	#__USE_XOPEN2K8XSI
 1

	)

290 
	#__USE_XOPEN2K
 1

	)

291 
	#__USE_XOPEN2KXSI
 1

	)

292 #unde‡
__USE_ISOC95


293 
	#__USE_ISOC95
 1

	)

294 #unde‡
__USE_ISOC99


295 
	#__USE_ISOC99
 1

	)

298 #ifde‡
_XOPEN_SOURCE_EXTENDED


299 
	#__USE_XOPEN_EXTENDED
 1

	)

304 #ifde‡
_LARGEFILE_SOURCE


305 
	#__USE_LARGEFILE
 1

	)

308 #ifde‡
_LARGEFILE64_SOURCE


309 
	#__USE_LARGEFILE64
 1

	)

312 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

313 
	#__USE_FILE_OFFSET64
 1

	)

316 #i‡
deföed
 
_DEFAULT_SOURCE


317 
	#__USE_MISC
 1

	)

320 #ifdef 
_ATFILE_SOURCE


321 
	#__USE_ATFILE
 1

	)

324 #ifdef 
_GNU_SOURCE


325 
	#__USE_GNU
 1

	)

328 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


329 
	#__USE_REENTRANT
 1

	)

332 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

333 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

334 #i‡
_FORTIFY_SOURCE
 > 1

335 
	#__USE_FORTIFY_LEVEL
 2

	)

337 
	#__USE_FORTIFY_LEVEL
 1

	)

340 
	#__USE_FORTIFY_LEVEL
 0

	)

345 
	~<°dc-¥edef.h
>

353 #unde‡
__GNU_LIBRARY__


354 
	#__GNU_LIBRARY__
 6

	)

358 
	#__GLIBC__
 2

	)

359 
	#__GLIBC_MINOR__
 23

	)

361 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

362 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

365 #i‚de‡
__ASSEMBLER__


366 #i‚de‡
_SYS_CDEFS_H


367 
	~<sys/cdefs.h
>

372 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


373 
	#__USE_LARGEFILE
 1

	)

374 
	#__USE_LARGEFILE64
 1

	)

380 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

381 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

382 && 
deföed
 
	g__exã∫_ölöe


383 
	#__USE_EXTERN_INLINES
 1

	)

391 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/glob.h

18 #i‚def 
_GLOB_H


19 
	#_GLOB_H
 1

	)

21 
	~<sys/cdefs.h
>

23 
	g__BEGIN_DECLS


26 #i‚de‡
__size_t


27 
__SIZE_TYPE__
 
	t__size_t
;

28 #i‡
deföed
 
__USE_XOPEN
 || 
__USE_XOPEN2K8


29 
__SIZE_TYPE__
 
	tsize_t
;

34 #unde‡
__size_t


35 
	#__size_t
 
size_t


	)

39 
	#GLOB_ERR
 (1 << 0)

	)

40 
	#GLOB_MARK
 (1 << 1)

	)

41 
	#GLOB_NOSORT
 (1 << 2)

	)

42 
	#GLOB_DOOFFS
 (1 << 3)

	)

43 
	#GLOB_NOCHECK
 (1 << 4)

	)

44 
	#GLOB_APPEND
 (1 << 5)

	)

45 
	#GLOB_NOESCAPE
 (1 << 6)

	)

46 
	#GLOB_PERIOD
 (1 << 7)

	)

48 #i‡!
deföed
 
__USE_POSIX2
 || deföed 
__USE_MISC


49 
	#GLOB_MAGCHAR
 (1 << 8)

	)

50 
	#GLOB_ALTDIRFUNC
 (1 << 9)

	)

51 
	#GLOB_BRACE
 (1 << 10)

	)

52 
	#GLOB_NOMAGIC
 (1 << 11)

	)

53 
	#GLOB_TILDE
 (1 << 12)

	)

54 
	#GLOB_ONLYDIR
 (1 << 13)

	)

55 
	#GLOB_TILDE_CHECK
 (1 << 14)

	)

57 
	#__GLOB_FLAGS
 (
GLOB_ERR
|
GLOB_MARK
|
GLOB_NOSORT
|
GLOB_DOOFFS
| \

58 
GLOB_NOESCAPE
|
GLOB_NOCHECK
|
GLOB_APPEND
| \

59 
GLOB_PERIOD
|
GLOB_ALTDIRFUNC
|
GLOB_BRACE
| \

60 
GLOB_NOMAGIC
|
GLOB_TILDE
|
GLOB_ONLYDIR
|
GLOB_TILDE_CHECK
)

	)

62 
	#__GLOB_FLAGS
 (
GLOB_ERR
|
GLOB_MARK
|
GLOB_NOSORT
|
GLOB_DOOFFS
| \

63 
GLOB_NOESCAPE
|
GLOB_NOCHECK
|
GLOB_APPEND
| \

64 
GLOB_PERIOD
)

	)

68 
	#GLOB_NOSPACE
 1

	)

69 
	#GLOB_ABORTED
 2

	)

70 
	#GLOB_NOMATCH
 3

	)

71 
	#GLOB_NOSYS
 4

	)

72 #ifde‡
__USE_GNU


75 
	#GLOB_ABEND
 
GLOB_ABORTED


	)

79 #ifde‡
__USE_GNU


80 
	g°©
;

84 
__size_t
 
	mgl_∑thc
;

85 **
	mgl_∑thv
;

86 
__size_t
 
	mgl_offs
;

87 
	mgl_Êags
;

91 (*
	mgl_˛o£dú
) (*);

92 #ifde‡
__USE_GNU


93 
	mdúít
 *(*
	mgl_ªaddú
) (*);

95 *(*
	mgl_ªaddú
) (*);

97 *(*
	mgl_›ídú
) (const *);

98 #ifde‡
__USE_GNU


99 (*
	mgl_l°©
Ë(c⁄° *
	m__ª°ri˘
, 
°©
 *__restrict);

100 (*
	mgl_°©
Ë(c⁄° *
	m__ª°ri˘
, 
°©
 *__restrict);

102 (*
	mgl_l°©
Ë(c⁄° *
	m__ª°ri˘
, *__restrict);

103 (*
	mgl_°©
Ë(c⁄° *
	m__ª°ri˘
, *__restrict);

105 } 
	tglob_t
;

107 #ifde‡
__USE_LARGEFILE64


108 #ifde‡
__USE_GNU


109 
	g°©64
;

113 
__size_t
 
	mgl_∑thc
;

114 **
	mgl_∑thv
;

115 
__size_t
 
	mgl_offs
;

116 
	mgl_Êags
;

120 (*
	mgl_˛o£dú
) (*);

121 #ifde‡
__USE_GNU


122 
	mdúít64
 *(*
	mgl_ªaddú
) (*);

124 *(*
	mgl_ªaddú
) (*);

126 *(*
	mgl_›ídú
) (const *);

127 #ifde‡
__USE_GNU


128 (*
	mgl_l°©
Ë(c⁄° *
	m__ª°ri˘
, 
°©64
 *__restrict);

129 (*
	mgl_°©
Ë(c⁄° *
	m__ª°ri˘
, 
°©64
 *__restrict);

131 (*
	mgl_l°©
Ë(c⁄° *
	m__ª°ri˘
, *__restrict);

132 (*
	mgl_°©
Ë(c⁄° *
	m__ª°ri˘
, *__restrict);

134 } 
	tglob64_t
;

145 #i‡!
deföed
 
__USE_FILE_OFFSET64


146 
	$glob
 (c⁄° *
__ª°ri˘
 
__∑âîn
, 
__Êags
,

147 (*
__îrfunc
) (const *, ),

148 
glob_t
 *
__ª°ri˘
 
__pglob
Ë
__THROW
;

151 
	$glob‰ì
 (
glob_t
 *
__pglob
Ë
__THROW
;

153 
	`__REDIRECT_NTH
 (
glob
, (c⁄° *
__ª°ri˘
 
__∑âîn
,

154 
__Êags
,

155 (*
__îrfunc
) (const *, ),

156 
glob_t
 *
__ª°ri˘
 
__pglob
), 
glob64
);

158 
	`__REDIRECT_NTH
 (
glob‰ì
, (
glob_t
 *
__pglob
), 
glob‰ì64
);

161 #ifde‡
__USE_LARGEFILE64


162 
	$glob64
 (c⁄° *
__ª°ri˘
 
__∑âîn
, 
__Êags
,

163 (*
__îrfunc
) (const *, ),

164 
glob64_t
 *
__ª°ri˘
 
__pglob
Ë
__THROW
;

166 
	$glob‰ì64
 (
glob64_t
 *
__pglob
Ë
__THROW
;

170 #ifde‡
__USE_GNU


176 
	$glob_∑âîn_p
 (c⁄° *
__∑âîn
, 
__quŸe
Ë
__THROW
;

179 
__END_DECLS


	@/usr/include/grp.h

22 #i‚def 
_GRP_H


23 
	#_GRP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 
	#__√ed_size_t


	)

32 
	~<°ddef.h
>

36 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
Ë&& !deföed 
__gid_t_deföed


37 
__gid_t
 
	tgid_t
;

38 
	#__gid_t_deföed


	)

42 
	sgroup


44 *
	mgr_«me
;

45 *
	mgr_∑sswd
;

46 
__gid_t
 
	mgr_gid
;

47 **
	mgr_mem
;

51 #ifde‡
__USE_MISC


52 
	#__√ed_FILE


	)

53 
	~<°dio.h
>

57 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


62 
£tgª¡
 ();

68 
ídgª¡
 ();

74 
group
 *
gëgª¡
 ();

77 #ifdef 
__USE_MISC


84 
group
 *
fgëgª¡
 (
FILE
 *
__°ªam
);

87 #ifde‡
__USE_GNU


94 
putgª¡
 (c⁄° 
group
 *
__ª°ri˘
 
__p
,

95 
FILE
 *
__ª°ri˘
 
__f
);

102 
group
 *
gëgrgid
 (
__gid_t
 
__gid
);

108 
group
 *
gëg∫am
 (c⁄° *
__«me
);

110 #ifde‡
__USE_POSIX


112 #ifde‡
__USE_MISC


115 
	#NSS_BUFLEN_GROUP
 1024

	)

131 #ifde‡
__USE_GNU


132 
gëgª¡_r
 (
group
 *
__ª°ri˘
 
__ªsu…buf
,

133 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

134 
group
 **
__ª°ri˘
 
__ªsu…
);

141 
gëgrgid_r
 (
__gid_t
 
__gid
, 
group
 *
__ª°ri˘
 
__ªsu…buf
,

142 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

143 
group
 **
__ª°ri˘
 
__ªsu…
);

149 
gëg∫am_r
 (c⁄° *
__ª°ri˘
 
__«me
,

150 
group
 *
__ª°ri˘
 
__ªsu…buf
,

151 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

152 
group
 **
__ª°ri˘
 
__ªsu…
);

154 #ifdef 
__USE_MISC


162 
fgëgª¡_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

163 
group
 *
__ª°ri˘
 
__ªsu…buf
,

164 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

165 
group
 **
__ª°ri˘
 
__ªsu…
);

171 #ifdef 
__USE_MISC


173 
	#__√ed_size_t


	)

174 
	~<°ddef.h
>

177 
	$£tgroups
 (
size_t
 
__n
, c⁄° 
__gid_t
 *
__groups
Ë
__THROW
;

187 
	`gëgrou∂i°
 (c⁄° *
__u£r
, 
__gid_t
 
__group
,

188 
__gid_t
 *
__groups
, *
__ngroups
);

198 
	`öôgroups
 (c⁄° *
__u£r
, 
__gid_t
 
__group
);

202 
__END_DECLS


	@/usr/include/langinfo.h

19 #i‚de‡
_LANGINFO_H


20 
	#_LANGINFO_H
 1

	)

23 
	~<∆_ty≥s.h
>

25 
	~<bôs/loˇÀ.h
>

28 
	g__BEGIN_DECLS


34 
	#_NL_ITEM
(
ˇãg‹y
, 
ödex
Ë(((ˇãg‹yË<< 16Ë| (ödex))

	)

37 
	#_NL_ITEM_CATEGORY
(
ôem
Ë((Ë(ôemË>> 16)

	)

38 
	#_NL_ITEM_INDEX
(
ôem
Ë((Ë(ôemË& 0xffff)

	)

46 
	mABDAY_1
 = 
_NL_ITEM
 (
__LC_TIME
, 0),

47 
	#ABDAY_1
 
ABDAY_1


	)

48 
	mABDAY_2
,

49 
	#ABDAY_2
 
ABDAY_2


	)

50 
	mABDAY_3
,

51 
	#ABDAY_3
 
ABDAY_3


	)

52 
	mABDAY_4
,

53 
	#ABDAY_4
 
ABDAY_4


	)

54 
	mABDAY_5
,

55 
	#ABDAY_5
 
ABDAY_5


	)

56 
	mABDAY_6
,

57 
	#ABDAY_6
 
ABDAY_6


	)

58 
	mABDAY_7
,

59 
	#ABDAY_7
 
ABDAY_7


	)

62 
	mDAY_1
,

63 
	#DAY_1
 
DAY_1


	)

64 
	mDAY_2
,

65 
	#DAY_2
 
DAY_2


	)

66 
	mDAY_3
,

67 
	#DAY_3
 
DAY_3


	)

68 
	mDAY_4
,

69 
	#DAY_4
 
DAY_4


	)

70 
	mDAY_5
,

71 
	#DAY_5
 
DAY_5


	)

72 
	mDAY_6
,

73 
	#DAY_6
 
DAY_6


	)

74 
	mDAY_7
,

75 
	#DAY_7
 
DAY_7


	)

78 
	mABMON_1
,

79 
	#ABMON_1
 
ABMON_1


	)

80 
	mABMON_2
,

81 
	#ABMON_2
 
ABMON_2


	)

82 
	mABMON_3
,

83 
	#ABMON_3
 
ABMON_3


	)

84 
	mABMON_4
,

85 
	#ABMON_4
 
ABMON_4


	)

86 
	mABMON_5
,

87 
	#ABMON_5
 
ABMON_5


	)

88 
	mABMON_6
,

89 
	#ABMON_6
 
ABMON_6


	)

90 
	mABMON_7
,

91 
	#ABMON_7
 
ABMON_7


	)

92 
	mABMON_8
,

93 
	#ABMON_8
 
ABMON_8


	)

94 
	mABMON_9
,

95 
	#ABMON_9
 
ABMON_9


	)

96 
	mABMON_10
,

97 
	#ABMON_10
 
ABMON_10


	)

98 
	mABMON_11
,

99 
	#ABMON_11
 
ABMON_11


	)

100 
	mABMON_12
,

101 
	#ABMON_12
 
ABMON_12


	)

104 
	mMON_1
,

105 
	#MON_1
 
MON_1


	)

106 
	mMON_2
,

107 
	#MON_2
 
MON_2


	)

108 
	mMON_3
,

109 
	#MON_3
 
MON_3


	)

110 
	mMON_4
,

111 
	#MON_4
 
MON_4


	)

112 
	mMON_5
,

113 
	#MON_5
 
MON_5


	)

114 
	mMON_6
,

115 
	#MON_6
 
MON_6


	)

116 
	mMON_7
,

117 
	#MON_7
 
MON_7


	)

118 
	mMON_8
,

119 
	#MON_8
 
MON_8


	)

120 
	mMON_9
,

121 
	#MON_9
 
MON_9


	)

122 
	mMON_10
,

123 
	#MON_10
 
MON_10


	)

124 
	mMON_11
,

125 
	#MON_11
 
MON_11


	)

126 
	mMON_12
,

127 
	#MON_12
 
MON_12


	)

129 
	mAM_STR
,

130 
	#AM_STR
 
AM_STR


	)

131 
	mPM_STR
,

132 
	#PM_STR
 
PM_STR


	)

134 
	mD_T_FMT
,

135 
	#D_T_FMT
 
D_T_FMT


	)

136 
	mD_FMT
,

137 
	#D_FMT
 
D_FMT


	)

138 
	mT_FMT
,

139 
	#T_FMT
 
T_FMT


	)

140 
	mT_FMT_AMPM
,

141 
	#T_FMT_AMPM
 
T_FMT_AMPM


	)

143 
	mERA
,

144 
	#ERA
 
ERA


	)

145 
	m__ERA_YEAR
,

146 #ifde‡
__USE_GNU


147 
	#ERA_YEAR
 
__ERA_YEAR


	)

149 
	mERA_D_FMT
,

150 
	#ERA_D_FMT
 
ERA_D_FMT


	)

151 
	mALT_DIGITS
,

152 
	#ALT_DIGITS
 
ALT_DIGITS


	)

153 
	mERA_D_T_FMT
,

154 
	#ERA_D_T_FMT
 
ERA_D_T_FMT


	)

155 
	mERA_T_FMT
,

156 
	#ERA_T_FMT
 
ERA_T_FMT


	)

158 
	m_NL_TIME_ERA_NUM_ENTRIES
,

159 
	m_NL_TIME_ERA_ENTRIES
,

161 
	m_NL_WABDAY_1
,

162 
	m_NL_WABDAY_2
,

163 
	m_NL_WABDAY_3
,

164 
	m_NL_WABDAY_4
,

165 
	m_NL_WABDAY_5
,

166 
	m_NL_WABDAY_6
,

167 
	m_NL_WABDAY_7
,

170 
	m_NL_WDAY_1
,

171 
	m_NL_WDAY_2
,

172 
	m_NL_WDAY_3
,

173 
	m_NL_WDAY_4
,

174 
	m_NL_WDAY_5
,

175 
	m_NL_WDAY_6
,

176 
	m_NL_WDAY_7
,

179 
	m_NL_WABMON_1
,

180 
	m_NL_WABMON_2
,

181 
	m_NL_WABMON_3
,

182 
	m_NL_WABMON_4
,

183 
	m_NL_WABMON_5
,

184 
	m_NL_WABMON_6
,

185 
	m_NL_WABMON_7
,

186 
	m_NL_WABMON_8
,

187 
	m_NL_WABMON_9
,

188 
	m_NL_WABMON_10
,

189 
	m_NL_WABMON_11
,

190 
	m_NL_WABMON_12
,

193 
	m_NL_WMON_1
,

194 
	m_NL_WMON_2
,

195 
	m_NL_WMON_3
,

196 
	m_NL_WMON_4
,

197 
	m_NL_WMON_5
,

198 
	m_NL_WMON_6
,

199 
	m_NL_WMON_7
,

200 
	m_NL_WMON_8
,

201 
	m_NL_WMON_9
,

202 
	m_NL_WMON_10
,

203 
	m_NL_WMON_11
,

204 
	m_NL_WMON_12
,

206 
	m_NL_WAM_STR
,

207 
	m_NL_WPM_STR
,

209 
	m_NL_WD_T_FMT
,

210 
	m_NL_WD_FMT
,

211 
	m_NL_WT_FMT
,

212 
	m_NL_WT_FMT_AMPM
,

214 
	m_NL_WERA_YEAR
,

215 
	m_NL_WERA_D_FMT
,

216 
	m_NL_WALT_DIGITS
,

217 
	m_NL_WERA_D_T_FMT
,

218 
	m_NL_WERA_T_FMT
,

220 
	m_NL_TIME_WEEK_NDAYS
,

221 
	m_NL_TIME_WEEK_1STDAY
,

222 
	m_NL_TIME_WEEK_1STWEEK
,

223 
	m_NL_TIME_FIRST_WEEKDAY
,

224 
	m_NL_TIME_FIRST_WORKDAY
,

225 
	m_NL_TIME_CAL_DIRECTION
,

226 
	m_NL_TIME_TIMEZONE
,

228 
	m_DATE_FMT
,

229 
	#_DATE_FMT
 
_DATE_FMT


	)

230 
	m_NL_W_DATE_FMT
,

232 
	m_NL_TIME_CODESET
,

234 
	m_NL_NUM_LC_TIME
,

239 
	m_NL_COLLATE_NRULES
 = 
_NL_ITEM
 (
__LC_COLLATE
, 0),

240 
	m_NL_COLLATE_RULESETS
,

241 
	m_NL_COLLATE_TABLEMB
,

242 
	m_NL_COLLATE_WEIGHTMB
,

243 
	m_NL_COLLATE_EXTRAMB
,

244 
	m_NL_COLLATE_INDIRECTMB
,

245 
	m_NL_COLLATE_GAP1
,

246 
	m_NL_COLLATE_GAP2
,

247 
	m_NL_COLLATE_GAP3
,

248 
	m_NL_COLLATE_TABLEWC
,

249 
	m_NL_COLLATE_WEIGHTWC
,

250 
	m_NL_COLLATE_EXTRAWC
,

251 
	m_NL_COLLATE_INDIRECTWC
,

252 
	m_NL_COLLATE_SYMB_HASH_SIZEMB
,

253 
	m_NL_COLLATE_SYMB_TABLEMB
,

254 
	m_NL_COLLATE_SYMB_EXTRAMB
,

255 
	m_NL_COLLATE_COLLSEQMB
,

256 
	m_NL_COLLATE_COLLSEQWC
,

257 
	m_NL_COLLATE_CODESET
,

258 
	m_NL_NUM_LC_COLLATE
,

263 
	m_NL_CTYPE_CLASS
 = 
_NL_ITEM
 (
__LC_CTYPE
, 0),

264 
	m_NL_CTYPE_TOUPPER
,

265 
	m_NL_CTYPE_GAP1
,

266 
	m_NL_CTYPE_TOLOWER
,

267 
	m_NL_CTYPE_GAP2
,

268 
	m_NL_CTYPE_CLASS32
,

269 
	m_NL_CTYPE_GAP3
,

270 
	m_NL_CTYPE_GAP4
,

271 
	m_NL_CTYPE_GAP5
,

272 
	m_NL_CTYPE_GAP6
,

273 
	m_NL_CTYPE_CLASS_NAMES
,

274 
	m_NL_CTYPE_MAP_NAMES
,

275 
	m_NL_CTYPE_WIDTH
,

276 
	m_NL_CTYPE_MB_CUR_MAX
,

277 
	m_NL_CTYPE_CODESET_NAME
,

278 
	mCODESET
 = 
_NL_CTYPE_CODESET_NAME
,

279 
	#CODESET
 
CODESET


	)

280 
	m_NL_CTYPE_TOUPPER32
,

281 
	m_NL_CTYPE_TOLOWER32
,

282 
	m_NL_CTYPE_CLASS_OFFSET
,

283 
	m_NL_CTYPE_MAP_OFFSET
,

284 
	m_NL_CTYPE_INDIGITS_MB_LEN
,

285 
	m_NL_CTYPE_INDIGITS0_MB
,

286 
	m_NL_CTYPE_INDIGITS1_MB
,

287 
	m_NL_CTYPE_INDIGITS2_MB
,

288 
	m_NL_CTYPE_INDIGITS3_MB
,

289 
	m_NL_CTYPE_INDIGITS4_MB
,

290 
	m_NL_CTYPE_INDIGITS5_MB
,

291 
	m_NL_CTYPE_INDIGITS6_MB
,

292 
	m_NL_CTYPE_INDIGITS7_MB
,

293 
	m_NL_CTYPE_INDIGITS8_MB
,

294 
	m_NL_CTYPE_INDIGITS9_MB
,

295 
	m_NL_CTYPE_INDIGITS_WC_LEN
,

296 
	m_NL_CTYPE_INDIGITS0_WC
,

297 
	m_NL_CTYPE_INDIGITS1_WC
,

298 
	m_NL_CTYPE_INDIGITS2_WC
,

299 
	m_NL_CTYPE_INDIGITS3_WC
,

300 
	m_NL_CTYPE_INDIGITS4_WC
,

301 
	m_NL_CTYPE_INDIGITS5_WC
,

302 
	m_NL_CTYPE_INDIGITS6_WC
,

303 
	m_NL_CTYPE_INDIGITS7_WC
,

304 
	m_NL_CTYPE_INDIGITS8_WC
,

305 
	m_NL_CTYPE_INDIGITS9_WC
,

306 
	m_NL_CTYPE_OUTDIGIT0_MB
,

307 
	m_NL_CTYPE_OUTDIGIT1_MB
,

308 
	m_NL_CTYPE_OUTDIGIT2_MB
,

309 
	m_NL_CTYPE_OUTDIGIT3_MB
,

310 
	m_NL_CTYPE_OUTDIGIT4_MB
,

311 
	m_NL_CTYPE_OUTDIGIT5_MB
,

312 
	m_NL_CTYPE_OUTDIGIT6_MB
,

313 
	m_NL_CTYPE_OUTDIGIT7_MB
,

314 
	m_NL_CTYPE_OUTDIGIT8_MB
,

315 
	m_NL_CTYPE_OUTDIGIT9_MB
,

316 
	m_NL_CTYPE_OUTDIGIT0_WC
,

317 
	m_NL_CTYPE_OUTDIGIT1_WC
,

318 
	m_NL_CTYPE_OUTDIGIT2_WC
,

319 
	m_NL_CTYPE_OUTDIGIT3_WC
,

320 
	m_NL_CTYPE_OUTDIGIT4_WC
,

321 
	m_NL_CTYPE_OUTDIGIT5_WC
,

322 
	m_NL_CTYPE_OUTDIGIT6_WC
,

323 
	m_NL_CTYPE_OUTDIGIT7_WC
,

324 
	m_NL_CTYPE_OUTDIGIT8_WC
,

325 
	m_NL_CTYPE_OUTDIGIT9_WC
,

326 
	m_NL_CTYPE_TRANSLIT_TAB_SIZE
,

327 
	m_NL_CTYPE_TRANSLIT_FROM_IDX
,

328 
	m_NL_CTYPE_TRANSLIT_FROM_TBL
,

329 
	m_NL_CTYPE_TRANSLIT_TO_IDX
,

330 
	m_NL_CTYPE_TRANSLIT_TO_TBL
,

331 
	m_NL_CTYPE_TRANSLIT_DEFAULT_MISSING_LEN
,

332 
	m_NL_CTYPE_TRANSLIT_DEFAULT_MISSING
,

333 
	m_NL_CTYPE_TRANSLIT_IGNORE_LEN
,

334 
	m_NL_CTYPE_TRANSLIT_IGNORE
,

335 
	m_NL_CTYPE_MAP_TO_NONASCII
,

336 
	m_NL_CTYPE_NONASCII_CASE
,

337 
	m_NL_CTYPE_EXTRA_MAP_1
,

338 
	m_NL_CTYPE_EXTRA_MAP_2
,

339 
	m_NL_CTYPE_EXTRA_MAP_3
,

340 
	m_NL_CTYPE_EXTRA_MAP_4
,

341 
	m_NL_CTYPE_EXTRA_MAP_5
,

342 
	m_NL_CTYPE_EXTRA_MAP_6
,

343 
	m_NL_CTYPE_EXTRA_MAP_7
,

344 
	m_NL_CTYPE_EXTRA_MAP_8
,

345 
	m_NL_CTYPE_EXTRA_MAP_9
,

346 
	m_NL_CTYPE_EXTRA_MAP_10
,

347 
	m_NL_CTYPE_EXTRA_MAP_11
,

348 
	m_NL_CTYPE_EXTRA_MAP_12
,

349 
	m_NL_CTYPE_EXTRA_MAP_13
,

350 
	m_NL_CTYPE_EXTRA_MAP_14
,

351 
	m_NL_NUM_LC_CTYPE
,

356 
	m__INT_CURR_SYMBOL
 = 
_NL_ITEM
 (
__LC_MONETARY
, 0),

357 #ifde‡
__USE_GNU


358 
	#INT_CURR_SYMBOL
 
__INT_CURR_SYMBOL


	)

360 
	m__CURRENCY_SYMBOL
,

361 #ifde‡
__USE_GNU


362 
	#CURRENCY_SYMBOL
 
__CURRENCY_SYMBOL


	)

364 
	m__MON_DECIMAL_POINT
,

365 #ifde‡
__USE_GNU


366 
	#MON_DECIMAL_POINT
 
__MON_DECIMAL_POINT


	)

368 
	m__MON_THOUSANDS_SEP
,

369 #ifde‡
__USE_GNU


370 
	#MON_THOUSANDS_SEP
 
__MON_THOUSANDS_SEP


	)

372 
	m__MON_GROUPING
,

373 #ifde‡
__USE_GNU


374 
	#MON_GROUPING
 
__MON_GROUPING


	)

376 
	m__POSITIVE_SIGN
,

377 #ifde‡
__USE_GNU


378 
	#POSITIVE_SIGN
 
__POSITIVE_SIGN


	)

380 
	m__NEGATIVE_SIGN
,

381 #ifde‡
__USE_GNU


382 
	#NEGATIVE_SIGN
 
__NEGATIVE_SIGN


	)

384 
	m__INT_FRAC_DIGITS
,

385 #ifde‡
__USE_GNU


386 
	#INT_FRAC_DIGITS
 
__INT_FRAC_DIGITS


	)

388 
	m__FRAC_DIGITS
,

389 #ifde‡
__USE_GNU


390 
	#FRAC_DIGITS
 
__FRAC_DIGITS


	)

392 
	m__P_CS_PRECEDES
,

393 #ifde‡
__USE_GNU


394 
	#P_CS_PRECEDES
 
__P_CS_PRECEDES


	)

396 
	m__P_SEP_BY_SPACE
,

397 #ifde‡
__USE_GNU


398 
	#P_SEP_BY_SPACE
 
__P_SEP_BY_SPACE


	)

400 
	m__N_CS_PRECEDES
,

401 #ifde‡
__USE_GNU


402 
	#N_CS_PRECEDES
 
__N_CS_PRECEDES


	)

404 
	m__N_SEP_BY_SPACE
,

405 #ifde‡
__USE_GNU


406 
	#N_SEP_BY_SPACE
 
__N_SEP_BY_SPACE


	)

408 
	m__P_SIGN_POSN
,

409 #ifde‡
__USE_GNU


410 
	#P_SIGN_POSN
 
__P_SIGN_POSN


	)

412 
	m__N_SIGN_POSN
,

413 #ifde‡
__USE_GNU


414 
	#N_SIGN_POSN
 
__N_SIGN_POSN


	)

416 
	m_NL_MONETARY_CRNCYSTR
,

417 
	#CRNCYSTR
 
_NL_MONETARY_CRNCYSTR


	)

418 
	m__INT_P_CS_PRECEDES
,

419 #ifde‡
__USE_GNU


420 
	#INT_P_CS_PRECEDES
 
__INT_P_CS_PRECEDES


	)

422 
	m__INT_P_SEP_BY_SPACE
,

423 #ifde‡
__USE_GNU


424 
	#INT_P_SEP_BY_SPACE
 
__INT_P_SEP_BY_SPACE


	)

426 
	m__INT_N_CS_PRECEDES
,

427 #ifde‡
__USE_GNU


428 
	#INT_N_CS_PRECEDES
 
__INT_N_CS_PRECEDES


	)

430 
	m__INT_N_SEP_BY_SPACE
,

431 #ifde‡
__USE_GNU


432 
	#INT_N_SEP_BY_SPACE
 
__INT_N_SEP_BY_SPACE


	)

434 
	m__INT_P_SIGN_POSN
,

435 #ifde‡
__USE_GNU


436 
	#INT_P_SIGN_POSN
 
__INT_P_SIGN_POSN


	)

438 
	m__INT_N_SIGN_POSN
,

439 #ifde‡
__USE_GNU


440 
	#INT_N_SIGN_POSN
 
__INT_N_SIGN_POSN


	)

442 
	m_NL_MONETARY_DUO_INT_CURR_SYMBOL
,

443 
	m_NL_MONETARY_DUO_CURRENCY_SYMBOL
,

444 
	m_NL_MONETARY_DUO_INT_FRAC_DIGITS
,

445 
	m_NL_MONETARY_DUO_FRAC_DIGITS
,

446 
	m_NL_MONETARY_DUO_P_CS_PRECEDES
,

447 
	m_NL_MONETARY_DUO_P_SEP_BY_SPACE
,

448 
	m_NL_MONETARY_DUO_N_CS_PRECEDES
,

449 
	m_NL_MONETARY_DUO_N_SEP_BY_SPACE
,

450 
	m_NL_MONETARY_DUO_INT_P_CS_PRECEDES
,

451 
	m_NL_MONETARY_DUO_INT_P_SEP_BY_SPACE
,

452 
	m_NL_MONETARY_DUO_INT_N_CS_PRECEDES
,

453 
	m_NL_MONETARY_DUO_INT_N_SEP_BY_SPACE
,

454 
	m_NL_MONETARY_DUO_P_SIGN_POSN
,

455 
	m_NL_MONETARY_DUO_N_SIGN_POSN
,

456 
	m_NL_MONETARY_DUO_INT_P_SIGN_POSN
,

457 
	m_NL_MONETARY_DUO_INT_N_SIGN_POSN
,

458 
	m_NL_MONETARY_UNO_VALID_FROM
,

459 
	m_NL_MONETARY_UNO_VALID_TO
,

460 
	m_NL_MONETARY_DUO_VALID_FROM
,

461 
	m_NL_MONETARY_DUO_VALID_TO
,

462 
	m_NL_MONETARY_CONVERSION_RATE
,

463 
	m_NL_MONETARY_DECIMAL_POINT_WC
,

464 
	m_NL_MONETARY_THOUSANDS_SEP_WC
,

465 
	m_NL_MONETARY_CODESET
,

466 
	m_NL_NUM_LC_MONETARY
,

470 
	m__DECIMAL_POINT
 = 
_NL_ITEM
 (
__LC_NUMERIC
, 0),

471 #ifde‡
__USE_GNU


472 
	#DECIMAL_POINT
 
__DECIMAL_POINT


	)

474 
	mRADIXCHAR
 = 
__DECIMAL_POINT
,

475 
	#RADIXCHAR
 
RADIXCHAR


	)

476 
	m__THOUSANDS_SEP
,

477 #ifde‡
__USE_GNU


478 
	#THOUSANDS_SEP
 
__THOUSANDS_SEP


	)

480 
	mTHOUSEP
 = 
__THOUSANDS_SEP
,

481 
	#THOUSEP
 
THOUSEP


	)

482 
	m__GROUPING
,

483 #ifde‡
__USE_GNU


484 
	#GROUPING
 
__GROUPING


	)

486 
	m_NL_NUMERIC_DECIMAL_POINT_WC
,

487 
	m_NL_NUMERIC_THOUSANDS_SEP_WC
,

488 
	m_NL_NUMERIC_CODESET
,

489 
	m_NL_NUM_LC_NUMERIC
,

491 
	m__YESEXPR
 = 
_NL_ITEM
 (
__LC_MESSAGES
, 0),

492 
	#YESEXPR
 
__YESEXPR


	)

493 
	m__NOEXPR
,

494 
	#NOEXPR
 
__NOEXPR


	)

495 
	m__YESSTR
,

496 #i‡
deföed
 
__USE_GNU
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

497 
	#YESSTR
 
__YESSTR


	)

499 
	m__NOSTR
,

500 #i‡
deföed
 
__USE_GNU
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

501 
	#NOSTR
 
__NOSTR


	)

503 
	m_NL_MESSAGES_CODESET
,

504 
	m_NL_NUM_LC_MESSAGES
,

506 
	m_NL_PAPER_HEIGHT
 = 
_NL_ITEM
 (
__LC_PAPER
, 0),

507 
	m_NL_PAPER_WIDTH
,

508 
	m_NL_PAPER_CODESET
,

509 
	m_NL_NUM_LC_PAPER
,

511 
	m_NL_NAME_NAME_FMT
 = 
_NL_ITEM
 (
__LC_NAME
, 0),

512 
	m_NL_NAME_NAME_GEN
,

513 
	m_NL_NAME_NAME_MR
,

514 
	m_NL_NAME_NAME_MRS
,

515 
	m_NL_NAME_NAME_MISS
,

516 
	m_NL_NAME_NAME_MS
,

517 
	m_NL_NAME_CODESET
,

518 
	m_NL_NUM_LC_NAME
,

520 
	m_NL_ADDRESS_POSTAL_FMT
 = 
_NL_ITEM
 (
__LC_ADDRESS
, 0),

521 
	m_NL_ADDRESS_COUNTRY_NAME
,

522 
	m_NL_ADDRESS_COUNTRY_POST
,

523 
	m_NL_ADDRESS_COUNTRY_AB2
,

524 
	m_NL_ADDRESS_COUNTRY_AB3
,

525 
	m_NL_ADDRESS_COUNTRY_CAR
,

526 
	m_NL_ADDRESS_COUNTRY_NUM
,

527 
	m_NL_ADDRESS_COUNTRY_ISBN
,

528 
	m_NL_ADDRESS_LANG_NAME
,

529 
	m_NL_ADDRESS_LANG_AB
,

530 
	m_NL_ADDRESS_LANG_TERM
,

531 
	m_NL_ADDRESS_LANG_LIB
,

532 
	m_NL_ADDRESS_CODESET
,

533 
	m_NL_NUM_LC_ADDRESS
,

535 
	m_NL_TELEPHONE_TEL_INT_FMT
 = 
_NL_ITEM
 (
__LC_TELEPHONE
, 0),

536 
	m_NL_TELEPHONE_TEL_DOM_FMT
,

537 
	m_NL_TELEPHONE_INT_SELECT
,

538 
	m_NL_TELEPHONE_INT_PREFIX
,

539 
	m_NL_TELEPHONE_CODESET
,

540 
	m_NL_NUM_LC_TELEPHONE
,

542 
	m_NL_MEASUREMENT_MEASUREMENT
 = 
_NL_ITEM
 (
__LC_MEASUREMENT
, 0),

543 
	m_NL_MEASUREMENT_CODESET
,

544 
	m_NL_NUM_LC_MEASUREMENT
,

546 
	m_NL_IDENTIFICATION_TITLE
 = 
_NL_ITEM
 (
__LC_IDENTIFICATION
, 0),

547 
	m_NL_IDENTIFICATION_SOURCE
,

548 
	m_NL_IDENTIFICATION_ADDRESS
,

549 
	m_NL_IDENTIFICATION_CONTACT
,

550 
	m_NL_IDENTIFICATION_EMAIL
,

551 
	m_NL_IDENTIFICATION_TEL
,

552 
	m_NL_IDENTIFICATION_FAX
,

553 
	m_NL_IDENTIFICATION_LANGUAGE
,

554 
	m_NL_IDENTIFICATION_TERRITORY
,

555 
	m_NL_IDENTIFICATION_AUDIENCE
,

556 
	m_NL_IDENTIFICATION_APPLICATION
,

557 
	m_NL_IDENTIFICATION_ABBREVIATION
,

558 
	m_NL_IDENTIFICATION_REVISION
,

559 
	m_NL_IDENTIFICATION_DATE
,

560 
	m_NL_IDENTIFICATION_CATEGORY
,

561 
	m_NL_IDENTIFICATION_CODESET
,

562 
	m_NL_NUM_LC_IDENTIFICATION
,

565 
	m_NL_NUM


570 
	#_NL_LOCALE_NAME
(
ˇãg‹y
Ë
	`_NL_ITEM
 ((category), \

571 
	`_NL_ITEM_INDEX
 (-1))

	)

572 #ifde‡
__USE_GNU


573 
	#NL_LOCALE_NAME
(
ˇãg‹y
Ë
	`_NL_LOCALE_NAME
 (ˇãg‹y)

	)

583 *
	$∆_œngöfo
 (
∆_ôem
 
__ôem
Ë
__THROW
;

586 #ifdef 
__USE_XOPEN2K


591 
	~<xloˇÀ.h
>

594 *
	`∆_œngöfo_l
 (
∆_ôem
 
__ôem
, 
__loˇÀ_t
 
__l
);

597 
__END_DECLS


	@/usr/include/libgen.h

18 #i‚de‡
_LIBGEN_H


19 
	#_LIBGEN_H
 1

	)

21 
	~<„©uªs.h
>

23 
__BEGIN_DECLS


26 *
	$dú«me
 (*
__∑th
Ë
__THROW
;

34 *
	$__xpg_ba£«me
 (*
__∑th
Ë
__THROW
;

35 
	#ba£«me
 
__xpg_ba£«me


	)

37 
__END_DECLS


	@/usr/include/libintl.h

20 #i‚de‡
_LIBINTL_H


21 
	#_LIBINTL_H
 1

	)

23 
	~<„©uªs.h
>

27 
	#__USE_GNU_GETTEXT
 1

	)

31 
	#__GNU_GETTEXT_SUPPORTED_REVISION
(
maj‹
) \

32 ((
maj‹
Ë=0 ? 1 : -1)

	)

34 
__BEGIN_DECLS


39 *
	$gëãxt
 (c⁄° *
__msgid
)

40 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (1);

44 *
	$dgëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid
)

45 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

46 *
	$__dgëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid
)

47 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

51 *
	$dcgëãxt
 (c⁄° *
__domaö«me
,

52 c⁄° *
__msgid
, 
__ˇãg‹y
)

53 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

54 *
	$__dcgëãxt
 (c⁄° *
__domaö«me
,

55 c⁄° *
__msgid
, 
__ˇãg‹y
)

56 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

61 *
	$ngëãxt
 (c⁄° *
__msgid1
, c⁄° *
__msgid2
,

62 
__n
)

63 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (1Ë
	`__©åibuã_f‹m©_¨g__
 (2);

67 *
	$dngëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid1
,

68 c⁄° *
__msgid2
, 
__n
)

69 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

73 *
	$d˙gëãxt
 (c⁄° *
__domaö«me
, c⁄° *
__msgid1
,

74 c⁄° *
__msgid2
, 
__n
,

75 
__ˇãg‹y
)

76 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

82 *
	$ãxtdomaö
 (c⁄° *
__domaö«me
Ë
__THROW
;

86 *
	$bödãxtdomaö
 (c⁄° *
__domaö«me
,

87 c⁄° *
__dú«me
Ë
__THROW
;

91 *
	$böd_ãxtdomaö_code£t
 (c⁄° *
__domaö«me
,

92 c⁄° *
__code£t
Ë
__THROW
;

96 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


99 
	#__√ed_NULL


	)

100 
	~<°ddef.h
>

103 
	~<loˇÀ.h
>

109 
	#gëãxt
(
msgid
Ë
	`dgëãxt
 (
NULL
, msgid)

	)

111 
	#dgëãxt
(
domaö«me
, 
msgid
) \

112 
	`dcgëãxt
 (
domaö«me
, 
msgid
, 
LC_MESSAGES
)

	)

114 
	#ngëãxt
(
msgid1
, 
msgid2
, 
n
Ë
	`dngëãxt
 (
NULL
, msgid1, msgid2,Ç)

	)

116 
	#dngëãxt
(
domaö«me
, 
msgid1
, 
msgid2
, 
n
) \

117 
	`d˙gëãxt
 (
domaö«me
, 
msgid1
, 
msgid2
, 
n
, 
LC_MESSAGES
)

	)

121 
__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	~<„©uªs.h
>

31 
	#MB_LEN_MAX
 16

	)

36 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

41 #i‚de‡
_LIMITS_H


42 
	#_LIMITS_H
 1

	)

44 
	~<bôs/w‹dsize.h
>

53 
	#CHAR_BIT
 8

	)

56 
	#SCHAR_MIN
 (-128)

	)

57 
	#SCHAR_MAX
 127

	)

60 
	#UCHAR_MAX
 255

	)

63 #ifde‡
__CHAR_UNSIGNED__


64 
	#CHAR_MIN
 0

	)

65 
	#CHAR_MAX
 
UCHAR_MAX


	)

67 
	#CHAR_MIN
 
SCHAR_MIN


	)

68 
	#CHAR_MAX
 
SCHAR_MAX


	)

72 
	#SHRT_MIN
 (-32768)

	)

73 
	#SHRT_MAX
 32767

	)

76 
	#USHRT_MAX
 65535

	)

79 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

80 
	#INT_MAX
 2147483647

	)

83 
	#UINT_MAX
 4294967295U

	)

86 #i‡
__WORDSIZE
 == 64

87 
	#LONG_MAX
 9223372036854775807L

	)

89 
	#LONG_MAX
 2147483647L

	)

91 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

94 #i‡
__WORDSIZE
 == 64

95 
	#ULONG_MAX
 18446744073709551615UL

	)

97 
	#ULONG_MAX
 4294967295UL

	)

100 #ifde‡
__USE_ISOC99


103 
	#LLONG_MAX
 9223372036854775807LL

	)

104 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

107 
	#ULLONG_MAX
 18446744073709551615ULL

	)

121 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


123 #ö˛ude_√xà<
limôs
.
h
>

129 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


130 #i‚de‡
LLONG_MIN


131 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

133 #i‚de‡
LLONG_MAX


134 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

136 #i‚de‡
ULLONG_MAX


137 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

141 #ifdef 
__USE_POSIX


143 
	~<bôs/posix1_lim.h
>

146 #ifdef 
__USE_POSIX2


147 
	~<bôs/posix2_lim.h
>

150 #ifdef 
__USE_XOPEN


151 
	~<bôs/x›í_lim.h
>

	@/usr/include/link.h

20 #i‚def 
_LINK_H


21 
	#_LINK_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ñf.h
>

25 
	~<dlf˙.h
>

26 
	~<sys/ty≥s.h
>

30 
	#ElfW
(
ty≥
Ë
	`_ElfW
 (
Elf
, 
__ELF_NATIVE_CLASS
,Åy≥)

	)

31 
	#_ElfW
(
e
,
w
,
t
Ë
	`_ElfW_1
 (e, w, 
_
##t)

	)

32 
	#_ElfW_1
(
e
,
w
,
t
Ëe##w##
	)
t

34 
	~<bôs/ñf˛ass.h
>

35 
	~<bôs/lök.h
>

42 
	sr_debug


44 
	mr_vîsi⁄
;

46 
lök_m≠
 *
	mr_m≠
;

53 
ElfW
(
Addr
Ë
	mr_brk
;

58 
	mRT_CONSISTENT
,

59 
	mRT_ADD
,

60 
	mRT_DELETE


61 } 
	mr_°©e
;

63 
ElfW
(
Addr
Ë
	mr_ldba£
;

67 
r_debug
 
_r_debug
;

76 
	$ElfW
(
Dyn
Ë
_DYNAMIC
[];

84 
	slök_m≠


89 
	`ElfW
(
Addr
Ë
l_addr
;

91 *
l_«me
;

92 
	`ElfW
(
Dyn
Ë*
l_ld
;

93 
lök_m≠
 *
l_√xt
, *
l_¥ev
;

96 #ifde‡
__USE_GNU


99 
	#LAV_CURRENT
 1

	)

104 
LA_ACT_CONSISTENT
,

105 
LA_ACT_ADD
,

106 
LA_ACT_DELETE


112 
LA_SER_ORIG
 = 0x01,

113 
LA_SER_LIBPATH
 = 0x02,

114 
LA_SER_RUNPATH
 = 0x04,

115 
LA_SER_CONFIG
 = 0x08,

116 
LA_SER_DEFAULT
 = 0x40,

117 
LA_SER_SECURE
 = 0x80

123 
LA_FLG_BINDTO
 = 0x01,

124 
LA_FLG_BINDFROM
 = 0x02

130 
LA_SYMB_NOPLTENTER
 = 0x01,

131 
LA_SYMB_NOPLTEXIT
 = 0x02,

132 
LA_SYMB_STRUCTCALL
 = 0x04,

133 
LA_SYMB_DLSYM
 = 0x08,

134 
LA_SYMB_ALTVALUE
 = 0x10

138 
	sdl_phdr_öfo


140 
	`ElfW
(
Addr
Ë
dÕi_addr
;

141 c⁄° *
dÕi_«me
;

142 c⁄° 
	`ElfW
(
Phdr
Ë*
dÕi_phdr
;

143 
	`ElfW
(
HÆf
Ë
dÕi_phnum
;

151 
__exãnsi⁄__
 
dÕi_adds
;

153 
__exãnsi⁄__
 
dÕi_subs
;

157 
size_t
 
dÕi_és_modid
;

162 *
dÕi_és_d©a
;

165 
__BEGIN_DECLS


167 
	`dl_ôî©e_phdr
 ((*
__ˇŒback
Ë(
dl_phdr_öfo
 *,

168 
size_t
, *),

169 *
__d©a
);

175 
	`œ_vîsi⁄
 (
__vîsi⁄
);

176 
	`œ_a˘ivôy
 (
uöçå_t
 *
__cookõ
, 
__Êag
);

177 *
	`œ_obj£¨ch
 (c⁄° *
__«me
, 
uöçå_t
 *
__cookõ
,

178 
__Êag
);

179 
	`œ_obj›í
 (
lök_m≠
 *
__m≠
, 
Lmid_t
 
__lmid
,

180 
uöçå_t
 *
__cookõ
);

181 
	`œ_¥eöô
 (
uöçå_t
 *
__cookõ
);

182 
uöçå_t
 
	`œ_symböd32
 (
Elf32_Sym
 *
__sym
, 
__ndx
,

183 
uöçå_t
 *
__ªfcook
, uöçå_à*
__defcook
,

184 *
__Êags
, c⁄° *
__sym«me
);

185 
uöçå_t
 
	`œ_symböd64
 (
Elf64_Sym
 *
__sym
, 
__ndx
,

186 
uöçå_t
 *
__ªfcook
, uöçå_à*
__defcook
,

187 *
__Êags
, c⁄° *
__sym«me
);

188 
	`œ_obj˛o£
 (
uöçå_t
 *
__cookõ
);

190 
__END_DECLS


	@/usr/include/locale.h

22 #i‚def 
_LOCALE_H


23 
	#_LOCALE_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_NULL


	)

28 
	~<°ddef.h
>

29 
	~<bôs/loˇÀ.h
>

31 
	g__BEGIN_DECLS


35 
	#LC_CTYPE
 
__LC_CTYPE


	)

36 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

37 
	#LC_TIME
 
__LC_TIME


	)

38 
	#LC_COLLATE
 
__LC_COLLATE


	)

39 
	#LC_MONETARY
 
__LC_MONETARY


	)

40 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

41 
	#LC_ALL
 
__LC_ALL


	)

42 
	#LC_PAPER
 
__LC_PAPER


	)

43 
	#LC_NAME
 
__LC_NAME


	)

44 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

45 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

46 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

47 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

50 
__BEGIN_NAMESPACE_STD


53 
	slc⁄v


57 *
	mdecimÆ_poöt
;

58 *
	mthoußnds_£p
;

64 *
	mgroupög
;

70 *
	möt_cuº_symbﬁ
;

71 *
	mcuºícy_symbﬁ
;

72 *
	mm⁄_decimÆ_poöt
;

73 *
	mm⁄_thoußnds_£p
;

74 *
	mm⁄_groupög
;

75 *
	mposôive_sign
;

76 *
	m√g©ive_sign
;

77 
	möt_‰ac_digôs
;

78 
	m‰ac_digôs
;

80 
	mp_cs_¥e˚des
;

82 
	mp_£p_by_•a˚
;

84 
	mn_cs_¥e˚des
;

86 
	mn_£p_by_•a˚
;

93 
	mp_sign_po¢
;

94 
	mn_sign_po¢
;

95 #ifde‡
__USE_ISOC99


97 
	möt_p_cs_¥e˚des
;

99 
	möt_p_£p_by_•a˚
;

101 
	möt_n_cs_¥e˚des
;

103 
	möt_n_£p_by_•a˚
;

110 
	möt_p_sign_po¢
;

111 
	möt_n_sign_po¢
;

113 
	m__öt_p_cs_¥e˚des
;

114 
	m__öt_p_£p_by_•a˚
;

115 
	m__öt_n_cs_¥e˚des
;

116 
	m__öt_n_£p_by_•a˚
;

117 
	m__öt_p_sign_po¢
;

118 
	m__öt_n_sign_po¢
;

124 *
	$£éoˇÀ
 (
__ˇãg‹y
, c⁄° *
__loˇÀ
Ë
__THROW
;

127 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

129 
__END_NAMESPACE_STD


132 #ifdef 
__USE_XOPEN2K8


145 
	~<xloˇÀ.h
>

151 
__loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, c⁄° *
__loˇÀ
,

152 
__loˇÀ_t
 
__ba£
Ë
__THROW
;

158 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

159 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

160 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

161 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

162 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

163 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

164 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

165 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

166 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

167 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

168 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

169 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

170 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

171 | 
LC_NUMERIC_MASK
 \

172 | 
LC_TIME_MASK
 \

173 | 
LC_COLLATE_MASK
 \

174 | 
LC_MONETARY_MASK
 \

175 | 
LC_MESSAGES_MASK
 \

176 | 
LC_PAPER_MASK
 \

177 | 
LC_NAME_MASK
 \

178 | 
LC_ADDRESS_MASK
 \

179 | 
LC_TELEPHONE_MASK
 \

180 | 
LC_MEASUREMENT_MASK
 \

181 | 
LC_IDENTIFICATION_MASK
 \

182 )

	)

186 
__loˇÀ_t
 
	$du∂oˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

190 
	$‰ìloˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

197 
__loˇÀ_t
 
	$u£loˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

201 
	#LC_GLOBAL_LOCALE
 ((
__loˇÀ_t
Ë-1L)

	)

205 
__END_DECLS


	@/usr/include/math.h

23 #i‚def 
_MATH_H


24 
	#_MATH_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/m©h-ve˘‹.h
>

35 
	~<bôs/huge_vÆ.h
>

36 #ifde‡
__USE_ISOC99


37 
	~<bôs/huge_vÆf.h
>

38 
	~<bôs/huge_vÆl.h
>

41 
	~<bôs/öf.h
>

44 
	~<bôs/«n.h
>

48 
	~<bôs/m©hdef.h
>

55 
	#__SIMD_DECL
(
fun˘i⁄
Ë
	`__CONCAT
 (
__DECL_SIMD_
, fun˘i⁄)

	)

57 
	#__MATHCALL_VEC
(
fun˘i⁄
, 
suffix
, 
¨gs
) \

58 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

59 
	`__MATHCALL
 (
fun˘i⁄
, 
suffix
, 
¨gs
)

	)

61 
	#__MATHDECL_VEC
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

62 
	`__SIMD_DECL
 (
	`__MATH_PRECNAME
 (
fun˘i⁄
, 
suffix
)) \

63 
	`__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
)

	)

65 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

66 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

67 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

68 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

69 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

70 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

71 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

72 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

73 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

74 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

75 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

76 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

78 
	#_MdoubÀ_
 

	)

79 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

80 
	#__MATH_DECLARING_DOUBLE
 1

	)

81 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

82 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

83 
	~<bôs/m©hˇŒs.h
>

84 #unde‡
_MdoubÀ_


85 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


86 #unde‡
_MdoubÀ_END_NAMESPACE


87 #unde‡
__MATH_PRECNAME


88 #unde‡
__MATH_DECLARING_DOUBLE


90 #ifde‡
__USE_ISOC99


96 #i‚de‡
_MÊﬂt_


97 
	#_MÊﬂt_
 

	)

99 
	#_MdoubÀ_
 
_MÊﬂt_


	)

100 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

101 
	#__MATH_DECLARING_DOUBLE
 0

	)

102 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

103 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

104 
	~<bôs/m©hˇŒs.h
>

105 #unde‡
_MdoubÀ_


106 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


107 #unde‡
_MdoubÀ_END_NAMESPACE


108 #unde‡
__MATH_PRECNAME


109 #unde‡
__MATH_DECLARING_DOUBLE


111 #i‡!(
deföed
 
__NO_LONG_DOUBLE_MATH
 && deföed 
_LIBC
) \

112 || 
deföed
 
__LDBL_COMPAT
 \

113 || 
deföed
 
_LIBC_TEST


114 #ifde‡
__LDBL_COMPAT


116 #ifde‡
__USE_ISOC99


117 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

118 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

119 #ifde‡
__REDIRECT_NTH


120 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

121 
__∆dbl_√xâow¨df
)

122 
	`__©åibuã__
 ((
__c⁄°__
));

123 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

124 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

125 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

126 (
__x
, 
__y
),

127 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

131 #unde‡
__MATHDECL_1


132 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

133 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

134 
¨gs
, 
Æüs
)

	)

135 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

136 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

142 #i‚de‡
_Ml⁄g_doubÀ_


143 
	#_Ml⁄g_doubÀ_
 

	)

145 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

146 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

147 
	#__MATH_DECLARING_DOUBLE
 0

	)

148 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

149 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

150 
	#__MATH_DECLARE_LDOUBLE
 1

	)

151 
	~<bôs/m©hˇŒs.h
>

152 #unde‡
_MdoubÀ_


153 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


154 #unde‡
_MdoubÀ_END_NAMESPACE


155 #unde‡
__MATH_PRECNAME


156 #unde‡
__MATH_DECLARING_DOUBLE


161 #unde‡
__MATHDECL_1


162 #unde‡
__MATHDECL


163 #unde‡
__MATHCALL


166 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


168 
signgam
;

173 #ifde‡
__USE_ISOC99


211 
FP_NAN
 =

212 
	#FP_NAN
 0

	)

213 
FP_NAN
,

214 
FP_INFINITE
 =

215 
	#FP_INFINITE
 1

	)

216 
FP_INFINITE
,

217 
FP_ZERO
 =

218 
	#FP_ZERO
 2

	)

219 
FP_ZERO
,

220 
FP_SUBNORMAL
 =

221 
	#FP_SUBNORMAL
 3

	)

222 
FP_SUBNORMAL
,

223 
FP_NORMAL
 =

224 
	#FP_NORMAL
 4

	)

225 
FP_NORMAL


233 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__
 \

234 && !
deföed
 
__OPTIMIZE_SIZE__


235 
	#Â˛assify
(
x
Ë
	`__buûtö_Â˛assify
 (
FP_NAN
, 
FP_INFINITE
, \

236 
FP_NORMAL
, 
FP_SUBNORMAL
, 
FP_ZERO
, 
x
)

	)

237 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


238 
	#Â˛assify
(
x
) \

239 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

241 
	#Â˛assify
(
x
) \

242 ( (
x
) ==  () \

243 ? 
	`__Â˛assifyf
 (
x
) \

244 :  (
x
) ==  () \

245 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

249 #i‡
	`__GNUC_PREREQ
 (4,0)

250 
	#signbô
(
x
) \

251 ( (
x
) ==  () \

252 ? 
	`__buûtö_signbôf
 (
x
) \

253 :  (
x
) ==  () \

254 ? 
	`__buûtö_signbô
 (
x
Ë: 
	`__buûtö_signbôl
 (x))

	)

256 #ifde‡
__NO_LONG_DOUBLE_MATH


257 
	#signbô
(
x
) \

258 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

260 
	#signbô
(
x
) \

261 ( (
x
) ==  () \

262 ? 
	`__signbôf
 (
x
) \

263 :  (
x
) ==  () \

264 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

269 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


270 
	#isföôe
(
x
Ë
	`__buûtö_isföôe
 (x)

	)

271 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


272 
	#isföôe
(
x
) \

273 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

275 
	#isföôe
(
x
) \

276 ( (
x
) ==  () \

277 ? 
	`__föôef
 (
x
) \

278 :  (
x
) ==  () \

279 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

283 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


284 
	#i¢‹mÆ
(
x
Ë
	`__buûtö_i¢‹mÆ
 (x)

	)

286 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

291 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


292 
	#i¢™
(
x
Ë
	`__buûtö_i¢™
 (x)

	)

293 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


294 
	#i¢™
(
x
) \

295 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

297 
	#i¢™
(
x
) \

298 ( (
x
) ==  () \

299 ? 
	`__i¢™f
 (
x
) \

300 :  (
x
) ==  () \

301 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

305 #i‡
	`__GNUC_PREREQ
 (4,4Ë&& !
deföed
 
__SUPPORT_SNAN__


306 
	#isöf
(
x
Ë
	`__buûtö_isöf_sign
 (x)

	)

307 #ñi‡
deföed
 
__NO_LONG_DOUBLE_MATH


308 
	#isöf
(
x
) \

309 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

311 
	#isöf
(
x
) \

312 ( (
x
) ==  () \

313 ? 
	`__isöff
 (
x
) \

314 :  (
x
) ==  () \

315 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

319 
	#MATH_ERRNO
 1

	)

320 
	#MATH_ERREXCEPT
 2

	)

325 #i‚de‡
__FAST_MATH__


326 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

331 #ifde‡
__USE_GNU


333 #ifde‡
__NO_LONG_DOUBLE_MATH


334 
	#issig«lög
(
x
) \

335 ( (
x
Ë= (Ë? 
	`__issig«lögf
 (xË: 
	`__issig«lög
 (x))

	)

337 
	#issig«lög
(
x
) \

338 ( (
x
) ==  () \

339 ? 
	`__issig«lögf
 (
x
) \

340 :  (
x
) ==  () \

341 ? 
	`__issig«lög
 (
x
Ë: 
	`__issig«lögl
 (x))

	)

345 #ifdef 
__USE_MISC


349 
_IEEE_
 = -1,

350 
_SVID_
,

351 
_XOPEN_
,

352 
_POSIX_
,

353 
_ISOC_


354 } 
	t_LIB_VERSION_TYPE
;

359 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

363 #ifde‡
__USE_MISC


369 #ifde‡
__˝lu•lus


370 
__ex˚±i⁄


372 
ex˚±i⁄


375 
ty≥
;

376 *
«me
;

377 
¨g1
;

378 
¨g2
;

379 
ªtvÆ
;

380 
	}
};

382 #ifde‡
__˝lu•lus


383 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

385 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

388 
	#X_TLOSS
 1.41484755040568800000e+16

	)

391 
	#DOMAIN
 1

	)

392 
	#SING
 2

	)

393 
	#OVERFLOW
 3

	)

394 
	#UNDERFLOW
 4

	)

395 
	#TLOSS
 5

	)

396 
	#PLOSS
 6

	)

399 
	#HUGE
 3.40282347e+38F

	)

403 #ifde‡
__USE_XOPEN


405 
	#MAXFLOAT
 3.40282347e+38F

	)

412 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


413 
	#M_E
 2.7182818284590452354

	)

414 
	#M_LOG2E
 1.4426950408889634074

	)

415 
	#M_LOG10E
 0.43429448190325182765

	)

416 
	#M_LN2
 0.69314718055994530942

	)

417 
	#M_LN10
 2.30258509299404568402

	)

418 
	#M_PI
 3.14159265358979323846

	)

419 
	#M_PI_2
 1.57079632679489661923

	)

420 
	#M_PI_4
 0.78539816339744830962

	)

421 
	#M_1_PI
 0.31830988618379067154

	)

422 
	#M_2_PI
 0.63661977236758134308

	)

423 
	#M_2_SQRTPI
 1.12837916709551257390

	)

424 
	#M_SQRT2
 1.41421356237309504880

	)

425 
	#M_SQRT1_2
 0.70710678118654752440

	)

431 #ifde‡
__USE_GNU


432 
	#M_El
 2.718281828459045235360287471352662498L

	)

433 
	#M_LOG2El
 1.442695040888963407359924681001892137L

	)

434 
	#M_LOG10El
 0.434294481903251827651128918916605082L

	)

435 
	#M_LN2l
 0.693147180559945309417232121458176568L

	)

436 
	#M_LN10l
 2.302585092994045684017991454684364208L

	)

437 
	#M_PIl
 3.141592653589793238462643383279502884L

	)

438 
	#M_PI_2l
 1.570796326794896619231321691639751442L

	)

439 
	#M_PI_4l
 0.785398163397448309615660845819875721L

	)

440 
	#M_1_PIl
 0.318309886183790671537767526745028724L

	)

441 
	#M_2_PIl
 0.636619772367581343075535053490057448L

	)

442 
	#M_2_SQRTPIl
 1.128379167095512573896158903121545172L

	)

443 
	#M_SQRT2l
 1.414213562373095048801688724209698079L

	)

444 
	#M_SQRT1_2l
 0.707106781186547524400844362104849039L

	)

451 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


452 
	#__NO_MATH_INLINES
 1

	)

455 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

462 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

463 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

464 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

465 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

466 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

467 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

471 #ifde‡
__USE_EXTERN_INLINES


472 
	~<bôs/m©hölöe.h
>

477 #i‡
deföed
 
__FINITE_MATH_ONLY__
 && __FINITE_MATH_ONLY__ > 0

478 
	~<bôs/m©h-föôe.h
>

481 #ifde‡
__USE_ISOC99


485 #i‚de‡
isgª©î


486 
	#isgª©î
(
x
, 
y
) \

487 (
__exãnsi⁄__
 \

488 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

489 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

493 #i‚de‡
isgª©îequÆ


494 
	#isgª©îequÆ
(
x
, 
y
) \

495 (
__exãnsi⁄__
 \

496 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

497 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

501 #i‚de‡
i¶ess


502 
	#i¶ess
(
x
, 
y
) \

503 (
__exãnsi⁄__
 \

504 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

505 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

509 #i‚de‡
i¶es£quÆ


510 
	#i¶es£quÆ
(
x
, 
y
) \

511 (
__exãnsi⁄__
 \

512 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

513 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

517 #i‚de‡
i¶essgª©î


518 
	#i¶essgª©î
(
x
, 
y
) \

519 (
__exãnsi⁄__
 \

520 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

521 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

525 #i‚de‡
isun‹dîed


526 
	#isun‹dîed
(
u
, 
v
) \

527 (
__exãnsi⁄__
 \

528 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

529 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

534 
	g__END_DECLS


	@/usr/include/ncurses.h

37 #i‚de‡
__NCURSES_H


38 
	#__NCURSES_H


	)

40 
	#CURSES
 1

	)

41 
	#CURSES_H
 1

	)

44 
	#NCURSES_VERSION_MAJOR
 6

	)

45 
	#NCURSES_VERSION_MINOR
 0

	)

46 
	#NCURSES_VERSION_PATCH
 20160213

	)

49 #unde‡
NCURSES_VERSION


50 
	#NCURSES_VERSION
 "6.0"

	)

55 
	#NCURSES_MOUSE_VERSION
 1

	)

60 
	~<ncur£s_dŒ.h
>

63 
	~<°döt.h
>

69 #i‚de‡
NCURSES_ENABLE_STDBOOL_H


70 
	#NCURSES_ENABLE_STDBOOL_H
 1

	)

77 #i‚de‡
NCURSES_ATTR_T


78 
	#NCURSES_ATTR_T
 

	)

85 #unde‡
NCURSES_CONST


86 
	#NCURSES_CONST
 c⁄°

	)

88 #unde‡
NCURSES_INLINE


89 
	#NCURSES_INLINE
 
ölöe


	)

100 #unde‡
NCURSES_COLOR_T


101 
	#NCURSES_COLOR_T
 

	)

103 #unde‡
NCURSES_PAIRS_T


104 
	#NCURSES_PAIRS_T
 

	)

109 #i‚de‡
NCURSES_OPAQUE


110 
	#NCURSES_OPAQUE
 0

	)

116 #i‚de‡
NCURSES_REENTRANT


117 
	#NCURSES_REENTRANT
 0

	)

123 #unde‡
NCURSES_INTEROP_FUNCS


124 
	#NCURSES_INTEROP_FUNCS
 0

	)

129 #unde‡
NCURSES_SIZE_T


130 
	#NCURSES_SIZE_T
 

	)

135 #unde‡
NCURSES_TPARM_VARARGS


136 
	#NCURSES_TPARM_VARARGS
 1

	)

142 #unde‡
NCURSES_TPARM_ARG


143 
	#NCURSES_TPARM_ARG
 

	)

149 #unde‡
NCURSES_WCWIDTH_GRAPHICS


150 
	#NCURSES_WCWIDTH_GRAPHICS
 1

	)

157 #unde‡
NCURSES_CH_T


158 
	#NCURSES_CH_T
 
chty≥


	)

160 #i‡0 && 
deföed
(
_LP64
)

161 
	tchty≥
;

162 
	tmmask_t
;

164 
	tchty≥
;

165 
	tmmask_t
;

171 
	~<°dio.h
>

180 #i‚de‡
NCURSES_WIDECHAR


181 #i‡
deföed
(
_XOPEN_SOURCE_EXTENDED
Ë|| (deföed(
_XOPEN_SOURCE
) && (_XOPEN_SOURCE - 0 >= 500))

182 
	#NCURSES_WIDECHAR
 1

	)

184 
	#NCURSES_WIDECHAR
 0

	)

188 
	~<°d¨g.h
>

189 #i‡
NCURSES_WIDECHAR


190 
	~<°ddef.h
>

205 #unde‡
TRUE


206 
	#TRUE
 1

	)

208 #unde‡
FALSE


209 
	#FALSE
 0

	)

211 
	tNCURSES_BOOL
;

213 #i‡
deföed
(
__˝lu•lus
)

216 
	#NCURSES_BOOL
 
boﬁ


	)

220 #i‡
NCURSES_ENABLE_STDBOOL_H


221 
	~<°dboﬁ.h
>

223 
	#NCURSES_BOOL
 
boﬁ


	)

226 #unde‡
boﬁ


227 
	#boﬁ
 
NCURSES_BOOL


	)

232 #ifde‡
__˝lu•lus


234 
	#NCURSES_CAST
(
ty≥
,
vÆue
Ë
°©ic_ˇ°
<ty≥>(vÆue)

	)

236 
	#NCURSES_CAST
(
ty≥
,
vÆue
Ë—y≥)(vÆue)

	)

243 
	#WA_ATTRIBUTES
 
A_ATTRIBUTES


	)

244 
	#WA_NORMAL
 
A_NORMAL


	)

245 
	#WA_STANDOUT
 
A_STANDOUT


	)

246 
	#WA_UNDERLINE
 
A_UNDERLINE


	)

247 
	#WA_REVERSE
 
A_REVERSE


	)

248 
	#WA_BLINK
 
A_BLINK


	)

249 
	#WA_DIM
 
A_DIM


	)

250 
	#WA_BOLD
 
A_BOLD


	)

251 
	#WA_ALTCHARSET
 
A_ALTCHARSET


	)

252 
	#WA_INVIS
 
A_INVIS


	)

253 
	#WA_PROTECT
 
A_PROTECT


	)

254 
	#WA_HORIZONTAL
 
A_HORIZONTAL


	)

255 
	#WA_LEFT
 
A_LEFT


	)

256 
	#WA_LOW
 
A_LOW


	)

257 
	#WA_RIGHT
 
A_RIGHT


	)

258 
	#WA_TOP
 
A_TOP


	)

259 
	#WA_VERTICAL
 
A_VERTICAL


	)

262 
	#WA_ITALIC
 
A_ITALIC


	)

266 
	#COLOR_BLACK
 0

	)

267 
	#COLOR_RED
 1

	)

268 
	#COLOR_GREEN
 2

	)

269 
	#COLOR_YELLOW
 3

	)

270 
	#COLOR_BLUE
 4

	)

271 
	#COLOR_MAGENTA
 5

	)

272 
	#COLOR_CYAN
 6

	)

273 
	#COLOR_WHITE
 7

	)

277 #i‡0 || 
NCURSES_REENTRANT


278 
NCURSES_WRAPPED_VAR
(
chty≥
*, 
acs_m≠
);

279 
	#acs_m≠
 
	`NCURSES_PUBLIC_VAR
(
	`acs_m≠
())

	)

281 
NCURSES_EXPORT_VAR
(
chty≥
Ë
acs_m≠
[];

284 
	#NCURSES_ACS
(
c
Ë(
acs_m≠
[
	`NCURSES_CAST
(,(c))])

	)

287 
	#ACS_ULCORNER
 
	`NCURSES_ACS
('l'Ë

	)

288 
	#ACS_LLCORNER
 
	`NCURSES_ACS
('m'Ë

	)

289 
	#ACS_URCORNER
 
	`NCURSES_ACS
('k'Ë

	)

290 
	#ACS_LRCORNER
 
	`NCURSES_ACS
('j'Ë

	)

291 
	#ACS_LTEE
 
	`NCURSES_ACS
('t'Ë

	)

292 
	#ACS_RTEE
 
	`NCURSES_ACS
('u'Ë

	)

293 
	#ACS_BTEE
 
	`NCURSES_ACS
('v'Ë

	)

294 
	#ACS_TTEE
 
	`NCURSES_ACS
('w'Ë

	)

295 
	#ACS_HLINE
 
	`NCURSES_ACS
('q'Ë

	)

296 
	#ACS_VLINE
 
	`NCURSES_ACS
('x'Ë

	)

297 
	#ACS_PLUS
 
	`NCURSES_ACS
('n'Ë

	)

298 
	#ACS_S1
 
	`NCURSES_ACS
('o'Ë

	)

299 
	#ACS_S9
 
	`NCURSES_ACS
('s'Ë

	)

300 
	#ACS_DIAMOND
 
	`NCURSES_ACS
('`'Ë

	)

301 
	#ACS_CKBOARD
 
	`NCURSES_ACS
('a'Ë

	)

302 
	#ACS_DEGREE
 
	`NCURSES_ACS
('f'Ë

	)

303 
	#ACS_PLMINUS
 
	`NCURSES_ACS
('g'Ë

	)

304 
	#ACS_BULLET
 
	`NCURSES_ACS
('~'Ë

	)

306 
	#ACS_LARROW
 
	`NCURSES_ACS
(','Ë

	)

307 
	#ACS_RARROW
 
	`NCURSES_ACS
('+'Ë

	)

308 
	#ACS_DARROW
 
	`NCURSES_ACS
('.'Ë

	)

309 
	#ACS_UARROW
 
	`NCURSES_ACS
('-'Ë

	)

310 
	#ACS_BOARD
 
	`NCURSES_ACS
('h'Ë

	)

311 
	#ACS_LANTERN
 
	`NCURSES_ACS
('i'Ë

	)

312 
	#ACS_BLOCK
 
	`NCURSES_ACS
('0'Ë

	)

318 
	#ACS_S3
 
	`NCURSES_ACS
('p'Ë

	)

319 
	#ACS_S7
 
	`NCURSES_ACS
('r'Ë

	)

320 
	#ACS_LEQUAL
 
	`NCURSES_ACS
('y'Ë

	)

321 
	#ACS_GEQUAL
 
	`NCURSES_ACS
('z'Ë

	)

322 
	#ACS_PI
 
	`NCURSES_ACS
('{'Ë

	)

323 
	#ACS_NEQUAL
 
	`NCURSES_ACS
('|'Ë

	)

324 
	#ACS_STERLING
 
	`NCURSES_ACS
('}'Ë

	)

332 
	#ACS_BSSB
 
ACS_ULCORNER


	)

333 
	#ACS_SSBB
 
ACS_LLCORNER


	)

334 
	#ACS_BBSS
 
ACS_URCORNER


	)

335 
	#ACS_SBBS
 
ACS_LRCORNER


	)

336 
	#ACS_SBSS
 
ACS_RTEE


	)

337 
	#ACS_SSSB
 
ACS_LTEE


	)

338 
	#ACS_SSBS
 
ACS_BTEE


	)

339 
	#ACS_BSSS
 
ACS_TTEE


	)

340 
	#ACS_BSBS
 
ACS_HLINE


	)

341 
	#ACS_SBSB
 
ACS_VLINE


	)

342 
	#ACS_SSSS
 
ACS_PLUS


	)

344 #unde‡
ERR


345 
	#ERR
 (-1)

	)

347 #unde‡
OK


348 
	#OK
 (0)

	)

351 
	#_SUBWIN
 0x01

	)

352 
	#_ENDLINE
 0x02

	)

353 
	#_FULLWIN
 0x04

	)

354 
	#_SCROLLWIN
 0x08

	)

355 
	#_ISPAD
 0x10

	)

356 
	#_HASMOVED
 0x20

	)

357 
	#_WRAPPED
 0x40

	)

363 
	#_NOCHANGE
 -1

	)

369 
	#_NEWINDEX
 -1

	)

371 
s¸ìn
 
	tSCREEN
;

372 
_wö_°
 
	tWINDOW
;

374 
chty≥
 
	t©å_t
;

376 #i‡
NCURSES_WIDECHAR


379 #ifde‡
mbÀn


380 #unde‡
mbÀn


382 
	~<libutf8.h
>

386 
	~<wch¨.h
>

390 
	twch¨_t
;

394 
	twöt_t
;

403 
	#CCHARW_MAX
 5

	)

406 
©å_t
 
	g©å
;

407 
wch¨_t
 
	gch¨s
[
CCHARW_MAX
];

409 #unde‡
NCURSES_EXT_COLORS


410 
	#NCURSES_EXT_COLORS
 20160213

	)

411 
	gext_cﬁ‹
;

414 
	tcch¨_t
;

418 #i‡!
NCURSES_OPAQUE


419 
	gld©
;

421 
	s_wö_°


423 
NCURSES_SIZE_T
 
	g_cury
, 
	g_curx
;

426 
NCURSES_SIZE_T
 
	g_maxy
, 
	g_maxx
;

427 
NCURSES_SIZE_T
 
	g_begy
, 
	g_begx
;

429 
	g_Êags
;

432 
©å_t
 
	g_©ås
;

433 
chty≥
 
	g_bkgd
;

436 
boﬁ
 
	g_nŸimeout
;

437 
boﬁ
 
	g_˛ór
;

438 
boﬁ
 
	g_Àaveok
;

439 
boﬁ
 
	g_s¸ﬁl
;

440 
boﬁ
 
	g_idlok
;

441 
boﬁ
 
	g_idcok
;

442 
boﬁ
 
	g_immed
;

443 
boﬁ
 
	g_sync
;

444 
boﬁ
 
	g_u£_key∑d
;

445 
	g_dñay
;

447 
ld©
 *
	g_löe
;

450 
NCURSES_SIZE_T
 
	g_ªgt›
;

451 
NCURSES_SIZE_T
 
	g_ªgbŸtom
;

454 
	g_∑rx
;

455 
	g_∑ry
;

456 
WINDOW
 *
	g_∑ª¡
;

459 
	spd©


461 
NCURSES_SIZE_T
 
	g_∑d_y
, 
	g_∑d_x
;

462 
NCURSES_SIZE_T
 
	g_∑d_t›
, 
	g_∑d_À·
;

463 
NCURSES_SIZE_T
 
	g_∑d_bŸtom
, 
	g_∑d_right
;

464 } 
	g_∑d
;

466 
NCURSES_SIZE_T
 
	g_yoff£t
;

468 #i‡
NCURSES_WIDECHAR


469 
cch¨_t
 
	g_bkg∫d
;

471 
	g_cﬁ‹
;

481 #ifde‡
NCURSES_WGETCH_EVENTS


482 #i‡!
deföed
(
__BEOS__
Ë|| deföed(
__HAIKU__
)

484 
	#NCURSES_EVENT_VERSION
 1

	)

490 
	#_NC_EVENT_TIMEOUT_MSEC
 1

	)

491 
	#_NC_EVENT_FILE
 2

	)

492 
	#_NC_EVENT_FILE_READABLE
 2

	)

494 
	#_NC_EVENT_FILE_WRITABLE
 4

	)

495 
	#_NC_EVENT_FILE_EXCEPTION
 8

	)

500 
	gty≥
;

503 
	gtimeout_m£c
;

506 
	gÊags
;

507 
	gfd
;

508 
	gªsu…
;

509 } 
	g„v
;

510 } 
	gd©a
;

511 } 
	t_nc_evít
;

515 
	gcou¡
;

516 
	gªsu…_Êags
;

517 
_nc_evít
 *
	gevíts
[1];

518 } 
	t_nc_evíéi°
;

520 
NCURSES_EXPORT
(Ë
wgëch_evíts
 (
WINDOW
 *, 
_nc_evíéi°
 *);

521 
NCURSES_EXPORT
(Ë
wgën°r_evíts
 (
WINDOW
 *,*,,
_nc_evíéi°
 *);

533 #i‡!(
deföed
(
__GNUC__
Ë|| deföed(
__GNUG__
Ë|| deföed(
__©åibuã__
))

534 
	#__©åibuã__
(
p
Ë

	)

545 #i‚de‡
GCC_PRINTFLIKE


546 #i‡
deföed
(
GCC_PRINTF
Ë&& !deföed(
¥ötf
)

547 
	#GCC_PRINTFLIKE
(
fmt
,
v¨
Ë
	`__©åibuã__
((
	`f‹m©
(
¥ötf
,fmt,v¨)))

	)

549 
	#GCC_PRINTFLIKE
(
fmt
,
v¨
Ë

	)

553 #i‚de‡
GCC_SCANFLIKE


554 #i‡
deföed
(
GCC_SCANF
Ë&& !deföed(
sˇnf
)

555 
	#GCC_SCANFLIKE
(
fmt
,
v¨
Ë
	`__©åibuã__
((
	`f‹m©
(
sˇnf
,fmt,v¨)))

	)

557 
	#GCC_SCANFLIKE
(
fmt
,
v¨
Ë

	)

561 #i‚def 
GCC_NORETURN


562 
	#GCC_NORETURN


	)

565 #i‚def 
GCC_UNUSED


566 
	#GCC_UNUSED


	)

573 (*
	gNCURSES_OUTC
)();

582 
NCURSES_EXPORT
(Ë
addch
 (c⁄° 
chty≥
);

583 
NCURSES_EXPORT
(Ë
addchn°r
 (c⁄° 
chty≥
 *, );

584 
NCURSES_EXPORT
(Ë
addch°r
 (c⁄° 
chty≥
 *);

585 
NCURSES_EXPORT
(Ë
addn°r
 (const *, );

586 
NCURSES_EXPORT
(Ë
add°r
 (const *);

587 
NCURSES_EXPORT
(Ë
©åoff
 (
NCURSES_ATTR_T
);

588 
NCURSES_EXPORT
(Ë
©å⁄
 (
NCURSES_ATTR_T
);

589 
NCURSES_EXPORT
(Ë
©å£t
 (
NCURSES_ATTR_T
);

590 
NCURSES_EXPORT
(Ë
©å_gë
 (
©å_t
 *, 
NCURSES_PAIRS_T
 *, *);

591 
NCURSES_EXPORT
(Ë
©å_off
 (
©å_t
, *);

592 
NCURSES_EXPORT
(Ë
©å_⁄
 (
©å_t
, *);

593 
NCURSES_EXPORT
(Ë
©å_£t
 (
©å_t
, 
NCURSES_PAIRS_T
, *);

594 
NCURSES_EXPORT
(Ë
baudøã
 ();

595 
NCURSES_EXPORT
(Ë
bìp
 ();

596 
NCURSES_EXPORT
(Ë
bkgd
 (
chty≥
);

597 
NCURSES_EXPORT
(Ë
bkgd£t
 (
chty≥
);

598 
NCURSES_EXPORT
(Ë
b‹dî
 (
chty≥
,chtype,chtype,chtype,chtype,chtype,chtype,chtype);

599 
NCURSES_EXPORT
(Ë
box
 (
WINDOW
 *, 
chty≥
, chtype);

600 
NCURSES_EXPORT
(
boﬁ
Ë
ˇn_ch™ge_cﬁ‹
 ();

601 
NCURSES_EXPORT
(Ë
cbªak
 ();

602 
NCURSES_EXPORT
(Ë
chg©
 (, 
©å_t
, 
NCURSES_PAIRS_T
, const *);

603 
NCURSES_EXPORT
(Ë
˛ór
 ();

604 
NCURSES_EXPORT
(Ë
˛órok
 (
WINDOW
 *,
boﬁ
);

605 
NCURSES_EXPORT
(Ë
˛πobŸ
 ();

606 
NCURSES_EXPORT
(Ë
˛π€ﬁ
 ();

607 
NCURSES_EXPORT
(Ë
cﬁ‹_c⁄ã¡
 (
NCURSES_COLOR_T
,NCURSES_COLOR_T*,NCURSES_COLOR_T*,NCURSES_COLOR_T*);

608 
NCURSES_EXPORT
(Ë
cﬁ‹_£t
 (
NCURSES_PAIRS_T
,*);

609 
NCURSES_EXPORT
(Ë
COLOR_PAIR
 ();

610 
NCURSES_EXPORT
(Ë
c›ywö
 (c⁄° 
WINDOW
*,WINDOW*,,,,,,,);

611 
NCURSES_EXPORT
(Ë
curs_£t
 ();

612 
NCURSES_EXPORT
(Ë
def_¥og_mode
 ();

613 
NCURSES_EXPORT
(Ë
def_shñl_mode
 ();

614 
NCURSES_EXPORT
(Ë
dñay_ouçut
 ();

615 
NCURSES_EXPORT
(Ë
dñch
 ();

616 
NCURSES_EXPORT
(Ë
dñs¸ìn
 (
SCREEN
 *);

617 
NCURSES_EXPORT
(Ë
dñwö
 (
WINDOW
 *);

618 
NCURSES_EXPORT
(Ë
dñëñn
 ();

619 
NCURSES_EXPORT
(
WINDOW
 *Ë
dîwö
 (WINDOW *,,,,);

620 
NCURSES_EXPORT
(Ë
doupd©e
 ();

621 
NCURSES_EXPORT
(
WINDOW
 *Ë
dupwö
 (WINDOW *);

622 
NCURSES_EXPORT
(Ë
echo
 ();

623 
NCURSES_EXPORT
(Ë
echoch¨
 (c⁄° 
chty≥
);

624 
NCURSES_EXPORT
(Ë
îa£
 ();

625 
NCURSES_EXPORT
(Ë
ídwö
 ();

626 
NCURSES_EXPORT
(Ë
îa£ch¨
 ();

627 
NCURSES_EXPORT
(Ë
fûãr
 ();

628 
NCURSES_EXPORT
(Ë
Êash
 ();

629 
NCURSES_EXPORT
(Ë
Êushöp
 ();

630 
NCURSES_EXPORT
(
chty≥
Ë
gëbkgd
 (
WINDOW
 *);

631 
NCURSES_EXPORT
(Ë
gëch
 ();

632 
NCURSES_EXPORT
(Ë
gën°r
 (*, );

633 
NCURSES_EXPORT
(Ë
gë°r
 (*);

634 
NCURSES_EXPORT
(
WINDOW
 *Ë
gëwö
 (
FILE
 *);

635 
NCURSES_EXPORT
(Ë
hÆfdñay
 ();

636 
NCURSES_EXPORT
(
boﬁ
Ë
has_cﬁ‹s
 ();

637 
NCURSES_EXPORT
(
boﬁ
Ë
has_ic
 ();

638 
NCURSES_EXPORT
(
boﬁ
Ë
has_û
 ();

639 
NCURSES_EXPORT
(Ë
hlöe
 (
chty≥
, );

640 
NCURSES_EXPORT
(Ë
idcok
 (
WINDOW
 *, 
boﬁ
);

641 
NCURSES_EXPORT
(Ë
idlok
 (
WINDOW
 *, 
boﬁ
);

642 
NCURSES_EXPORT
(Ë
immedok
 (
WINDOW
 *, 
boﬁ
);

643 
NCURSES_EXPORT
(
chty≥
Ë
öch
 ();

644 
NCURSES_EXPORT
(Ë
öchn°r
 (
chty≥
 *, );

645 
NCURSES_EXPORT
(Ë
öch°r
 (
chty≥
 *);

646 
NCURSES_EXPORT
(
WINDOW
 *Ë
öôs¸
 ();

647 
NCURSES_EXPORT
(Ë
öô_cﬁ‹
 (
NCURSES_COLOR_T
,NCURSES_COLOR_T,NCURSES_COLOR_T,NCURSES_COLOR_T);

648 
NCURSES_EXPORT
(Ë
öô_∑ú
 (
NCURSES_PAIRS_T
,
NCURSES_COLOR_T
,NCURSES_COLOR_T);

649 
NCURSES_EXPORT
(Ë
ön°r
 (*, );

650 
NCURSES_EXPORT
(Ë
ösch
 (
chty≥
);

651 
NCURSES_EXPORT
(Ë
ösdñ 
 ();

652 
NCURSES_EXPORT
(Ë
ö£π 
 ();

653 
NCURSES_EXPORT
(Ë
ö¢°r
 (const *, );

654 
NCURSES_EXPORT
(Ë
ös°r
 (const *);

655 
NCURSES_EXPORT
(Ë
ö°r
 (*);

656 
NCURSES_EXPORT
(Ë
öåÊush
 (
WINDOW
 *,
boﬁ
);

657 
NCURSES_EXPORT
(
boﬁ
Ë
i£ndwö
 ();

658 
NCURSES_EXPORT
(
boﬁ
Ë
is_löëouched
 (
WINDOW
 *,);

659 
NCURSES_EXPORT
(
boﬁ
Ë
is_wötouched
 (
WINDOW
 *);

660 
NCURSES_EXPORT
(
NCURSES_CONST
 *Ë
key«me
 ();

661 
NCURSES_EXPORT
(Ë
key∑d
 (
WINDOW
 *,
boﬁ
);

662 
NCURSES_EXPORT
(Ë
kûlch¨
 ();

663 
NCURSES_EXPORT
(Ë
Àaveok
 (
WINDOW
 *,
boﬁ
);

664 
NCURSES_EXPORT
(*Ë
l⁄g«me
 ();

665 
NCURSES_EXPORT
(Ë
mëa
 (
WINDOW
 *,
boﬁ
);

666 
NCURSES_EXPORT
(Ë
move
 (, );

667 
NCURSES_EXPORT
(Ë
mvaddch
 (, , c⁄° 
chty≥
);

668 
NCURSES_EXPORT
(Ë
mvaddchn°r
 (, , c⁄° 
chty≥
 *, );

669 
NCURSES_EXPORT
(Ë
mvaddch°r
 (, , c⁄° 
chty≥
 *);

670 
NCURSES_EXPORT
(Ë
mvaddn°r
 (, , const *, );

671 
NCURSES_EXPORT
(Ë
mvadd°r
 (, , const *);

672 
NCURSES_EXPORT
(Ë
mvchg©
 (, , , 
©å_t
, 
NCURSES_PAIRS_T
, const *);

673 
NCURSES_EXPORT
(Ë
mvcur
 (,,,);

674 
NCURSES_EXPORT
(Ë
mvdñch
 (, );

675 
NCURSES_EXPORT
(Ë
mvdîwö
 (
WINDOW
 *, , );

676 
NCURSES_EXPORT
(Ë
mvgëch
 (, );

677 
NCURSES_EXPORT
(Ë
mvgën°r
 (, , *, );

678 
NCURSES_EXPORT
(Ë
mvgë°r
 (, , *);

679 
NCURSES_EXPORT
(Ë
mvhlöe
 (, , 
chty≥
, );

680 
NCURSES_EXPORT
(
chty≥
Ë
mvöch
 (, );

681 
NCURSES_EXPORT
(Ë
mvöchn°r
 (, , 
chty≥
 *, );

682 
NCURSES_EXPORT
(Ë
mvöch°r
 (, , 
chty≥
 *);

683 
NCURSES_EXPORT
(Ë
mvön°r
 (, , *, );

684 
NCURSES_EXPORT
(Ë
mvösch
 (, , 
chty≥
);

685 
NCURSES_EXPORT
(Ë
mvö¢°r
 (, , const *, );

686 
NCURSES_EXPORT
(Ë
mvös°r
 (, , const *);

687 
NCURSES_EXPORT
(Ë
mvö°r
 (, , *);

688 
NCURSES_EXPORT
(Ë
mv¥ötw
 (,, const *,...)

689 
GCC_PRINTFLIKE
(3,4);

690 
NCURSES_EXPORT
(Ë
mvsˇnw
 (,, 
NCURSES_CONST
 *,...)

691 
GCC_SCANFLIKE
(3,4);

692 
NCURSES_EXPORT
(Ë
mvvlöe
 (, , 
chty≥
, );

693 
NCURSES_EXPORT
(Ë
mvwaddch
 (
WINDOW
 *, , , c⁄° 
chty≥
);

694 
NCURSES_EXPORT
(Ë
mvwaddchn°r
 (
WINDOW
 *, , , c⁄° 
chty≥
 *, );

695 
NCURSES_EXPORT
(Ë
mvwaddch°r
 (
WINDOW
 *, , , c⁄° 
chty≥
 *);

696 
NCURSES_EXPORT
(Ë
mvwaddn°r
 (
WINDOW
 *, , , const *, );

697 
NCURSES_EXPORT
(Ë
mvwadd°r
 (
WINDOW
 *, , , const *);

698 
NCURSES_EXPORT
(Ë
mvwchg©
 (
WINDOW
 *, , , , 
©å_t
, 
NCURSES_PAIRS_T
, const *);

699 
NCURSES_EXPORT
(Ë
mvwdñch
 (
WINDOW
 *, , );

700 
NCURSES_EXPORT
(Ë
mvwgëch
 (
WINDOW
 *, , );

701 
NCURSES_EXPORT
(Ë
mvwgën°r
 (
WINDOW
 *, , , *, );

702 
NCURSES_EXPORT
(Ë
mvwgë°r
 (
WINDOW
 *, , , *);

703 
NCURSES_EXPORT
(Ë
mvwhlöe
 (
WINDOW
 *, , , 
chty≥
, );

704 
NCURSES_EXPORT
(Ë
mvwö
 (
WINDOW
 *,,);

705 
NCURSES_EXPORT
(
chty≥
Ë
mvwöch
 (
WINDOW
 *, , );

706 
NCURSES_EXPORT
(Ë
mvwöchn°r
 (
WINDOW
 *, , , 
chty≥
 *, );

707 
NCURSES_EXPORT
(Ë
mvwöch°r
 (
WINDOW
 *, , , 
chty≥
 *);

708 
NCURSES_EXPORT
(Ë
mvwön°r
 (
WINDOW
 *, , , *, );

709 
NCURSES_EXPORT
(Ë
mvwösch
 (
WINDOW
 *, , , 
chty≥
);

710 
NCURSES_EXPORT
(Ë
mvwö¢°r
 (
WINDOW
 *, , , const *, );

711 
NCURSES_EXPORT
(Ë
mvwös°r
 (
WINDOW
 *, , , const *);

712 
NCURSES_EXPORT
(Ë
mvwö°r
 (
WINDOW
 *, , , *);

713 
NCURSES_EXPORT
(Ë
mvw¥ötw
 (
WINDOW
*,,, const *,...)

714 
GCC_PRINTFLIKE
(4,5);

715 
NCURSES_EXPORT
(Ë
mvwsˇnw
 (
WINDOW
 *,,, 
NCURSES_CONST
 *,...)

716 
GCC_SCANFLIKE
(4,5);

717 
NCURSES_EXPORT
(Ë
mvwvlöe
 (
WINDOW
 *,, , 
chty≥
, );

718 
NCURSES_EXPORT
(Ë
«pms
 ();

719 
NCURSES_EXPORT
(
WINDOW
 *Ë
√w∑d
 (,);

720 
NCURSES_EXPORT
(
SCREEN
 *Ë
√wãrm
 (
NCURSES_CONST
 *,
FILE
 *,FILE *);

721 
NCURSES_EXPORT
(
WINDOW
 *Ë
√wwö
 (,,,);

722 
NCURSES_EXPORT
(Ë
∆
 ();

723 
NCURSES_EXPORT
(Ë
nocbªak
 ();

724 
NCURSES_EXPORT
(Ë
nodñay
 (
WINDOW
 *,
boﬁ
);

725 
NCURSES_EXPORT
(Ë
n€cho
 ();

726 
NCURSES_EXPORT
(Ë
n⁄l
 ();

727 
NCURSES_EXPORT
(Ë
noqiÊush
 ();

728 
NCURSES_EXPORT
(Ë
n‹aw
 ();

729 
NCURSES_EXPORT
(Ë
nŸimeout
 (
WINDOW
 *,
boﬁ
);

730 
NCURSES_EXPORT
(Ë
ovîœy
 (c⁄° 
WINDOW
*,WINDOW *);

731 
NCURSES_EXPORT
(Ë
ovîwrôe
 (c⁄° 
WINDOW
*,WINDOW *);

732 
NCURSES_EXPORT
(Ë
∑ú_c⁄ã¡
 (
NCURSES_PAIRS_T
,
NCURSES_COLOR_T
*,NCURSES_COLOR_T*);

733 
NCURSES_EXPORT
(Ë
PAIR_NUMBER
 ();

734 
NCURSES_EXPORT
(Ë
≥choch¨
 (
WINDOW
 *, c⁄° 
chty≥
);

735 
NCURSES_EXPORT
(Ë
≤ouåe‰esh
 (
WINDOW
*,,,,,,);

736 
NCURSES_EXPORT
(Ë
¥e‰esh
 (
WINDOW
 *,,,,,,);

737 
NCURSES_EXPORT
(Ë
¥ötw
 (const *,...)

738 
GCC_PRINTFLIKE
(1,2);

739 
NCURSES_EXPORT
(Ë
putwö
 (
WINDOW
 *, 
FILE
 *);

740 
NCURSES_EXPORT
(Ë
qiÊush
 ();

741 
NCURSES_EXPORT
(Ë
øw
 ();

742 
NCURSES_EXPORT
(Ë
ªdøwwö
 (
WINDOW
 *);

743 
NCURSES_EXPORT
(Ë
ª‰esh
 ();

744 
NCURSES_EXPORT
(Ë
ª£ây
 ();

745 
NCURSES_EXPORT
(Ë
ª£t_¥og_mode
 ();

746 
NCURSES_EXPORT
(Ë
ª£t_shñl_mode
 ();

747 
NCURSES_EXPORT
(Ë
rùofÊöe
 (, (*)(
WINDOW
 *, ));

748 
NCURSES_EXPORT
(Ë
ßvëty
 ();

749 
NCURSES_EXPORT
(Ë
sˇnw
 (
NCURSES_CONST
 *,...)

750 
GCC_SCANFLIKE
(1,2);

751 
NCURSES_EXPORT
(Ë
s¸_dump
 (const *);

752 
NCURSES_EXPORT
(Ë
s¸_öô
 (const *);

753 
NCURSES_EXPORT
(Ë
s¸l
 ();

754 
NCURSES_EXPORT
(Ë
s¸ﬁl
 (
WINDOW
 *);

755 
NCURSES_EXPORT
(Ë
s¸ﬁlok
 (
WINDOW
 *,
boﬁ
);

756 
NCURSES_EXPORT
(Ë
s¸_ª°‹e
 (const *);

757 
NCURSES_EXPORT
(Ë
s¸_£t
 (const *);

758 
NCURSES_EXPORT
(Ë
£ts¸ªg
 (,);

759 
NCURSES_EXPORT
(
SCREEN
 *Ë
£t_ãrm
 (SCREEN *);

760 
NCURSES_EXPORT
(Ë
¶k_©åoff
 (c⁄° 
chty≥
);

761 
NCURSES_EXPORT
(Ë
¶k_©å_off
 (c⁄° 
©å_t
, *);

762 
NCURSES_EXPORT
(Ë
¶k_©å⁄
 (c⁄° 
chty≥
);

763 
NCURSES_EXPORT
(Ë
¶k_©å_⁄
 (
©å_t
,*);

764 
NCURSES_EXPORT
(Ë
¶k_©å£t
 (c⁄° 
chty≥
);

765 
NCURSES_EXPORT
(
©å_t
Ë
¶k_©å
 ();

766 
NCURSES_EXPORT
(Ë
¶k_©å_£t
 (c⁄° 
©å_t
,
NCURSES_PAIRS_T
,*);

767 
NCURSES_EXPORT
(Ë
¶k_˛ór
 ();

768 
NCURSES_EXPORT
(Ë
¶k_cﬁ‹
 (
NCURSES_PAIRS_T
);

769 
NCURSES_EXPORT
(Ë
¶k_öô
 ();

770 
NCURSES_EXPORT
(*Ë
¶k_œbñ
 ();

771 
NCURSES_EXPORT
(Ë
¶k_nouåe‰esh
 ();

772 
NCURSES_EXPORT
(Ë
¶k_ª‰esh
 ();

773 
NCURSES_EXPORT
(Ë
¶k_ª°‹e
 ();

774 
NCURSES_EXPORT
(Ë
¶k_£t
 (,const *,);

775 
NCURSES_EXPORT
(Ë
¶k_touch
 ();

776 
NCURSES_EXPORT
(Ë
°™dout
 ();

777 
NCURSES_EXPORT
(Ë
°™díd
 ();

778 
NCURSES_EXPORT
(Ë
°¨t_cﬁ‹
 ();

779 
NCURSES_EXPORT
(
WINDOW
 *Ë
sub∑d
 (WINDOW *, , , , );

780 
NCURSES_EXPORT
(
WINDOW
 *Ë
subwö
 (WINDOW *, , , , );

781 
NCURSES_EXPORT
(Ë
syncok
 (
WINDOW
 *, 
boﬁ
);

782 
NCURSES_EXPORT
(
chty≥
Ë
ãrm©ås
 ();

783 
NCURSES_EXPORT
(*Ë
ãrm«me
 ();

784 
NCURSES_EXPORT
(Ë
timeout
 ();

785 
NCURSES_EXPORT
(Ë
touchlöe
 (
WINDOW
 *, , );

786 
NCURSES_EXPORT
(Ë
touchwö
 (
WINDOW
 *);

787 
NCURSES_EXPORT
(Ë
ty≥ahód
 ();

788 
NCURSES_EXPORT
(Ë
ungëch
 ();

789 
NCURSES_EXPORT
(Ë
u¡ouchwö
 (
WINDOW
 *);

790 
NCURSES_EXPORT
(Ë
u£_ív
 (
boﬁ
);

791 
NCURSES_EXPORT
(Ë
u£_tio˘l
 (
boﬁ
);

792 
NCURSES_EXPORT
(Ë
vid©å
 (
chty≥
);

793 
NCURSES_EXPORT
(Ë
vidputs
 (
chty≥
, 
NCURSES_OUTC
);

794 
NCURSES_EXPORT
(Ë
vlöe
 (
chty≥
, );

795 
NCURSES_EXPORT
(Ë
vw¥ötw
 (
WINDOW
 *, c⁄° *,
va_li°
);

796 
NCURSES_EXPORT
(Ë
vw_¥ötw
 (
WINDOW
 *, c⁄° *,
va_li°
);

797 
NCURSES_EXPORT
(Ë
vwsˇnw
 (
WINDOW
 *, 
NCURSES_CONST
 *,
va_li°
);

798 
NCURSES_EXPORT
(Ë
vw_sˇnw
 (
WINDOW
 *, 
NCURSES_CONST
 *,
va_li°
);

799 
NCURSES_EXPORT
(Ë
waddch
 (
WINDOW
 *, c⁄° 
chty≥
);

800 
NCURSES_EXPORT
(Ë
waddchn°r
 (
WINDOW
 *,c⁄° 
chty≥
 *,);

801 
NCURSES_EXPORT
(Ë
waddch°r
 (
WINDOW
 *,c⁄° 
chty≥
 *);

802 
NCURSES_EXPORT
(Ë
waddn°r
 (
WINDOW
 *,const *,);

803 
NCURSES_EXPORT
(Ë
wadd°r
 (
WINDOW
 *,const *);

804 
NCURSES_EXPORT
(Ë
w©å⁄
 (
WINDOW
 *, );

805 
NCURSES_EXPORT
(Ë
w©åoff
 (
WINDOW
 *, );

806 
NCURSES_EXPORT
(Ë
w©å£t
 (
WINDOW
 *, );

807 
NCURSES_EXPORT
(Ë
w©å_gë
 (
WINDOW
 *, 
©å_t
 *, 
NCURSES_PAIRS_T
 *, *);

808 
NCURSES_EXPORT
(Ë
w©å_⁄
 (
WINDOW
 *, 
©å_t
, *);

809 
NCURSES_EXPORT
(Ë
w©å_off
 (
WINDOW
 *, 
©å_t
, *);

810 
NCURSES_EXPORT
(Ë
w©å_£t
 (
WINDOW
 *, 
©å_t
, 
NCURSES_PAIRS_T
, *);

811 
NCURSES_EXPORT
(Ë
wbkgd
 (
WINDOW
 *, 
chty≥
);

812 
NCURSES_EXPORT
(Ë
wbkgd£t
 (
WINDOW
 *,
chty≥
);

813 
NCURSES_EXPORT
(Ë
wb‹dî
 (
WINDOW
 *,
chty≥
,chtype,chtype,chtype,chtype,chtype,chtype,chtype);

814 
NCURSES_EXPORT
(Ë
wchg©
 (
WINDOW
 *, , 
©å_t
, 
NCURSES_PAIRS_T
, const *);

815 
NCURSES_EXPORT
(Ë
w˛ór
 (
WINDOW
 *);

816 
NCURSES_EXPORT
(Ë
w˛πobŸ
 (
WINDOW
 *);

817 
NCURSES_EXPORT
(Ë
w˛π€ﬁ
 (
WINDOW
 *);

818 
NCURSES_EXPORT
(Ë
wcﬁ‹_£t
 (
WINDOW
*,
NCURSES_PAIRS_T
,*);

819 
NCURSES_EXPORT
(Ë
wcursyncup
 (
WINDOW
 *);

820 
NCURSES_EXPORT
(Ë
wdñch
 (
WINDOW
 *);

821 
NCURSES_EXPORT
(Ë
wdñëñn
 (
WINDOW
 *);

822 
NCURSES_EXPORT
(Ë
wechoch¨
 (
WINDOW
 *, c⁄° 
chty≥
);

823 
NCURSES_EXPORT
(Ë
wîa£
 (
WINDOW
 *);

824 
NCURSES_EXPORT
(Ë
wgëch
 (
WINDOW
 *);

825 
NCURSES_EXPORT
(Ë
wgën°r
 (
WINDOW
 *,*,);

826 
NCURSES_EXPORT
(Ë
wgë°r
 (
WINDOW
 *, *);

827 
NCURSES_EXPORT
(Ë
whlöe
 (
WINDOW
 *, 
chty≥
, );

828 
NCURSES_EXPORT
(
chty≥
Ë
wöch
 (
WINDOW
 *);

829 
NCURSES_EXPORT
(Ë
wöchn°r
 (
WINDOW
 *, 
chty≥
 *, );

830 
NCURSES_EXPORT
(Ë
wöch°r
 (
WINDOW
 *, 
chty≥
 *);

831 
NCURSES_EXPORT
(Ë
wön°r
 (
WINDOW
 *, *, );

832 
NCURSES_EXPORT
(Ë
wösch
 (
WINDOW
 *, 
chty≥
);

833 
NCURSES_EXPORT
(Ë
wösdñ 
 (
WINDOW
 *,);

834 
NCURSES_EXPORT
(Ë
wö£π 
 (
WINDOW
 *);

835 
NCURSES_EXPORT
(Ë
wö¢°r
 (
WINDOW
 *, const *,);

836 
NCURSES_EXPORT
(Ë
wös°r
 (
WINDOW
 *, const *);

837 
NCURSES_EXPORT
(Ë
wö°r
 (
WINDOW
 *, *);

838 
NCURSES_EXPORT
(Ë
wmove
 (
WINDOW
 *,,);

839 
NCURSES_EXPORT
(Ë
wnouåe‰esh
 (
WINDOW
 *);

840 
NCURSES_EXPORT
(Ë
w¥ötw
 (
WINDOW
 *, const *,...)

841 
GCC_PRINTFLIKE
(2,3);

842 
NCURSES_EXPORT
(Ë
wªdøw 
 (
WINDOW
 *,,);

843 
NCURSES_EXPORT
(Ë
wª‰esh
 (
WINDOW
 *);

844 
NCURSES_EXPORT
(Ë
wsˇnw
 (
WINDOW
 *, 
NCURSES_CONST
 *,...)

845 
GCC_SCANFLIKE
(2,3);

846 
NCURSES_EXPORT
(Ë
ws¸l
 (
WINDOW
 *,);

847 
NCURSES_EXPORT
(Ë
w£ts¸ªg
 (
WINDOW
 *,,);

848 
NCURSES_EXPORT
(Ë
w°™dout
 (
WINDOW
 *);

849 
NCURSES_EXPORT
(Ë
w°™díd
 (
WINDOW
 *);

850 
NCURSES_EXPORT
(Ë
wsyncdown
 (
WINDOW
 *);

851 
NCURSES_EXPORT
(Ë
wsyncup
 (
WINDOW
 *);

852 
NCURSES_EXPORT
(Ë
wtimeout
 (
WINDOW
 *,);

853 
NCURSES_EXPORT
(Ë
wtouch 
 (
WINDOW
 *,,,);

854 
NCURSES_EXPORT
(Ë
wvlöe
 (
WINDOW
 *,
chty≥
,);

859 
NCURSES_EXPORT
(Ë
tigëÊag
 (
NCURSES_CONST
 *);

860 
NCURSES_EXPORT
(Ë
tigënum
 (
NCURSES_CONST
 *);

861 
NCURSES_EXPORT
(*Ë
tigë°r
 (
NCURSES_CONST
 *);

862 
NCURSES_EXPORT
(Ë
puç
 (const *);

864 #i‡
NCURSES_TPARM_VARARGS


865 
NCURSES_EXPORT
(*Ë
ç¨m
 (
NCURSES_CONST
 *, ...);

867 
NCURSES_EXPORT
(*Ë
ç¨m
 (
NCURSES_CONST
 *, 
NCURSES_TPARM_ARG
,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG,NCURSES_TPARM_ARG);

868 
NCURSES_EXPORT
(*Ë
ç¨m_v¨¨gs
 (
NCURSES_CONST
 *, ...);

871 
NCURSES_EXPORT
(*Ë
tù¨m
 (const *, ...);

876 
NCURSES_EXPORT
(Ë
gë©ås
 (c⁄° 
WINDOW
 *);

877 
NCURSES_EXPORT
(Ë
gëcurx
 (c⁄° 
WINDOW
 *);

878 
NCURSES_EXPORT
(Ë
gëcury
 (c⁄° 
WINDOW
 *);

879 
NCURSES_EXPORT
(Ë
gëbegx
 (c⁄° 
WINDOW
 *);

880 
NCURSES_EXPORT
(Ë
gëbegy
 (c⁄° 
WINDOW
 *);

881 
NCURSES_EXPORT
(Ë
gëmaxx
 (c⁄° 
WINDOW
 *);

882 
NCURSES_EXPORT
(Ë
gëmaxy
 (c⁄° 
WINDOW
 *);

883 
NCURSES_EXPORT
(Ë
gë∑rx
 (c⁄° 
WINDOW
 *);

884 
NCURSES_EXPORT
(Ë
gë∑ry
 (c⁄° 
WINDOW
 *);

889 #i‡!
NCURSES_WIDECHAR


890 
	#vid_©å
(
a
,
∑ú
,
›ts
Ë
	`vid©å
◊)

	)

897 #unde‡
NCURSES_EXT_FUNCS


898 
	#NCURSES_EXT_FUNCS
 20160213

	)

899 (*
	gNCURSES_WINDOW_CB
)(
	tWINDOW
 *, *);

900 (*
	gNCURSES_SCREEN_CB
)(
	tSCREEN
 *, *);

901 
NCURSES_EXPORT
(
boﬁ
Ë
is_ãrm_ªsized
 (, );

902 
NCURSES_EXPORT
(*Ë
keybound
 (, );

903 
NCURSES_EXPORT
(c⁄° *Ë
cur£s_vîsi⁄
 ();

904 
NCURSES_EXPORT
(Ë
assume_deÁu…_cﬁ‹s
 (, );

905 
NCURSES_EXPORT
(Ë
deföe_key
 (const *, );

906 
NCURSES_EXPORT
(Ë
gë_escdñay
 ();

907 
NCURSES_EXPORT
(Ë
key_deföed
 (const *);

908 
NCURSES_EXPORT
(Ë
keyok
 (, 
boﬁ
);

909 
NCURSES_EXPORT
(Ë
ªsize_ãrm
 (, );

910 
NCURSES_EXPORT
(Ë
ªsizëîm
 (, );

911 
NCURSES_EXPORT
(Ë
£t_escdñay
 ();

912 
NCURSES_EXPORT
(Ë
£t_èbsize
 ();

913 
NCURSES_EXPORT
(Ë
u£_deÁu…_cﬁ‹s
 ();

914 
NCURSES_EXPORT
(Ë
u£_exãnded_«mes
 (
boﬁ
);

915 
NCURSES_EXPORT
(Ë
u£_Àgacy_codög
 ();

916 
NCURSES_EXPORT
(Ë
u£_s¸ìn
 (
SCREEN
 *, 
NCURSES_SCREEN_CB
, *);

917 
NCURSES_EXPORT
(Ë
u£_wödow
 (
WINDOW
 *, 
NCURSES_WINDOW_CB
, *);

918 
NCURSES_EXPORT
(Ë
wªsize
 (
WINDOW
 *, , );

919 
NCURSES_EXPORT
(Ë
nofûãr
();

925 
NCURSES_EXPORT
(
WINDOW
 *Ë
wgë∑ª¡
 (const WINDOW *);

926 
NCURSES_EXPORT
(
boﬁ
Ë
is_˛óªd
 (c⁄° 
WINDOW
 *);

927 
NCURSES_EXPORT
(
boﬁ
Ë
is_idcok
 (c⁄° 
WINDOW
 *);

928 
NCURSES_EXPORT
(
boﬁ
Ë
is_idlok
 (c⁄° 
WINDOW
 *);

929 
NCURSES_EXPORT
(
boﬁ
Ë
is_immedok
 (c⁄° 
WINDOW
 *);

930 
NCURSES_EXPORT
(
boﬁ
Ë
is_key∑d
 (c⁄° 
WINDOW
 *);

931 
NCURSES_EXPORT
(
boﬁ
Ë
is_Àaveok
 (c⁄° 
WINDOW
 *);

932 
NCURSES_EXPORT
(
boﬁ
Ë
is_nodñay
 (c⁄° 
WINDOW
 *);

933 
NCURSES_EXPORT
(
boﬁ
Ë
is_nŸimeout
 (c⁄° 
WINDOW
 *);

934 
NCURSES_EXPORT
(
boﬁ
Ë
is_∑d
 (c⁄° 
WINDOW
 *);

935 
NCURSES_EXPORT
(
boﬁ
Ë
is_s¸ﬁlok
 (c⁄° 
WINDOW
 *);

936 
NCURSES_EXPORT
(
boﬁ
Ë
is_subwö
 (c⁄° 
WINDOW
 *);

937 
NCURSES_EXPORT
(
boﬁ
Ë
is_syncok
 (c⁄° 
WINDOW
 *);

938 
NCURSES_EXPORT
(Ë
wgëdñay
 (c⁄° 
WINDOW
 *);

939 
NCURSES_EXPORT
(Ë
wgës¸ªg
 (c⁄° 
WINDOW
 *, *, *);

942 
	#cur£s_vîsi⁄
(Ë
NCURSES_VERSION


	)

950 #unde‡
NCURSES_SP_FUNCS


951 
	#NCURSES_SP_FUNCS
 20160213

	)

952 
	#NCURSES_SP_NAME
(
«me
Ë«me##
_•


	)

955 
	#NCURSES_SP_OUTC
 
	`NCURSES_SP_NAME
(
NCURSES_OUTC
)

	)

956 (*
	gNCURSES_SP_OUTC
)(
	tSCREEN
*, );

958 
NCURSES_EXPORT
(
SCREEN
 *Ë
√w_¥es¸
 ();

960 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
baudøã
Ë(
SCREEN
*);

961 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
bìp
Ë(
SCREEN
*);

962 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
ˇn_ch™ge_cﬁ‹
Ë(
SCREEN
*);

963 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
cbªak
Ë(
SCREEN
*);

964 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
curs_£t
Ë(
SCREEN
*, );

965 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
cﬁ‹_c⁄ã¡
Ë(
SCREEN
*, 
NCURSES_PAIRS_T
, 
NCURSES_COLOR_T
*, NCURSES_COLOR_T*, NCURSES_COLOR_T*);

966 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
def_¥og_mode
Ë(
SCREEN
*);

967 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
def_shñl_mode
Ë(
SCREEN
*);

968 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
dñay_ouçut
Ë(
SCREEN
*, );

969 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
doupd©e
Ë(
SCREEN
*);

970 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
echo
Ë(
SCREEN
*);

971 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ídwö
Ë(
SCREEN
*);

972 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
îa£ch¨
Ë(
SCREEN
*);

973 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
fûãr
Ë(
SCREEN
*);

974 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
Êash
Ë(
SCREEN
*);

975 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
Êushöp
Ë(
SCREEN
*);

976 
NCURSES_EXPORT
(
WINDOW
 *Ë
NCURSES_SP_NAME
(
gëwö
Ë(
SCREEN
*, 
FILE
 *);

977 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
hÆfdñay
Ë(
SCREEN
*, );

978 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
has_cﬁ‹s
Ë(
SCREEN
*);

979 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
has_ic
Ë(
SCREEN
*);

980 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
has_û
Ë(
SCREEN
*);

981 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
öô_cﬁ‹
Ë(
SCREEN
*, 
NCURSES_COLOR_T
, NCURSES_COLOR_T, NCURSES_COLOR_T, NCURSES_COLOR_T);

982 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
öô_∑ú
Ë(
SCREEN
*, 
NCURSES_PAIRS_T
, 
NCURSES_COLOR_T
, NCURSES_COLOR_T);

983 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
öåÊush
Ë(
SCREEN
*, 
WINDOW
*, 
boﬁ
);

984 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
i£ndwö
Ë(
SCREEN
*);

985 
NCURSES_EXPORT
(
NCURSES_CONST
 *Ë
NCURSES_SP_NAME
(
key«me
Ë(
SCREEN
*, );

986 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
kûlch¨
Ë(
SCREEN
*);

987 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
l⁄g«me
Ë(
SCREEN
*);

988 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
mvcur
Ë(
SCREEN
*, , , , );

989 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
«pms
Ë(
SCREEN
*, );

990 
NCURSES_EXPORT
(
WINDOW
 *Ë
NCURSES_SP_NAME
(
√w∑d
Ë(
SCREEN
*, , );

991 
NCURSES_EXPORT
(
SCREEN
 *Ë
NCURSES_SP_NAME
(
√wãrm
Ë(SCREEN*, 
NCURSES_CONST
 *, 
FILE
 *, FILE *);

992 
NCURSES_EXPORT
(
WINDOW
 *Ë
NCURSES_SP_NAME
(
√wwö
Ë(
SCREEN
*, , , , );

993 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
∆
Ë(
SCREEN
*);

994 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
nocbªak
Ë(
SCREEN
*);

995 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
n€cho
Ë(
SCREEN
*);

996 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
n⁄l
Ë(
SCREEN
*);

997 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
noqiÊush
Ë(
SCREEN
*);

998 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
n‹aw
Ë(
SCREEN
*);

999 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
∑ú_c⁄ã¡
Ë(
SCREEN
*, 
NCURSES_PAIRS_T
, 
NCURSES_COLOR_T
*, NCURSES_COLOR_T*);

1000 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
qiÊush
Ë(
SCREEN
*);

1001 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
øw
Ë(
SCREEN
*);

1002 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ª£t_¥og_mode
Ë(
SCREEN
*);

1003 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ª£t_shñl_mode
Ë(
SCREEN
*);

1004 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ª£ây
Ë(
SCREEN
*);

1005 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
rùofÊöe
Ë(
SCREEN
*, , (*)(
WINDOW
 *, ));

1006 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ßvëty
Ë(
SCREEN
*);

1007 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
s¸_öô
Ë(
SCREEN
*, const *);

1008 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
s¸_ª°‹e
Ë(
SCREEN
*, const *);

1009 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
s¸_£t
Ë(
SCREEN
*, const *);

1010 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_©åoff
Ë(
SCREEN
*, c⁄° 
chty≥
);

1011 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_©å⁄
Ë(
SCREEN
*, c⁄° 
chty≥
);

1012 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_©å£t
Ë(
SCREEN
*, c⁄° 
chty≥
);

1013 
NCURSES_EXPORT
(
©å_t
Ë
NCURSES_SP_NAME
(
¶k_©å
Ë(
SCREEN
*);

1014 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_©å_£t
Ë(
SCREEN
*, c⁄° 
©å_t
, 
NCURSES_PAIRS_T
, *);

1015 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_˛ór
Ë(
SCREEN
*);

1016 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_cﬁ‹
Ë(
SCREEN
*, 
NCURSES_PAIRS_T
);

1017 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_öô
Ë(
SCREEN
*, );

1018 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
¶k_œbñ
Ë(
SCREEN
*, );

1019 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_nouåe‰esh
Ë(
SCREEN
*);

1020 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_ª‰esh
Ë(
SCREEN
*);

1021 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_ª°‹e
Ë(
SCREEN
*);

1022 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_£t
Ë(
SCREEN
*, , const *, );

1023 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
¶k_touch
Ë(
SCREEN
*);

1024 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
°¨t_cﬁ‹
Ë(
SCREEN
*);

1025 
NCURSES_EXPORT
(
chty≥
Ë
NCURSES_SP_NAME
(
ãrm©ås
Ë(
SCREEN
*);

1026 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
ãrm«me
Ë(
SCREEN
*);

1027 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ty≥ahód
Ë(
SCREEN
*, );

1028 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ungëch
Ë(
SCREEN
*, );

1029 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
u£_ív
Ë(
SCREEN
*, 
boﬁ
);

1030 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
u£_tio˘l
Ë(
SCREEN
*, 
boﬁ
);

1031 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
vid©å
Ë(
SCREEN
*, 
chty≥
);

1032 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
vidputs
Ë(
SCREEN
*, 
chty≥
, 
NCURSES_SP_OUTC
);

1034 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
keybound
Ë(
SCREEN
*, , );

1035 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
assume_deÁu…_cﬁ‹s
Ë(
SCREEN
*, , );

1036 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
deföe_key
Ë(
SCREEN
*, const *, );

1037 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
gë_escdñay
Ë(
SCREEN
*);

1038 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
is_ãrm_ªsized
Ë(
SCREEN
*, , );

1039 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
key_deföed
Ë(
SCREEN
*, const *);

1040 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
keyok
Ë(
SCREEN
*, , 
boﬁ
);

1041 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
nofûãr
Ë(
SCREEN
*);

1042 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ªsize_ãrm
Ë(
SCREEN
*, , );

1043 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ªsizëîm
Ë(
SCREEN
*, , );

1044 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
£t_escdñay
Ë(
SCREEN
*, );

1045 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
£t_èbsize
Ë(
SCREEN
*, );

1046 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
u£_deÁu…_cﬁ‹s
Ë(
SCREEN
*);

1047 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
u£_Àgacy_codög
Ë(
SCREEN
*, );

1050 #unde‡
NCURSES_SP_FUNCS


1051 
	#NCURSES_SP_FUNCS
 0

	)

1052 
	#NCURSES_SP_NAME
(
«me
Ë
	)
name

1053 
	#NCURSES_SP_OUTC
 
NCURSES_OUTC


	)

1058 
	#NCURSES_ATTR_SHIFT
 8

	)

1059 
	#NCURSES_BITS
(
mask
,
shi·
Ë(
	`NCURSES_CAST
(
chty≥
,(mask)Ë<< ((shi·Ë+ 
NCURSES_ATTR_SHIFT
))

	)

1061 
	#A_NORMAL
 (1UL - 1UL)

	)

1062 
	#A_ATTRIBUTES
 
	`NCURSES_BITS
(~(1UL - 1UL),0)

	)

1063 
	#A_CHARTEXT
 (
	`NCURSES_BITS
(1UL,0Ë- 1UL)

	)

1064 
	#A_COLOR
 
	`NCURSES_BITS
(((1ULË<< 8Ë- 1UL,0)

	)

1065 
	#A_STANDOUT
 
	`NCURSES_BITS
(1UL,8)

	)

1066 
	#A_UNDERLINE
 
	`NCURSES_BITS
(1UL,9)

	)

1067 
	#A_REVERSE
 
	`NCURSES_BITS
(1UL,10)

	)

1068 
	#A_BLINK
 
	`NCURSES_BITS
(1UL,11)

	)

1069 
	#A_DIM
 
	`NCURSES_BITS
(1UL,12)

	)

1070 
	#A_BOLD
 
	`NCURSES_BITS
(1UL,13)

	)

1071 
	#A_ALTCHARSET
 
	`NCURSES_BITS
(1UL,14)

	)

1072 
	#A_INVIS
 
	`NCURSES_BITS
(1UL,15)

	)

1073 
	#A_PROTECT
 
	`NCURSES_BITS
(1UL,16)

	)

1074 
	#A_HORIZONTAL
 
	`NCURSES_BITS
(1UL,17)

	)

1075 
	#A_LEFT
 
	`NCURSES_BITS
(1UL,18)

	)

1076 
	#A_LOW
 
	`NCURSES_BITS
(1UL,19)

	)

1077 
	#A_RIGHT
 
	`NCURSES_BITS
(1UL,20)

	)

1078 
	#A_TOP
 
	`NCURSES_BITS
(1UL,21)

	)

1079 
	#A_VERTICAL
 
	`NCURSES_BITS
(1UL,22)

	)

1082 
	#A_ITALIC
 
	`NCURSES_BITS
(1UL,23Ë

	)

1095 
	#gëyx
(
wö
,
y
,
x
Ë(y = 
	`gëcury
(wö), x = 
	`gëcurx
(wö))

	)

1096 
	#gëbegyx
(
wö
,
y
,
x
Ë(y = 
	`gëbegy
(wö), x = 
	`gëbegx
(wö))

	)

1097 
	#gëmaxyx
(
wö
,
y
,
x
Ë(y = 
	`gëmaxy
(wö), x = 
	`gëmaxx
(wö))

	)

1098 
	#gë∑ryx
(
wö
,
y
,
x
Ë(y = 
	`gë∑ry
(wö), x = 
	`gë∑rx
(wö))

	)

1100 
	#gësyx
(
y
,
x
Ëdÿ{ i‡(
√ws¸
) { \

1101 i‡(
	`is_Àaveok
(
√ws¸
)) \

1102 (
y
Ë(
x
) = -1; \

1104 
	`gëyx
(
√ws¸
,(
y
), (
x
)); \

1106 } 0)

	)

1108 
	#£tsyx
(
y
,
x
Ëdÿ{ i‡(
√ws¸
) { \

1109 i‡((
y
Ë=-1 && (
x
) == -1) \

1110 
	`Àaveok
(
√ws¸
, 
TRUE
); \

1112 
	`Àaveok
(
√ws¸
, 
FALSE
); \

1113 
	`wmove
(
√ws¸
, (
y
), (
x
)); \

1116 } 0)

	)

1118 #i‚de‡
NCURSES_NOMACROS


1124 
	#wgë°r
(
w
, 
s
Ë
	`wgën°r
(w, s, -1)

	)

1125 
	#gën°r
(
s
, 
n
Ë
	`wgën°r
(
°ds¸
, s, (n))

	)

1127 
	#£âîm
(
ãrm
Ë
	`£tu±îm
—îm, 1, (*)0)

	)

1129 
	#fixãrm
(Ë
	`ª£t_¥og_mode
()

	)

1130 
	#ª£âîm
(Ë
	`ª£t_shñl_mode
()

	)

1131 
	#ßvëîm
(Ë
	`def_¥og_mode
()

	)

1132 
	#¸mode
(Ë
	`cbªak
()

	)

1133 
	#no¸mode
(Ë
	`nocbªak
()

	)

1134 
	#gëtmode
()

	)

1137 #i‡!
NCURSES_OPAQUE


1138 
	#gë©ås
(
wö
Ë
	`NCURSES_CAST
(, (wöË? (wö)->
_©ås
 : 
A_NORMAL
)

	)

1139 
	#gëcurx
(
wö
Ë((wöË? (wö)->
_curx
 : 
ERR
)

	)

1140 
	#gëcury
(
wö
Ë((wöË? (wö)->
_cury
 : 
ERR
)

	)

1141 
	#gëbegx
(
wö
Ë((wöË? (wö)->
_begx
 : 
ERR
)

	)

1142 
	#gëbegy
(
wö
Ë((wöË? (wö)->
_begy
 : 
ERR
)

	)

1143 
	#gëmaxx
(
wö
Ë((wöË? ((wö)->
_maxx
 + 1Ë: 
ERR
)

	)

1144 
	#gëmaxy
(
wö
Ë((wöË? ((wö)->
_maxy
 + 1Ë: 
ERR
)

	)

1145 
	#gë∑rx
(
wö
Ë((wöË? (wö)->
_∑rx
 : 
ERR
)

	)

1146 
	#gë∑ry
(
wö
Ë((wöË? (wö)->
_∑ry
 : 
ERR
)

	)

1149 
	#w°™dout
(
wö
Ë(
	`w©å£t
(wö,
A_STANDOUT
))

	)

1150 
	#w°™díd
(
wö
Ë(
	`w©å£t
(wö,
A_NORMAL
))

	)

1152 
	#w©å⁄
(
wö
,
©
Ë
	`w©å_⁄
(wö, 
	`NCURSES_CAST
(
©å_t
,át), 
NULL
)

	)

1153 
	#w©åoff
(
wö
,
©
Ë
	`w©å_off
(wö, 
	`NCURSES_CAST
(
©å_t
,át), 
NULL
)

	)

1155 #i‡!
NCURSES_OPAQUE


1156 #i‡
NCURSES_WIDECHAR
 && 0

1157 
	#w©å£t
(
wö
,
©
) ((win) \

1158 ? ((
wö
)->
_cﬁ‹
 = 
	`NCURSES_CAST
(, 
	`PAIR_NUMBER
(
©
)), \

1159 (
wö
)->
_©ås
 = 
	`NCURSES_CAST
(
©å_t
, 
©
), \

1160 
OK
) \

1161 : 
ERR
)

	)

1163 
	#w©å£t
(
wö
,
©
) ((win) \

1164 ? ((
wö
)->
_©ås
 = 
	`NCURSES_CAST
(
©å_t
, 
©
), \

1165 
OK
) \

1166 : 
ERR
)

	)

1170 
	#s¸ﬁl
(
wö
Ë
	`ws¸l
(wö,1)

	)

1172 
	#touchwö
(
wö
Ë
	`wtouch 
((wö), 0, 
	`gëmaxy
(wö), 1)

	)

1173 
	#touchlöe
(
wö
, 
s
, 
c
Ë
	`wtouch 
((wö), s, c, 1)

	)

1174 
	#u¡ouchwö
(
wö
Ë
	`wtouch 
((wö), 0, 
	`gëmaxy
(wö), 0)

	)

1176 
	#box
(
wö
, 
v
, 
h
Ë
	`wb‹dî
(wö, v, v, h, h, 0, 0, 0, 0)

	)

1177 
	#b‹dî
(
ls
, 
rs
, 
ts
, 
bs
, 
é
, 
å
, 
bl
, 
br
Ë
	`wb‹dî
(
°ds¸
,Üs,Ñs,Ås, bs,Ål,År, bl, br)

	)

1178 
	#hlöe
(
ch
, 
n
Ë
	`whlöe
(
°ds¸
, ch, (n))

	)

1179 
	#vlöe
(
ch
, 
n
Ë
	`wvlöe
(
°ds¸
, ch, (n))

	)

1181 
	#wö°r
(
w
, 
s
Ë
	`wön°r
(w, s, -1)

	)

1182 
	#wöch°r
(
w
, 
s
Ë
	`wöchn°r
(w, s, -1)

	)

1183 
	#wös°r
(
w
, 
s
Ë
	`wö¢°r
(w, s, -1)

	)

1185 #i‡!
NCURSES_OPAQUE


1186 
	#ªdøwwö
(
wö
Ë
	`wªdøw 
(wö, 0, ((wöË? (wö)->
_maxy
+1 : -1))

	)

1189 
	#wadd°r
(
wö
,
°r
Ë
	`waddn°r
(wö,°r,-1)

	)

1190 
	#waddch°r
(
wö
,
°r
Ë
	`waddchn°r
(wö,°r,-1)

	)

1195 
	#COLOR_PAIR
(
n
Ë
	`NCURSES_BITS
(“), 0)

	)

1196 
	#PAIR_NUMBER
(
a
Ë(
	`NCURSES_CAST
(,((NCURSES_CAST(,◊)Ë& 
A_COLOR
Ë>> 
NCURSES_ATTR_SHIFT
)))

	)

1202 
	#addch
(
ch
Ë
	`waddch
(
°ds¸
,(ch))

	)

1203 
	#addchn°r
(
°r
,
n
Ë
	`waddchn°r
(
°ds¸
,(°r),“))

	)

1204 
	#addch°r
(
°r
Ë
	`waddch°r
(
°ds¸
,(°r))

	)

1205 
	#addn°r
(
°r
,
n
Ë
	`waddn°r
(
°ds¸
,(°r),“))

	)

1206 
	#add°r
(
°r
Ë
	`waddn°r
(
°ds¸
,(°r),-1)

	)

1207 
	#©å_gë
(
≠
,
˝
,
o
Ë
	`w©å_gë
(
°ds¸
,◊p),(˝),(o))

	)

1208 
	#©å_off
(
a
,
o
Ë
	`w©å_off
(
°ds¸
,◊),(o))

	)

1209 
	#©å_⁄
(
a
,
o
Ë
	`w©å_⁄
(
°ds¸
,◊),(o))

	)

1210 
	#©å_£t
(
a
,
c
,
o
Ë
	`w©å_£t
(
°ds¸
,◊),(c),(o))

	)

1211 
	#©åoff
(
©
Ë
	`w©åoff
(
°ds¸
,◊t))

	)

1212 
	#©å⁄
(
©
Ë
	`w©å⁄
(
°ds¸
,◊t))

	)

1213 
	#©å£t
(
©
Ë
	`w©å£t
(
°ds¸
,◊t))

	)

1214 
	#bkgd
(
ch
Ë
	`wbkgd
(
°ds¸
,(ch))

	)

1215 
	#bkgd£t
(
ch
Ë
	`wbkgd£t
(
°ds¸
,(ch))

	)

1216 
	#chg©
(
n
,
a
,
c
,
o
Ë
	`wchg©
(
°ds¸
,“),◊),(c),(o))

	)

1217 
	#˛ór
(Ë
	`w˛ór
(
°ds¸
)

	)

1218 
	#˛πobŸ
(Ë
	`w˛πobŸ
(
°ds¸
)

	)

1219 
	#˛π€ﬁ
(Ë
	`w˛π€ﬁ
(
°ds¸
)

	)

1220 
	#cﬁ‹_£t
(
c
,
o
Ë
	`wcﬁ‹_£t
(
°ds¸
,(c),(o))

	)

1221 
	#dñch
(Ë
	`wdñch
(
°ds¸
)

	)

1222 
	#dñëñn
(Ë
	`wösdñ 
(
°ds¸
,-1)

	)

1223 
	#echoch¨
(
c
Ë
	`wechoch¨
(
°ds¸
,(c))

	)

1224 
	#îa£
(Ë
	`wîa£
(
°ds¸
)

	)

1225 
	#gëch
(Ë
	`wgëch
(
°ds¸
)

	)

1226 
	#gë°r
(
°r
Ë
	`wgë°r
(
°ds¸
,(°r))

	)

1227 
	#öch
(Ë
	`wöch
(
°ds¸
)

	)

1228 
	#öchn°r
(
s
,
n
Ë
	`wöchn°r
(
°ds¸
,(s),“))

	)

1229 
	#öch°r
(
s
Ë
	`wöch°r
(
°ds¸
,(s))

	)

1230 
	#ön°r
(
s
,
n
Ë
	`wön°r
(
°ds¸
,(s),“))

	)

1231 
	#ösch
(
c
Ë
	`wösch
(
°ds¸
,(c))

	)

1232 
	#ösdñ 
(
n
Ë
	`wösdñ 
(
°ds¸
,“))

	)

1233 
	#ö£π 
(Ë
	`wösdñ 
(
°ds¸
,1)

	)

1234 
	#ö¢°r
(
s
,
n
Ë
	`wö¢°r
(
°ds¸
,(s),“))

	)

1235 
	#ös°r
(
s
Ë
	`wös°r
(
°ds¸
,(s))

	)

1236 
	#ö°r
(
s
Ë
	`wö°r
(
°ds¸
,(s))

	)

1237 
	#move
(
y
,
x
Ë
	`wmove
(
°ds¸
,(y),(x))

	)

1238 
	#ª‰esh
(Ë
	`wª‰esh
(
°ds¸
)

	)

1239 
	#s¸l
(
n
Ë
	`ws¸l
(
°ds¸
,“))

	)

1240 
	#£ts¸ªg
(
t
,
b
Ë
	`w£ts¸ªg
(
°ds¸
,—),(b))

	)

1241 
	#°™díd
(Ë
	`w°™díd
(
°ds¸
)

	)

1242 
	#°™dout
(Ë
	`w°™dout
(
°ds¸
)

	)

1243 
	#timeout
(
dñay
Ë
	`wtimeout
(
°ds¸
,(dñay))

	)

1244 
	#wdñëñn
(
wö
Ë
	`wösdñ 
(wö,-1)

	)

1245 
	#wö£π 
(
wö
Ë
	`wösdñ 
(wö,1)

	)

1251 
	#mvwaddch
(
wö
,
y
,
x
,
ch
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`waddch
((wö),(ch)))

	)

1252 
	#mvwaddchn°r
(
wö
,
y
,
x
,
°r
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`waddchn°r
((wö),(°r),“)))

	)

1253 
	#mvwaddch°r
(
wö
,
y
,
x
,
°r
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`waddchn°r
((wö),(°r),-1))

	)

1254 
	#mvwaddn°r
(
wö
,
y
,
x
,
°r
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`waddn°r
((wö),(°r),“)))

	)

1255 
	#mvwadd°r
(
wö
,
y
,
x
,
°r
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`waddn°r
((wö),(°r),-1))

	)

1256 
	#mvwchg©
(
wö
,
y
,
x
,
n
,
a
,
c
,
o
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wchg©
((wö),“),◊),(c),(o)))

	)

1257 
	#mvwdñch
(
wö
,
y
,
x
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wdñch
(wö))

	)

1258 
	#mvwgëch
(
wö
,
y
,
x
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wgëch
(wö))

	)

1259 
	#mvwgën°r
(
wö
,
y
,
x
,
°r
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wgën°r
((wö),(°r),“)))

	)

1260 
	#mvwgë°r
(
wö
,
y
,
x
,
°r
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wgë°r
((wö),(°r)))

	)

1261 
	#mvwhlöe
(
wö
,
y
,
x
,
c
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`whlöe
((wö),(c),“)))

	)

1262 
	#mvwöch
(
wö
,
y
,
x
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? 
	`NCURSES_CAST
(
chty≥
, ERRË: 
	`wöch
(wö))

	)

1263 
	#mvwöchn°r
(
wö
,
y
,
x
,
s
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wöchn°r
((wö),(s),“)))

	)

1264 
	#mvwöch°r
(
wö
,
y
,
x
,
s
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wöch°r
((wö),(s)))

	)

1265 
	#mvwön°r
(
wö
,
y
,
x
,
s
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wön°r
((wö),(s),“)))

	)

1266 
	#mvwösch
(
wö
,
y
,
x
,
c
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wösch
((wö),(c)))

	)

1267 
	#mvwö¢°r
(
wö
,
y
,
x
,
s
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wö¢°r
((wö),(s),“)))

	)

1268 
	#mvwös°r
(
wö
,
y
,
x
,
s
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wös°r
((wö),(s)))

	)

1269 
	#mvwö°r
(
wö
,
y
,
x
,
s
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wö°r
((wö),(s)))

	)

1270 
	#mvwvlöe
(
wö
,
y
,
x
,
c
,
n
Ë(
	`wmove
((wö),(y),(x)Ë=
ERR
 ? ERR : 
	`wvlöe
((wö),(c),“)))

	)

1272 
	#mvaddch
(
y
,
x
,
ch
Ë
	`mvwaddch
(
°ds¸
,(y),(x),(ch))

	)

1273 
	#mvaddchn°r
(
y
,
x
,
°r
,
n
Ë
	`mvwaddchn°r
(
°ds¸
,(y),(x),(°r),“))

	)

1274 
	#mvaddch°r
(
y
,
x
,
°r
Ë
	`mvwaddch°r
(
°ds¸
,(y),(x),(°r))

	)

1275 
	#mvaddn°r
(
y
,
x
,
°r
,
n
Ë
	`mvwaddn°r
(
°ds¸
,(y),(x),(°r),“))

	)

1276 
	#mvadd°r
(
y
,
x
,
°r
Ë
	`mvwadd°r
(
°ds¸
,(y),(x),(°r))

	)

1277 
	#mvchg©
(
y
,
x
,
n
,
a
,
c
,
o
Ë
	`mvwchg©
(
°ds¸
,(y),(x),“),◊),(c),(o))

	)

1278 
	#mvdñch
(
y
,
x
Ë
	`mvwdñch
(
°ds¸
,(y),(x))

	)

1279 
	#mvgëch
(
y
,
x
Ë
	`mvwgëch
(
°ds¸
,(y),(x))

	)

1280 
	#mvgën°r
(
y
,
x
,
°r
,
n
Ë
	`mvwgën°r
(
°ds¸
,(y),(x),(°r),“))

	)

1281 
	#mvgë°r
(
y
,
x
,
°r
Ë
	`mvwgë°r
(
°ds¸
,(y),(x),(°r))

	)

1282 
	#mvhlöe
(
y
,
x
,
c
,
n
Ë
	`mvwhlöe
(
°ds¸
,(y),(x),(c),“))

	)

1283 
	#mvöch
(
y
,
x
Ë
	`mvwöch
(
°ds¸
,(y),(x))

	)

1284 
	#mvöchn°r
(
y
,
x
,
s
,
n
Ë
	`mvwöchn°r
(
°ds¸
,(y),(x),(s),“))

	)

1285 
	#mvöch°r
(
y
,
x
,
s
Ë
	`mvwöch°r
(
°ds¸
,(y),(x),(s))

	)

1286 
	#mvön°r
(
y
,
x
,
s
,
n
Ë
	`mvwön°r
(
°ds¸
,(y),(x),(s),“))

	)

1287 
	#mvösch
(
y
,
x
,
c
Ë
	`mvwösch
(
°ds¸
,(y),(x),(c))

	)

1288 
	#mvö¢°r
(
y
,
x
,
s
,
n
Ë
	`mvwö¢°r
(
°ds¸
,(y),(x),(s),“))

	)

1289 
	#mvös°r
(
y
,
x
,
s
Ë
	`mvwös°r
(
°ds¸
,(y),(x),(s))

	)

1290 
	#mvö°r
(
y
,
x
,
s
Ë
	`mvwö°r
(
°ds¸
,(y),(x),(s))

	)

1291 
	#mvvlöe
(
y
,
x
,
c
,
n
Ë
	`mvwvlöe
(
°ds¸
,(y),(x),(c),“))

	)

1296 #i‡!
NCURSES_OPAQUE


1297 
	#gëbkgd
(
wö
Ë((wöË? ((wö)->
_bkgd
Ë: 0)

	)

1300 
	#¶k_©å_off
(
a
,
v
Ë((vË? 
ERR
 : 
	`¶k_©åoff
◊))

	)

1301 
	#¶k_©å_⁄
(
a
,
v
Ë((vË? 
ERR
 : 
	`¶k_©å⁄
◊))

	)

1303 #i‡!
NCURSES_OPAQUE


1304 #i‡
NCURSES_WIDECHAR
 && 0

1305 
	#w©å_£t
(
wö
,
a
,
p
,
›ts
) (((win) \

1306 ? ((
wö
)->
_©ås
 = ((
a
Ë& ~
A_COLOR
), \

1307 (
wö
)->
_cﬁ‹
 = (
p
)) \

1308 : 
OK
), \

1309 
OK
)

	)

1310 
	#w©å_gë
(
wö
,
a
,
p
,
›ts
Ë(()((◊Ë!(*)0Ë? (*◊Ë(wöË? (wö)->
_©ås
 : 0Ë: 
OK
), \

1311 ()(((
p
Ë!(*)0Ë? (*’Ë(
NCURSES_PAIRS_T
Ë((
wö
Ë? (wö)->
_cﬁ‹
 : 0)Ë: 
OK
), \

1312 
OK
)

	)

1314 
	#w©å_£t
(
wö
,
a
,
p
,
›ts
) (((win) \

1315 ? ((
wö
)->
_©ås
 = (((
a
Ë& ~
A_COLOR
Ë| (
©å_t
)
	`COLOR_PAIR
(
p
))) \

1316 : 
OK
), \

1317 
OK
)

	)

1318 
	#w©å_gë
(
wö
,
a
,
p
,
›ts
Ë(()((◊Ë!(*)0Ë? (*◊Ë(wöË? (wö)->
_©ås
 : 0Ë: 
OK
), \

1319 ()(((
p
Ë!(*)0Ë? (*’Ë(
NCURSES_PAIRS_T
Ë((
wö
Ë? 
	`PAIR_NUMBER
((wö)->
_©ås
Ë: 0)Ë: 
OK
), \

1320 
OK
)

	)

1330 
	#vw_¥ötw
 
vw¥ötw


	)

1331 
	#vw_sˇnw
 
vwsˇnw


	)

1337 
	#vssˇnf
(
a
,
b
,
c
Ë
	`_nc_vssˇnf
◊,b,c)

	)

1338 
NCURSES_EXPORT
(Ë
vssˇnf
(c⁄° *, c⁄° *, 
va_li°
);

1345 #i‡!
NCURSES_OPAQUE


1346 
	#is_˛óªd
(
wö
Ë((wöË? (wö)->
_˛ór
 : 
FALSE
)

	)

1347 
	#is_idcok
(
wö
Ë((wöË? (wö)->
_idcok
 : 
FALSE
)

	)

1348 
	#is_idlok
(
wö
Ë((wöË? (wö)->
_idlok
 : 
FALSE
)

	)

1349 
	#is_immedok
(
wö
Ë((wöË? (wö)->
_immed
 : 
FALSE
)

	)

1350 
	#is_key∑d
(
wö
Ë((wöË? (wö)->
_u£_key∑d
 : 
FALSE
)

	)

1351 
	#is_Àaveok
(
wö
Ë((wöË? (wö)->
_Àaveok
 : 
FALSE
)

	)

1352 
	#is_nodñay
(
wö
Ë((wöË? ((wö)->
_dñay
 =0Ë: 
FALSE
)

	)

1353 
	#is_nŸimeout
(
wö
Ë((wöË? (wö)->
_nŸimeout
 : 
FALSE
)

	)

1354 
	#is_∑d
(
wö
Ë((wöË? ((wö)->
_Êags
 & 
_ISPAD
Ë!0 : 
FALSE
)

	)

1355 
	#is_s¸ﬁlok
(
wö
Ë((wöË? (wö)->
_s¸ﬁl
 : 
FALSE
)

	)

1356 
	#is_subwö
(
wö
Ë((wöË? ((wö)->
_Êags
 & 
_SUBWIN
Ë!0 : 
FALSE
)

	)

1357 
	#is_syncok
(
wö
Ë((wöË? (wö)->
_sync
 : 
FALSE
)

	)

1358 
	#wgëdñay
(
wö
Ë((wöË? (wö)->
_dñay
 : 0)

	)

1359 
	#wgë∑ª¡
(
wö
Ë((wöË? (wö)->
_∑ª¡
 : 0)

	)

1360 
	#wgës¸ªg
(
wö
,
t
,
b
Ë((wöË? (*—Ë(wö)->
_ªgt›
, *(bË(wö)->
_ªgbŸtom
, 
OK
Ë: 
ERR
)

	)

1374 #i‡
NCURSES_REENTRANT


1376 
NCURSES_WRAPPED_VAR
(
WINDOW
 *, 
curs¸
);

1377 
NCURSES_WRAPPED_VAR
(
WINDOW
 *, 
√ws¸
);

1378 
NCURSES_WRAPPED_VAR
(
WINDOW
 *, 
°ds¸
);

1379 
NCURSES_WRAPPED_VAR
(*, 
âyty≥
);

1380 
NCURSES_WRAPPED_VAR
(, 
COLORS
);

1381 
NCURSES_WRAPPED_VAR
(, 
COLOR_PAIRS
);

1382 
NCURSES_WRAPPED_VAR
(, 
COLS
);

1383 
NCURSES_WRAPPED_VAR
(, 
ESCDELAY
);

1384 
NCURSES_WRAPPED_VAR
(, 
LINES
);

1385 
NCURSES_WRAPPED_VAR
(, 
TABSIZE
);

1387 
	#curs¸
 
	`NCURSES_PUBLIC_VAR
(
	`curs¸
())

	)

1388 
	#√ws¸
 
	`NCURSES_PUBLIC_VAR
(
	`√ws¸
())

	)

1389 
	#°ds¸
 
	`NCURSES_PUBLIC_VAR
(
	`°ds¸
())

	)

1390 
	#âyty≥
 
	`NCURSES_PUBLIC_VAR
(
	`âyty≥
())

	)

1391 
	#COLORS
 
	`NCURSES_PUBLIC_VAR
(
	`COLORS
())

	)

1392 
	#COLOR_PAIRS
 
	`NCURSES_PUBLIC_VAR
(
	`COLOR_PAIRS
())

	)

1393 
	#COLS
 
	`NCURSES_PUBLIC_VAR
(
	`COLS
())

	)

1394 
	#ESCDELAY
 
	`NCURSES_PUBLIC_VAR
(
	`ESCDELAY
())

	)

1395 
	#LINES
 
	`NCURSES_PUBLIC_VAR
(
	`LINES
())

	)

1396 
	#TABSIZE
 
	`NCURSES_PUBLIC_VAR
(
	`TABSIZE
())

	)

1400 
NCURSES_EXPORT_VAR
(
WINDOW
 *Ë
curs¸
;

1401 
NCURSES_EXPORT_VAR
(
WINDOW
 *Ë
√ws¸
;

1402 
NCURSES_EXPORT_VAR
(
WINDOW
 *Ë
°ds¸
;

1403 
NCURSES_EXPORT_VAR
(Ë
âyty≥
[];

1404 
NCURSES_EXPORT_VAR
(Ë
COLORS
;

1405 
NCURSES_EXPORT_VAR
(Ë
COLOR_PAIRS
;

1406 
NCURSES_EXPORT_VAR
(Ë
COLS
;

1407 
NCURSES_EXPORT_VAR
(Ë
ESCDELAY
;

1408 
NCURSES_EXPORT_VAR
(Ë
LINES
;

1409 
NCURSES_EXPORT_VAR
(Ë
TABSIZE
;

1425 
	#KEY_CODE_YES
 0400

	)

1426 
	#KEY_MIN
 0401

	)

1427 
	#KEY_BREAK
 0401

	)

1428 
	#KEY_SRESET
 0530

	)

1429 
	#KEY_RESET
 0531

	)

1433 
	#KEY_DOWN
 0402

	)

1434 
	#KEY_UP
 0403

	)

1435 
	#KEY_LEFT
 0404

	)

1436 
	#KEY_RIGHT
 0405

	)

1437 
	#KEY_HOME
 0406

	)

1438 
	#KEY_BACKSPACE
 0407

	)

1439 
	#KEY_F0
 0410

	)

1440 
	#KEY_F
(
n
Ë(
KEY_F0
+“)Ë

	)

1441 
	#KEY_DL
 0510

	)

1442 
	#KEY_IL
 0511

	)

1443 
	#KEY_DC
 0512

	)

1444 
	#KEY_IC
 0513

	)

1445 
	#KEY_EIC
 0514

	)

1446 
	#KEY_CLEAR
 0515

	)

1447 
	#KEY_EOS
 0516

	)

1448 
	#KEY_EOL
 0517

	)

1449 
	#KEY_SF
 0520

	)

1450 
	#KEY_SR
 0521

	)

1451 
	#KEY_NPAGE
 0522

	)

1452 
	#KEY_PPAGE
 0523

	)

1453 
	#KEY_STAB
 0524

	)

1454 
	#KEY_CTAB
 0525

	)

1455 
	#KEY_CATAB
 0526

	)

1456 
	#KEY_ENTER
 0527

	)

1457 
	#KEY_PRINT
 0532

	)

1458 
	#KEY_LL
 0533

	)

1459 
	#KEY_A1
 0534

	)

1460 
	#KEY_A3
 0535

	)

1461 
	#KEY_B2
 0536

	)

1462 
	#KEY_C1
 0537

	)

1463 
	#KEY_C3
 0540

	)

1464 
	#KEY_BTAB
 0541

	)

1465 
	#KEY_BEG
 0542

	)

1466 
	#KEY_CANCEL
 0543

	)

1467 
	#KEY_CLOSE
 0544

	)

1468 
	#KEY_COMMAND
 0545

	)

1469 
	#KEY_COPY
 0546

	)

1470 
	#KEY_CREATE
 0547

	)

1471 
	#KEY_END
 0550

	)

1472 
	#KEY_EXIT
 0551

	)

1473 
	#KEY_FIND
 0552

	)

1474 
	#KEY_HELP
 0553

	)

1475 
	#KEY_MARK
 0554

	)

1476 
	#KEY_MESSAGE
 0555

	)

1477 
	#KEY_MOVE
 0556

	)

1478 
	#KEY_NEXT
 0557

	)

1479 
	#KEY_OPEN
 0560

	)

1480 
	#KEY_OPTIONS
 0561

	)

1481 
	#KEY_PREVIOUS
 0562

	)

1482 
	#KEY_REDO
 0563

	)

1483 
	#KEY_REFERENCE
 0564

	)

1484 
	#KEY_REFRESH
 0565

	)

1485 
	#KEY_REPLACE
 0566

	)

1486 
	#KEY_RESTART
 0567

	)

1487 
	#KEY_RESUME
 0570

	)

1488 
	#KEY_SAVE
 0571

	)

1489 
	#KEY_SBEG
 0572

	)

1490 
	#KEY_SCANCEL
 0573

	)

1491 
	#KEY_SCOMMAND
 0574

	)

1492 
	#KEY_SCOPY
 0575

	)

1493 
	#KEY_SCREATE
 0576

	)

1494 
	#KEY_SDC
 0577

	)

1495 
	#KEY_SDL
 0600

	)

1496 
	#KEY_SELECT
 0601

	)

1497 
	#KEY_SEND
 0602

	)

1498 
	#KEY_SEOL
 0603

	)

1499 
	#KEY_SEXIT
 0604

	)

1500 
	#KEY_SFIND
 0605

	)

1501 
	#KEY_SHELP
 0606

	)

1502 
	#KEY_SHOME
 0607

	)

1503 
	#KEY_SIC
 0610

	)

1504 
	#KEY_SLEFT
 0611

	)

1505 
	#KEY_SMESSAGE
 0612

	)

1506 
	#KEY_SMOVE
 0613

	)

1507 
	#KEY_SNEXT
 0614

	)

1508 
	#KEY_SOPTIONS
 0615

	)

1509 
	#KEY_SPREVIOUS
 0616

	)

1510 
	#KEY_SPRINT
 0617

	)

1511 
	#KEY_SREDO
 0620

	)

1512 
	#KEY_SREPLACE
 0621

	)

1513 
	#KEY_SRIGHT
 0622

	)

1514 
	#KEY_SRSUME
 0623

	)

1515 
	#KEY_SSAVE
 0624

	)

1516 
	#KEY_SSUSPEND
 0625

	)

1517 
	#KEY_SUNDO
 0626

	)

1518 
	#KEY_SUSPEND
 0627

	)

1519 
	#KEY_UNDO
 0630

	)

1520 
	#KEY_MOUSE
 0631

	)

1521 
	#KEY_RESIZE
 0632

	)

1522 
	#KEY_EVENT
 0633

	)

1524 
	#KEY_MAX
 0777

	)

1534 #i‡
NCURSES_MOUSE_VERSION
 > 1

1535 
	#NCURSES_MOUSE_MASK
(
b
,
m
Ë((mË<< (((bË- 1Ë* 5))

	)

1537 
	#NCURSES_MOUSE_MASK
(
b
,
m
Ë((mË<< (((bË- 1Ë* 6))

	)

1540 
	#NCURSES_BUTTON_RELEASED
 001L

	)

1541 
	#NCURSES_BUTTON_PRESSED
 002L

	)

1542 
	#NCURSES_BUTTON_CLICKED
 004L

	)

1543 
	#NCURSES_DOUBLE_CLICKED
 010L

	)

1544 
	#NCURSES_TRIPLE_CLICKED
 020L

	)

1545 
	#NCURSES_RESERVED_EVENT
 040L

	)

1548 
	#BUTTON1_RELEASED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_BUTTON_RELEASED
)

	)

1549 
	#BUTTON1_PRESSED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_BUTTON_PRESSED
)

	)

1550 
	#BUTTON1_CLICKED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_BUTTON_CLICKED
)

	)

1551 
	#BUTTON1_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_DOUBLE_CLICKED
)

	)

1552 
	#BUTTON1_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_TRIPLE_CLICKED
)

	)

1554 
	#BUTTON2_RELEASED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_BUTTON_RELEASED
)

	)

1555 
	#BUTTON2_PRESSED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_BUTTON_PRESSED
)

	)

1556 
	#BUTTON2_CLICKED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_BUTTON_CLICKED
)

	)

1557 
	#BUTTON2_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_DOUBLE_CLICKED
)

	)

1558 
	#BUTTON2_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_TRIPLE_CLICKED
)

	)

1560 
	#BUTTON3_RELEASED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_BUTTON_RELEASED
)

	)

1561 
	#BUTTON3_PRESSED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_BUTTON_PRESSED
)

	)

1562 
	#BUTTON3_CLICKED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_BUTTON_CLICKED
)

	)

1563 
	#BUTTON3_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_DOUBLE_CLICKED
)

	)

1564 
	#BUTTON3_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_TRIPLE_CLICKED
)

	)

1566 
	#BUTTON4_RELEASED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_BUTTON_RELEASED
)

	)

1567 
	#BUTTON4_PRESSED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_BUTTON_PRESSED
)

	)

1568 
	#BUTTON4_CLICKED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_BUTTON_CLICKED
)

	)

1569 
	#BUTTON4_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_DOUBLE_CLICKED
)

	)

1570 
	#BUTTON4_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_TRIPLE_CLICKED
)

	)

1576 #i‡
NCURSES_MOUSE_VERSION
 > 1

1578 
	#BUTTON5_RELEASED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_BUTTON_RELEASED
)

	)

1579 
	#BUTTON5_PRESSED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_BUTTON_PRESSED
)

	)

1580 
	#BUTTON5_CLICKED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_BUTTON_CLICKED
)

	)

1581 
	#BUTTON5_DOUBLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_DOUBLE_CLICKED
)

	)

1582 
	#BUTTON5_TRIPLE_CLICKED
 
	`NCURSES_MOUSE_MASK
(5, 
NCURSES_TRIPLE_CLICKED
)

	)

1584 
	#BUTTON_CTRL
 
	`NCURSES_MOUSE_MASK
(6, 0001L)

	)

1585 
	#BUTTON_SHIFT
 
	`NCURSES_MOUSE_MASK
(6, 0002L)

	)

1586 
	#BUTTON_ALT
 
	`NCURSES_MOUSE_MASK
(6, 0004L)

	)

1587 
	#REPORT_MOUSE_POSITION
 
	`NCURSES_MOUSE_MASK
(6, 0010L)

	)

1591 
	#BUTTON1_RESERVED_EVENT
 
	`NCURSES_MOUSE_MASK
(1, 
NCURSES_RESERVED_EVENT
)

	)

1592 
	#BUTTON2_RESERVED_EVENT
 
	`NCURSES_MOUSE_MASK
(2, 
NCURSES_RESERVED_EVENT
)

	)

1593 
	#BUTTON3_RESERVED_EVENT
 
	`NCURSES_MOUSE_MASK
(3, 
NCURSES_RESERVED_EVENT
)

	)

1594 
	#BUTTON4_RESERVED_EVENT
 
	`NCURSES_MOUSE_MASK
(4, 
NCURSES_RESERVED_EVENT
)

	)

1596 
	#BUTTON_CTRL
 
	`NCURSES_MOUSE_MASK
(5, 0001L)

	)

1597 
	#BUTTON_SHIFT
 
	`NCURSES_MOUSE_MASK
(5, 0002L)

	)

1598 
	#BUTTON_ALT
 
	`NCURSES_MOUSE_MASK
(5, 0004L)

	)

1599 
	#REPORT_MOUSE_POSITION
 
	`NCURSES_MOUSE_MASK
(5, 0010L)

	)

1603 
	#ALL_MOUSE_EVENTS
 (
REPORT_MOUSE_POSITION
 - 1)

	)

1606 
	#BUTTON_RELEASE
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 001))

	)

1607 
	#BUTTON_PRESS
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 002))

	)

1608 
	#BUTTON_CLICK
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 004))

	)

1609 
	#BUTTON_DOUBLE_CLICK
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 010))

	)

1610 
	#BUTTON_TRIPLE_CLICK
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 020))

	)

1611 
	#BUTTON_RESERVED_EVENT
(
e
, 
x
Ë(”Ë& 
	`NCURSES_MOUSE_MASK
(x, 040))

	)

1615 
	gid
;

1616 
	gx
, 
	gy
, 
	gz
;

1617 
mmask_t
 
	gb°©e
;

1619 
	tMEVENT
;

1621 
NCURSES_EXPORT
(
boﬁ
Ë
has_mou£
();

1622 
NCURSES_EXPORT
(Ë
gëmou£
 (
MEVENT
 *);

1623 
NCURSES_EXPORT
(Ë
ungëmou£
 (
MEVENT
 *);

1624 
NCURSES_EXPORT
(
mmask_t
Ë
mou£mask
 (mmask_t, mmask_t *);

1625 
NCURSES_EXPORT
(
boﬁ
Ë
wí˛o£
 (c⁄° 
WINDOW
 *, , );

1626 
NCURSES_EXPORT
(Ë
mou£öãrvÆ
 ();

1627 
NCURSES_EXPORT
(
boﬁ
Ë
wmou£_åafo
 (c⁄° 
WINDOW
*, *, *, bool);

1628 
NCURSES_EXPORT
(
boﬁ
Ë
mou£_åafo
 (*, *, bool);

1630 #i‡
NCURSES_SP_FUNCS


1631 
NCURSES_EXPORT
(
boﬁ
Ë
NCURSES_SP_NAME
(
has_mou£
Ë(
SCREEN
*);

1632 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
gëmou£
Ë(
SCREEN
*, 
MEVENT
 *);

1633 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ungëmou£
Ë(
SCREEN
*,
MEVENT
 *);

1634 
NCURSES_EXPORT
(
mmask_t
Ë
NCURSES_SP_NAME
(
mou£mask
Ë(
SCREEN
*, mmask_t, mmask_t *);

1635 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
mou£öãrvÆ
Ë(
SCREEN
*, );

1638 #i‚de‡
NCURSES_NOMACROS


1639 
	#mou£_åafo
(
y
,
x
,
to_s¸ìn
Ë
	`wmou£_åafo
(
°ds¸
,y,x,to_s¸ìn)

	)

1644 
NCURSES_EXPORT
(Ë
m˝röt
 (*, );

1645 
NCURSES_EXPORT
(Ë
has_key
 ();

1647 #i‡
NCURSES_SP_FUNCS


1648 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
has_key
Ë(
SCREEN
*, );

1649 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
m˝röt
Ë(
SCREEN
*, *, );

1654 
NCURSES_EXPORT
(Ë
_åa˚f
 (c⁄° *, ...Ë
GCC_PRINTFLIKE
(1,2);

1655 
NCURSES_EXPORT
(*Ë
_åa˚©å
 (
©å_t
);

1656 
NCURSES_EXPORT
(*Ë
_åa˚©å2
 (, 
chty≥
);

1657 
NCURSES_EXPORT
(*Ë
_åa˚ch¨
 ();

1658 
NCURSES_EXPORT
(*Ë
_åa˚chty≥
 (
chty≥
);

1659 
NCURSES_EXPORT
(*Ë
_åa˚chty≥2
 (, 
chty≥
);

1660 #i‡
NCURSES_WIDECHAR


1661 
	#_åa˚ch_t
 
_åa˚cch¨_t


	)

1662 
NCURSES_EXPORT
(*Ë
_åa˚cch¨_t
 (c⁄° 
cch¨_t
 *);

1663 
	#_åa˚ch_t2
 
_åa˚cch¨_t2


	)

1664 
NCURSES_EXPORT
(*Ë
_åa˚cch¨_t2
 (, c⁄° 
cch¨_t
 *);

1666 
	#_åa˚ch_t
 
_åa˚chty≥


	)

1667 
	#_åa˚ch_t2
 
_åa˚chty≥2


	)

1669 
NCURSES_EXPORT
(Ë
åa˚
 (const );

1672 
	#TRACE_DISABLE
 0x0000

	)

1673 
	#TRACE_TIMES
 0x0001

	)

1674 
	#TRACE_TPUTS
 0x0002

	)

1675 
	#TRACE_UPDATE
 0x0004

	)

1676 
	#TRACE_MOVE
 0x0008

	)

1677 
	#TRACE_CHARPUT
 0x0010

	)

1678 
	#TRACE_ORDINARY
 0x001F

	)

1679 
	#TRACE_CALLS
 0x0020

	)

1680 
	#TRACE_VIRTPUT
 0x0040

	)

1681 
	#TRACE_IEVENT
 0x0080

	)

1682 
	#TRACE_BITS
 0x0100

	)

1683 
	#TRACE_ICALLS
 0x0200

	)

1684 
	#TRACE_CCALLS
 0x0400

	)

1685 
	#TRACE_DATABASE
 0x0800

	)

1686 
	#TRACE_ATTRS
 0x1000

	)

1688 
	#TRACE_SHIFT
 13

	)

1689 
	#TRACE_MAXIMUM
 ((1 << 
TRACE_SHIFT
Ë- 1Ë

	)

1691 #i‡
deföed
(
TRACE
Ë|| deföed(
NCURSES_TEST
)

1692 
NCURSES_EXPORT_VAR
(Ë
_nc_›timize_íabÀ
;

1693 
NCURSES_EXPORT
(c⁄° *Ë
_nc_visbuf
 (const *);

1694 
	#OPTIMIZE_MVCUR
 0x01

	)

1695 
	#OPTIMIZE_HASHMAP
 0x02

	)

1696 
	#OPTIMIZE_SCROLL
 0x04

	)

1697 
	#OPTIMIZE_ALL
 0xf‡

	)

1700 
	~<un˘æ.h
>

1702 #ifde‡
__˝lu•lus


1704 #i‚de‡
NCURSES_NOMACROS


1707 #unde‡
box


1708 #unde‡
˛ór


1709 #unde‡
îa£


1710 #unde‡
move


1711 #unde‡
ª‰esh


	@/usr/include/netinet/in.h

18 #i‚def 
_NETINET_IN_H


19 
	#_NETINET_IN_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<°döt.h
>

23 
	~<sys/sockë.h
>

24 
	~<bôs/ty≥s.h
>

27 
__BEGIN_DECLS


30 
uöt32_t
 
	tö_addr_t
;

31 
	sö_addr


33 
ö_addr_t
 
	ms_addr
;

37 
	~<bôs/ö.h
>

42 
	mIPPROTO_IP
 = 0,

43 
	#IPPROTO_IP
 
IPPROTO_IP


	)

44 
	mIPPROTO_ICMP
 = 1,

45 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

46 
	mIPPROTO_IGMP
 = 2,

47 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

48 
	mIPPROTO_IPIP
 = 4,

49 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

50 
	mIPPROTO_TCP
 = 6,

51 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

52 
	mIPPROTO_EGP
 = 8,

53 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

54 
	mIPPROTO_PUP
 = 12,

55 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

56 
	mIPPROTO_UDP
 = 17,

57 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

58 
	mIPPROTO_IDP
 = 22,

59 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

60 
	mIPPROTO_TP
 = 29,

61 
	#IPPROTO_TP
 
IPPROTO_TP


	)

62 
	mIPPROTO_DCCP
 = 33,

63 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

64 
	mIPPROTO_IPV6
 = 41,

65 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

66 
	mIPPROTO_RSVP
 = 46,

67 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

68 
	mIPPROTO_GRE
 = 47,

69 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

70 
	mIPPROTO_ESP
 = 50,

71 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

72 
	mIPPROTO_AH
 = 51,

73 
	#IPPROTO_AH
 
IPPROTO_AH


	)

74 
	mIPPROTO_MTP
 = 92,

75 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

76 
	mIPPROTO_BEETPH
 = 94,

77 
	#IPPROTO_BEETPH
 
IPPROTO_BEETPH


	)

78 
	mIPPROTO_ENCAP
 = 98,

79 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

80 
	mIPPROTO_PIM
 = 103,

81 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

82 
	mIPPROTO_COMP
 = 108,

83 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

84 
	mIPPROTO_SCTP
 = 132,

85 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

86 
	mIPPROTO_UDPLITE
 = 136,

87 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

88 
	mIPPROTO_MPLS
 = 137,

89 
	#IPPROTO_MPLS
 
IPPROTO_MPLS


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


98 #i‚de‡
__USE_KERNEL_IPV6_DEFS


101 
	mIPPROTO_HOPOPTS
 = 0,

102 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

103 
	mIPPROTO_ROUTING
 = 43,

104 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

105 
	mIPPROTO_FRAGMENT
 = 44,

106 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

107 
	mIPPROTO_ICMPV6
 = 58,

108 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

109 
	mIPPROTO_NONE
 = 59,

110 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

111 
	mIPPROTO_DSTOPTS
 = 60,

112 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

113 
	mIPPROTO_MH
 = 135

114 
	#IPPROTO_MH
 
IPPROTO_MH


	)

119 
uöt16_t
 
	tö_p‹t_t
;

124 
	mIPPORT_ECHO
 = 7,

125 
	mIPPORT_DISCARD
 = 9,

126 
	mIPPORT_SYSTAT
 = 11,

127 
	mIPPORT_DAYTIME
 = 13,

128 
	mIPPORT_NETSTAT
 = 15,

129 
	mIPPORT_FTP
 = 21,

130 
	mIPPORT_TELNET
 = 23,

131 
	mIPPORT_SMTP
 = 25,

132 
	mIPPORT_TIMESERVER
 = 37,

133 
	mIPPORT_NAMESERVER
 = 42,

134 
	mIPPORT_WHOIS
 = 43,

135 
	mIPPORT_MTP
 = 57,

137 
	mIPPORT_TFTP
 = 69,

138 
	mIPPORT_RJE
 = 77,

139 
	mIPPORT_FINGER
 = 79,

140 
	mIPPORT_TTYLINK
 = 87,

141 
	mIPPORT_SUPDUP
 = 95,

144 
	mIPPORT_EXECSERVER
 = 512,

145 
	mIPPORT_LOGINSERVER
 = 513,

146 
	mIPPORT_CMDSERVER
 = 514,

147 
	mIPPORT_EFSSERVER
 = 520,

150 
	mIPPORT_BIFFUDP
 = 512,

151 
	mIPPORT_WHOSERVER
 = 513,

152 
	mIPPORT_ROUTESERVER
 = 520,

155 
	mIPPORT_RESERVED
 = 1024,

158 
	mIPPORT_USERRESERVED
 = 5000

166 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

167 
	#IN_CLASSA_NET
 0xff000000

	)

168 
	#IN_CLASSA_NSHIFT
 24

	)

169 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

170 
	#IN_CLASSA_MAX
 128

	)

172 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

173 
	#IN_CLASSB_NET
 0xffff0000

	)

174 
	#IN_CLASSB_NSHIFT
 16

	)

175 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

176 
	#IN_CLASSB_MAX
 65536

	)

178 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

179 
	#IN_CLASSC_NET
 0xffffff00

	)

180 
	#IN_CLASSC_NSHIFT
 8

	)

181 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

183 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

184 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

186 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

187 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

190 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

192 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

194 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

197 
	#IN_LOOPBACKNET
 127

	)

199 #i‚de‡
INADDR_LOOPBACK


200 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

204 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

205 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

206 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

207 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

209 #i‚de‡
__USE_KERNEL_IPV6_DEFS


211 
	sö6_addr


215 
uöt8_t
 
	m__u6_addr8
[16];

216 #ifde‡
__USE_MISC


217 
uöt16_t
 
	m__u6_addr16
[8];

218 
uöt32_t
 
	m__u6_addr32
[4];

220 } 
	m__ö6_u
;

221 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

222 #ifde‡
__USE_MISC


223 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

224 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

229 c⁄° 
ö6_addr
 
ö6addr_™y
;

230 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

231 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

232 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

234 
	#INET_ADDRSTRLEN
 16

	)

235 
	#INET6_ADDRSTRLEN
 46

	)

239 
	ssockaddr_ö


241 
__SOCKADDR_COMMON
 (
sö_
);

242 
ö_p‹t_t
 
	msö_p‹t
;

243 
ö_addr
 
	msö_addr
;

246 
	msö_zîo
[ (
sockaddr
) -

247 
__SOCKADDR_COMMON_SIZE
 -

248  (
ö_p‹t_t
) -

249  (
ö_addr
)];

252 #i‚de‡
__USE_KERNEL_IPV6_DEFS


254 
	ssockaddr_ö6


256 
__SOCKADDR_COMMON
 (
sö6_
);

257 
ö_p‹t_t
 
	msö6_p‹t
;

258 
uöt32_t
 
	msö6_Êowöfo
;

259 
ö6_addr
 
	msö6_addr
;

260 
uöt32_t
 
	msö6_sc›e_id
;

264 #ifde‡
__USE_MISC


266 
	sù_mªq


269 
ö_addr
 
	mimr_mu…üddr
;

272 
ö_addr
 
	mimr_öãrÁ˚
;

275 
	sù_mªq_sour˚


278 
ö_addr
 
	mimr_mu…üddr
;

281 
ö_addr
 
	mimr_öãrÁ˚
;

284 
ö_addr
 
	mimr_sour˚addr
;

288 #i‚de‡
__USE_KERNEL_IPV6_DEFS


290 
	sùv6_mªq


293 
ö6_addr
 
	mùv6mr_mu…üddr
;

296 
	mùv6mr_öãrÁ˚
;

300 #ifde‡
__USE_MISC


302 
	sgroup_ªq


305 
uöt32_t
 
	mgr_öãrÁ˚
;

308 
sockaddr_°‹age
 
	mgr_group
;

311 
	sgroup_sour˚_ªq


314 
uöt32_t
 
	mg§_öãrÁ˚
;

317 
sockaddr_°‹age
 
	mg§_group
;

320 
sockaddr_°‹age
 
	mg§_sour˚
;

325 
	sù_msfûãr


328 
ö_addr
 
	mimsf_mu…üddr
;

331 
ö_addr
 
	mimsf_öãrÁ˚
;

334 
uöt32_t
 
	mimsf_fmode
;

337 
uöt32_t
 
	mimsf_num§c
;

339 
ö_addr
 
	mimsf_¶i°
[1];

342 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

343 -  (
ö_addr
) \

344 + (
num§c
Ë*  (
ö_addr
))

	)

346 
	sgroup_fûãr


349 
uöt32_t
 
	mgf_öãrÁ˚
;

352 
sockaddr_°‹age
 
	mgf_group
;

355 
uöt32_t
 
	mgf_fmode
;

358 
uöt32_t
 
	mgf_num§c
;

360 
sockaddr_°‹age
 
	mgf_¶i°
[1];

363 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

364 -  (
sockaddr_°‹age
) \

365 + ((
num§c
) \

366 *  (
sockaddr_°‹age
)))

	)

376 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

377 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

378 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

379 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

380 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

381 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

382 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

384 
	~<ídün.h
>

387 
	~<bôs/byãsw≠.h
>

389 #ifde‡
__OPTIMIZE__


393 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


396 
	#¡ohl
(
x
Ë(x)

	)

397 
	#¡ohs
(
x
Ë(x)

	)

398 
	#ht⁄l
(
x
Ë(x)

	)

399 
	#ht⁄s
(
x
Ë(x)

	)

401 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


402 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

403 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

404 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

405 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

410 #ifde‡
__GNUC__


411 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

412 (
__exãnsi⁄__
 \

413 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

414 
__a
->
s6_addr32
[0] == 0 \

415 && 
__a
->
s6_addr32
[1] == 0 \

416 && 
__a
->
s6_addr32
[2] == 0 \

417 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

419 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

420 (
__exãnsi⁄__
 \

421 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

422 
__a
->
s6_addr32
[0] == 0 \

423 && 
__a
->
s6_addr32
[1] == 0 \

424 && 
__a
->
s6_addr32
[2] == 0 \

425 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

427 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

428 (
__exãnsi⁄__
 \

429 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

430 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

432 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

433 (
__exãnsi⁄__
 \

434 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

435 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

437 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

438 (
__exãnsi⁄__
 \

439 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

440 
__a
->
s6_addr32
[0] == 0 \

441 && 
__a
->
s6_addr32
[1] == 0 \

442 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

444 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

445 (
__exãnsi⁄__
 \

446 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

447 
__a
->
s6_addr32
[0] == 0 \

448 && 
__a
->
s6_addr32
[1] == 0 \

449 && 
__a
->
s6_addr32
[2] == 0 \

450 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

452 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

453 (
__exãnsi⁄__
 \

454 ({ c⁄° 
ö6_addr
 *
__a
 = (c⁄° ö6_add∏*Ë(
a
); \

455 c⁄° 
ö6_addr
 *
__b
 = (c⁄° ö6_add∏*Ë(
b
); \

456 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

457 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

458 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

459 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

461 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

462 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

463 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

464 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

465 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =0)

	)

467 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

468 (((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0 \

469 && ((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0 \

470 && ((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0 \

471 && ((c⁄° 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

473 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

474 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

475 =
	`ht⁄l
 (0x„800000))

	)

477 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

478 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

479 =
	`ht⁄l
 (0x„c00000))

	)

481 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

482 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

483 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

484 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

486 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

487 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] == 0) \

488 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] == 0) \

489 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] == 0) \

490 && (
	`¡ohl
 (((c⁄° 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

492 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

493 ((((c⁄° 
uöt32_t
 *Ë(
a
))[0] =((c⁄° uöt32_à*Ë(
b
))[0]) \

494 && (((c⁄° 
uöt32_t
 *Ë(
a
))[1] =((c⁄° uöt32_à*Ë(
b
))[1]) \

495 && (((c⁄° 
uöt32_t
 *Ë(
a
))[2] =((c⁄° uöt32_à*Ë(
b
))[2]) \

496 && (((c⁄° 
uöt32_t
 *Ë(
a
))[3] =((c⁄° uöt32_à*Ë(
b
))[3]))

	)

499 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((c⁄° 
uöt8_t
 *Ë◊))[0] =0xff)

	)

501 #ifde‡
__USE_MISC


503 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

506 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

507 
__THROW
;

511 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

512 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

513 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

515 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

516 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

517 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

519 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

520 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

521 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

523 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

524 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

525 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

527 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

528 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

529 && ((((c⁄° 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

532 #ifde‡
__USE_GNU


533 
cmsghdr
;

535 #i‚de‡
__USE_KERNEL_IPV6_DEFS


537 
	sö6_pktöfo


539 
ö6_addr
 
ùi6_addr
;

540 
ùi6_ifödex
;

544 
	sù6_mtuöfo


546 
sockaddr_ö6
 
ù6m_addr
;

547 
uöt32_t
 
ù6m_mtu
;

552 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

553 
__THROW
 
__©åibuã_dïªˇãd__
;

554 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

555 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

556 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

557 c⁄° 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

558 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

559 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

560 
__mu…x
, 
__∂usy
)

561 
__THROW
 
__©åibuã_dïªˇãd__
;

562 
	$öë6_›ti⁄_√xt
 (c⁄° 
cmsghdr
 *
__cmsg
,

563 
uöt8_t
 **
__çåp
)

564 
__THROW
 
__©åibuã_dïªˇãd__
;

565 
	$öë6_›ti⁄_föd
 (c⁄° 
cmsghdr
 *
__cmsg
,

566 
uöt8_t
 **
__çåp
, 
__ty≥
)

567 
__THROW
 
__©åibuã_dïªˇãd__
;

571 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

572 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

573 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

574 **
__d©abuÂ
Ë
__THROW
;

575 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

576 
__THROW
;

577 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

578 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

579 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

580 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

581 **
__d©abuÂ
Ë
__THROW
;

582 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

583 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

584 **
__d©abuÂ
Ë
__THROW
;

585 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

586 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

590 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

591 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

592 
__£gmíts
Ë
__THROW
;

593 
	$öë6_πh_add
 (*
__bp
, c⁄° 
ö6_addr
 *
__addr
Ë
__THROW
;

594 
	$öë6_πh_ªvî£
 (c⁄° *
__ö
, *
__out
Ë
__THROW
;

595 
	$öë6_πh_£gmíts
 (c⁄° *
__bp
Ë
__THROW
;

596 
ö6_addr
 *
	$öë6_πh_gëaddr
 (c⁄° *
__bp
, 
__ödex
)

597 
__THROW
;

603 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

604 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

605 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

606 
__THROW
;

609 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

610 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

611 
uöt32_t
 
__num§c
,

612 c⁄° 
ö_addr
 *
__¶i°
)

613 
__THROW
;

617 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

618 c⁄° 
sockaddr
 *
__group
,

619 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

620 
uöt32_t
 *
__num§c
,

621 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

624 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

625 c⁄° 
sockaddr
 *
__group
,

626 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

627 
uöt32_t
 
__num§c
,

628 c⁄° 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

631 
__END_DECLS


	@/usr/include/pwd.h

22 #i‚def 
_PWD_H


23 
	#_PWD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 
	#__√ed_size_t


	)

32 
	~<°ddef.h
>

34 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


37 #i‚de‡
__gid_t_deföed


38 
__gid_t
 
	tgid_t
;

39 
	#__gid_t_deföed


	)

42 #i‚de‡
__uid_t_deföed


43 
__uid_t
 
	tuid_t
;

44 
	#__uid_t_deföed


	)

49 
	s∑sswd


51 *
	mpw_«me
;

52 *
	mpw_∑sswd
;

53 
__uid_t
 
	mpw_uid
;

54 
__gid_t
 
	mpw_gid
;

55 *
	mpw_gecos
;

56 *
	mpw_dú
;

57 *
	mpw_shñl
;

61 #ifde‡
__USE_MISC


62 
	#__√ed_FILE


	)

63 
	~<°dio.h
>

67 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


72 
£çwít
 ();

78 
ídpwít
 ();

84 
∑sswd
 *
gëpwít
 ();

87 #ifdef 
__USE_MISC


94 
∑sswd
 *
	$fgëpwít
 (
FILE
 *
__°ªam
Ë
	`__n⁄nuŒ
 ((1));

102 
	`puçwít
 (c⁄° 
∑sswd
 *
__ª°ri˘
 
__p
,

103 
FILE
 *
__ª°ri˘
 
__f
);

110 
∑sswd
 *
	`gëpwuid
 (
__uid_t
 
__uid
);

116 
∑sswd
 *
	$gëpw«m
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

118 #ifde‡
__USE_POSIX


120 #ifde‡
__USE_MISC


123 
	#NSS_BUFLEN_PASSWD
 1024

	)

134 #ifde‡
__USE_MISC


139 
	$gëpwít_r
 (
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

140 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

141 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

142 
	`__n⁄nuŒ
 ((1, 2, 4));

145 
	$gëpwuid_r
 (
__uid_t
 
__uid
,

146 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

147 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

148 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

149 
	`__n⁄nuŒ
 ((2, 3, 5));

151 
	$gëpw«m_r
 (c⁄° *
__ª°ri˘
 
__«me
,

152 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

153 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

154 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

155 
	`__n⁄nuŒ
 ((1, 2, 3, 5));

158 #ifdef 
__USE_MISC


166 
	$fgëpwít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

167 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

168 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

169 
∑sswd
 **
__ª°ri˘
 
__ªsu…
)

170 
	`__n⁄nuŒ
 ((1, 2, 3, 5));

175 #ifde‡
__USE_GNU


184 
	`gëpw
 (
__uid_t
 
__uid
, *
__buf„r
);

187 
__END_DECLS


	@/usr/include/regex.h

20 #i‚de‡
_REGEX_H


21 
	#_REGEX_H
 1

	)

23 
	~<sys/ty≥s.h
>

26 #ifde‡
__˝lu•lus


34 
	ts_ªg_t
;

35 
	ta˘ive_ªg_t
;

42 
	tªg_sy¡ax_t
;

44 #ifde‡
__USE_GNU


47 
	#RE_BACKSLASH_ESCAPE_IN_LISTS
 ((Ë1)

	)

52 
	#RE_BK_PLUS_QM
 (
RE_BACKSLASH_ESCAPE_IN_LISTS
 << 1)

	)

58 
	#RE_CHAR_CLASSES
 (
RE_BK_PLUS_QM
 << 1)

	)

72 
	#RE_CONTEXT_INDEP_ANCHORS
 (
RE_CHAR_CLASSES
 << 1)

	)

80 
	#RE_CONTEXT_INDEP_OPS
 (
RE_CONTEXT_INDEP_ANCHORS
 << 1)

	)

84 
	#RE_CONTEXT_INVALID_OPS
 (
RE_CONTEXT_INDEP_OPS
 << 1)

	)

88 
	#RE_DOT_NEWLINE
 (
RE_CONTEXT_INVALID_OPS
 << 1)

	)

92 
	#RE_DOT_NOT_NULL
 (
RE_DOT_NEWLINE
 << 1)

	)

96 
	#RE_HAT_LISTS_NOT_NEWLINE
 (
RE_DOT_NOT_NULL
 << 1)

	)

101 
	#RE_INTERVALS
 (
RE_HAT_LISTS_NOT_NEWLINE
 << 1)

	)

105 
	#RE_LIMITED_OPS
 (
RE_INTERVALS
 << 1)

	)

109 
	#RE_NEWLINE_ALT
 (
RE_LIMITED_OPS
 << 1)

	)

114 
	#RE_NO_BK_BRACES
 (
RE_NEWLINE_ALT
 << 1)

	)

118 
	#RE_NO_BK_PARENS
 (
RE_NO_BK_BRACES
 << 1)

	)

122 
	#RE_NO_BK_REFS
 (
RE_NO_BK_PARENS
 << 1)

	)

126 
	#RE_NO_BK_VBAR
 (
RE_NO_BK_REFS
 << 1)

	)

132 
	#RE_NO_EMPTY_RANGES
 (
RE_NO_BK_VBAR
 << 1)

	)

136 
	#RE_UNMATCHED_RIGHT_PAREN_ORD
 (
RE_NO_EMPTY_RANGES
 << 1)

	)

140 
	#RE_NO_POSIX_BACKTRACKING
 (
RE_UNMATCHED_RIGHT_PAREN_ORD
 << 1)

	)

144 
	#RE_NO_GNU_OPS
 (
RE_NO_POSIX_BACKTRACKING
 << 1)

	)

152 
	#RE_DEBUG
 (
RE_NO_GNU_OPS
 << 1)

	)

157 
	#RE_INVALID_INTERVAL_ORD
 (
RE_DEBUG
 << 1)

	)

161 
	#RE_ICASE
 (
RE_INVALID_INTERVAL_ORD
 << 1)

	)

166 
	#RE_CARET_ANCHORS_HERE
 (
RE_ICASE
 << 1)

	)

170 
	#RE_CONTEXT_INVALID_DUP
 (
RE_CARET_ANCHORS_HERE
 << 1)

	)

174 
	#RE_NO_SUB
 (
RE_CONTEXT_INVALID_DUP
 << 1)

	)

181 
ªg_sy¡ax_t
 
ª_sy¡ax_›ti⁄s
;

183 #ifde‡
__USE_GNU


188 
	#RE_SYNTAX_EMACS
 0

	)

190 
	#RE_SYNTAX_AWK
 \

191 (
RE_BACKSLASH_ESCAPE_IN_LISTS
 | 
RE_DOT_NOT_NULL
 \

192 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_REFS
 \

193 | 
RE_NO_BK_VBAR
 | 
RE_NO_EMPTY_RANGES
 \

194 | 
RE_DOT_NEWLINE
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

195 | 
RE_CHAR_CLASSES
 \

196 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
 | 
RE_NO_GNU_OPS
)

	)

198 
	#RE_SYNTAX_GNU_AWK
 \

199 ((
RE_SYNTAX_POSIX_EXTENDED
 | 
RE_BACKSLASH_ESCAPE_IN_LISTS
 \

200 | 
RE_INVALID_INTERVAL_ORD
) \

201 & ~(
RE_DOT_NOT_NULL
 | 
RE_CONTEXT_INDEP_OPS
 \

202 | 
RE_CONTEXT_INVALID_OPS
 ))

	)

204 
	#RE_SYNTAX_POSIX_AWK
 \

205 (
RE_SYNTAX_POSIX_EXTENDED
 | 
RE_BACKSLASH_ESCAPE_IN_LISTS
 \

206 | 
RE_INTERVALS
 | 
RE_NO_GNU_OPS
 \

207 | 
RE_INVALID_INTERVAL_ORD
)

	)

209 
	#RE_SYNTAX_GREP
 \

210 (
RE_BK_PLUS_QM
 | 
RE_CHAR_CLASSES
 \

211 | 
RE_HAT_LISTS_NOT_NEWLINE
 | 
RE_INTERVALS
 \

212 | 
RE_NEWLINE_ALT
)

	)

214 
	#RE_SYNTAX_EGREP
 \

215 (
RE_CHAR_CLASSES
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

216 | 
RE_CONTEXT_INDEP_OPS
 | 
RE_HAT_LISTS_NOT_NEWLINE
 \

217 | 
RE_NEWLINE_ALT
 | 
RE_NO_BK_PARENS
 \

218 | 
RE_NO_BK_VBAR
)

	)

220 
	#RE_SYNTAX_POSIX_EGREP
 \

221 (
RE_SYNTAX_EGREP
 | 
RE_INTERVALS
 | 
RE_NO_BK_BRACES
 \

222 | 
RE_INVALID_INTERVAL_ORD
)

	)

225 
	#RE_SYNTAX_ED
 
RE_SYNTAX_POSIX_BASIC


	)

227 
	#RE_SYNTAX_SED
 
RE_SYNTAX_POSIX_BASIC


	)

230 
	#_RE_SYNTAX_POSIX_COMMON
 \

231 (
RE_CHAR_CLASSES
 | 
RE_DOT_NEWLINE
 | 
RE_DOT_NOT_NULL
 \

232 | 
RE_INTERVALS
 | 
RE_NO_EMPTY_RANGES
)

	)

234 
	#RE_SYNTAX_POSIX_BASIC
 \

235 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_BK_PLUS_QM
 | 
RE_CONTEXT_INVALID_DUP
)

	)

240 
	#RE_SYNTAX_POSIX_MINIMAL_BASIC
 \

241 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_LIMITED_OPS
)

	)

243 
	#RE_SYNTAX_POSIX_EXTENDED
 \

244 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

245 | 
RE_CONTEXT_INDEP_OPS
 | 
RE_NO_BK_BRACES
 \

246 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_VBAR
 \

247 | 
RE_CONTEXT_INVALID_OPS
 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
)

	)

251 
	#RE_SYNTAX_POSIX_MINIMAL_EXTENDED
 \

252 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

253 | 
RE_CONTEXT_INVALID_OPS
 | 
RE_NO_BK_BRACES
 \

254 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_REFS
 \

255 | 
RE_NO_BK_VBAR
 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
)

	)

261 #ifde‡
RE_DUP_MAX


262 #unde‡
RE_DUP_MAX


265 
	#RE_DUP_MAX
 (0x7fff)

	)

273 
	#REG_EXTENDED
 1

	)

277 
	#REG_ICASE
 (
REG_EXTENDED
 << 1)

	)

282 
	#REG_NEWLINE
 (
REG_ICASE
 << 1)

	)

286 
	#REG_NOSUB
 (
REG_NEWLINE
 << 1)

	)

296 
	#REG_NOTBOL
 1

	)

299 
	#REG_NOTEOL
 (1 << 1)

	)

303 
	#REG_STARTEND
 (1 << 2)

	)

310 #i‡
deföed
 
_XOPEN_SOURCE
 || deföed 
__USE_XOPEN2K


311 
	gREG_ENOSYS
 = -1,

314 
	gREG_NOERROR
 = 0,

315 
	gREG_NOMATCH
,

319 
	gREG_BADPAT
,

320 
	gREG_ECOLLATE
,

321 
	gREG_ECTYPE
,

322 
	gREG_EESCAPE
,

323 
	gREG_ESUBREG
,

324 
	gREG_EBRACK
,

325 
	gREG_EPAREN
,

326 
	gREG_EBRACE
,

327 
	gREG_BADBR
,

328 
	gREG_ERANGE
,

329 
	gREG_ESPACE
,

330 
	gREG_BADRPT
,

333 
	gREG_EEND
,

334 
	gREG_ESIZE
,

335 
	gREG_ERPAREN


336 } 
	tªg_îrcode_t
;

344 #i‚de‡
RE_TRANSLATE_TYPE


345 
	#__RE_TRANSLATE_TYPE
 *

	)

346 #ifde‡
__USE_GNU


347 
	#RE_TRANSLATE_TYPE
 
__RE_TRANSLATE_TYPE


	)

351 #ifde‡
__USE_GNU


352 
	#__REPB_PREFIX
(
«me
Ë
	)
name

354 
	#__REPB_PREFIX
(
«me
Ë
__
##
	)
name

357 
	sª_∑âîn_buf„r


362 *
__REPB_PREFIX
(
buf„r
);

365 
__REPB_PREFIX
(
Æloˇãd
);

368 
__REPB_PREFIX
(
u£d
);

371 
ªg_sy¡ax_t
 
__REPB_PREFIX
(
sy¡ax
);

376 *
__REPB_PREFIX
(
Á°m≠
);

382 
__RE_TRANSLATE_TYPE
 
__REPB_PREFIX
(
å™¶©e
);

385 
size_t
 
	gª_nsub
;

391 
__REPB_PREFIX
(
ˇn_be_nuŒ
) : 1;

397 #ifde‡
__USE_GNU


398 
	#REGS_UNALLOCATED
 0

	)

399 
	#REGS_REALLOCATE
 1

	)

400 
	#REGS_FIXED
 2

	)

402 
__REPB_PREFIX
(
ªgs_Æloˇãd
) : 2;

406 
__REPB_PREFIX
(
Á°m≠_accuøã
) : 1;

410 
__REPB_PREFIX
(
no_sub
) : 1;

414 
__REPB_PREFIX
(
nŸ_bﬁ
) : 1;

417 
__REPB_PREFIX
(
nŸ_eﬁ
) : 1;

420 
__REPB_PREFIX
(
√wlöe_™ch‹
) : 1;

423 
ª_∑âîn_buf„r
 
	tªgex_t
;

426 
	tªgoff_t
;

429 #ifde‡
__USE_GNU


432 
	sª_ªgi°îs


434 
	gnum_ªgs
;

435 
ªgoff_t
 *
	g°¨t
;

436 
ªgoff_t
 *
	gíd
;

443 #i‚de‡
RE_NREGS


444 
	#RE_NREGS
 30

	)

454 
ªgoff_t
 
	grm_so
;

455 
ªgoff_t
 
	grm_eo
;

456 } 
	tªgm©ch_t
;

460 #ifde‡
__USE_GNU


463 
ªg_sy¡ax_t
 
ª_£t_sy¡ax
 (ªg_sy¡ax_à
__sy¡ax
);

473 c⁄° *
ª_compûe_∑âîn
 (c⁄° *
__∑âîn
, 
size_t
 
__Àngth
,

474 
ª_∑âîn_buf„r
 *
__buf„r
);

480 
ª_compûe_Á°m≠
 (
ª_∑âîn_buf„r
 *
__buf„r
);

488 
ª_£¨ch
 (
ª_∑âîn_buf„r
 *
__buf„r
, c⁄° *
__°rög
,

489 
__Àngth
, 
__°¨t
, 
__ønge
,

490 
ª_ªgi°îs
 *
__ªgs
);

495 
ª_£¨ch_2
 (
ª_∑âîn_buf„r
 *
__buf„r
,

496 c⁄° *
__°rög1
, 
__Àngth1
,

497 c⁄° *
__°rög2
, 
__Àngth2
, 
__°¨t
,

498 
__ønge
, 
ª_ªgi°îs
 *
__ªgs
, 
__°›
);

503 
ª_m©ch
 (
ª_∑âîn_buf„r
 *
__buf„r
, c⁄° *
__°rög
,

504 
__Àngth
, 
__°¨t
, 
ª_ªgi°îs
 *
__ªgs
);

508 
ª_m©ch_2
 (
ª_∑âîn_buf„r
 *
__buf„r
,

509 c⁄° *
__°rög1
, 
__Àngth1
,

510 c⁄° *
__°rög2
, 
__Àngth2
, 
__°¨t
,

511 
ª_ªgi°îs
 *
__ªgs
, 
__°›
);

526 
ª_£t_ªgi°îs
 (
ª_∑âîn_buf„r
 *
__buf„r
,

527 
ª_ªgi°îs
 *
__ªgs
,

528 
__num_ªgs
,

529 
ªgoff_t
 *
__°¨ts
,Ñegoff_à*
__íds
);

532 #i‡
deföed
 
_REGEX_RE_COMP
 || (deföed 
_LIBC
 && deföed 
__USE_MISC
)

533 #i‚de‡
_CRAY


535 *
ª_comp
 (const *);

536 
ª_exec
 (const *);

542 #i‚de‡
__ª°ri˘


543 #i‡! (2 < 
__GNUC__
 || (2 =__GNUC__ && 95 <
__GNUC_MINOR__
))

544 #i‡
deföed
 
ª°ri˘
 || 199901L <
__STDC_VERSION__


545 
	#__ª°ri˘
 
ª°ri˘


	)

547 
	#__ª°ri˘


	)

552 #i‚de‡
__ª°ri˘_¨r


553 #i‡(
__GNUC__
 > 3 || (__GNUC__ =3 && 
__GNUC_MINOR__
 >= 1)) \

554 && !
deföed
 
	g__GNUG__


555 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

557 
	#__ª°ri˘_¨r


	)

562 
ªgcomp
 (
ªgex_t
 *
__ª°ri˘
 
__¥eg
,

563 c⁄° *
__ª°ri˘
 
__∑âîn
,

564 
__cÊags
);

566 
ªgexec
 (c⁄° 
ªgex_t
 *
__ª°ri˘
 
__¥eg
,

567 c⁄° *
__ª°ri˘
 
__°rög
, 
size_t
 
__nm©ch
,

568 
ªgm©ch_t
 
__pm©ch
[
__ª°ri˘_¨r
],

569 
__eÊags
);

571 
size_t
 
ªgîr‹
 (
__îrcode
, c⁄° 
ªgex_t
 *
__ª°ri˘
 
__¥eg
,

572 *
__ª°ri˘
 
__îrbuf
, 
size_t
 
__îrbuf_size
);

574 
ªg‰ì
 (
ªgex_t
 *
__¥eg
);

577 #ifde‡
__˝lu•lus


	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 #ifde‡
__USE_XOPEN2K


31 
	#__√ed_time_t


	)

32 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/setjmp.h

22 #i‚def 
_SETJMP_H


23 
	#_SETJMP_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/sig£t.h
>

34 
	s__jmp_buf_èg


40 
__jmp_buf
 
	m__jmpbuf
;

41 
	m__mask_was_ßved
;

42 
__sig£t_t
 
	m__ßved_mask
;

46 
__BEGIN_NAMESPACE_STD


48 
__jmp_buf_èg
 
	tjmp_buf
[1];

52 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROWNL
;

54 
__END_NAMESPACE_STD


59 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROWNL
;

63 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROWNL
;

67 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

70 
__BEGIN_NAMESPACE_STD


74 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

75 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

77 
__END_NAMESPACE_STD


79 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


83 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

84 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 #ifdef 
__USE_POSIX


92 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

96 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

102 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

103 
__THROWNL
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

108 #i‡
__USE_FORTIFY_LEVEL
 > 0

109 
	~<bôs/£tjmp2.h
>

112 
__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


24 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


25 
	#_SIGNAL_H


	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	~<bôs/sig£t.h
>

36 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


37 #i‚de‡
__sig_©omic_t_deföed


38 
	#__sig_©omic_t_deföed


	)

39 
__BEGIN_NAMESPACE_STD


40 
__sig_©omic_t
 
	tsig_©omic_t
;

41 
	g__END_NAMESPACE_STD


43 #unde‡
__√ed_sig_©omic_t


46 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

47 #i‚de‡
__sig£t_t_deföed


48 
	#__sig£t_t_deföed


	)

49 
__sig£t_t
 
	tsig£t_t
;

51 #unde‡
__√ed_sig£t_t


54 #ifde‡
_SIGNAL_H


56 
	~<bôs/ty≥s.h
>

57 
	~<bôs/signum.h
>

59 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


60 #i‚de‡
__pid_t_deföed


61 
__pid_t
 
	tpid_t
;

62 
	#__pid_t_deföed


	)

64 #ifde‡
__USE_XOPEN


66 #i‚de‡
__uid_t_deföed


67 
__uid_t
 
	tuid_t
;

68 
	#__uid_t_deföed


	)

72 #ifde‡
__USE_POSIX199309


74 
	#__√ed_time•ec


	)

75 
	~<time.h
>

78 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


80 
	~<bôs/sigöfo.h
>

85 (*
	t__sigh™dÀr_t
) ();

90 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

91 
__THROW
;

92 #ifde‡
__USE_GNU


93 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

94 
__THROW
;

100 
__BEGIN_NAMESPACE_STD


101 #ifde‡
__USE_MISC


102 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

103 
__THROW
;

106 #ifde‡
__REDIRECT_NTH


107 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

108 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

109 
__sysv_sig«l
);

111 
	#sig«l
 
__sysv_sig«l


	)

114 
__END_NAMESPACE_STD


116 #ifde‡
__USE_XOPEN


119 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

120 
__THROW
;

126 #ifde‡
__USE_POSIX


127 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

130 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


134 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

137 
__BEGIN_NAMESPACE_STD


139 
	$øi£
 (
__sig
Ë
__THROW
;

140 
__END_NAMESPACE_STD


142 #ifde‡
__USE_MISC


144 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

145 
__THROW
;

146 
	$gsig«l
 (
__sig
Ë
__THROW
;

149 #ifde‡
__USE_XOPEN2K8


151 
	`psig«l
 (
__sig
, c⁄° *
__s
);

154 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

166 #ifde‡
__USE_XOPEN


167 #ifde‡
__GNUC__


168 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

170 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

172 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

177 #ifde‡
__USE_MISC


184 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

187 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

190 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

193 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

197 #ifde‡
__USE_MISC


198 
	#NSIG
 
_NSIG


	)

201 #ifde‡
__USE_GNU


202 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

206 #ifde‡
__USE_MISC


207 
__sigh™dÀr_t
 
	tsig_t
;

210 #ifde‡
__USE_POSIX


213 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

216 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

226 
__THROW
 
	`__n⁄nuŒ
 ((1));

228 #ifde‡
__USE_GNU


230 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

233 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

234 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

237 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

238 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

243 
	~<bôs/siga˘i⁄.h
>

246 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

247 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

254 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

257 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

258 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

261 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

268 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

269 
	`__n⁄nuŒ
 ((1, 2));

271 #ifde‡
__USE_POSIX199309


276 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

277 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

284 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

285 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

286 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

287 
	`__n⁄nuŒ
 ((1));

291 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

292 
__THROW
;

297 #ifde‡
__USE_MISC


301 c⁄° *c⁄° 
_sys_sigli°
[
_NSIG
];

302 c⁄° *c⁄° 
sys_sigli°
[
_NSIG
];

306 
	~<bôs/sigc⁄ãxt.h
>

309 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

314 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


315 
	#__√ed_size_t


	)

316 
	~<°ddef.h
>

321 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

323 
	~<bôs/sig°ack.h
>

324 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


326 
	~<sys/uc⁄ãxt.h
>

332 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

333 
__THROW
 
__©åibuã_dïªˇãd__
;

337 
	$sigÆt°ack
 (c⁄° 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

338 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

342 #ifde‡
__USE_XOPEN_EXTENDED


346 
	$sighﬁd
 (
__sig
Ë
__THROW
;

349 
	$sigªl£
 (
__sig
Ë
__THROW
;

352 
	$sigign‹e
 (
__sig
Ë
__THROW
;

355 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

358 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


361 
	~<bôs/±hªadty≥s.h
>

362 
	~<bôs/sigthªad.h
>

369 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

371 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

375 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 #ifde‡
__WORDSIZE32_SIZE_ULONG


264 
	#SIZE_MAX
 (4294967295UL)

	)

266 
	#SIZE_MAX
 (4294967295U)

	)

271 #i‚de‡
WCHAR_MIN


273 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

274 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

278 
	#WINT_MIN
 (0u)

	)

279 
	#WINT_MAX
 (4294967295u)

	)

282 
	#INT8_C
(
c
Ë
	)
c

283 
	#INT16_C
(
c
Ë
	)
c

284 
	#INT32_C
(
c
Ë
	)
c

285 #i‡
__WORDSIZE
 == 64

286 
	#INT64_C
(
c
Ë¯## 
L


	)

288 
	#INT64_C
(
c
Ë¯## 
LL


	)

292 
	#UINT8_C
(
c
Ë
	)
c

293 
	#UINT16_C
(
c
Ë
	)
c

294 
	#UINT32_C
(
c
Ë¯## 
U


	)

295 #i‡
__WORDSIZE
 == 64

296 
	#UINT64_C
(
c
Ë¯## 
UL


	)

298 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

302 #i‡
__WORDSIZE
 == 64

303 
	#INTMAX_C
(
c
Ë¯## 
L


	)

304 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

306 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

307 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_MISC


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #ifde‡
__USE_POSIX


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #ifde‡
__USE_POSIX


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #ifde‡
__USE_POSIX2


872 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

878 
	`p˛o£
 (
FILE
 *
__°ªam
);

882 #ifdef 
__USE_POSIX


884 *
	$˘îmid
 (*
__s
Ë
__THROW
;

888 #ifde‡
__USE_XOPEN


890 *
	`cu£rid
 (*
__s
);

894 #ifdef 
__USE_GNU


895 
ob°ack
;

898 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

899 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

900 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

901 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

902 c⁄° *
__ª°ri˘
 
__f‹m©
,

903 
_G_va_li°
 
__¨gs
)

904 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

908 #ifde‡
__USE_POSIX


912 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

919 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

922 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


926 
	#__√ed_gë›t


	)

927 
	~<gë›t.h
>

932 #ifde‡
__USE_EXTERN_INLINES


933 
	~<bôs/°dio.h
>

935 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


936 
	~<bôs/°dio2.h
>

938 #ifde‡
__LDBL_COMPAT


939 
	~<bôs/°dio-ldbl.h
>

942 
__END_DECLS


	@/usr/include/stdio_ext.h

22 #i‚de‡
_STDIO_EXT_H


23 
	#_STDIO_EXT_H
 1

	)

25 
	~<°dio.h
>

30 
	mFSETLOCKING_QUERY
 = 0,

31 
	#FSETLOCKING_QUERY
 
FSETLOCKING_QUERY


	)

34 
	mFSETLOCKING_INTERNAL
,

35 
	#FSETLOCKING_INTERNAL
 
FSETLOCKING_INTERNAL


	)

37 
	mFSETLOCKING_BYCALLER


38 
	#FSETLOCKING_BYCALLER
 
FSETLOCKING_BYCALLER


	)

42 
__BEGIN_DECLS


46 
size_t
 
	$__fbufsize
 (
FILE
 *
__Â
Ë
__THROW
;

51 
	$__‰ódög
 (
FILE
 *
__Â
Ë
__THROW
;

56 
	$__fwrôög
 (
FILE
 *
__Â
Ë
__THROW
;

61 
	$__‰ódabÀ
 (
FILE
 *
__Â
Ë
__THROW
;

64 
	$__fwrôabÀ
 (
FILE
 *
__Â
Ë
__THROW
;

68 
	$__Êbf
 (
FILE
 *
__Â
Ë
__THROW
;

72 
	$__Âurge
 (
FILE
 *
__Â
Ë
__THROW
;

75 
size_t
 
	$__Âídög
 (
FILE
 *
__Â
Ë
__THROW
;

78 
	`_Êushlbf
 ();

82 
	$__f£éockög
 (
FILE
 *
__Â
, 
__ty≥
Ë
__THROW
;

84 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_MISC


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #ifde‡
__USE_ISOC99


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_MISC


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #ifde‡
__USE_ISOC99


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #ifde‡
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #ifde‡
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_MISC


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	$©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #ifde‡
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


618 #i‚de‡
__USE_FILE_OFFSET64


619 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

621 #ifde‡
__REDIRECT


622 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

623 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

625 
	#mk°emp
 
mk°emp64


	)

628 #ifde‡
__USE_LARGEFILE64


629 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

633 #ifde‡
__USE_MISC


640 #i‚de‡
__USE_FILE_OFFSET64


641 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__REDIRECT


644 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

645 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

647 
	#mk°emps
 
mk°emps64


	)

650 #ifde‡
__USE_LARGEFILE64


651 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

652 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

656 #ifde‡
__USE_XOPEN2K8


662 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

665 #ifde‡
__USE_GNU


672 #i‚de‡
__USE_FILE_OFFSET64


673 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

675 #ifde‡
__REDIRECT


676 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

677 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

679 
	#mko°emp
 
mko°emp64


	)

682 #ifde‡
__USE_LARGEFILE64


683 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

692 #i‚de‡
__USE_FILE_OFFSET64


693 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

694 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

696 #ifde‡
__REDIRECT


697 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

698 
__Êags
), 
mko°emps64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mko°emps
 
mko°emps64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

706 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

711 
__BEGIN_NAMESPACE_STD


716 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

717 
__END_NAMESPACE_STD


720 #ifdef 
__USE_GNU


723 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

724 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

727 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


733 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

734 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

739 #i‚de‡
__COMPAR_FN_T


740 
	#__COMPAR_FN_T


	)

741 (*
	t__com∑r_‚_t
) (const *, const *);

743 #ifdef 
__USE_GNU


744 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

747 #ifde‡
__USE_GNU


748 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

751 
__BEGIN_NAMESPACE_STD


754 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

755 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

756 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

758 #ifde‡
__USE_EXTERN_INLINES


759 
	~<bôs/°dlib-b£¨ch.h
>

764 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

766 #ifde‡
__USE_GNU


767 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

768 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

769 
	`__n⁄nuŒ
 ((1, 4));

774 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

775 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
__END_NAMESPACE_STD


778 #ifde‡
__USE_ISOC99


779 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

780 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

784 
__BEGIN_NAMESPACE_STD


788 
div_t
 
	$div
 (
__numî
, 
__díom
)

789 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

790 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

791 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

792 
__END_NAMESPACE_STD


794 #ifde‡
__USE_ISOC99


795 
__BEGIN_NAMESPACE_C99


796 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

797 
__díom
)

798 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

799 
__END_NAMESPACE_C99


803 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

804 || 
deföed
 
__USE_MISC


811 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

812 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

817 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

818 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

823 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

824 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

827 #ifde‡
__USE_MISC


829 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

833 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

834 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

835 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

836 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

841 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

844 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

845 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

846 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

848 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

849 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

850 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

851 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

852 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

853 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

854 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

855 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

859 
__BEGIN_NAMESPACE_STD


862 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

865 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

866 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

869 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

873 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

874 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

876 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

877 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

878 
__THROW
;

879 
__END_NAMESPACE_STD


882 #ifde‡
__USE_MISC


887 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


898 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

899 *c⁄° *
__ª°ri˘
 
__tokís
,

900 **
__ª°ri˘
 
__vÆuï
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

905 #ifde‡
__USE_XOPEN


907 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

913 #ifde‡
__USE_XOPEN2KXSI


915 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

918 #ifde‡
__USE_XOPEN


923 
	$gø¡±
 (
__fd
Ë
__THROW
;

927 
	$u∆ock±
 (
__fd
Ë
__THROW
;

932 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

935 #ifde‡
__USE_GNU


939 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

940 
__THROW
 
	`__n⁄nuŒ
 ((2));

943 
	`gë±
 ();

946 #ifde‡
__USE_MISC


950 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

951 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 
	~<bôs/°dlib-Êﬂt.h
>

957 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


958 
	~<bôs/°dlib.h
>

960 #ifde‡
__LDBL_COMPAT


961 
	~<bôs/°dlib-ldbl.h
>

965 #unde‡
__√ed_mÆloc_™d_ˇŒoc


967 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

35 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

36 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

40 
__BEGIN_NAMESPACE_STD


42 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

43 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

46 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

47 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

48 
__END_NAMESPACE_STD


53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

60 
__BEGIN_NAMESPACE_STD


62 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

66 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

69 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


72 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

73 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

74 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

75 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 #ifde‡
__OPTIMIZE__


78 
__exã∫_Æways_ölöe
 *

79 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


81  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

84 
__exã∫_Æways_ölöe
 const *

85 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


87  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

90 
	}
}

92 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

93 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

95 
__END_NAMESPACE_STD


97 #ifde‡
__USE_GNU


100 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


101 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

102 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

103 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

104 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

107 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


112 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

113 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

115 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

123 
__BEGIN_NAMESPACE_STD


125 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

128 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

129 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

133 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

137 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

141 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

151 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
 
	`__n⁄nuŒ
 ((2));

153 
__END_NAMESPACE_STD


155 #ifde‡
__USE_XOPEN2K8


159 
	~<xloˇÀ.h
>

162 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

163 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

165 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

166 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

169 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


171 *
	$°rdup
 (c⁄° *
__s
)

172 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_XOPEN2K8


179 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

180 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


185 
	#°rdu∑
(
s
) \

186 (
__exãnsi⁄__
 \

188 c⁄° *
__ﬁd
 = (
s
); \

189 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

190 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

191 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

192 
	}
}))

	)

195 
	#°∫du∑
(
s
, 
n
) \

196 (
__exãnsi⁄__
 \

198 c⁄° *
__ﬁd
 = (
s
); \

199 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

200 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

201 
__√w
[
__Àn
] = '\0'; \

202 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

203 }))

	)

206 
	g__BEGIN_NAMESPACE_STD


208 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


211 *
°rchr
 (*
__s
, 
__c
)

212 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

213 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

214 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

216 #ifde‡
__OPTIMIZE__


217 
__exã∫_Æways_ölöe
 *

218 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


220  
__buûtö_°rchr
 (
__s
, 
__c
);

223 
__exã∫_Æways_ölöe
 const *

224 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


226  
__buûtö_°rchr
 (
__s
, 
__c
);

231 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

232 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

235 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


238 *
	`°ºchr
 (*
__s
, 
__c
)

239 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

241 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

243 #ifde‡
__OPTIMIZE__


244 
__exã∫_Æways_ölöe
 *

245 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


247  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

250 
__exã∫_Æways_ölöe
 const *

251 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


253  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

256 
	}
}

258 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

259 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

261 
__END_NAMESPACE_STD


263 #ifde‡
__USE_GNU


266 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


267 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

268 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

269 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

270 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

272 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

273 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 
__BEGIN_NAMESPACE_STD


280 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

281 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

284 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


290 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

291 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

293 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

295 #ifde‡
__OPTIMIZE__


296 
__exã∫_Æways_ölöe
 *

297 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


299  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

302 
__exã∫_Æways_ölöe
 const *

303 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


305  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

308 
	}
}

310 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

311 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

314 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


317 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

318 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

320 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

322 #ifde‡
__OPTIMIZE__


323 
__exã∫_Æways_ölöe
 *

324 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


326  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

329 
__exã∫_Æways_ölöe
 const *

330 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


332  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

335 
	}
}

337 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

338 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

343 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

344 
__THROW
 
	`__n⁄nuŒ
 ((2));

345 
__END_NAMESPACE_STD


349 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

350 c⁄° *
__ª°ri˘
 
__dñim
,

351 **
__ª°ri˘
 
__ßve_±r
)

352 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

353 #ifde‡
__USE_POSIX


354 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

355 **
__ª°ri˘
 
__ßve_±r
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

359 #ifde‡
__USE_GNU


361 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


362 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

363 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

364 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

365 c⁄° *
__√edÀ
)

366 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

368 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

369 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 #ifde‡
__USE_GNU


377 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

378 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

379 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

383 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

384 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

385 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

387 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

392 
__BEGIN_NAMESPACE_STD


394 
size_t
 
	$°æí
 (c⁄° *
__s
)

395 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

396 
__END_NAMESPACE_STD


398 #ifdef 
__USE_XOPEN2K8


401 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

402 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

406 
__BEGIN_NAMESPACE_STD


408 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

409 
__END_NAMESPACE_STD


410 #ifde‡
__USE_XOPEN2K


418 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


421 #ifde‡
__REDIRECT_NTH


422 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

423 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

424 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

426 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

427 
__THROW
 
	`__n⁄nuŒ
 ((2));

428 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

433 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

434 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

438 #ifde‡
__USE_XOPEN2K8


440 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

446 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

448 #ifde‡
__USE_MISC


450 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

451 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

457 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

458 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

461 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


464 *
	`ödex
 (*
__s
, 
__c
)

465 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

466 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

467 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

469 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


470 
__exã∫_Æways_ölöe
 *

471 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


473  
	`__buûtö_ödex
 (
__s
, 
__c
);

476 
__exã∫_Æways_ölöe
 const *

477 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


479  
	`__buûtö_ödex
 (
__s
, 
__c
);

482 
	}
}

484 *
	$ödex
 (c⁄° *
__s
, 
__c
)

485 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

489 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


492 *
	`rödex
 (*
__s
, 
__c
)

493 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

495 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

497 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


498 
__exã∫_Æways_ölöe
 *

499 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


501  
	`__buûtö_rödex
 (
__s
, 
__c
);

504 
__exã∫_Æways_ölöe
 const *

505 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


507  
	`__buûtö_rödex
 (
__s
, 
__c
);

510 
	}
}

512 *
	$rödex
 (c⁄° *
__s
, 
__c
)

513 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

518 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

522 #ifdef 
__USE_GNU


523 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

524 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

525 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

530 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

534 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

537 #ifdef 
__USE_GNU


540 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

541 
__loˇÀ_t
 
__loc
)

542 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

544 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

545 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

546 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

549 #ifdef 
__USE_MISC


552 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

553 c⁄° *
__ª°ri˘
 
__dñim
)

554 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifdef 
__USE_XOPEN2K8


559 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

562 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

563 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

570 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

572 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

573 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 #ifdef 
__USE_GNU


579 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

580 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

583 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

586 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

588 #i‚de‡
ba£«me


593 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


594 "C++" *
	$ba£«me
 (*
__fûíame
)

595 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

596 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

597 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

599 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

605 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

606 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

607 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


627 
	~<bôs/°rög.h
>

630 
	~<bôs/°rög2.h
>

633 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


635 
	~<bôs/°rög3.h
>

639 #i‡
deföed
 
__USE_GNU
 && deföed 
__OPTIMIZE__
 \

640 && 
deföed
 
__exã∫_Æways_ölöe
 && 
	$__GNUC_PREREQ
 (3,2)

641 #i‡!
deföed
 
_FORCE_INLINES
 && !deföed 
_HAVE_STRING_ARCH_memp˝y


643 #unde‡
memp˝y


644 #unde‡
__memp˝y


645 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

646 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y_ölöe
 (de°, src,Ç)

	)

648 
__exã∫_Æways_ölöe
 *

649 
	$__memp˝y_ölöe
 (*
__ª°ri˘
 
__de°
,

650 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

652  (*Ë
	`mem˝y
 (
__de°
, 
__§c
, 
__n
) + __n;

653 
	}
}

658 
	g__END_DECLS


	@/usr/include/term.h

41 #i‚de‡
NCURSES_TERM_H_ö˛


42 
	#NCURSES_TERM_H_ö˛
 1

	)

44 #unde‡
NCURSES_VERSION


45 
	#NCURSES_VERSION
 "6.0"

	)

47 
	~<ncur£s_dŒ.h
>

49 #ifde‡
__˝lu•lus


57 #unde‡
NCURSES_CONST


58 
	#NCURSES_CONST
 c⁄°

	)

60 #unde‡
NCURSES_SBOOL


61 
	#NCURSES_SBOOL
 

	)

63 #unde‡
NCURSES_USE_DATABASE


64 
	#NCURSES_USE_DATABASE
 1

	)

66 #unde‡
NCURSES_USE_TERMCAP


67 
	#NCURSES_USE_TERMCAP
 0

	)

69 #unde‡
NCURSES_XNAMES


70 
	#NCURSES_XNAMES
 1

	)

75 #unde‡
TTY


76 #unde‡
SET_TTY


77 #unde‡
GET_TTY


83 #unde‡
TERMIOS


84 
	#TERMIOS
 1

	)

86 
	~<ãrmios.h
>

87 
	#TTY
 
ãrmios


	)

94 #unde‡
TERMIOS


95 
	#TERMIOS
 1

	)

97 
	~<ãrmio.h
>

98 
	#TTY
 
ãrmio


	)

102 #i‡
__MINGW32__


103 
	~<ncur£s_mögw.h
>

104 
	#TTY
 
ãrmios


	)

106 #unde‡
TERMIOS


107 
	~<sgây.h
>

108 
	~<sys/io˘l.h
>

109 
	#TTY
 
sgâyb


	)

115 #ifde‡
TERMIOS


116 
	#GET_TTY
(
fd
, 
buf
Ë
	`tcgë©å
(fd, buf)

	)

117 
	#SET_TTY
(
fd
, 
buf
Ë
	`tc£èâr
(fd, 
TCSADRAIN
, buf)

	)

119 
	#GET_TTY
(
fd
, 
buf
Ë
	`gây
(fd, buf)

	)

120 
	#SET_TTY
(
fd
, 
buf
Ë
	`°ty
(fd, buf)

	)

123 
	#NAMESIZE
 256

	)

125 
	#CUR
 
cur_ãrm
->
ty≥
.

	)

127 
	#auto_À·_m¨gö
 
CUR
 
Boﬁóns
[0]

	)

128 
	#auto_right_m¨gö
 
CUR
 
Boﬁóns
[1]

	)

129 
	#no_esc_˘lc
 
CUR
 
Boﬁóns
[2]

	)

130 
	#˚ﬁ_°™dout_glôch
 
CUR
 
Boﬁóns
[3]

	)

131 
	#ót_√wlöe_glôch
 
CUR
 
Boﬁóns
[4]

	)

132 
	#îa£_ovî°rike
 
CUR
 
Boﬁóns
[5]

	)

133 
	#gíîic_ty≥
 
CUR
 
Boﬁóns
[6]

	)

134 
	#h¨d_c›y
 
CUR
 
Boﬁóns
[7]

	)

135 
	#has_mëa_key
 
CUR
 
Boﬁóns
[8]

	)

136 
	#has_°©us_löe
 
CUR
 
Boﬁóns
[9]

	)

137 
	#ö£π_nuŒ_glôch
 
CUR
 
Boﬁóns
[10]

	)

138 
	#mem‹y_above
 
CUR
 
Boﬁóns
[11]

	)

139 
	#mem‹y_bñow
 
CUR
 
Boﬁóns
[12]

	)

140 
	#move_ö£π_mode
 
CUR
 
Boﬁóns
[13]

	)

141 
	#move_°™dout_mode
 
CUR
 
Boﬁóns
[14]

	)

142 
	#ovî_°rike
 
CUR
 
Boﬁóns
[15]

	)

143 
	#°©us_löe_esc_ok
 
CUR
 
Boﬁóns
[16]

	)

144 
	#de°_èbs_magic_smso
 
CUR
 
Boﬁóns
[17]

	)

145 
	#tûde_glôch
 
CUR
 
Boﬁóns
[18]

	)

146 
	#å™•¨ít_undîlöe
 
CUR
 
Boﬁóns
[19]

	)

147 
	#x⁄_xoff
 
CUR
 
Boﬁóns
[20]

	)

148 
	#√eds_x⁄_xoff
 
CUR
 
Boﬁóns
[21]

	)

149 
	#¥å_sûít
 
CUR
 
Boﬁóns
[22]

	)

150 
	#h¨d_curs‹
 
CUR
 
Boﬁóns
[23]

	)

151 
	#n⁄_ªv_rmcup
 
CUR
 
Boﬁóns
[24]

	)

152 
	#no_∑d_ch¨
 
CUR
 
Boﬁóns
[25]

	)

153 
	#n⁄_de°_s¸ﬁl_ªgi⁄
 
CUR
 
Boﬁóns
[26]

	)

154 
	#ˇn_ch™ge
 
CUR
 
Boﬁóns
[27]

	)

155 
	#back_cﬁ‹_îa£
 
CUR
 
Boﬁóns
[28]

	)

156 
	#hue_lighäess_ßtuøti⁄
 
CUR
 
Boﬁóns
[29]

	)

157 
	#cﬁ_addr_glôch
 
CUR
 
Boﬁóns
[30]

	)

158 
	#¸_ˇn˚ls_mi¸o_mode
 
CUR
 
Boﬁóns
[31]

	)

159 
	#has_¥öt_whìl
 
CUR
 
Boﬁóns
[32]

	)

160 
	#row_addr_glôch
 
CUR
 
Boﬁóns
[33]

	)

161 
	#£mi_auto_right_m¨gö
 
CUR
 
Boﬁóns
[34]

	)

162 
	#˝i_ch™ges_ªs
 
CUR
 
Boﬁóns
[35]

	)

163 
	#Õi_ch™ges_ªs
 
CUR
 
Boﬁóns
[36]

	)

164 
	#cﬁumns
 
CUR
 
Numbîs
[0]

	)

165 
	#öô_èbs
 
CUR
 
Numbîs
[1]

	)

166 
	#löes
 
CUR
 
Numbîs
[2]

	)

167 
	#löes_of_mem‹y
 
CUR
 
Numbîs
[3]

	)

168 
	#magic_cookõ_glôch
 
CUR
 
Numbîs
[4]

	)

169 
	#∑ddög_baud_øã
 
CUR
 
Numbîs
[5]

	)

170 
	#vútuÆ_ãrmöÆ
 
CUR
 
Numbîs
[6]

	)

171 
	#width_°©us_löe
 
CUR
 
Numbîs
[7]

	)

172 
	#num_œbñs
 
CUR
 
Numbîs
[8]

	)

173 
	#œbñ_height
 
CUR
 
Numbîs
[9]

	)

174 
	#œbñ_width
 
CUR
 
Numbîs
[10]

	)

175 
	#max_©åibuãs
 
CUR
 
Numbîs
[11]

	)

176 
	#maximum_wödows
 
CUR
 
Numbîs
[12]

	)

177 
	#max_cﬁ‹s
 
CUR
 
Numbîs
[13]

	)

178 
	#max_∑ús
 
CUR
 
Numbîs
[14]

	)

179 
	#no_cﬁ‹_video
 
CUR
 
Numbîs
[15]

	)

180 
	#buf„r_ˇ∑côy
 
CUR
 
Numbîs
[16]

	)

181 
	#dŸ_vît_•acög
 
CUR
 
Numbîs
[17]

	)

182 
	#dŸ_h‹z_•acög
 
CUR
 
Numbîs
[18]

	)

183 
	#max_mi¸o_addªss
 
CUR
 
Numbîs
[19]

	)

184 
	#max_mi¸o_jump
 
CUR
 
Numbîs
[20]

	)

185 
	#mi¸o_cﬁ_size
 
CUR
 
Numbîs
[21]

	)

186 
	#mi¸o_löe_size
 
CUR
 
Numbîs
[22]

	)

187 
	#numbî_of_pös
 
CUR
 
Numbîs
[23]

	)

188 
	#ouçut_ªs_ch¨
 
CUR
 
Numbîs
[24]

	)

189 
	#ouçut_ªs_löe
 
CUR
 
Numbîs
[25]

	)

190 
	#ouçut_ªs_h‹z_öch
 
CUR
 
Numbîs
[26]

	)

191 
	#ouçut_ªs_vît_öch
 
CUR
 
Numbîs
[27]

	)

192 
	#¥öt_øã
 
CUR
 
Numbîs
[28]

	)

193 
	#wide_ch¨_size
 
CUR
 
Numbîs
[29]

	)

194 
	#buâ⁄s
 
CUR
 
Numbîs
[30]

	)

195 
	#bô_image_ítwöög
 
CUR
 
Numbîs
[31]

	)

196 
	#bô_image_ty≥
 
CUR
 
Numbîs
[32]

	)

197 
	#back_èb
 
CUR
 
Såögs
[0]

	)

198 
	#bñl
 
CUR
 
Såögs
[1]

	)

199 
	#ˇºüge_ªtu∫
 
CUR
 
Såögs
[2]

	)

200 
	#ch™ge_s¸ﬁl_ªgi⁄
 
CUR
 
Såögs
[3]

	)

201 
	#˛ór_Æl_èbs
 
CUR
 
Såögs
[4]

	)

202 
	#˛ór_s¸ìn
 
CUR
 
Såögs
[5]

	)

203 
	#˛r_eﬁ
 
CUR
 
Såögs
[6]

	)

204 
	#˛r_eos
 
CUR
 
Såögs
[7]

	)

205 
	#cﬁumn_addªss
 
CUR
 
Såögs
[8]

	)

206 
	#comm™d_ch¨a˘î
 
CUR
 
Såögs
[9]

	)

207 
	#curs‹_addªss
 
CUR
 
Såögs
[10]

	)

208 
	#curs‹_down
 
CUR
 
Såögs
[11]

	)

209 
	#curs‹_home
 
CUR
 
Såögs
[12]

	)

210 
	#curs‹_övisibÀ
 
CUR
 
Såögs
[13]

	)

211 
	#curs‹_À·
 
CUR
 
Såögs
[14]

	)

212 
	#curs‹_mem_addªss
 
CUR
 
Såögs
[15]

	)

213 
	#curs‹_n‹mÆ
 
CUR
 
Såögs
[16]

	)

214 
	#curs‹_right
 
CUR
 
Såögs
[17]

	)

215 
	#curs‹_to_Œ
 
CUR
 
Såögs
[18]

	)

216 
	#curs‹_up
 
CUR
 
Såögs
[19]

	)

217 
	#curs‹_visibÀ
 
CUR
 
Såögs
[20]

	)

218 
	#dñëe_ch¨a˘î
 
CUR
 
Såögs
[21]

	)

219 
	#dñëe_löe
 
CUR
 
Såögs
[22]

	)

220 
	#dis_°©us_löe
 
CUR
 
Såögs
[23]

	)

221 
	#down_hÆf_löe
 
CUR
 
Såögs
[24]

	)

222 
	#íãr_Æt_ch¨£t_mode
 
CUR
 
Såögs
[25]

	)

223 
	#íãr_blök_mode
 
CUR
 
Såögs
[26]

	)

224 
	#íãr_bﬁd_mode
 
CUR
 
Såögs
[27]

	)

225 
	#íãr_ˇ_mode
 
CUR
 
Såögs
[28]

	)

226 
	#íãr_dñëe_mode
 
CUR
 
Såögs
[29]

	)

227 
	#íãr_dim_mode
 
CUR
 
Såögs
[30]

	)

228 
	#íãr_ö£π_mode
 
CUR
 
Såögs
[31]

	)

229 
	#íãr_£cuª_mode
 
CUR
 
Såögs
[32]

	)

230 
	#íãr_¥Ÿe˘ed_mode
 
CUR
 
Såögs
[33]

	)

231 
	#íãr_ªvî£_mode
 
CUR
 
Såögs
[34]

	)

232 
	#íãr_°™dout_mode
 
CUR
 
Såögs
[35]

	)

233 
	#íãr_undîlöe_mode
 
CUR
 
Såögs
[36]

	)

234 
	#îa£_ch¨s
 
CUR
 
Såögs
[37]

	)

235 
	#exô_Æt_ch¨£t_mode
 
CUR
 
Såögs
[38]

	)

236 
	#exô_©åibuã_mode
 
CUR
 
Såögs
[39]

	)

237 
	#exô_ˇ_mode
 
CUR
 
Såögs
[40]

	)

238 
	#exô_dñëe_mode
 
CUR
 
Såögs
[41]

	)

239 
	#exô_ö£π_mode
 
CUR
 
Såögs
[42]

	)

240 
	#exô_°™dout_mode
 
CUR
 
Såögs
[43]

	)

241 
	#exô_undîlöe_mode
 
CUR
 
Såögs
[44]

	)

242 
	#Êash_s¸ìn
 
CUR
 
Såögs
[45]

	)

243 
	#f‹m_„ed
 
CUR
 
Såögs
[46]

	)

244 
	#‰om_°©us_löe
 
CUR
 
Såögs
[47]

	)

245 
	#öô_1°rög
 
CUR
 
Såögs
[48]

	)

246 
	#öô_2°rög
 
CUR
 
Såögs
[49]

	)

247 
	#öô_3°rög
 
CUR
 
Såögs
[50]

	)

248 
	#öô_fûe
 
CUR
 
Såögs
[51]

	)

249 
	#ö£π_ch¨a˘î
 
CUR
 
Såögs
[52]

	)

250 
	#ö£π_löe
 
CUR
 
Såögs
[53]

	)

251 
	#ö£π_∑ddög
 
CUR
 
Såögs
[54]

	)

252 
	#key_back•a˚
 
CUR
 
Såögs
[55]

	)

253 
	#key_ˇèb
 
CUR
 
Såögs
[56]

	)

254 
	#key_˛ór
 
CUR
 
Såögs
[57]

	)

255 
	#key_˘ab
 
CUR
 
Såögs
[58]

	)

256 
	#key_dc
 
CUR
 
Såögs
[59]

	)

257 
	#key_dl
 
CUR
 
Såögs
[60]

	)

258 
	#key_down
 
CUR
 
Såögs
[61]

	)

259 
	#key_eic
 
CUR
 
Såögs
[62]

	)

260 
	#key_eﬁ
 
CUR
 
Såögs
[63]

	)

261 
	#key_eos
 
CUR
 
Såögs
[64]

	)

262 
	#key_f0
 
CUR
 
Såögs
[65]

	)

263 
	#key_f1
 
CUR
 
Såögs
[66]

	)

264 
	#key_f10
 
CUR
 
Såögs
[67]

	)

265 
	#key_f2
 
CUR
 
Såögs
[68]

	)

266 
	#key_f3
 
CUR
 
Såögs
[69]

	)

267 
	#key_f4
 
CUR
 
Såögs
[70]

	)

268 
	#key_f5
 
CUR
 
Såögs
[71]

	)

269 
	#key_f6
 
CUR
 
Såögs
[72]

	)

270 
	#key_f7
 
CUR
 
Såögs
[73]

	)

271 
	#key_f8
 
CUR
 
Såögs
[74]

	)

272 
	#key_f9
 
CUR
 
Såögs
[75]

	)

273 
	#key_home
 
CUR
 
Såögs
[76]

	)

274 
	#key_ic
 
CUR
 
Såögs
[77]

	)

275 
	#key_û
 
CUR
 
Såögs
[78]

	)

276 
	#key_À·
 
CUR
 
Såögs
[79]

	)

277 
	#key_Œ
 
CUR
 
Såögs
[80]

	)

278 
	#key_≈age
 
CUR
 
Såögs
[81]

	)

279 
	#key_µage
 
CUR
 
Såögs
[82]

	)

280 
	#key_right
 
CUR
 
Såögs
[83]

	)

281 
	#key_sf
 
CUR
 
Såögs
[84]

	)

282 
	#key_§
 
CUR
 
Såögs
[85]

	)

283 
	#key_°ab
 
CUR
 
Såögs
[86]

	)

284 
	#key_up
 
CUR
 
Såögs
[87]

	)

285 
	#key∑d_loˇl
 
CUR
 
Såögs
[88]

	)

286 
	#key∑d_xmô
 
CUR
 
Såögs
[89]

	)

287 
	#œb_f0
 
CUR
 
Såögs
[90]

	)

288 
	#œb_f1
 
CUR
 
Såögs
[91]

	)

289 
	#œb_f10
 
CUR
 
Såögs
[92]

	)

290 
	#œb_f2
 
CUR
 
Såögs
[93]

	)

291 
	#œb_f3
 
CUR
 
Såögs
[94]

	)

292 
	#œb_f4
 
CUR
 
Såögs
[95]

	)

293 
	#œb_f5
 
CUR
 
Såögs
[96]

	)

294 
	#œb_f6
 
CUR
 
Såögs
[97]

	)

295 
	#œb_f7
 
CUR
 
Såögs
[98]

	)

296 
	#œb_f8
 
CUR
 
Såögs
[99]

	)

297 
	#œb_f9
 
CUR
 
Såögs
[100]

	)

298 
	#mëa_off
 
CUR
 
Såögs
[101]

	)

299 
	#mëa_⁄
 
CUR
 
Såögs
[102]

	)

300 
	#√wlöe
 
CUR
 
Såögs
[103]

	)

301 
	#∑d_ch¨
 
CUR
 
Såögs
[104]

	)

302 
	#∑rm_dch
 
CUR
 
Såögs
[105]

	)

303 
	#∑rm_dñëe_löe
 
CUR
 
Såögs
[106]

	)

304 
	#∑rm_down_curs‹
 
CUR
 
Såögs
[107]

	)

305 
	#∑rm_ich
 
CUR
 
Såögs
[108]

	)

306 
	#∑rm_ödex
 
CUR
 
Såögs
[109]

	)

307 
	#∑rm_ö£π_löe
 
CUR
 
Såögs
[110]

	)

308 
	#∑rm_À·_curs‹
 
CUR
 
Såögs
[111]

	)

309 
	#∑rm_right_curs‹
 
CUR
 
Såögs
[112]

	)

310 
	#∑rm_rödex
 
CUR
 
Såögs
[113]

	)

311 
	#∑rm_up_curs‹
 
CUR
 
Såögs
[114]

	)

312 
	#pkey_key
 
CUR
 
Såögs
[115]

	)

313 
	#pkey_loˇl
 
CUR
 
Såögs
[116]

	)

314 
	#pkey_xmô
 
CUR
 
Såögs
[117]

	)

315 
	#¥öt_s¸ìn
 
CUR
 
Såögs
[118]

	)

316 
	#¥å_off
 
CUR
 
Såögs
[119]

	)

317 
	#¥å_⁄
 
CUR
 
Såögs
[120]

	)

318 
	#ª≥©_ch¨
 
CUR
 
Såögs
[121]

	)

319 
	#ª£t_1°rög
 
CUR
 
Såögs
[122]

	)

320 
	#ª£t_2°rög
 
CUR
 
Såögs
[123]

	)

321 
	#ª£t_3°rög
 
CUR
 
Såögs
[124]

	)

322 
	#ª£t_fûe
 
CUR
 
Såögs
[125]

	)

323 
	#ª°‹e_curs‹
 
CUR
 
Såögs
[126]

	)

324 
	#row_addªss
 
CUR
 
Såögs
[127]

	)

325 
	#ßve_curs‹
 
CUR
 
Såögs
[128]

	)

326 
	#s¸ﬁl_f‹w¨d
 
CUR
 
Såögs
[129]

	)

327 
	#s¸ﬁl_ªvî£
 
CUR
 
Såögs
[130]

	)

328 
	#£t_©åibuãs
 
CUR
 
Såögs
[131]

	)

329 
	#£t_èb
 
CUR
 
Såögs
[132]

	)

330 
	#£t_wödow
 
CUR
 
Såögs
[133]

	)

331 
	#èb
 
CUR
 
Såögs
[134]

	)

332 
	#to_°©us_löe
 
CUR
 
Såögs
[135]

	)

333 
	#undîlöe_ch¨
 
CUR
 
Såögs
[136]

	)

334 
	#up_hÆf_löe
 
CUR
 
Såögs
[137]

	)

335 
	#öô_¥og
 
CUR
 
Såögs
[138]

	)

336 
	#key_a1
 
CUR
 
Såögs
[139]

	)

337 
	#key_a3
 
CUR
 
Såögs
[140]

	)

338 
	#key_b2
 
CUR
 
Såögs
[141]

	)

339 
	#key_c1
 
CUR
 
Såögs
[142]

	)

340 
	#key_c3
 
CUR
 
Såögs
[143]

	)

341 
	#¥å_n⁄
 
CUR
 
Såögs
[144]

	)

342 
	#ch¨_∑ddög
 
CUR
 
Såögs
[145]

	)

343 
	#acs_ch¨s
 
CUR
 
Såögs
[146]

	)

344 
	#∂ab_n‹m
 
CUR
 
Såögs
[147]

	)

345 
	#key_bèb
 
CUR
 
Såögs
[148]

	)

346 
	#íãr_x⁄_mode
 
CUR
 
Såögs
[149]

	)

347 
	#exô_x⁄_mode
 
CUR
 
Såögs
[150]

	)

348 
	#íãr_am_mode
 
CUR
 
Såögs
[151]

	)

349 
	#exô_am_mode
 
CUR
 
Såögs
[152]

	)

350 
	#x⁄_ch¨a˘î
 
CUR
 
Såögs
[153]

	)

351 
	#xoff_ch¨a˘î
 
CUR
 
Såögs
[154]

	)

352 
	#ía_acs
 
CUR
 
Såögs
[155]

	)

353 
	#œbñ_⁄
 
CUR
 
Såögs
[156]

	)

354 
	#œbñ_off
 
CUR
 
Såögs
[157]

	)

355 
	#key_beg
 
CUR
 
Såögs
[158]

	)

356 
	#key_ˇn˚l
 
CUR
 
Såögs
[159]

	)

357 
	#key_˛o£
 
CUR
 
Såögs
[160]

	)

358 
	#key_comm™d
 
CUR
 
Såögs
[161]

	)

359 
	#key_c›y
 
CUR
 
Såögs
[162]

	)

360 
	#key_¸óã
 
CUR
 
Såögs
[163]

	)

361 
	#key_íd
 
CUR
 
Såögs
[164]

	)

362 
	#key_íãr
 
CUR
 
Såögs
[165]

	)

363 
	#key_exô
 
CUR
 
Såögs
[166]

	)

364 
	#key_föd
 
CUR
 
Såögs
[167]

	)

365 
	#key_hñp
 
CUR
 
Såögs
[168]

	)

366 
	#key_m¨k
 
CUR
 
Såögs
[169]

	)

367 
	#key_mesßge
 
CUR
 
Såögs
[170]

	)

368 
	#key_move
 
CUR
 
Såögs
[171]

	)

369 
	#key_√xt
 
CUR
 
Såögs
[172]

	)

370 
	#key_›í
 
CUR
 
Såögs
[173]

	)

371 
	#key_›ti⁄s
 
CUR
 
Såögs
[174]

	)

372 
	#key_¥evious
 
CUR
 
Såögs
[175]

	)

373 
	#key_¥öt
 
CUR
 
Såögs
[176]

	)

374 
	#key_ªdo
 
CUR
 
Såögs
[177]

	)

375 
	#key_ª„ªn˚
 
CUR
 
Såögs
[178]

	)

376 
	#key_ª‰esh
 
CUR
 
Såögs
[179]

	)

377 
	#key_ª∂a˚
 
CUR
 
Såögs
[180]

	)

378 
	#key_ª°¨t
 
CUR
 
Såögs
[181]

	)

379 
	#key_ªsume
 
CUR
 
Såögs
[182]

	)

380 
	#key_ßve
 
CUR
 
Såögs
[183]

	)

381 
	#key_su•íd
 
CUR
 
Såögs
[184]

	)

382 
	#key_undo
 
CUR
 
Såögs
[185]

	)

383 
	#key_sbeg
 
CUR
 
Såögs
[186]

	)

384 
	#key_sˇn˚l
 
CUR
 
Såögs
[187]

	)

385 
	#key_scomm™d
 
CUR
 
Såögs
[188]

	)

386 
	#key_sc›y
 
CUR
 
Såögs
[189]

	)

387 
	#key_s¸óã
 
CUR
 
Såögs
[190]

	)

388 
	#key_sdc
 
CUR
 
Såögs
[191]

	)

389 
	#key_sdl
 
CUR
 
Såögs
[192]

	)

390 
	#key_£À˘
 
CUR
 
Såögs
[193]

	)

391 
	#key_£nd
 
CUR
 
Såögs
[194]

	)

392 
	#key_£ﬁ
 
CUR
 
Såögs
[195]

	)

393 
	#key_£xô
 
CUR
 
Såögs
[196]

	)

394 
	#key_sföd
 
CUR
 
Såögs
[197]

	)

395 
	#key_shñp
 
CUR
 
Såögs
[198]

	)

396 
	#key_shome
 
CUR
 
Såögs
[199]

	)

397 
	#key_sic
 
CUR
 
Såögs
[200]

	)

398 
	#key_¶e·
 
CUR
 
Såögs
[201]

	)

399 
	#key_smesßge
 
CUR
 
Såögs
[202]

	)

400 
	#key_smove
 
CUR
 
Såögs
[203]

	)

401 
	#key_¢ext
 
CUR
 
Såögs
[204]

	)

402 
	#key_s›ti⁄s
 
CUR
 
Såögs
[205]

	)

403 
	#key_•ªvious
 
CUR
 
Såögs
[206]

	)

404 
	#key_•röt
 
CUR
 
Såögs
[207]

	)

405 
	#key_§edo
 
CUR
 
Såögs
[208]

	)

406 
	#key_§ïœ˚
 
CUR
 
Såögs
[209]

	)

407 
	#key_§ight
 
CUR
 
Såögs
[210]

	)

408 
	#key_§sume
 
CUR
 
Såögs
[211]

	)

409 
	#key_sßve
 
CUR
 
Såögs
[212]

	)

410 
	#key_ssu•íd
 
CUR
 
Såögs
[213]

	)

411 
	#key_sundo
 
CUR
 
Såögs
[214]

	)

412 
	#ªq_f‹_öput
 
CUR
 
Såögs
[215]

	)

413 
	#key_f11
 
CUR
 
Såögs
[216]

	)

414 
	#key_f12
 
CUR
 
Såögs
[217]

	)

415 
	#key_f13
 
CUR
 
Såögs
[218]

	)

416 
	#key_f14
 
CUR
 
Såögs
[219]

	)

417 
	#key_f15
 
CUR
 
Såögs
[220]

	)

418 
	#key_f16
 
CUR
 
Såögs
[221]

	)

419 
	#key_f17
 
CUR
 
Såögs
[222]

	)

420 
	#key_f18
 
CUR
 
Såögs
[223]

	)

421 
	#key_f19
 
CUR
 
Såögs
[224]

	)

422 
	#key_f20
 
CUR
 
Såögs
[225]

	)

423 
	#key_f21
 
CUR
 
Såögs
[226]

	)

424 
	#key_f22
 
CUR
 
Såögs
[227]

	)

425 
	#key_f23
 
CUR
 
Såögs
[228]

	)

426 
	#key_f24
 
CUR
 
Såögs
[229]

	)

427 
	#key_f25
 
CUR
 
Såögs
[230]

	)

428 
	#key_f26
 
CUR
 
Såögs
[231]

	)

429 
	#key_f27
 
CUR
 
Såögs
[232]

	)

430 
	#key_f28
 
CUR
 
Såögs
[233]

	)

431 
	#key_f29
 
CUR
 
Såögs
[234]

	)

432 
	#key_f30
 
CUR
 
Såögs
[235]

	)

433 
	#key_f31
 
CUR
 
Såögs
[236]

	)

434 
	#key_f32
 
CUR
 
Såögs
[237]

	)

435 
	#key_f33
 
CUR
 
Såögs
[238]

	)

436 
	#key_f34
 
CUR
 
Såögs
[239]

	)

437 
	#key_f35
 
CUR
 
Såögs
[240]

	)

438 
	#key_f36
 
CUR
 
Såögs
[241]

	)

439 
	#key_f37
 
CUR
 
Såögs
[242]

	)

440 
	#key_f38
 
CUR
 
Såögs
[243]

	)

441 
	#key_f39
 
CUR
 
Såögs
[244]

	)

442 
	#key_f40
 
CUR
 
Såögs
[245]

	)

443 
	#key_f41
 
CUR
 
Såögs
[246]

	)

444 
	#key_f42
 
CUR
 
Såögs
[247]

	)

445 
	#key_f43
 
CUR
 
Såögs
[248]

	)

446 
	#key_f44
 
CUR
 
Såögs
[249]

	)

447 
	#key_f45
 
CUR
 
Såögs
[250]

	)

448 
	#key_f46
 
CUR
 
Såögs
[251]

	)

449 
	#key_f47
 
CUR
 
Såögs
[252]

	)

450 
	#key_f48
 
CUR
 
Såögs
[253]

	)

451 
	#key_f49
 
CUR
 
Såögs
[254]

	)

452 
	#key_f50
 
CUR
 
Såögs
[255]

	)

453 
	#key_f51
 
CUR
 
Såögs
[256]

	)

454 
	#key_f52
 
CUR
 
Såögs
[257]

	)

455 
	#key_f53
 
CUR
 
Såögs
[258]

	)

456 
	#key_f54
 
CUR
 
Såögs
[259]

	)

457 
	#key_f55
 
CUR
 
Såögs
[260]

	)

458 
	#key_f56
 
CUR
 
Såögs
[261]

	)

459 
	#key_f57
 
CUR
 
Såögs
[262]

	)

460 
	#key_f58
 
CUR
 
Såögs
[263]

	)

461 
	#key_f59
 
CUR
 
Såögs
[264]

	)

462 
	#key_f60
 
CUR
 
Såögs
[265]

	)

463 
	#key_f61
 
CUR
 
Såögs
[266]

	)

464 
	#key_f62
 
CUR
 
Såögs
[267]

	)

465 
	#key_f63
 
CUR
 
Såögs
[268]

	)

466 
	#˛r_bﬁ
 
CUR
 
Såögs
[269]

	)

467 
	#˛ór_m¨gös
 
CUR
 
Såögs
[270]

	)

468 
	#£t_À·_m¨gö
 
CUR
 
Såögs
[271]

	)

469 
	#£t_right_m¨gö
 
CUR
 
Såögs
[272]

	)

470 
	#œbñ_f‹m©
 
CUR
 
Såögs
[273]

	)

471 
	#£t_˛ock
 
CUR
 
Såögs
[274]

	)

472 
	#di•œy_˛ock
 
CUR
 
Såögs
[275]

	)

473 
	#ªmove_˛ock
 
CUR
 
Såögs
[276]

	)

474 
	#¸óã_wödow
 
CUR
 
Såögs
[277]

	)

475 
	#gŸo_wödow
 
CUR
 
Såögs
[278]

	)

476 
	#h™gup
 
CUR
 
Såögs
[279]

	)

477 
	#dül_ph⁄e
 
CUR
 
Såögs
[280]

	)

478 
	#quick_dül
 
CUR
 
Såögs
[281]

	)

479 
	#t⁄e
 
CUR
 
Såögs
[282]

	)

480 
	#pul£
 
CUR
 
Såögs
[283]

	)

481 
	#Êash_hook
 
CUR
 
Såögs
[284]

	)

482 
	#fixed_∑u£
 
CUR
 
Såögs
[285]

	)

483 
	#waô_t⁄e
 
CUR
 
Såögs
[286]

	)

484 
	#u£r0
 
CUR
 
Såögs
[287]

	)

485 
	#u£r1
 
CUR
 
Såögs
[288]

	)

486 
	#u£r2
 
CUR
 
Såögs
[289]

	)

487 
	#u£r3
 
CUR
 
Såögs
[290]

	)

488 
	#u£r4
 
CUR
 
Såögs
[291]

	)

489 
	#u£r5
 
CUR
 
Såögs
[292]

	)

490 
	#u£r6
 
CUR
 
Såögs
[293]

	)

491 
	#u£r7
 
CUR
 
Såögs
[294]

	)

492 
	#u£r8
 
CUR
 
Såögs
[295]

	)

493 
	#u£r9
 
CUR
 
Såögs
[296]

	)

494 
	#‹ig_∑ú
 
CUR
 
Såögs
[297]

	)

495 
	#‹ig_cﬁ‹s
 
CUR
 
Såögs
[298]

	)

496 
	#öôülize_cﬁ‹
 
CUR
 
Såögs
[299]

	)

497 
	#öôülize_∑ú
 
CUR
 
Såögs
[300]

	)

498 
	#£t_cﬁ‹_∑ú
 
CUR
 
Såögs
[301]

	)

499 
	#£t_f‹eground
 
CUR
 
Såögs
[302]

	)

500 
	#£t_background
 
CUR
 
Såögs
[303]

	)

501 
	#ch™ge_ch¨_pôch
 
CUR
 
Såögs
[304]

	)

502 
	#ch™ge_löe_pôch
 
CUR
 
Såögs
[305]

	)

503 
	#ch™ge_ªs_h‹z
 
CUR
 
Såögs
[306]

	)

504 
	#ch™ge_ªs_vît
 
CUR
 
Såögs
[307]

	)

505 
	#deföe_ch¨
 
CUR
 
Såögs
[308]

	)

506 
	#íãr_doubÀwide_mode
 
CUR
 
Såögs
[309]

	)

507 
	#íãr_dø·_quÆôy
 
CUR
 
Såögs
[310]

	)

508 
	#íãr_ôÆics_mode
 
CUR
 
Såögs
[311]

	)

509 
	#íãr_À·w¨d_mode
 
CUR
 
Såögs
[312]

	)

510 
	#íãr_mi¸o_mode
 
CUR
 
Såögs
[313]

	)

511 
	#íãr_√¨_Àâî_quÆôy
 
CUR
 
Såögs
[314]

	)

512 
	#íãr_n‹mÆ_quÆôy
 
CUR
 
Såögs
[315]

	)

513 
	#íãr_shadow_mode
 
CUR
 
Såögs
[316]

	)

514 
	#íãr_subs¸ùt_mode
 
CUR
 
Såögs
[317]

	)

515 
	#íãr_su≥rs¸ùt_mode
 
CUR
 
Såögs
[318]

	)

516 
	#íãr_upw¨d_mode
 
CUR
 
Såögs
[319]

	)

517 
	#exô_doubÀwide_mode
 
CUR
 
Såögs
[320]

	)

518 
	#exô_ôÆics_mode
 
CUR
 
Såögs
[321]

	)

519 
	#exô_À·w¨d_mode
 
CUR
 
Såögs
[322]

	)

520 
	#exô_mi¸o_mode
 
CUR
 
Såögs
[323]

	)

521 
	#exô_shadow_mode
 
CUR
 
Såögs
[324]

	)

522 
	#exô_subs¸ùt_mode
 
CUR
 
Såögs
[325]

	)

523 
	#exô_su≥rs¸ùt_mode
 
CUR
 
Såögs
[326]

	)

524 
	#exô_upw¨d_mode
 
CUR
 
Såögs
[327]

	)

525 
	#mi¸o_cﬁumn_addªss
 
CUR
 
Såögs
[328]

	)

526 
	#mi¸o_down
 
CUR
 
Såögs
[329]

	)

527 
	#mi¸o_À·
 
CUR
 
Såögs
[330]

	)

528 
	#mi¸o_right
 
CUR
 
Såögs
[331]

	)

529 
	#mi¸o_row_addªss
 
CUR
 
Såögs
[332]

	)

530 
	#mi¸o_up
 
CUR
 
Såögs
[333]

	)

531 
	#‹dî_of_pös
 
CUR
 
Såögs
[334]

	)

532 
	#∑rm_down_mi¸o
 
CUR
 
Såögs
[335]

	)

533 
	#∑rm_À·_mi¸o
 
CUR
 
Såögs
[336]

	)

534 
	#∑rm_right_mi¸o
 
CUR
 
Såögs
[337]

	)

535 
	#∑rm_up_mi¸o
 
CUR
 
Såögs
[338]

	)

536 
	#£À˘_ch¨_£t
 
CUR
 
Såögs
[339]

	)

537 
	#£t_bŸtom_m¨gö
 
CUR
 
Såögs
[340]

	)

538 
	#£t_bŸtom_m¨gö_∑rm
 
CUR
 
Såögs
[341]

	)

539 
	#£t_À·_m¨gö_∑rm
 
CUR
 
Såögs
[342]

	)

540 
	#£t_right_m¨gö_∑rm
 
CUR
 
Såögs
[343]

	)

541 
	#£t_t›_m¨gö
 
CUR
 
Såögs
[344]

	)

542 
	#£t_t›_m¨gö_∑rm
 
CUR
 
Såögs
[345]

	)

543 
	#°¨t_bô_image
 
CUR
 
Såögs
[346]

	)

544 
	#°¨t_ch¨_£t_def
 
CUR
 
Såögs
[347]

	)

545 
	#°›_bô_image
 
CUR
 
Såögs
[348]

	)

546 
	#°›_ch¨_£t_def
 
CUR
 
Såögs
[349]

	)

547 
	#subs¸ùt_ch¨a˘îs
 
CUR
 
Såögs
[350]

	)

548 
	#su≥rs¸ùt_ch¨a˘îs
 
CUR
 
Såögs
[351]

	)

549 
	#the£_ˇu£_¸
 
CUR
 
Såögs
[352]

	)

550 
	#zîo_mŸi⁄
 
CUR
 
Såögs
[353]

	)

551 
	#ch¨_£t_«mes
 
CUR
 
Såögs
[354]

	)

552 
	#key_mou£
 
CUR
 
Såögs
[355]

	)

553 
	#mou£_öfo
 
CUR
 
Såögs
[356]

	)

554 
	#ªq_mou£_pos
 
CUR
 
Såögs
[357]

	)

555 
	#gë_mou£
 
CUR
 
Såögs
[358]

	)

556 
	#£t_a_f‹eground
 
CUR
 
Såögs
[359]

	)

557 
	#£t_a_background
 
CUR
 
Såögs
[360]

	)

558 
	#pkey_∂ab
 
CUR
 
Såögs
[361]

	)

559 
	#devi˚_ty≥
 
CUR
 
Såögs
[362]

	)

560 
	#code_£t_öô
 
CUR
 
Såögs
[363]

	)

561 
	#£t0_des_£q
 
CUR
 
Såögs
[364]

	)

562 
	#£t1_des_£q
 
CUR
 
Såögs
[365]

	)

563 
	#£t2_des_£q
 
CUR
 
Såögs
[366]

	)

564 
	#£t3_des_£q
 
CUR
 
Såögs
[367]

	)

565 
	#£t_Ã_m¨gö
 
CUR
 
Såögs
[368]

	)

566 
	#£t_tb_m¨gö
 
CUR
 
Såögs
[369]

	)

567 
	#bô_image_ª≥©
 
CUR
 
Såögs
[370]

	)

568 
	#bô_image_√wlöe
 
CUR
 
Såögs
[371]

	)

569 
	#bô_image_ˇºüge_ªtu∫
 
CUR
 
Såögs
[372]

	)

570 
	#cﬁ‹_«mes
 
CUR
 
Såögs
[373]

	)

571 
	#deföe_bô_image_ªgi⁄
 
CUR
 
Såögs
[374]

	)

572 
	#íd_bô_image_ªgi⁄
 
CUR
 
Såögs
[375]

	)

573 
	#£t_cﬁ‹_b™d
 
CUR
 
Såögs
[376]

	)

574 
	#£t_∑ge_Àngth
 
CUR
 
Såögs
[377]

	)

575 
	#di•œy_pc_ch¨
 
CUR
 
Såögs
[378]

	)

576 
	#íãr_pc_ch¨£t_mode
 
CUR
 
Såögs
[379]

	)

577 
	#exô_pc_ch¨£t_mode
 
CUR
 
Såögs
[380]

	)

578 
	#íãr_sˇncode_mode
 
CUR
 
Såögs
[381]

	)

579 
	#exô_sˇncode_mode
 
CUR
 
Såögs
[382]

	)

580 
	#pc_ãrm_›ti⁄s
 
CUR
 
Såögs
[383]

	)

581 
	#sˇncode_esˇ≥
 
CUR
 
Såögs
[384]

	)

582 
	#Æt_sˇncode_esc
 
CUR
 
Såögs
[385]

	)

583 
	#íãr_h‹iz⁄èl_hl_mode
 
CUR
 
Såögs
[386]

	)

584 
	#íãr_À·_hl_mode
 
CUR
 
Såögs
[387]

	)

585 
	#íãr_low_hl_mode
 
CUR
 
Såögs
[388]

	)

586 
	#íãr_right_hl_mode
 
CUR
 
Såögs
[389]

	)

587 
	#íãr_t›_hl_mode
 
CUR
 
Såögs
[390]

	)

588 
	#íãr_vîtiˇl_hl_mode
 
CUR
 
Såögs
[391]

	)

589 
	#£t_a_©åibuãs
 
CUR
 
Såögs
[392]

	)

590 
	#£t_pgÀn_öch
 
CUR
 
Såögs
[393]

	)

592 
	#BOOLWRITE
 37

	)

593 
	#NUMWRITE
 33

	)

594 
	#STRWRITE
 394

	)

597 
	#bìhive_glôch
 
no_esc_˘lc


	)

598 
	#ãÀøy_glôch
 
de°_èbs_magic_smso


	)

599 
	#mi¸o_ch¨_size
 
mi¸o_cﬁ_size


	)

601 #ifde‡
__INTERNAL_CAPS_VISIBLE


602 
	#ãrmˇp_öô2
 
CUR
 
Såögs
[394]

	)

603 
	#ãrmˇp_ª£t
 
CUR
 
Såögs
[395]

	)

604 
	#magic_cookõ_glôch_ul
 
CUR
 
Numbîs
[33]

	)

605 
	#back•a˚s_wôh_bs
 
CUR
 
Boﬁóns
[37]

	)

606 
	#¸t_no_s¸ﬁlög
 
CUR
 
Boﬁóns
[38]

	)

607 
	#no_c‹ª˘ly_w‹kög_¸
 
CUR
 
Boﬁóns
[39]

	)

608 
	#ˇºüge_ªtu∫_dñay
 
CUR
 
Numbîs
[34]

	)

609 
	#√w_löe_dñay
 
CUR
 
Numbîs
[35]

	)

610 
	#löe„ed_if_nŸ_lf
 
CUR
 
Såögs
[396]

	)

611 
	#back•a˚_if_nŸ_bs
 
CUR
 
Såögs
[397]

	)

612 
	#gnu_has_mëa_key
 
CUR
 
Boﬁóns
[40]

	)

613 
	#löe„ed_is_√wlöe
 
CUR
 
Boﬁóns
[41]

	)

614 
	#back•a˚_dñay
 
CUR
 
Numbîs
[36]

	)

615 
	#h‹iz⁄èl_èb_dñay
 
CUR
 
Numbîs
[37]

	)

616 
	#numbî_of_fun˘i⁄_keys
 
CUR
 
Numbîs
[38]

	)

617 
	#Ÿhî_n⁄_fun˘i⁄_keys
 
CUR
 
Såögs
[398]

	)

618 
	#¨row_key_m≠
 
CUR
 
Såögs
[399]

	)

619 
	#has_h¨dw¨e_èbs
 
CUR
 
Boﬁóns
[42]

	)

620 
	#ªtu∫_d€s_˛r_eﬁ
 
CUR
 
Boﬁóns
[43]

	)

621 
	#acs_ulc‹√r
 
CUR
 
Såögs
[400]

	)

622 
	#acs_Œc‹√r
 
CUR
 
Såögs
[401]

	)

623 
	#acs_urc‹√r
 
CUR
 
Såögs
[402]

	)

624 
	#acs_Ãc‹√r
 
CUR
 
Såögs
[403]

	)

625 
	#acs_…ì
 
CUR
 
Såögs
[404]

	)

626 
	#acs_πì
 
CUR
 
Såögs
[405]

	)

627 
	#acs_bãe
 
CUR
 
Såögs
[406]

	)

628 
	#acs_âì
 
CUR
 
Såögs
[407]

	)

629 
	#acs_hlöe
 
CUR
 
Såögs
[408]

	)

630 
	#acs_vlöe
 
CUR
 
Såögs
[409]

	)

631 
	#acs_∂us
 
CUR
 
Såögs
[410]

	)

632 
	#mem‹y_lock
 
CUR
 
Såögs
[411]

	)

633 
	#mem‹y_u∆ock
 
CUR
 
Såögs
[412]

	)

634 
	#box_ch¨s_1
 
CUR
 
Såögs
[413]

	)

641 
	#BOOLCOUNT
 44

	)

642 
	#NUMCOUNT
 39

	)

643 
	#STRCOUNT
 414

	)

646 
	#acs_ch¨s_ödex
 146

	)

648 
	sãrmty≥
 {

649 *
ãrm_«mes
;

650 *
°r_èbÀ
;

651 
NCURSES_SBOOL
 *
Boﬁóns
;

652 *
Numbîs
;

653 **
Såögs
;

655 #i‡
NCURSES_XNAMES


656 *
ext_°r_èbÀ
;

657 **
ext_Names
;

659 
num_Boﬁóns
;

660 
num_Numbîs
;

661 
num_Såögs
;

663 
ext_Boﬁóns
;

664 
ext_Numbîs
;

665 
ext_Såögs
;

668 } 
	tTERMTYPE
;

670 
	sãrm
 {

671 
TERMTYPE
 
ty≥
;

672 
Fûedes
;

673 
TTY
 
Oâyb
,

674 
Nâyb
;

675 
_baudøã
;

676 * 
_ãrm«me
;

677 } 
	tTERMINAL
;

680 
NCURSES_EXPORT_VAR
(
TERMINAL
 *Ë
cur_ãrm
;

682 
NCURSES_WRAPPED_VAR
(
TERMINAL
 *, 
cur_ãrm
);

683 
	#cur_ãrm
 
	`NCURSES_PUBLIC_VAR
(
	`cur_ãrm
())

	)

685 
NCURSES_EXPORT_VAR
(
TERMINAL
 *Ë
cur_ãrm
;

689 
NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
boﬁ«mes
);

690 
NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
boﬁcodes
);

691 
NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
boﬁ‚ames
);

692 
NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
num«mes
);

693 
NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
numcodes
);

694 
NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
num‚ames
);

695 
NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
°∫ames
);

696 
NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
°rcodes
);

697 
NCURSES_WRAPPED_VAR
(
NCURSES_CONST
 * c⁄° *, 
°r‚ames
);

699 
	#boﬁ«mes
 
	`NCURSES_PUBLIC_VAR
(
	`boﬁ«mes
())

	)

700 
	#boﬁcodes
 
	`NCURSES_PUBLIC_VAR
(
	`boﬁcodes
())

	)

701 
	#boﬁ‚ames
 
	`NCURSES_PUBLIC_VAR
(
	`boﬁ‚ames
())

	)

702 
	#num«mes
 
	`NCURSES_PUBLIC_VAR
(
	`num«mes
())

	)

703 
	#numcodes
 
	`NCURSES_PUBLIC_VAR
(
	`numcodes
())

	)

704 
	#num‚ames
 
	`NCURSES_PUBLIC_VAR
(
	`num‚ames
())

	)

705 
	#°∫ames
 
	`NCURSES_PUBLIC_VAR
(
	`°∫ames
())

	)

706 
	#°rcodes
 
	`NCURSES_PUBLIC_VAR
(
	`°rcodes
())

	)

707 
	#°r‚ames
 
	`NCURSES_PUBLIC_VAR
(
	`°r‚ames
())

	)

711 
NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
boﬁ«mes
[];

712 
NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
boﬁcodes
[];

713 
NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
boﬁ‚ames
[];

714 
NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
num«mes
[];

715 
NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
numcodes
[];

716 
NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
num‚ames
[];

717 
NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
°∫ames
[];

718 
NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
°rcodes
[];

719 
NCURSES_EXPORT_VAR
(
NCURSES_CONST
 * c⁄° ) 
°r‚ames
[];

724 
NCURSES_EXPORT
(Ë
_nc_£t_ây_mode
 (
TTY
 *
buf
);

725 
NCURSES_EXPORT
(Ë
_nc_gë_ây_mode
 (
TTY
 *
buf
);

726 
NCURSES_EXPORT
(Ë
_nc_ªad_íåy
 (c⁄° * c⁄°, * c⁄°, 
TERMTYPE
 *const);

727 
NCURSES_EXPORT
(Ë
_nc_ªad_fûe_íåy
 (c⁄° *c⁄°, 
TERMTYPE
 *);

728 
NCURSES_EXPORT
(Ë
_nc_öô_ãrmty≥
 (
TERMTYPE
 *const);

729 
NCURSES_EXPORT
(Ë
_nc_ªad_ãrmty≥
 (
TERMTYPE
 *, *, );

730 
NCURSES_EXPORT
(*Ë
_nc_fú°_«me
 (const *const);

731 
NCURSES_EXPORT
(Ë
_nc_«me_m©ch
 (const *const, const *const, const *const);

732 
NCURSES_EXPORT
(c⁄° 
TERMTYPE
 *Ë
_nc_ÁŒback
 (const *);

735 
NCURSES_EXPORT
(
TERMINAL
 *Ë
£t_cuπîm
 (TERMINAL *);

736 
NCURSES_EXPORT
(Ë
dñ_cuπîm
 (
TERMINAL
 *);

739 
NCURSES_EXPORT
(Ë
ª°¨âîm
 (
NCURSES_CONST
 *, , *);

740 
NCURSES_EXPORT
(Ë
£tu±îm
 (
NCURSES_CONST
 *,,*);

743 #i‡!
deföed
(
__NCURSES_H
)

744 
NCURSES_EXPORT
(*Ë
tigë°r
 (
NCURSES_CONST
 *);

745 
NCURSES_EXPORT_VAR
(Ë
âyty≥
[];

746 
NCURSES_EXPORT
(Ë
puç
 (const *);

747 
NCURSES_EXPORT
(Ë
tigëÊag
 (
NCURSES_CONST
 *);

748 
NCURSES_EXPORT
(Ë
tigënum
 (
NCURSES_CONST
 *);

751 
NCURSES_EXPORT
(*Ë
ç¨m
 (
NCURSES_CONST
 *, ...);

753 
NCURSES_EXPORT
(*Ë
ç¨m
 (
NCURSES_CONST
 *, ,,,,,,,,);

754 
NCURSES_EXPORT
(*Ë
ç¨m_v¨¨gs
 (
NCURSES_CONST
 *, ...);

757 
NCURSES_EXPORT
(*Ë
tù¨m
 (const *, ...);

762 #i‡!
deföed
(
NCURSES_TERMCAP_H_ö˛
)

763 
NCURSES_EXPORT
(*Ë
tgë°r
 (
NCURSES_CONST
 *, **);

764 
NCURSES_EXPORT
(*Ë
tgŸo
 (const *, , );

765 
NCURSES_EXPORT
(Ë
tgëít
 (*, const *);

766 
NCURSES_EXPORT
(Ë
tgëÊag
 (
NCURSES_CONST
 *);

767 
NCURSES_EXPORT
(Ë
tgënum
 (
NCURSES_CONST
 *);

768 
NCURSES_EXPORT
(Ë
çuts
 (const *, , (*)());

774 #i‡
deföed
(
NCURSES_SP_FUNCS
) && (NCURSES_SP_FUNCS != 0)

776 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
tigë°r
Ë(
SCREEN
*, 
NCURSES_CONST
 *);

777 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
puç
Ë(
SCREEN
*, const *);

778 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
tigëÊag
Ë(
SCREEN
*, 
NCURSES_CONST
 *);

779 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
tigënum
Ë(
SCREEN
*, 
NCURSES_CONST
 *);

782 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
ç¨m
Ë(
SCREEN
*, 
NCURSES_CONST
 *, ...);

784 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
ç¨m
Ë(
SCREEN
*, 
NCURSES_CONST
 *, ,,,,,,,,);

785 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
ç¨m_v¨¨gs
Ë(
SCREEN
*, 
NCURSES_CONST
 *, ...);

789 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
tgë°r
Ë(
SCREEN
*, 
NCURSES_CONST
 *, **);

790 
NCURSES_EXPORT
(*Ë
NCURSES_SP_NAME
(
tgŸo
Ë(
SCREEN
*, const *, , );

791 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
tgëít
Ë(
SCREEN
*, *, const *);

792 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
tgëÊag
Ë(
SCREEN
*, 
NCURSES_CONST
 *);

793 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
tgënum
Ë(
SCREEN
*, 
NCURSES_CONST
 *);

794 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
çuts
Ë(
SCREEN
*, c⁄° *, , 
NCURSES_SP_OUTC
);

796 
NCURSES_EXPORT
(
TERMINAL
 *Ë
NCURSES_SP_NAME
(
£t_cuπîm
Ë(
SCREEN
*, TERMINAL *);

797 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
dñ_cuπîm
Ë(
SCREEN
*, 
TERMINAL
 *);

799 
NCURSES_EXPORT
(Ë
NCURSES_SP_NAME
(
ª°¨âîm
Ë(
SCREEN
*, 
NCURSES_CONST
 *, , *);

802 #ifde‡
__˝lu•lus


	@/usr/include/termios.h

22 #i‚def 
_TERMIOS_H


23 
	#_TERMIOS_H
 1

	)

25 
	~<„©uªs.h
>

26 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


28 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__pid_t_deföed


30 
__pid_t
 
	tpid_t
;

31 
	#__pid_t_deföed


	)

35 
	g__BEGIN_DECLS


39 
	~<bôs/ãrmios.h
>

41 #ifde‡
__USE_MISC


44 
	#CCEQ
(
vÆ
, 
c
Ë((cË=(vÆË&& (vÆË!
_POSIX_VDISABLE
)

	)

48 
•ìd_t
 
	$cfgëo•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

51 
•ìd_t
 
	$cfgëi•ìd
 (c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

54 
	$cf£to•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

57 
	$cf£ti•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

59 #ifdef 
__USE_MISC


61 
	$cf£t•ìd
 (
ãrmios
 *
__ãrmios_p
, 
•ìd_t
 
__•ìd
Ë
__THROW
;

66 
	$tcgë©å
 (
__fd
, 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

70 
	$tc£èâr
 (
__fd
, 
__›ti⁄Æ_a˘i⁄s
,

71 c⁄° 
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

74 #ifdef 
__USE_MISC


76 
	$cfmakîaw
 (
ãrmios
 *
__ãrmios_p
Ë
__THROW
;

80 
	$tc£ndbªak
 (
__fd
, 
__duøti⁄
Ë
__THROW
;

86 
	`tcdøö
 (
__fd
);

90 
	$tcÊush
 (
__fd
, 
__queue_£À˘‹
Ë
__THROW
;

94 
	$tcÊow
 (
__fd
, 
__a˘i⁄
Ë
__THROW
;

97 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


99 
__pid_t
 
	$tcgësid
 (
__fd
Ë
__THROW
;

103 #ifde‡
__USE_MISC


104 
	~<sys/âydeÁu…s.h
>

107 
__END_DECLS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #ifde‡
__USE_POSIX


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_MISC


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_POSIX


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_POSIX


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_MISC


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

111 
	#_XOPEN_CRYPT
 1

	)

115 
	#_XOPEN_ENH_I18N
 1

	)

118 
	#_XOPEN_LEGACY
 1

	)

205 
	~<bôs/posix_›t.h
>

208 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


209 
	~<bôs/ívú⁄míts.h
>

213 
	#STDIN_FILENO
 0

	)

214 
	#STDOUT_FILENO
 1

	)

215 
	#STDERR_FILENO
 2

	)

220 
	~<bôs/ty≥s.h
>

222 #i‚def 
__ssize_t_deföed


223 
__ssize_t
 
	tssize_t
;

224 
	#__ssize_t_deföed


	)

227 
	#__√ed_size_t


	)

228 
	#__√ed_NULL


	)

229 
	~<°ddef.h
>

231 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


234 #i‚de‡
__gid_t_deföed


235 
__gid_t
 
	tgid_t
;

236 
	#__gid_t_deföed


	)

239 #i‚de‡
__uid_t_deföed


240 
__uid_t
 
	tuid_t
;

241 
	#__uid_t_deföed


	)

244 #i‚de‡
__off_t_deföed


245 #i‚de‡
__USE_FILE_OFFSET64


246 
__off_t
 
	toff_t
;

248 
__off64_t
 
	toff_t
;

250 
	#__off_t_deföed


	)

252 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


253 
__off64_t
 
	toff64_t
;

254 
	#__off64_t_deföed


	)

257 #i‚de‡
__u£c⁄ds_t_deföed


258 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

259 
	#__u£c⁄ds_t_deföed


	)

262 #i‚de‡
__pid_t_deföed


263 
__pid_t
 
	tpid_t
;

264 
	#__pid_t_deföed


	)

268 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


269 #i‚de‡
__öçå_t_deföed


270 
__öçå_t
 
	töçå_t
;

271 
	#__öçå_t_deföed


	)

275 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


276 #i‚de‡
__sockÀn_t_deföed


277 
__sockÀn_t
 
	tsockÀn_t
;

278 
	#__sockÀn_t_deföed


	)

284 
	#R_OK
 4

	)

285 
	#W_OK
 2

	)

286 
	#X_OK
 1

	)

287 
	#F_OK
 0

	)

290 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

292 #ifde‡
__USE_GNU


295 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

296 
__THROW
 
	`__n⁄nuŒ
 ((1));

299 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

300 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 #ifde‡
__USE_ATFILE


307 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

308 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

313 #i‚def 
_STDIO_H


314 
	#SEEK_SET
 0

	)

315 
	#SEEK_CUR
 1

	)

316 
	#SEEK_END
 2

	)

317 #ifde‡
__USE_GNU


318 
	#SEEK_DATA
 3

	)

319 
	#SEEK_HOLE
 4

	)

323 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


325 
	#L_SET
 
SEEK_SET


	)

326 
	#L_INCR
 
SEEK_CUR


	)

327 
	#L_XTND
 
SEEK_END


	)

336 #i‚de‡
__USE_FILE_OFFSET64


337 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

339 #ifde‡
__REDIRECT_NTH


340 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

341 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

342 
l£ek64
);

344 
	#l£ek
 
l£ek64


	)

347 #ifde‡
__USE_LARGEFILE64


348 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

349 
__THROW
;

356 
	`˛o£
 (
__fd
);

363 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

369 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

371 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


372 #i‚de‡
__USE_FILE_OFFSET64


379 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

380 
__off_t
 
__off£t
Ë
__wur
;

387 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

388 
__off_t
 
__off£t
Ë
__wur
;

390 #ifde‡
__REDIRECT


391 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

392 
__off64_t
 
__off£t
),

393 
¥ód64
Ë
__wur
;

394 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

395 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

396 
pwrôe64
Ë
__wur
;

398 
	#¥ód
 
¥ód64


	)

399 
	#pwrôe
 
pwrôe64


	)

403 #ifde‡
__USE_LARGEFILE64


407 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

408 
__off64_t
 
__off£t
Ë
__wur
;

411 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

412 
__off64_t
 
__off£t
Ë
__wur
;

420 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

422 #ifde‡
__USE_GNU


425 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

435 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

447 
	`¶ìp
 (
__£c⁄ds
);

449 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

450 || 
deföed
 
__USE_MISC


455 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

456 
__THROW
;

463 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

472 
	`∑u£
 ();

476 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

477 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

479 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


481 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

486 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

487 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

491 #ifde‡
__USE_ATFILE


494 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

495 
__gid_t
 
__group
, 
__Êag
)

496 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

500 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

502 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


504 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

514 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

516 #ifdef 
__USE_GNU


520 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

523 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

524 || 
deföed
 
__USE_MISC


528 *
	$gëwd
 (*
__buf
)

529 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

534 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

537 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

539 #ifde‡
__USE_GNU


542 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

546 **
__ívú⁄
;

547 #ifde‡
__USE_GNU


548 **
ívú⁄
;

554 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

555 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

557 #ifde‡
__USE_XOPEN2K8


560 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((2));

566 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

567 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

577 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

588 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

590 #ifde‡
__USE_GNU


593 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

594 *c⁄° 
__ívp
[])

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


601 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

606 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

612 
	~<bôs/c⁄‚ame.h
>

615 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

616 
__THROW
 
	`__n⁄nuŒ
 ((1));

619 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

622 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

624 #ifdef 
__USE_POSIX2


626 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

631 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

640 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

641 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


642 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

649 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

651 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


663 
	$£çgΩ
 (Ë
__THROW
;

670 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

672 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


674 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

678 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

681 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

687 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

692 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

694 #ifdef 
__USE_GNU


696 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

703 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

705 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


708 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

711 #ifde‡
__USE_XOPEN2K


713 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

720 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

722 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


725 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

728 #ifde‡
__USE_XOPEN2K


730 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

733 #ifde‡
__USE_GNU


736 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

737 
__THROW
;

741 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

742 
__THROW
;

746 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

747 
__THROW
 
__wur
;

751 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

752 
__THROW
 
__wur
;

759 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

761 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

762 || 
deföed
 
__USE_MISC


767 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

773 *
	$ây«me
 (
__fd
Ë
__THROW
;

777 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

778 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

782 
	$ißây
 (
__fd
Ë
__THROW
;

784 #i‡
deföed
 
__USE_MISC
 \

785 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

788 
	$ây¶Ÿ
 (Ë
__THROW
;

793 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

794 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

796 #ifde‡
__USE_ATFILE


799 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

800 c⁄° *
__to
, 
__Êags
)

801 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

804 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


806 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

807 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

813 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

817 #ifde‡
__USE_ATFILE


819 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

820 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

823 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

824 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

825 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

829 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

831 #ifde‡
__USE_ATFILE


833 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

834 
__THROW
 
	`__n⁄nuŒ
 ((2));

838 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

842 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

845 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

852 *
	`gëlogö
 ();

853 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


860 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

863 #ifdef 
__USE_MISC


865 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

869 #ifdef 
__USE_POSIX2


873 
	#__√ed_gë›t


	)

874 
	~<gë›t.h
>

878 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


882 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #i‡
deföed
 
__USE_MISC


889 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

890 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

894 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

900 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

902 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

903 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

909 
	$vh™gup
 (Ë
__THROW
;

912 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

920 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

921 
size_t
 
__off£t
, 
__sˇÀ
)

922 
__THROW
 
	`__n⁄nuŒ
 ((1));

928 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

932 *
	$gëu£rshñl
 (Ë
__THROW
;

933 
	$ídu£rshñl
 (Ë
__THROW
;

934 
	$£tu£rshñl
 (Ë
__THROW
;

940 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

944 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

947 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

951 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

959 
	`fsync
 (
__fd
);

962 #ifde‡
__USE_GNU


965 
	$syncfs
 (
__fd
Ë
__THROW
;

969 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


972 
	`gëho°id
 ();

975 
	$sync
 (Ë
__THROW
;

978 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


981 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

986 
	$gëdèbÀsize
 (Ë
__THROW
;

992 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


995 #i‚de‡
__USE_FILE_OFFSET64


996 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

999 #ifde‡
__REDIRECT_NTH


1000 
	`__REDIRECT_NTH
 (
åunˇã
,

1001 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1002 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1004 
	#åunˇã
 
åunˇã64


	)

1007 #ifde‡
__USE_LARGEFILE64


1008 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1009 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1014 #i‡
deföed
 
__USE_POSIX199309
 \

1015 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1018 #i‚de‡
__USE_FILE_OFFSET64


1019 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1023 
·runˇã64
Ë
__wur
;

1025 
	#·runˇã
 
·runˇã64


	)

1028 #ifde‡
__USE_LARGEFILE64


1029 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1035 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1036 || 
deföed
 
__USE_MISC


1040 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1046 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1050 #ifde‡
__USE_MISC


1061 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1066 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1078 
	#F_ULOCK
 0

	)

1079 
	#F_LOCK
 1

	)

1080 
	#F_TLOCK
 2

	)

1081 
	#F_TEST
 3

	)

1083 #i‚de‡
__USE_FILE_OFFSET64


1084 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1086 #ifde‡
__REDIRECT


1087 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1088 
lockf64
Ë
__wur
;

1090 
	#lockf
 
lockf64


	)

1093 #ifde‡
__USE_LARGEFILE64


1094 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1099 #ifde‡
__USE_GNU


1104 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1105 (
__exãnsi⁄__
 \

1106 ({ 
__ªsu…
; \

1107 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1108 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1109 
__ªsu…
; 
	}
}))

	)

1112 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1115 
fd©async
 (
__fûdes
);

1121 #ifdef 
__USE_XOPEN


1123 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1124 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1128 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1129 
__THROW
 
	`__n⁄nuŒ
 ((1));

1136 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1137 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1143 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1145 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1150 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1151 
	~<bôs/uni°d.h
>

1154 
__END_DECLS


	@/usr/include/utmp.h

18 #i‚def 
_UTMP_H


19 
	#_UTMP_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

26 
	g__BEGIN_DECLS


29 
	~<bôs/utmp.h
>

32 
	#UTMP_FILE
 
_PATH_UTMP


	)

33 
	#UTMP_FILENAME
 
_PATH_UTMP


	)

34 
	#WTMP_FILE
 
_PATH_WTMP


	)

35 
	#WTMP_FILENAME
 
_PATH_WTMP


	)

41 
	$logö_ây
 (
__fd
Ë
__THROW
;

45 
	$logö
 (c⁄° 
utmp
 *
__íåy
Ë
__THROW
;

48 
	$logout
 (c⁄° *
__ut_löe
Ë
__THROW
;

51 
	$logwtmp
 (c⁄° *
__ut_löe
, c⁄° *
__ut_«me
,

52 c⁄° *
__ut_ho°
Ë
__THROW
;

55 
	$updwtmp
 (c⁄° *
__wtmp_fûe
, c⁄° 
utmp
 *
__utmp
)

56 
__THROW
;

59 
	$utm≤ame
 (c⁄° *
__fûe
Ë
__THROW
;

62 
utmp
 *
	$gëuã¡
 (Ë
__THROW
;

65 
	$£tuã¡
 (Ë
__THROW
;

68 
	$íduã¡
 (Ë
__THROW
;

72 
utmp
 *
	$gëutid
 (c⁄° 
utmp
 *
__id
Ë
__THROW
;

76 
utmp
 *
	$gëuéöe
 (c⁄° 
utmp
 *
__löe
Ë
__THROW
;

79 
utmp
 *
	$putuéöe
 (c⁄° 
utmp
 *
__utmp_±r
Ë
__THROW
;

82 #ifdef 
__USE_MISC


84 
	$gëuã¡_r
 (
utmp
 *
__buf„r
, utm∞**
__ªsu…
Ë
__THROW
;

86 
	$gëutid_r
 (c⁄° 
utmp
 *
__id
, utm∞*
__buf„r
,

87 
utmp
 **
__ªsu…
Ë
__THROW
;

89 
	$gëuéöe_r
 (c⁄° 
utmp
 *
__löe
,

90 
utmp
 *
__buf„r
, utm∞**
__ªsu…
Ë
__THROW
;

94 
__END_DECLS


	@/usr/include/values.h

22 #i‚def 
_VALUES_H


23 
	#_VALUES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<limôs.h
>

29 
	#_TYPEBITS
(
ty≥
Ë( (ty≥Ë* 
CHAR_BIT
)

	)

31 
	#CHARBITS
 
	`_TYPEBITS
 ()

	)

32 
	#SHORTBITS
 
	`_TYPEBITS
 ()

	)

33 
	#INTBITS
 
	`_TYPEBITS
 ()

	)

34 
	#LONGBITS
 
	`_TYPEBITS
 ()

	)

35 
	#PTRBITS
 
	`_TYPEBITS
 (*)

	)

36 
	#DOUBLEBITS
 
	`_TYPEBITS
 ()

	)

37 
	#FLOATBITS
 
	`_TYPEBITS
 ()

	)

39 
	#MINSHORT
 
SHRT_MIN


	)

40 
	#MININT
 
INT_MIN


	)

41 
	#MINLONG
 
LONG_MIN


	)

43 
	#MAXSHORT
 
SHRT_MAX


	)

44 
	#MAXINT
 
INT_MAX


	)

45 
	#MAXLONG
 
LONG_MAX


	)

47 
	#HIBITS
 
MINSHORT


	)

48 
	#HIBITL
 
MINLONG


	)

51 
	~<Êﬂt.h
>

53 
	#MAXDOUBLE
 
DBL_MAX


	)

54 
	#MAXFLOAT
 
FLT_MAX


	)

55 
	#MINDOUBLE
 
DBL_MIN


	)

56 
	#MINFLOAT
 
FLT_MIN


	)

57 
	#DMINEXP
 
DBL_MIN_EXP


	)

58 
	#FMINEXP
 
FLT_MIN_EXP


	)

59 
	#DMAXEXP
 
DBL_MAX_EXP


	)

60 
	#FMAXEXP
 
FLT_MAX_EXP


	)

63 #ifde‡
__USE_MISC


65 
	#BITSPERBYTE
 
CHAR_BIT


	)

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

154 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

157 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

158 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
)

159 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

161 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

162 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

163 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

166 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

169 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

170 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

171 
__END_NAMESPACE_STD


173 #ifde‡
__USE_XOPEN2K8


175 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

178 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

179 
size_t
 
__n
Ë
__THROW
;

183 
	~<xloˇÀ.h
>

185 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
__loˇÀ_t
 
__loc
Ë
__THROW
;

188 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

189 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

192 
__BEGIN_NAMESPACE_STD


195 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

199 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

200 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

201 
__END_NAMESPACE_STD


203 #ifde‡
__USE_XOPEN2K8


209 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

210 
__loˇÀ_t
 
__loc
Ë
__THROW
;

215 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

216 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

219 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

222 
__BEGIN_NAMESPACE_STD


224 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


225 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

226 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

230 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

231 
__THROW
 
__©åibuã_puª__
;

234 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


235 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

236 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

240 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

241 
__THROW
 
__©åibuã_puª__
;

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_GNU


248 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

249 
__THROW
 
__©åibuã_puª__
;

252 
__BEGIN_NAMESPACE_STD


255 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

256 
__THROW
 
__©åibuã_puª__
;

259 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

260 
__THROW
 
__©åibuã_puª__
;

262 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


263 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

265 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

266 c⁄° 
wch¨_t
 *
__ac˚±
)

267 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

269 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

270 
__THROW
 
__©åibuã_puª__
;

273 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


274 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

276 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

277 c⁄° 
wch¨_t
 *
__√edÀ
)

278 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

280 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

281 
__THROW
 
__©åibuã_puª__
;

285 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

287 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

290 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

291 
__END_NAMESPACE_STD


293 #ifde‡
__USE_XOPEN


295 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


296 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

298 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

299 c⁄° 
wch¨_t
 *
__√edÀ
)

300 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

302 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

303 
__THROW
 
__©åibuã_puª__
;

307 #ifde‡
__USE_XOPEN2K8


309 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

310 
__THROW
 
__©åibuã_puª__
;

314 
__BEGIN_NAMESPACE_STD


316 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


317 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

319 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

320 
size_t
 
__n
)

321 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

323 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

328 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

329 
__THROW
 
__©åibuã_puª__
;

332 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

333 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

337 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

338 
__THROW
;

341 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

342 
__END_NAMESPACE_STD


344 #ifde‡
__USE_GNU


347 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

348 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

349 
__THROW
;

353 
__BEGIN_NAMESPACE_STD


356 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

360 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

364 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

368 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

369 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

370 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

373 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

377 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

378 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

379 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

380 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

381 
__END_NAMESPACE_STD


383 #ifde‡
__USE_EXTERN_INLINES


389 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

390 
__exã∫_ölöe
 
wöt_t


391 
	`__NTH
 (
	$btowc
 (
__c
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

393 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

395 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

396 
__exã∫_ölöe
 

397 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

398 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

399 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

401 
__exã∫_ölöe
 
size_t


402 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

403 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

404 {  (
__ps
 !
NULL


405 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

408 
__BEGIN_NAMESPACE_STD


411 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

412 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

418 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

419 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

420 
__END_NAMESPACE_STD


423 #ifdef 
__USE_XOPEN2K8


426 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

427 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

428 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

432 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

433 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

434 
size_t
 
__nwc
, size_à
__Àn
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

440 #ifde‡
__USE_XOPEN


442 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

446 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

450 
__BEGIN_NAMESPACE_STD


453 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

454 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

455 
__END_NAMESPACE_STD


457 #ifde‡
__USE_ISOC99


458 
__BEGIN_NAMESPACE_C99


460 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

461 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

462 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

463 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

464 
__END_NAMESPACE_C99


468 
__BEGIN_NAMESPACE_STD


471 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

476 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

477 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

478 
__THROW
;

479 
__END_NAMESPACE_STD


481 #ifde‡
__USE_ISOC99


482 
__BEGIN_NAMESPACE_C99


485 
__exãnsi⁄__


486 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

487 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

488 
__THROW
;

492 
__exãnsi⁄__


493 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

494 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

495 
__ba£
Ë
__THROW
;

496 
__END_NAMESPACE_C99


499 #ifde‡
__USE_GNU


502 
__exãnsi⁄__


503 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

504 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

505 
__THROW
;

509 
__exãnsi⁄__


510 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

511 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

512 
__ba£
Ë
__THROW
;

515 #ifde‡
__USE_GNU


529 
	~<xloˇÀ.h
>

533 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

534 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

535 
__loˇÀ_t
 
__loc
Ë
__THROW
;

537 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

546 
__exãnsi⁄__


547 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

549 
__ba£
, 
__loˇÀ_t
 
__loc
)

550 
__THROW
;

552 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

553 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

554 
__THROW
;

556 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

557 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

558 
__THROW
;

560 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

561 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

562 
__loˇÀ_t
 
__loc
Ë
__THROW
;

566 #ifde‡
__USE_XOPEN2K8


569 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

570 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

574 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

575 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
;

583 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

586 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


587 
__BEGIN_NAMESPACE_STD


590 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

597 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

598 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

607 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

608 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

609 
__THROW
 ;

615 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

616 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

617 
__gnuc_va_li°
 
__¨g
)

623 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

628 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

629 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

630 
__gnuc_va_li°
 
__¨g
)

631 
__THROW
 ;

638 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

639 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

648 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

649 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

650 
__THROW
 ;

652 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

653 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

654 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

655 #ifde‡
__REDIRECT


659 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

660 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_fwsˇnf
)

663 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

664 
__isoc99_wsˇnf
)

666 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

667 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

668 ...), 
__isoc99_swsˇnf
)

671 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

673 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

674 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

675 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

676 
__THROW
;

677 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

678 
	#wsˇnf
 
__isoc99_wsˇnf


	)

679 
	#swsˇnf
 
__isoc99_swsˇnf


	)

683 
__END_NAMESPACE_STD


686 #ifde‡
__USE_ISOC99


687 
__BEGIN_NAMESPACE_C99


692 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

693 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

694 
__gnuc_va_li°
 
__¨g
)

700 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

704 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

705 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

706 
__gnuc_va_li°
 
__¨g
)

707 
__THROW
 ;

709 #i‡!
deföed
 
__USE_GNU
 \

710 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

711 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

712 #ifde‡
__REDIRECT


713 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

714 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

717 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

718 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

720 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

721 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

725 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

726 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
);

728 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
);

730 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

731 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

732 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

733 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

734 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

735 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

739 
__END_NAMESPACE_C99


743 
__BEGIN_NAMESPACE_STD


748 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

755 
wöt_t
 
	`gëwch¨
 ();

762 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

769 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

777 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

778 
__FILE
 *
__ª°ri˘
 
__°ªam
);

784 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

785 
__FILE
 *
__ª°ri˘
 
__°ªam
);

792 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

793 
__END_NAMESPACE_STD


796 #ifde‡
__USE_GNU


804 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

805 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

813 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

821 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

830 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

831 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

840 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

841 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

850 
__FILE
 *
__ª°ri˘
 
__°ªam
);

854 
__BEGIN_NAMESPACE_C99


858 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

859 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

860 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

861 
__END_NAMESPACE_C99


863 #ifde‡
__USE_GNU


864 
	~<xloˇÀ.h
>

868 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

869 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

870 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

871 
__loˇÀ_t
 
__loc
Ë
__THROW
;

880 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


881 
	#__√ed_iswxxx


	)

882 
	~<w˘y≥.h
>

886 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


887 
	~<bôs/wch¨2.h
>

890 #ifde‡
__LDBL_COMPAT


891 
	~<bôs/wch¨-ldbl.h
>

894 
__END_DECLS


902 #unde‡
__√ed_mb°©e_t


903 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_MISC


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_MISC
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


150 
	t_IO_lock_t
;

156 
	s_IO_m¨kî
 {

157 
_IO_m¨kî
 *
	m_√xt
;

158 
_IO_FILE
 *
	m_sbuf
;

162 
	m_pos
;

164 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

165 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

166 
	mpublic
:

167 
°ªamm¨kî
(
°ªambuf
 *
sb
);

168 ~
°ªamm¨kî
();

169 
ßvög
(Ë{  
	m_•os
 == -2; }

170 
dñè
(
°ªamm¨kî
&);

171 
dñè
();

176 
	e__codecvt_ªsu…


178 
	m__codecvt_ok
,

179 
	m__codecvt_∑πül
,

180 
	m__codecvt_îr‹
,

181 
	m__codecvt_noc⁄v


184 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


187 
	s_IO_codecvt


189 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

190 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

191 
	m__mb°©e_t
 *,

192 c⁄° 
	mwch¨_t
 *,

193 c⁄° 
	mwch¨_t
 *,

194 c⁄° 
	mwch¨_t
 **, *,

196 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

197 
	m__mb°©e_t
 *, *,

199 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

200 
	m__mb°©e_t
 *,

202 c⁄° **, 
	mwch¨_t
 *,

203 
	mwch¨_t
 *, wchar_t **);

204 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

205 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

206 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

207 c⁄° *, c⁄° *, 
	m_IO_size_t
);

208 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

210 
_IO_ic⁄v_t
 
	m__cd_ö
;

211 
_IO_ic⁄v_t
 
	m__cd_out
;

215 
	s_IO_wide_d©a


217 
wch¨_t
 *
	m_IO_ªad_±r
;

218 
wch¨_t
 *
	m_IO_ªad_íd
;

219 
wch¨_t
 *
	m_IO_ªad_ba£
;

220 
wch¨_t
 *
	m_IO_wrôe_ba£
;

221 
wch¨_t
 *
	m_IO_wrôe_±r
;

222 
wch¨_t
 *
	m_IO_wrôe_íd
;

223 
wch¨_t
 *
	m_IO_buf_ba£
;

224 
wch¨_t
 *
	m_IO_buf_íd
;

226 
wch¨_t
 *
	m_IO_ßve_ba£
;

227 
wch¨_t
 *
	m_IO_backup_ba£
;

229 
wch¨_t
 *
	m_IO_ßve_íd
;

231 
__mb°©e_t
 
	m_IO_°©e
;

232 
__mb°©e_t
 
	m_IO_œ°_°©e
;

233 
_IO_codecvt
 
	m_codecvt
;

235 
wch¨_t
 
	m_sh‹tbuf
[1];

237 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

241 
	s_IO_FILE
 {

242 
	m_Êags
;

243 
	#_IO_fûe_Êags
 
_Êags


	)

247 * 
	m_IO_ªad_±r
;

248 * 
	m_IO_ªad_íd
;

249 * 
	m_IO_ªad_ba£
;

250 * 
	m_IO_wrôe_ba£
;

251 * 
	m_IO_wrôe_±r
;

252 * 
	m_IO_wrôe_íd
;

253 * 
	m_IO_buf_ba£
;

254 * 
	m_IO_buf_íd
;

256 *
	m_IO_ßve_ba£
;

257 *
	m_IO_backup_ba£
;

258 *
	m_IO_ßve_íd
;

260 
_IO_m¨kî
 *
	m_m¨kîs
;

262 
_IO_FILE
 *
	m_chaö
;

264 
	m_fûío
;

266 
	m_blksize
;

268 
	m_Êags2
;

270 
_IO_off_t
 
	m_ﬁd_off£t
;

272 
	#__HAVE_COLUMN


	)

274 
	m_cur_cﬁumn
;

275 sig√d 
	m_vèbÀ_off£t
;

276 
	m_sh‹tbuf
[1];

280 
_IO_lock_t
 *
	m_lock
;

281 #ifde‡
_IO_USE_OLD_IO_FILE


284 
	s_IO_FILE_com∂ëe


286 
_IO_FILE
 
	m_fûe
;

288 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

289 
_IO_off64_t
 
	m_off£t
;

290 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


292 
_IO_codecvt
 *
	m_codecvt
;

293 
_IO_wide_d©a
 *
	m_wide_d©a
;

294 
_IO_FILE
 *
	m_‰ìªs_li°
;

295 *
	m_‰ìªs_buf
;

297 *
	m__∑d1
;

298 *
	m__∑d2
;

299 *
	m__∑d3
;

300 *
	m__∑d4
;

302 
size_t
 
	m__∑d5
;

303 
	m_mode
;

305 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

309 #i‚de‡
__˝lu•lus


310 
_IO_FILE
 
	t_IO_FILE
;

313 
	g_IO_FILE_∂us
;

315 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

316 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

317 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

318 #i‚de‡
_LIBC


319 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

320 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

321 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

323 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

324 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

325 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

333 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

341 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

342 
	tsize_t
 
	t__n
);

350 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

353 
	t__io_˛o£_‚
 (*
	t__cookõ
);

356 #ifde‡
_GNU_SOURCE


358 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

359 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

360 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

361 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

366 
__io_ªad_‚
 *
	mªad
;

367 
__io_wrôe_‚
 *
	mwrôe
;

368 
__io_£ek_‚
 *
	m£ek
;

369 
__io_˛o£_‚
 *
	m˛o£
;

370 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

371 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

373 
	g_IO_cookõ_fûe
;

376 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

377 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

381 #ifde‡
__˝lu•lus


385 
__undîÊow
 (
_IO_FILE
 *);

386 
__uÊow
 (
_IO_FILE
 *);

387 
__ovîÊow
 (
_IO_FILE
 *, );

388 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


389 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

390 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

391 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

394 #i‡ 
__GNUC__
 >= 3

395 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

397 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

400 
	#_IO_gëc_u∆ocked
(
_Â
) \

401 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

402 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

403 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

404 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

405 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

406 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

407 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

408 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

409 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

410 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

412 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


413 
	#_IO_gëwc_u∆ocked
(
_Â
) \

414 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

415 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

416 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

417 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

418 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

422 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

423 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

426 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

427 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

429 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

430 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

431 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

432 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

434 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

437 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

438 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

440 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

441 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

442 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

444 #ifde‡
_IO_MTSAFE_IO


445 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

446 
	#_IO_Êockfûe
(
_Â
) \

447 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

448 
	#_IO_fu∆ockfûe
(
_Â
) \

449 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

451 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

452 
	#_IO_Êockfûe
(
_Â
Ë

	)

453 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

454 
	#_IO_·rylockfûe
(
_Â
Ë

	)

455 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

456 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

459 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

460 
_IO_va_li°
, *
__ª°ri˘
);

461 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

462 
_IO_va_li°
);

463 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

464 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

466 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

467 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

469 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

471 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


472 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

473 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

474 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

475 #i‡
__GNUC__
 >= 2

478 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


479 
	~<shlib-com∑t.h
>

480 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

481 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

482 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

483 c⁄° 
_IO_°dö_u£d
;

484 
wók_exã∫
 (
_IO_°dö_u£d
);

487 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


488 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

492 
	#_IO_fwide
(
__Â
, 
__mode
) \

493 ({ 
__ªsu…
 = (
__mode
); \

494 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

496 i‡((
__Â
)->
_mode
 == 0) \

498 (
__Â
)->
_mode
 = -1; \

499 
__ªsu…
 = (
__Â
)->
_mode
; \

501 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

502 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

504 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

505 
__ªsu…
; })

	)

508 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

509 
_IO_va_li°
, *
__ª°ri˘
);

510 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

511 
_IO_va_li°
);

512 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

513 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

516 #ifde‡
__LDBL_COMPAT


517 
	~<bôs/libio-ldbl.h
>

520 #ifde‡
__˝lu•lus


	@/usr/include/ncurses_dll.h

30 #i‚de‡
NCURSES_DLL_H_ö˛


31 
	#NCURSES_DLL_H_ö˛
 1

	)

37 #i‡
deföed
(
__MINGW64__
)

38 #ñi‡
deföed
(
__MINGW32__
)

39 #i‡(
__GNUC__
 =4Ë&& (
__GNUC_MINOR__
 == 8)

41 #ifde‡
åa˚


42 #unde‡
åa˚


43 
	#TRACE


	)

53 
	#NCURSES_PUBLIC_VAR
(
«me
Ë
_nc_
##
	)
name

54 
	#NCURSES_WRAPPED_VAR
(
ty≥
,
«me
Ëty≥ 
	`NCURSES_PUBLIC_VAR
“ame)()

	)

60 #unde‡
NCURSES_DLL


61 
	#NCURSES_STATIC


	)

63 #i‡
deföed
(
__CYGWIN__
Ë|| deföed(
__MINGW32__
)

64 #i‡
deföed
(
NCURSES_DLL
)

65 #i‡
deföed
(
NCURSES_STATIC
)

66 #unde‡
NCURSES_STATIC


69 #unde‡
NCURSES_IMPEXP


70 #unde‡
NCURSES_API


71 #unde‡
NCURSES_EXPORT


72 #unde‡
NCURSES_EXPORT_VAR


73 #i‡
deföed
(
NCURSES_DLL
)

75 
	#NCURSES_IMPEXP
 
	`__de˛•ec
(
dŒexp‹t
)

	)

76 #ñi‡
deföed
(
NCURSES_STATIC
)

78 
	#NCURSES_IMPEXP


	)

81 
	#NCURSES_IMPEXP
 
	`__de˛•ec
(
dŒimp‹t
)

	)

83 
	#NCURSES_API
 
__cde˛


	)

84 
	#NCURSES_EXPORT
(
ty≥
Ë
NCURSES_IMPEXP
Åy≥ 
NCURSES_API


	)

85 
	#NCURSES_EXPORT_VAR
(
ty≥
Ë
NCURSES_IMPEXP
 
	)
type

89 #i‡!
deföed
(
NCURSES_IMPEXP
)

90 
	#NCURSES_IMPEXP


	)

92 #i‡!
deföed
(
NCURSES_API
)

93 
	#NCURSES_API


	)

95 #i‡!
deföed
(
NCURSES_EXPORT
)

96 
	#NCURSES_EXPORT
(
ty≥
Ë
NCURSES_IMPEXP
Åy≥ 
NCURSES_API


	)

98 #i‡!
deföed
(
NCURSES_EXPORT_VAR
)

99 
	#NCURSES_EXPORT_VAR
(
ty≥
Ë
NCURSES_IMPEXP
 
	)
type

	@/usr/include/nl_types.h

18 #i‚de‡
_NL_TYPES_H


19 
	#_NL_TYPES_H
 1

	)

21 
	~<„©uªs.h
>

24 
	#NL_SETD
 1

	)

27 
	#NL_CAT_LOCALE
 1

	)

30 
__BEGIN_DECLS


33 *
	t∆_ˇtd
;

36 
	t∆_ôem
;

42 
∆_ˇtd
 
	$ˇt›í
 (c⁄° *
__ˇt_«me
, 
__Êag
Ë
	`__n⁄nuŒ
 ((1));

46 *
	$ˇtgës
 (
∆_ˇtd
 
__ˇèlog
, 
__£t
, 
__numbî
,

47 c⁄° *
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

50 
	$ˇt˛o£
 (
∆_ˇtd
 
__ˇèlog
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

52 
__END_DECLS


	@/usr/include/sgtty.h

18 #i‚def 
_SGTTY_H


19 
	#_SGTTY_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<sys/io˘l.h
>

27 
	gsgâyb
;

29 
__BEGIN_DECLS


32 
	$gây
 (
__fd
, 
sgâyb
 *
__∑øms
Ë
__THROW
;

35 
	$°ty
 (
__fd
, c⁄° 
sgâyb
 *
__∑øms
Ë
__THROW
;

38 
__END_DECLS


	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

55 
	#__STDC_ISO_10646__
 201505L

	)

58 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/termio.h

5 
	~<ãrmios.h
>

6 
	~<sys/io˘l.h
>

	@/usr/include/unctrl.h

44 #i‚de‡
NCURSES_UNCTRL_H_ö˛


45 
	#NCURSES_UNCTRL_H_ö˛
 1

	)

47 #unde‡
NCURSES_VERSION


48 
	#NCURSES_VERSION
 "6.0"

	)

50 #ifde‡
__˝lu•lus


54 
	~<cur£s.h
>

56 #unde‡
un˘æ


57 
NCURSES_EXPORT
(
NCURSES_CONST
 *Ë
un˘æ
 (
chty≥
);

60 
NCURSES_EXPORT
(
NCURSES_CONST
 *Ë
NCURSES_SP_NAME
(
un˘æ
Ë(
SCREEN
*, 
chty≥
);

63 #ifde‡
__˝lu•lus


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004,

60 
	m__GCONV_TRANSLIT
 = 0x0008

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 
	s__gc⁄v_°ï


86 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

87 c⁄° *
__mod«me
;

89 
__cou¡î
;

91 *
__‰om_«me
;

92 *
__to_«me
;

94 
__gc⁄v_f˘
 
__f˘
;

95 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

96 
__gc⁄v_öô_f˘
 
__öô_f˘
;

97 
__gc⁄v_íd_f˘
 
__íd_f˘
;

101 
__mö_√eded_‰om
;

102 
__max_√eded_‰om
;

103 
__mö_√eded_to
;

104 
__max_√eded_to
;

107 
__°©eful
;

109 *
__d©a
;

114 
	s__gc⁄v_°ï_d©a


116 *
__outbuf
;

117 *
__outbu„nd
;

121 
__Êags
;

125 
__övoˇti⁄_cou¡î
;

129 
__öã∫Æ_u£
;

131 
__mb°©e_t
 *
__°©ï
;

132 
__mb°©e_t
 
__°©e
;

138 
	s__gc⁄v_öfo


140 
size_t
 
__n°ïs
;

141 
__gc⁄v_°ï
 *
__°ïs
;

142 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

143 } *
	t__gc⁄v_t
;

146 
	`__gc⁄v_å™¶ôî©e
 (
__gc⁄v_°ï
 *
°ï
,

147 
__gc⁄v_°ï_d©a
 *
°ï_d©a
,

148 c⁄° *
öbuf°¨t
,

149 c⁄° **
öbuÂ
,

150 c⁄° *
öbu„nd
,

151 **
outbuf°¨t
,

152 
size_t
 *
úªvîsibÀ
);

	@
1
.
1
/usr/include
127
2195
config.h
contrib/dummy.c
contrib/minimal.c
contrib/tmp-junk.c
contrib/utmp.c
free.c
include/c.h
include/fileutils.h
include/nls.h
include/nsutils.h
include/rpmatch.h
include/strutils.h
include/xalloc.h
lib/fileutils.c
lib/nsutils.c
lib/strutils.c
lib/strverscmp.c
lib/test_fileutils.c
lib/test_nsutils.c
lib/test_process.c
lib/test_strtod_nol.c
lib/test_strutils.c
pgrep.c
pidof.c
pmap.c
proc/alloc.c
proc/alloc.h
proc/devname.c
proc/devname.h
proc/escape.c
proc/escape.h
proc/numa.c
proc/numa.h
proc/procps-private.h
proc/procps.h
proc/pwcache.c
proc/pwcache.h
proc/readproc.c
proc/readproc.h
proc/sig.c
proc/sig.h
proc/slab.c
proc/slab.h
proc/sysinfo.c
proc/sysinfo.h
proc/version.c
proc/version.h
proc/wchan.c
proc/wchan.h
proc/whattime.c
proc/whattime.h
ps/common.h
ps/display.c
ps/global.c
ps/help.c
ps/output.c
ps/parser.c
ps/select.c
ps/sortformat.c
ps/stacktrace.c
pwdx.c
skill.c
slabtop.c
sysctl.c
testsuite/ps.test/test-schedbatch.c
tload.c
top/top.c
top/top.h
top/top_nls.c
top/top_nls.h
uptime.c
vmstat.c
w.c
watch.c
/usr/include/arpa/inet.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/curses.h
/usr/include/dirent.h
/usr/include/dlfcn.h
/usr/include/elf.h
/usr/include/errno.h
/usr/include/error.h
/usr/include/fcntl.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/glob.h
/usr/include/grp.h
/usr/include/langinfo.h
/usr/include/libgen.h
/usr/include/libintl.h
/usr/include/limits.h
/usr/include/link.h
/usr/include/locale.h
/usr/include/math.h
/usr/include/ncurses.h
/usr/include/netinet/in.h
/usr/include/pwd.h
/usr/include/regex.h
/usr/include/sched.h
/usr/include/setjmp.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdio_ext.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/term.h
/usr/include/termios.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/utmp.h
/usr/include/values.h
/usr/include/wchar.h
/usr/include/wctype.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/libio.h
/usr/include/ncurses_dll.h
/usr/include/nl_types.h
/usr/include/sgtty.h
/usr/include/stdc-predef.h
/usr/include/termio.h
/usr/include/unctrl.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/gconv.h
